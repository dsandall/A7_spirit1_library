
A7_spirit1_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  0800bfe4  0800bfe4  0001bfe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c680  0800c680  000203ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800c680  0800c680  0001c680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c688  0800c688  000203ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c688  0800c688  0001c688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c68c  0800c68c  0001c68c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003ac  20000000  0800c690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004118  200003ac  0800ca3c  000203ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044c4  0800ca3c  000244c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203ac  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002688a  00000000  00000000  0002041f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000059db  00000000  00000000  00046ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002310  00000000  00000000  0004c688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ade  00000000  00000000  0004e998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d959  00000000  00000000  00050476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027891  00000000  00000000  0007ddcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010faeb  00000000  00000000  000a5660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009808  00000000  00000000  001b514c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001be954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003ac 	.word	0x200003ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bfcc 	.word	0x0800bfcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003b0 	.word	0x200003b0
 80001cc:	0800bfcc 	.word	0x0800bfcc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
return 0;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4b3e      	ldr	r3, [pc, #248]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a3d      	ldr	r2, [pc, #244]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b38      	ldr	r3, [pc, #224]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a37      	ldr	r2, [pc, #220]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b32      	ldr	r3, [pc, #200]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a31      	ldr	r2, [pc, #196]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_onboard_Pin|SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de0:	f004 f85c 	bl	8004e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SPI_CSn_GPIO_Port, SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2140      	movs	r1, #64	; 0x40
 8000de8:	4828      	ldr	r0, [pc, #160]	; (8000e8c <MX_GPIO_Init+0x114>)
 8000dea:	f004 f857 	bl	8004e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4619      	mov	r1, r3
 8000e04:	4822      	ldr	r0, [pc, #136]	; (8000e90 <MX_GPIO_Init+0x118>)
 8000e06:	f003 fe9f 	bl	8004b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Green_LED_onboard_Pin|SPIRIT1_SDN_Pin;
 8000e0a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4619      	mov	r1, r3
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e26:	f003 fe8f 	bl	8004b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e2e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4814      	ldr	r0, [pc, #80]	; (8000e90 <MX_GPIO_Init+0x118>)
 8000e40:	f003 fe82 	bl	8004b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SPI_CSn_Pin;
 8000e44:	2340      	movs	r3, #64	; 0x40
 8000e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT1_SPI_CSn_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480c      	ldr	r0, [pc, #48]	; (8000e8c <MX_GPIO_Init+0x114>)
 8000e5c:	f003 fe74 	bl	8004b48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2106      	movs	r1, #6
 8000e64:	2017      	movs	r0, #23
 8000e66:	f003 fe37 	bl	8004ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e6a:	2017      	movs	r0, #23
 8000e6c:	f003 fe50 	bl	8004b10 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2107      	movs	r1, #7
 8000e74:	2028      	movs	r0, #40	; 0x28
 8000e76:	f003 fe2f 	bl	8004ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e7a:	2028      	movs	r0, #40	; 0x28
 8000e7c:	f003 fe48 	bl	8004b10 <HAL_NVIC_EnableIRQ>

}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	48000400 	.word	0x48000400
 8000e90:	48000800 	.word	0x48000800

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	; (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <RTOS_ISR_setPriority>:
void Task_RX(void *argument);

TaskHandle_t Task_TXHandler, Task_RXHandler, Task_HBHandler;
SemaphoreHandle_t FLAG_SPIRIT;

void RTOS_ISR_setPriority(uint32_t IRQn){
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	HAL_NVIC_SetPriorityGrouping(0);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f003 fdb3 	bl	8004ac2 <HAL_NVIC_SetPriorityGrouping>
	uint32_t lowPriority = NVIC_EncodePriority(0, 10, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	210a      	movs	r1, #10
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff ffc1 	bl	8000ee8 <NVIC_EncodePriority>
 8000f66:	60f8      	str	r0, [r7, #12]
	NVIC_SetPriority(IRQn, lowPriority);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	68f9      	ldr	r1, [r7, #12]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff90 	bl	8000e94 <__NVIC_SetPriority>
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]
  SpiritIrqs xIrqStatus;
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]

  if (GPIO_Pin != SPIRIT1_GPIO3_Pin){return;}
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	2b80      	cmp	r3, #128	; 0x80
 8000f8e:	d13b      	bne.n	8001008 <HAL_GPIO_EXTI_Callback+0x8c>

  SpiritIrqGetStatus(&xIrqStatus);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 fb05 	bl	80025a4 <SpiritIrqGetStatus>

  if (xIrqStatus.IRQ_TX_FIFO_ALMOST_EMPTY){
	  //todo:
  }

  if (xIrqStatus.IRQ_TX_DATA_SENT)
 8000f9a:	7b3b      	ldrb	r3, [r7, #12]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d009      	beq.n	8000fba <HAL_GPIO_EXTI_Callback+0x3e>
  {
	  confirm_TX();
 8000fa6:	f000 f839 	bl	800101c <confirm_TX>
	  xSemaphoreGiveFromISR(FLAG_SPIRIT, &xHigherPriorityTaskWoken);
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f107 0208 	add.w	r2, r7, #8
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f007 fe4a 	bl	8008c4e <xQueueGiveFromISR>
  }

  if (xIrqStatus.IRQ_RX_DATA_READY)
 8000fba:	7b3b      	ldrb	r3, [r7, #12]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d009      	beq.n	8000fda <HAL_GPIO_EXTI_Callback+0x5e>
  {
	  get_RX();
 8000fc6:	f000 f9e3 	bl	8001390 <get_RX>
	  xSemaphoreGiveFromISR(FLAG_SPIRIT, &xHigherPriorityTaskWoken);
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f107 0208 	add.w	r2, r7, #8
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f007 fe3a 	bl	8008c4e <xQueueGiveFromISR>
  if (xIrqStatus.IRQ_RX_DATA_DISC)
  {
//	myHAL_UART_printf("  | || || |_\r\n");
  }

  if (xIrqStatus.IRQ_RX_TIMEOUT){
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	f003 0320 	and.w	r3, r3, #32
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <HAL_GPIO_EXTI_Callback+0x70>
	myHAL_UART_printf("timeout\r\n");
 8000fe6:	480b      	ldr	r0, [pc, #44]	; (8001014 <HAL_GPIO_EXTI_Callback+0x98>)
 8000fe8:	f000 fcec 	bl	80019c4 <myHAL_UART_printf>
  }

  SpiritIrqClearStatus();
 8000fec:	f001 fb0c 	bl	8002608 <SpiritIrqClearStatus>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d009      	beq.n	800100a <HAL_GPIO_EXTI_Callback+0x8e>
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	f3bf 8f4f 	dsb	sy
 8001002:	f3bf 8f6f 	isb	sy
 8001006:	e000      	b.n	800100a <HAL_GPIO_EXTI_Callback+0x8e>
  if (GPIO_Pin != SPIRIT1_GPIO3_Pin){return;}
 8001008:	bf00      	nop
}
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200003d4 	.word	0x200003d4
 8001014:	0800c16c 	.word	0x0800c16c
 8001018:	e000ed04 	.word	0xe000ed04

0800101c <confirm_TX>:

Payload TXq[TX_Q_SIZE];
int currentReadTX;
int currentWriteTX;

void confirm_TX(){
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0


	switch (TXq[currentReadTX].type){
 8001020:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <confirm_TX+0xc4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a2f      	ldr	r2, [pc, #188]	; (80010e4 <confirm_TX+0xc8>)
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	4413      	add	r3, r2
 800102a:	3301      	adds	r3, #1
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	3b01      	subs	r3, #1
 8001030:	2b03      	cmp	r3, #3
 8001032:	d82b      	bhi.n	800108c <confirm_TX+0x70>
 8001034:	a201      	add	r2, pc, #4	; (adr r2, 800103c <confirm_TX+0x20>)
 8001036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103a:	bf00      	nop
 800103c:	08001065 	.word	0x08001065
 8001040:	0800106d 	.word	0x0800106d
 8001044:	080010b5 	.word	0x080010b5
 8001048:	0800104d 	.word	0x0800104d
				myHAL_UART_printf("my heart still beats 4 u \r\n");
			}
			break;

		case PACKET_MESSAGE:
			myHAL_UART_printf("message sent: %s \r\n", TXq[currentReadTX].message);
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <confirm_TX+0xc4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a24      	ldr	r2, [pc, #144]	; (80010e4 <confirm_TX+0xc8>)
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	4413      	add	r3, r2
 8001056:	3308      	adds	r3, #8
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	4822      	ldr	r0, [pc, #136]	; (80010e8 <confirm_TX+0xcc>)
 800105e:	f000 fcb1 	bl	80019c4 <myHAL_UART_printf>
			break;
 8001062:	e028      	b.n	80010b6 <confirm_TX+0x9a>

		case PACKET_ANNOUNCEMENT:
		    myHAL_UART_printf("going live!\r\n");
 8001064:	4821      	ldr	r0, [pc, #132]	; (80010ec <confirm_TX+0xd0>)
 8001066:	f000 fcad 	bl	80019c4 <myHAL_UART_printf>
			break;
 800106a:	e024      	b.n	80010b6 <confirm_TX+0x9a>

		case PACKET_ANNOUNCEMENT_RESP:
		    myHAL_UART_printf("I see you %s! \r\n", names[TXq[currentReadTX].dest]);
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <confirm_TX+0xc4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <confirm_TX+0xc8>)
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	4413      	add	r3, r2
 8001076:	330c      	adds	r3, #12
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <confirm_TX+0xd4>)
 800107e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001082:	4619      	mov	r1, r3
 8001084:	481b      	ldr	r0, [pc, #108]	; (80010f4 <confirm_TX+0xd8>)
 8001086:	f000 fc9d 	bl	80019c4 <myHAL_UART_printf>
			break;
 800108a:	e014      	b.n	80010b6 <confirm_TX+0x9a>

		default:
		    myHAL_UART_printf("umm... what the sigma? you sent a broken packet \r\n", TXq[currentReadTX].type, TXq[currentReadTX].user);
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <confirm_TX+0xc4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <confirm_TX+0xc8>)
 8001092:	011b      	lsls	r3, r3, #4
 8001094:	4413      	add	r3, r2
 8001096:	3301      	adds	r3, #1
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <confirm_TX+0xc4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <confirm_TX+0xc8>)
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	4413      	add	r3, r2
 80010a6:	3304      	adds	r3, #4
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4812      	ldr	r0, [pc, #72]	; (80010f8 <confirm_TX+0xdc>)
 80010ae:	f000 fc89 	bl	80019c4 <myHAL_UART_printf>
			break;
 80010b2:	e000      	b.n	80010b6 <confirm_TX+0x9a>
			break;
 80010b4:	bf00      	nop


	}
	// myHAL_UART_printf("payload sent: type(%d) %s \r\n", TXq[currentReadTX].type, TXq[currentReadTX].user);
	currentReadTX = (++currentReadTX) %TX_Q_SIZE;
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <confirm_TX+0xc4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <confirm_TX+0xc4>)
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <confirm_TX+0xc4>)
 80010c2:	6819      	ldr	r1, [r3, #0]
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <confirm_TX+0xe0>)
 80010c6:	fb83 3201 	smull	r3, r2, r3, r1
 80010ca:	17cb      	asrs	r3, r1, #31
 80010cc:	1ad2      	subs	r2, r2, r3
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	1aca      	subs	r2, r1, r3
 80010d6:	4b02      	ldr	r3, [pc, #8]	; (80010e0 <confirm_TX+0xc4>)
 80010d8:	601a      	str	r2, [r3, #0]
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20002410 	.word	0x20002410
 80010e4:	200023e0 	.word	0x200023e0
 80010e8:	0800c178 	.word	0x0800c178
 80010ec:	0800c18c 	.word	0x0800c18c
 80010f0:	20000004 	.word	0x20000004
 80010f4:	0800c19c 	.word	0x0800c19c
 80010f8:	0800c1b0 	.word	0x0800c1b0
 80010fc:	55555556 	.word	0x55555556

08001100 <Task_TX>:





void Task_TX(void *argument){
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b09d      	sub	sp, #116	; 0x74
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	char loadString[100]; //NOT a string
	while (1)
	{


		  if(TXq[currentReadTX].valid){
 8001108:	4b3f      	ldr	r3, [pc, #252]	; (8001208 <Task_TX+0x108>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a3f      	ldr	r2, [pc, #252]	; (800120c <Task_TX+0x10c>)
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d072      	beq.n	80011fe <Task_TX+0xfe>
			  if(skinSuit != 0){impersonate();}
 8001118:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <Task_TX+0x110>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <Task_TX+0x24>
 8001120:	f000 fb82 	bl	8001828 <impersonate>

			  SpiritGotoReadyState(); //interrupt any other thang going down
 8001124:	f000 fc92 	bl	8001a4c <SpiritGotoReadyState>
			  if(xSemaphoreTake(FLAG_SPIRIT, 10) == 1){
 8001128:	4b3a      	ldr	r3, [pc, #232]	; (8001214 <Task_TX+0x114>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	210a      	movs	r1, #10
 800112e:	4618      	mov	r0, r3
 8001130:	f007 fefa 	bl	8008f28 <xQueueSemaphoreTake>
 8001134:	4603      	mov	r3, r0
 8001136:	2b01      	cmp	r3, #1
 8001138:	d161      	bne.n	80011fe <Task_TX+0xfe>

				SpiritPktStackSetDestinationAddress(TXq[currentReadTX].dest);
 800113a:	4b33      	ldr	r3, [pc, #204]	; (8001208 <Task_TX+0x108>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a33      	ldr	r2, [pc, #204]	; (800120c <Task_TX+0x10c>)
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	4413      	add	r3, r2
 8001144:	330c      	adds	r3, #12
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f001 fd35 	bl	8002bb8 <SpiritPktCommonSetDestinationAddress>


				uint8_t type = TXq[currentReadTX].type;
 800114e:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <Task_TX+0x108>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a2e      	ldr	r2, [pc, #184]	; (800120c <Task_TX+0x10c>)
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	4413      	add	r3, r2
 8001158:	3301      	adds	r3, #1
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				uint16_t len = 1+strlen(myUsername)+1;
 8001160:	482d      	ldr	r0, [pc, #180]	; (8001218 <Task_TX+0x118>)
 8001162:	f7ff f835 	bl	80001d0 <strlen>
 8001166:	4603      	mov	r3, r0
 8001168:	b29b      	uxth	r3, r3
 800116a:	3302      	adds	r3, #2
 800116c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

				loadString[0] = type;
 8001170:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001174:	723b      	strb	r3, [r7, #8]
				strcpy(&loadString[1], myUsername);
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	3301      	adds	r3, #1
 800117c:	4926      	ldr	r1, [pc, #152]	; (8001218 <Task_TX+0x118>)
 800117e:	4618      	mov	r0, r3
 8001180:	f00a fa84 	bl	800b68c <strcpy>
				if (type == 4){
 8001184:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001188:	2b04      	cmp	r3, #4
 800118a:	d128      	bne.n	80011de <Task_TX+0xde>
					strcpy(&loadString[strlen(myUsername)+1+1], TXq[currentReadTX].message);
 800118c:	4822      	ldr	r0, [pc, #136]	; (8001218 <Task_TX+0x118>)
 800118e:	f7ff f81f 	bl	80001d0 <strlen>
 8001192:	4603      	mov	r3, r0
 8001194:	3302      	adds	r3, #2
 8001196:	f107 0208 	add.w	r2, r7, #8
 800119a:	441a      	add	r2, r3
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <Task_TX+0x108>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	491a      	ldr	r1, [pc, #104]	; (800120c <Task_TX+0x10c>)
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	440b      	add	r3, r1
 80011a6:	3308      	adds	r3, #8
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4619      	mov	r1, r3
 80011ac:	4610      	mov	r0, r2
 80011ae:	f00a fa6d 	bl	800b68c <strcpy>
					len = 1+ strlen(myUsername)+1+1+strlen(TXq[currentReadTX].message);
 80011b2:	4819      	ldr	r0, [pc, #100]	; (8001218 <Task_TX+0x118>)
 80011b4:	f7ff f80c 	bl	80001d0 <strlen>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b29c      	uxth	r4, r3
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <Task_TX+0x108>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a12      	ldr	r2, [pc, #72]	; (800120c <Task_TX+0x10c>)
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	4413      	add	r3, r2
 80011c6:	3308      	adds	r3, #8
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f800 	bl	80001d0 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	4423      	add	r3, r4
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	3303      	adds	r3, #3
 80011da:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
				}

				TXq[currentReadTX].valid = 0;
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <Task_TX+0x108>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <Task_TX+0x10c>)
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	4413      	add	r3, r2
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]

				SPSGRF_StartTx(loadString, len);
 80011ec:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fe1f 	bl	8001e3c <SPSGRF_StartTx>
			  }
		//			  vTaskDelay(1000);
		  }

		  vTaskDelay(50);
 80011fe:	2032      	movs	r0, #50	; 0x32
 8001200:	f008 fae0 	bl	80097c4 <vTaskDelay>
		  if(TXq[currentReadTX].valid){
 8001204:	e780      	b.n	8001108 <Task_TX+0x8>
 8001206:	bf00      	nop
 8001208:	20002410 	.word	0x20002410
 800120c:	200023e0 	.word	0x200023e0
 8001210:	200023dc 	.word	0x200023dc
 8001214:	200003d4 	.word	0x200003d4
 8001218:	2000032c 	.word	0x2000032c

0800121c <printUsersOnline>:



//USERS//////////////

void printUsersOnline(){
 800121c:	b5b0      	push	{r4, r5, r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af02      	add	r7, sp, #8
	TickType_t currentTime = xTaskGetTickCount();
 8001222:	f008 fc21 	bl	8009a68 <xTaskGetTickCount>
 8001226:	6038      	str	r0, [r7, #0]
	myHAL_UART_printf("--- Users Online @t=%d:\r\n", (currentTime-startTime)/1000);
 8001228:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <printUsersOnline+0xc4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	4a2c      	ldr	r2, [pc, #176]	; (80012e4 <printUsersOnline+0xc8>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	4619      	mov	r1, r3
 800123a:	482b      	ldr	r0, [pc, #172]	; (80012e8 <printUsersOnline+0xcc>)
 800123c:	f000 fbc2 	bl	80019c4 <myHAL_UART_printf>
	myHAL_UART_printf("- Logged in as 0x%x(%s)(%s)\r\n", currentUser, names[currentUser], myUsername);
 8001240:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <printUsersOnline+0xd0>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <printUsersOnline+0xd0>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <printUsersOnline+0xd4>)
 800124e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001252:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <printUsersOnline+0xd8>)
 8001254:	4828      	ldr	r0, [pc, #160]	; (80012f8 <printUsersOnline+0xdc>)
 8001256:	f000 fbb5 	bl	80019c4 <myHAL_UART_printf>

	for (int i = 0; i < MAX_USERS; i++){
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	e037      	b.n	80012d0 <printUsersOnline+0xb4>
		if (usersOnline[i].address != 0){
 8001260:	4a26      	ldr	r2, [pc, #152]	; (80012fc <printUsersOnline+0xe0>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	015b      	lsls	r3, r3, #5
 8001266:	4413      	add	r3, r2
 8001268:	3318      	adds	r3, #24
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d02c      	beq.n	80012ca <printUsersOnline+0xae>
			myHAL_UART_printf("- 0x%x(%d)(%s)(%s) seen %d s ago\r\n", usersOnline[i].address, usersOnline[i].address, names[usersOnline[i].address], usersOnline[i].username, (currentTime - usersOnline[i].timeLastSeen)/1000);
 8001270:	4a22      	ldr	r2, [pc, #136]	; (80012fc <printUsersOnline+0xe0>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	015b      	lsls	r3, r3, #5
 8001276:	4413      	add	r3, r2
 8001278:	3318      	adds	r3, #24
 800127a:	6819      	ldr	r1, [r3, #0]
 800127c:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <printUsersOnline+0xe0>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	015b      	lsls	r3, r3, #5
 8001282:	4413      	add	r3, r2
 8001284:	3318      	adds	r3, #24
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	4a1c      	ldr	r2, [pc, #112]	; (80012fc <printUsersOnline+0xe0>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	015b      	lsls	r3, r3, #5
 800128e:	4413      	add	r3, r2
 8001290:	3318      	adds	r3, #24
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <printUsersOnline+0xd4>)
 8001296:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	015b      	lsls	r3, r3, #5
 800129e:	4a17      	ldr	r2, [pc, #92]	; (80012fc <printUsersOnline+0xe0>)
 80012a0:	4413      	add	r3, r2
 80012a2:	4d16      	ldr	r5, [pc, #88]	; (80012fc <printUsersOnline+0xe0>)
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	0152      	lsls	r2, r2, #5
 80012a8:	442a      	add	r2, r5
 80012aa:	321c      	adds	r2, #28
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	4615      	mov	r5, r2
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	1b52      	subs	r2, r2, r5
 80012b4:	4d0b      	ldr	r5, [pc, #44]	; (80012e4 <printUsersOnline+0xc8>)
 80012b6:	fba5 5202 	umull	r5, r2, r5, r2
 80012ba:	0992      	lsrs	r2, r2, #6
 80012bc:	9201      	str	r2, [sp, #4]
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	4623      	mov	r3, r4
 80012c2:	4602      	mov	r2, r0
 80012c4:	480e      	ldr	r0, [pc, #56]	; (8001300 <printUsersOnline+0xe4>)
 80012c6:	f000 fb7d 	bl	80019c4 <myHAL_UART_printf>
	for (int i = 0; i < MAX_USERS; i++){
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3301      	adds	r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2bff      	cmp	r3, #255	; 0xff
 80012d4:	ddc4      	ble.n	8001260 <printUsersOnline+0x44>
		}
	}
}
 80012d6:	bf00      	nop
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bdb0      	pop	{r4, r5, r7, pc}
 80012e0:	200023d8 	.word	0x200023d8
 80012e4:	10624dd3 	.word	0x10624dd3
 80012e8:	0800c1e4 	.word	0x0800c1e4
 80012ec:	20000000 	.word	0x20000000
 80012f0:	20000004 	.word	0x20000004
 80012f4:	2000032c 	.word	0x2000032c
 80012f8:	0800c200 	.word	0x0800c200
 80012fc:	200003d8 	.word	0x200003d8
 8001300:	0800c220 	.word	0x0800c220

08001304 <reapUsers>:


void reapUsers(){
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
	TickType_t currentTime = xTaskGetTickCount();
 800130a:	f008 fbad 	bl	8009a68 <xTaskGetTickCount>
 800130e:	6038      	str	r0, [r7, #0]
	for (int i = 0; i < MAX_USERS; i++){
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	e02e      	b.n	8001374 <reapUsers+0x70>
		if ((usersOnline[i].address != 0)){
 8001316:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <reapUsers+0x80>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	015b      	lsls	r3, r3, #5
 800131c:	4413      	add	r3, r2
 800131e:	3318      	adds	r3, #24
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d023      	beq.n	800136e <reapUsers+0x6a>
			if((currentTime-usersOnline[i].timeLastSeen)/1000 > USER_DEAD_TIME){
 8001326:	4a17      	ldr	r2, [pc, #92]	; (8001384 <reapUsers+0x80>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	015b      	lsls	r3, r3, #5
 800132c:	4413      	add	r3, r2
 800132e:	331c      	adds	r3, #28
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	1a9b      	subs	r3, r3, r2
 8001338:	4a13      	ldr	r2, [pc, #76]	; (8001388 <reapUsers+0x84>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d917      	bls.n	800136e <reapUsers+0x6a>
				myHAL_UART_printf("reaping user 0x%x\r\n", usersOnline[i].address);
 800133e:	4a11      	ldr	r2, [pc, #68]	; (8001384 <reapUsers+0x80>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	015b      	lsls	r3, r3, #5
 8001344:	4413      	add	r3, r2
 8001346:	3318      	adds	r3, #24
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4619      	mov	r1, r3
 800134c:	480f      	ldr	r0, [pc, #60]	; (800138c <reapUsers+0x88>)
 800134e:	f000 fb39 	bl	80019c4 <myHAL_UART_printf>
				usersOnline[i].address = 0;
 8001352:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <reapUsers+0x80>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	015b      	lsls	r3, r3, #5
 8001358:	4413      	add	r3, r2
 800135a:	3318      	adds	r3, #24
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
				usersOnline[i].timeLastSeen = 0;
 8001360:	4a08      	ldr	r2, [pc, #32]	; (8001384 <reapUsers+0x80>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	015b      	lsls	r3, r3, #5
 8001366:	4413      	add	r3, r2
 8001368:	331c      	adds	r3, #28
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_USERS; i++){
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3301      	adds	r3, #1
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2bff      	cmp	r3, #255	; 0xff
 8001378:	ddcd      	ble.n	8001316 <reapUsers+0x12>
//				usersOnline[i].username = 0;
			}
		}
	}
}
 800137a:	bf00      	nop
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200003d8 	.word	0x200003d8
 8001388:	0001b197 	.word	0x0001b197
 800138c:	0800c244 	.word	0x0800c244

08001390 <get_RX>:

//RX//////////////
// This should: determine type of recieved packet, add node to onlinelist, send ACKS, print if message

void get_RX(){
 8001390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001392:	b0a3      	sub	sp, #140	; 0x8c
 8001394:	af04      	add	r7, sp, #16


	uint8_t sadd = SpiritPktStackGetReceivedSourceAddress();
 8001396:	f001 fc59 	bl	8002c4c <SpiritPktCommonGetReceivedSourceAddress>
 800139a:	4603      	mov	r3, r0
 800139c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t RXpayload[100];


	//get payload info and sanitize payloads
	int rxLen = SPSGRF_GetRxData((uint8_t *) &RXpayload);
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fd74 	bl	8001e90 <SPSGRF_GetRxData>
 80013a8:	4603      	mov	r3, r0
 80013aa:	66bb      	str	r3, [r7, #104]	; 0x68
	RXpayload[rxLen+1] = '\0'; //ensure null termination for bad little nodes
 80013ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013ae:	3301      	adds	r3, #1
 80013b0:	3378      	adds	r3, #120	; 0x78
 80013b2:	443b      	add	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	f803 2c74 	strb.w	r2, [r3, #-116]
	bool private = false;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (SpiritPktStackGetReceivedDestAddress() == SpiritPktStackGetBroadcastAddress()){
 80013c0:	f001 fc2c 	bl	8002c1c <SpiritPktCommonGetReceivedDestAddress>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461c      	mov	r4, r3
 80013c8:	f001 fc10 	bl	8002bec <SpiritPktCommonGetBroadcastAddress>
 80013cc:	4603      	mov	r3, r0
 80013ce:	429c      	cmp	r4, r3
 80013d0:	d109      	bne.n	80013e6 <get_RX+0x56>
		private = true;
 80013d2:	2301      	movs	r3, #1
 80013d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		HAL_UART_Transmit(&huart2, PRIVATE_TEXT_COLOR, 8, HAL_MAX_DELAY);//set text color
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
 80013dc:	2208      	movs	r2, #8
 80013de:	494b      	ldr	r1, [pc, #300]	; (800150c <get_RX+0x17c>)
 80013e0:	484b      	ldr	r0, [pc, #300]	; (8001510 <get_RX+0x180>)
 80013e2:	f006 fb0d 	bl	8007a00 <HAL_UART_Transmit>
	//if ack, do nothing
	//if heartbeat, do nothing
	//if message, print message
	//and check for bad payloads

	if(RXpayload[0] == PACKET_ANNOUNCEMENT){
 80013e6:	793b      	ldrb	r3, [r7, #4]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d10f      	bne.n	800140c <get_RX+0x7c>
		// send ack
		myHAL_UART_printf("Announcement: (%s)0x%x has Joined\r\n", &RXpayload[1], sadd);
 80013ec:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	3301      	adds	r3, #1
 80013f4:	4619      	mov	r1, r3
 80013f6:	4847      	ldr	r0, [pc, #284]	; (8001514 <get_RX+0x184>)
 80013f8:	f000 fae4 	bl	80019c4 <myHAL_UART_printf>
		createPayload(PACKET_ANNOUNCEMENT_RESP, myUsername, NULL, sadd);
 80013fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001400:	2200      	movs	r2, #0
 8001402:	4945      	ldr	r1, [pc, #276]	; (8001518 <get_RX+0x188>)
 8001404:	2002      	movs	r0, #2
 8001406:	f000 f8c1 	bl	800158c <createPayload>
 800140a:	e051      	b.n	80014b0 <get_RX+0x120>

	} else if (RXpayload[0] == PACKET_MESSAGE) {
 800140c:	793b      	ldrb	r3, [r7, #4]
 800140e:	2b04      	cmp	r3, #4
 8001410:	d118      	bne.n	8001444 <get_RX+0xb4>
		//print message
		char* i = (char*)RXpayload;
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	673b      	str	r3, [r7, #112]	; 0x70
		while(*i != '\0'){i++;}
 8001416:	e002      	b.n	800141e <get_RX+0x8e>
 8001418:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800141a:	3301      	adds	r3, #1
 800141c:	673b      	str	r3, [r7, #112]	; 0x70
 800141e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f8      	bne.n	8001418 <get_RX+0x88>
		i++;
 8001426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001428:	3301      	adds	r3, #1
 800142a:	673b      	str	r3, [r7, #112]	; 0x70

		myHAL_UART_printf("Message from 0x%x(%s): %s\r\n", sadd, names[sadd], i);
 800142c:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8001430:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001434:	4a39      	ldr	r2, [pc, #228]	; (800151c <get_RX+0x18c>)
 8001436:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800143a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800143c:	4838      	ldr	r0, [pc, #224]	; (8001520 <get_RX+0x190>)
 800143e:	f000 fac1 	bl	80019c4 <myHAL_UART_printf>
 8001442:	e035      	b.n	80014b0 <get_RX+0x120>

	} else if ((RXpayload[0] == PACKET_ANNOUNCEMENT_RESP) | (RXpayload[0] == PACKET_HEARTBEAT)){
 8001444:	793b      	ldrb	r3, [r7, #4]
 8001446:	2b02      	cmp	r3, #2
 8001448:	bf0c      	ite	eq
 800144a:	2301      	moveq	r3, #1
 800144c:	2300      	movne	r3, #0
 800144e:	b2da      	uxtb	r2, r3
 8001450:	793b      	ldrb	r3, [r7, #4]
 8001452:	2b03      	cmp	r3, #3
 8001454:	bf0c      	ite	eq
 8001456:	2301      	moveq	r3, #1
 8001458:	2300      	movne	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	4313      	orrs	r3, r2
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d009      	beq.n	8001478 <get_RX+0xe8>
		//do nothing
		if(RXpayload[0] == PACKET_HEARTBEAT){
 8001464:	793b      	ldrb	r3, [r7, #4]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d022      	beq.n	80014b0 <get_RX+0x120>
			if (SHOW_OTHER_HEARTBEATS) {myHAL_UART_printf("<3beat from 0x%x\r\n", sadd);}
		} else {
			myHAL_UART_printf("ACK by 0x%x\r\n", sadd);
 800146a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800146e:	4619      	mov	r1, r3
 8001470:	482c      	ldr	r0, [pc, #176]	; (8001524 <get_RX+0x194>)
 8001472:	f000 faa7 	bl	80019c4 <myHAL_UART_printf>
 8001476:	e01b      	b.n	80014b0 <get_RX+0x120>
		}

	} else{
		//todo:untested case
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%x(%d)(%s)\r\n",
				RXpayload[0], RXpayload[1], RXpayload[2], RXpayload[3],
 8001478:	793b      	ldrb	r3, [r7, #4]
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%x(%d)(%s)\r\n",
 800147a:	461d      	mov	r5, r3
				RXpayload[0], RXpayload[1], RXpayload[2], RXpayload[3],
 800147c:	797b      	ldrb	r3, [r7, #5]
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%x(%d)(%s)\r\n",
 800147e:	461e      	mov	r6, r3
				RXpayload[0], RXpayload[1], RXpayload[2], RXpayload[3],
 8001480:	79bb      	ldrb	r3, [r7, #6]
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%x(%d)(%s)\r\n",
 8001482:	469c      	mov	ip, r3
				RXpayload[0], RXpayload[1], RXpayload[2], RXpayload[3],
 8001484:	79fb      	ldrb	r3, [r7, #7]
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%x(%d)(%s)\r\n",
 8001486:	461c      	mov	r4, r3
 8001488:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800148c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001490:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8001494:	4821      	ldr	r0, [pc, #132]	; (800151c <get_RX+0x18c>)
 8001496:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800149a:	9103      	str	r1, [sp, #12]
 800149c:	9202      	str	r2, [sp, #8]
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	9400      	str	r4, [sp, #0]
 80014a2:	4663      	mov	r3, ip
 80014a4:	4632      	mov	r2, r6
 80014a6:	4629      	mov	r1, r5
 80014a8:	481f      	ldr	r0, [pc, #124]	; (8001528 <get_RX+0x198>)
 80014aa:	f000 fa8b 	bl	80019c4 <myHAL_UART_printf>
 80014ae:	e029      	b.n	8001504 <get_RX+0x174>
				sadd, sadd, names[sadd]);
		return;
	}

	if(private){
 80014b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <get_RX+0x136>
		HAL_UART_Transmit(&huart2, DEFAULT_TEXT_COLOR, 8, HAL_MAX_DELAY);//set color to white
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
 80014bc:	2208      	movs	r2, #8
 80014be:	491b      	ldr	r1, [pc, #108]	; (800152c <get_RX+0x19c>)
 80014c0:	4813      	ldr	r0, [pc, #76]	; (8001510 <get_RX+0x180>)
 80014c2:	f006 fa9d 	bl	8007a00 <HAL_UART_Transmit>
	}

	//for all cases, update node info
	usersOnline[sadd].timeLastSeen = xTaskGetTickCount();
 80014c6:	f008 facf 	bl	8009a68 <xTaskGetTickCount>
 80014ca:	4602      	mov	r2, r0
 80014cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014d0:	4611      	mov	r1, r2
 80014d2:	4a17      	ldr	r2, [pc, #92]	; (8001530 <get_RX+0x1a0>)
 80014d4:	015b      	lsls	r3, r3, #5
 80014d6:	4413      	add	r3, r2
 80014d8:	331c      	adds	r3, #28
 80014da:	6019      	str	r1, [r3, #0]
	usersOnline[sadd].address = sadd;
 80014dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014e0:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80014e4:	4912      	ldr	r1, [pc, #72]	; (8001530 <get_RX+0x1a0>)
 80014e6:	015b      	lsls	r3, r3, #5
 80014e8:	440b      	add	r3, r1
 80014ea:	3318      	adds	r3, #24
 80014ec:	601a      	str	r2, [r3, #0]
	strcpy(&usersOnline[sadd].username, &RXpayload[1]);
 80014ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014f2:	015b      	lsls	r3, r3, #5
 80014f4:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <get_RX+0x1a0>)
 80014f6:	441a      	add	r2, r3
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	3301      	adds	r3, #1
 80014fc:	4619      	mov	r1, r3
 80014fe:	4610      	mov	r0, r2
 8001500:	f00a f8c4 	bl	800b68c <strcpy>


}
 8001504:	377c      	adds	r7, #124	; 0x7c
 8001506:	46bd      	mov	sp, r7
 8001508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800150a:	bf00      	nop
 800150c:	0800c258 	.word	0x0800c258
 8001510:	20002938 	.word	0x20002938
 8001514:	0800c260 	.word	0x0800c260
 8001518:	2000032c 	.word	0x2000032c
 800151c:	20000004 	.word	0x20000004
 8001520:	0800c284 	.word	0x0800c284
 8001524:	0800c2a0 	.word	0x0800c2a0
 8001528:	0800c2b0 	.word	0x0800c2b0
 800152c:	0800c2e4 	.word	0x0800c2e4
 8001530:	200003d8 	.word	0x200003d8

08001534 <Task_RX>:


void Task_RX(void *argument){
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	while(1){
		if(xSemaphoreTake(FLAG_SPIRIT, 10) == 1){
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <Task_RX+0x28>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	210a      	movs	r1, #10
 8001542:	4618      	mov	r0, r3
 8001544:	f007 fcf0 	bl	8008f28 <xQueueSemaphoreTake>
 8001548:	4603      	mov	r3, r0
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <Task_RX+0x1e>
		  SPSGRF_StartRx();
 800154e:	f000 fc96 	bl	8001e7e <SPSGRF_StartRx>
		}
		vTaskDelay(10);
 8001552:	200a      	movs	r0, #10
 8001554:	f008 f936 	bl	80097c4 <vTaskDelay>
		if(xSemaphoreTake(FLAG_SPIRIT, 10) == 1){
 8001558:	e7f0      	b.n	800153c <Task_RX+0x8>
 800155a:	bf00      	nop
 800155c:	200003d4 	.word	0x200003d4

08001560 <Task_BeatHeart>:
	}
}
/* USER CODE END 0 */


void Task_BeatHeart(void *argument){
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	vTaskDelay(HEARTBEAT_TIME * 1000);
 8001568:	f241 3088 	movw	r0, #5000	; 0x1388
 800156c:	f008 f92a 	bl	80097c4 <vTaskDelay>
					"iiiiiiiiii"
					"!!!!!!!!!?";
			createPayload(PACKET_MESSAGE, myUsername, massivemesssage, 0xFF);

		} else {
			createPayload(PACKET_HEARTBEAT, myUsername, NULL, 0xFF);
 8001570:	23ff      	movs	r3, #255	; 0xff
 8001572:	2200      	movs	r2, #0
 8001574:	4904      	ldr	r1, [pc, #16]	; (8001588 <Task_BeatHeart+0x28>)
 8001576:	2003      	movs	r0, #3
 8001578:	f000 f808 	bl	800158c <createPayload>
		}
		vTaskDelay(HEARTBEAT_TIME * 1000);
 800157c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001580:	f008 f920 	bl	80097c4 <vTaskDelay>
		if(CARDIAC_ARREST){
 8001584:	e7f4      	b.n	8001570 <Task_BeatHeart+0x10>
 8001586:	bf00      	nop
 8001588:	2000032c 	.word	0x2000032c

0800158c <createPayload>:
	}
}

void createPayload(int type, char* username, char* message, uint8_t dest){
 800158c:	b480      	push	{r7}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	70fb      	strb	r3, [r7, #3]

	int myWriteTX = currentWriteTX;
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <createPayload+0x94>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	617b      	str	r3, [r7, #20]
	currentWriteTX = (++currentWriteTX) %TX_Q_SIZE;
 80015a0:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <createPayload+0x94>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3301      	adds	r3, #1
 80015a6:	4a1e      	ldr	r2, [pc, #120]	; (8001620 <createPayload+0x94>)
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <createPayload+0x94>)
 80015ac:	6819      	ldr	r1, [r3, #0]
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <createPayload+0x98>)
 80015b0:	fb83 3201 	smull	r3, r2, r3, r1
 80015b4:	17cb      	asrs	r3, r1, #31
 80015b6:	1ad2      	subs	r2, r2, r3
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	1aca      	subs	r2, r1, r3
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <createPayload+0x94>)
 80015c2:	601a      	str	r2, [r3, #0]

	TXq[myWriteTX].type = type;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	b2d9      	uxtb	r1, r3
 80015c8:	4a17      	ldr	r2, [pc, #92]	; (8001628 <createPayload+0x9c>)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	4413      	add	r3, r2
 80015d0:	3301      	adds	r3, #1
 80015d2:	460a      	mov	r2, r1
 80015d4:	701a      	strb	r2, [r3, #0]
	TXq[myWriteTX].user = username;
 80015d6:	4a14      	ldr	r2, [pc, #80]	; (8001628 <createPayload+0x9c>)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	4413      	add	r3, r2
 80015de:	3304      	adds	r3, #4
 80015e0:	68ba      	ldr	r2, [r7, #8]
 80015e2:	601a      	str	r2, [r3, #0]

	if(type == 4){
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d106      	bne.n	80015f8 <createPayload+0x6c>
		TXq[myWriteTX].message = message;
 80015ea:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <createPayload+0x9c>)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	4413      	add	r3, r2
 80015f2:	3308      	adds	r3, #8
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	601a      	str	r2, [r3, #0]
	}

	TXq[myWriteTX].dest = dest;
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <createPayload+0x9c>)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	4413      	add	r3, r2
 8001600:	330c      	adds	r3, #12
 8001602:	78fa      	ldrb	r2, [r7, #3]
 8001604:	701a      	strb	r2, [r3, #0]
	TXq[myWriteTX].valid = 1;
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <createPayload+0x9c>)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	4413      	add	r3, r2
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
}
 8001612:	bf00      	nop
 8001614:	371c      	adds	r7, #28
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20002414 	.word	0x20002414
 8001624:	55555556 	.word	0x55555556
 8001628:	200023e0 	.word	0x200023e0

0800162c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001632:	f003 f93d 	bl	80048b0 <HAL_Init>

  /* Configure the system cloc */
  SystemClock_Config();
 8001636:	f000 fa3f 	bl	8001ab8 <SystemClock_Config>


  RTOS_ISR_setPriority(EXTI9_5_IRQn);
 800163a:	2017      	movs	r0, #23
 800163c:	f7ff fc87 	bl	8000f4e <RTOS_ISR_setPriority>


  /* Create the tasks */
  BaseType_t retVal = xTaskCreate(Task_TX, "Task_TX", configMINIMAL_STACK_SIZE,
 8001640:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <main+0x104>)
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	2304      	movs	r3, #4
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	2300      	movs	r3, #0
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	4939      	ldr	r1, [pc, #228]	; (8001734 <main+0x108>)
 800164e:	483a      	ldr	r0, [pc, #232]	; (8001738 <main+0x10c>)
 8001650:	f007 ff59 	bl	8009506 <xTaskCreate>
 8001654:	6078      	str	r0, [r7, #4]
  		NULL, tskIDLE_PRIORITY + 4, &Task_TXHandler);
  if (retVal != 1) { while(1);}	// check if task creation failed
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d000      	beq.n	800165e <main+0x32>
 800165c:	e7fe      	b.n	800165c <main+0x30>

  retVal = xTaskCreate(Task_RX, "Task_RX", configMINIMAL_STACK_SIZE,
 800165e:	4b37      	ldr	r3, [pc, #220]	; (800173c <main+0x110>)
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	2303      	movs	r3, #3
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2300      	movs	r3, #0
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	4935      	ldr	r1, [pc, #212]	; (8001740 <main+0x114>)
 800166c:	4835      	ldr	r0, [pc, #212]	; (8001744 <main+0x118>)
 800166e:	f007 ff4a 	bl	8009506 <xTaskCreate>
 8001672:	6078      	str	r0, [r7, #4]
  		NULL, tskIDLE_PRIORITY + 3, &Task_RXHandler);
  if (retVal != 1) { while(1);}	// check if task creation failed
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d000      	beq.n	800167c <main+0x50>
 800167a:	e7fe      	b.n	800167a <main+0x4e>

  retVal = xTaskCreate(Task_BeatHeart, "Task_BeatHeart", configMINIMAL_STACK_SIZE,
 800167c:	4b32      	ldr	r3, [pc, #200]	; (8001748 <main+0x11c>)
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	2303      	movs	r3, #3
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	2300      	movs	r3, #0
 8001686:	2280      	movs	r2, #128	; 0x80
 8001688:	4930      	ldr	r1, [pc, #192]	; (800174c <main+0x120>)
 800168a:	4831      	ldr	r0, [pc, #196]	; (8001750 <main+0x124>)
 800168c:	f007 ff3b 	bl	8009506 <xTaskCreate>
 8001690:	6078      	str	r0, [r7, #4]
  		NULL, tskIDLE_PRIORITY + 3, &Task_HBHandler);
  if (retVal != 1) { while(1);}	// check if task creation failed
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d000      	beq.n	800169a <main+0x6e>
 8001698:	e7fe      	b.n	8001698 <main+0x6c>


  // Create Binary Semaphore
  FLAG_SPIRIT = xSemaphoreCreateBinary();
 800169a:	2203      	movs	r2, #3
 800169c:	2100      	movs	r1, #0
 800169e:	2001      	movs	r0, #1
 80016a0:	f007 f8de 	bl	8008860 <xQueueGenericCreate>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4a2b      	ldr	r2, [pc, #172]	; (8001754 <main+0x128>)
 80016a8:	6013      	str	r3, [r2, #0]
  if (FLAG_SPIRIT == NULL) { while(1); }
 80016aa:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <main+0x128>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d100      	bne.n	80016b4 <main+0x88>
 80016b2:	e7fe      	b.n	80016b2 <main+0x86>



  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b4:	f7ff fb60 	bl	8000d78 <MX_GPIO_Init>
  MX_SPI1_Init();
 80016b8:	f000 fa68 	bl	8001b8c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80016bc:	f000 fd08 	bl	80020d0 <MX_USART2_UART_Init>

	//	enable interrupts for USART2 receive
	USART2->CR1 |= USART_CR1_RXNEIE;					// enable RXNE interrupt on USART2
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <main+0x12c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a24      	ldr	r2, [pc, #144]	; (8001758 <main+0x12c>)
 80016c6:	f043 0320 	orr.w	r3, r3, #32
 80016ca:	6013      	str	r3, [r2, #0]
	USART2->ISR &= ~(USART_ISR_RXNE);					// clear interrupt flagwhile (message[i] != 0)
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <main+0x12c>)
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	4a21      	ldr	r2, [pc, #132]	; (8001758 <main+0x12c>)
 80016d2:	f023 0320 	bic.w	r3, r3, #32
 80016d6:	61d3      	str	r3, [r2, #28]

	NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));		// enable USART2 ISR
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <main+0x130>)
 80016da:	2240      	movs	r2, #64	; 0x40
 80016dc:	605a      	str	r2, [r3, #4]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80016de:	b662      	cpsie	i
}
 80016e0:	bf00      	nop
	__enable_irq();

	HAL_UART_Transmit(&huart2, DEFAULT_TEXT_COLOR, 8, HAL_MAX_DELAY);//set color to white
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	2208      	movs	r2, #8
 80016e8:	491d      	ldr	r1, [pc, #116]	; (8001760 <main+0x134>)
 80016ea:	481e      	ldr	r0, [pc, #120]	; (8001764 <main+0x138>)
 80016ec:	f006 f988 	bl	8007a00 <HAL_UART_Transmit>


  SPSGRF_Init();
 80016f0:	f000 faea 	bl	8001cc8 <SPSGRF_Init>
//  impersonate(LOGON_USER_ADDRESS);
//  strcpy(myUsername, LOGON_USERNAME);


  //Queue initial Announcement Packet, get start time, set semaphore
  createPayload(PACKET_ANNOUNCEMENT, myUsername, NULL, 0xFF);
 80016f4:	23ff      	movs	r3, #255	; 0xff
 80016f6:	2200      	movs	r2, #0
 80016f8:	491b      	ldr	r1, [pc, #108]	; (8001768 <main+0x13c>)
 80016fa:	2001      	movs	r0, #1
 80016fc:	f7ff ff46 	bl	800158c <createPayload>
  startTime = xTaskGetTickCount();
 8001700:	f008 f9b2 	bl	8009a68 <xTaskGetTickCount>
 8001704:	4603      	mov	r3, r0
 8001706:	4a19      	ldr	r2, [pc, #100]	; (800176c <main+0x140>)
 8001708:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(FLAG_SPIRIT);
 800170a:	4b12      	ldr	r3, [pc, #72]	; (8001754 <main+0x128>)
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	2300      	movs	r3, #0
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	f007 f902 	bl	800891c <xQueueGenericSend>

  myHAL_UART_clear();
 8001718:	f000 f97c 	bl	8001a14 <myHAL_UART_clear>
  myHAL_UART_printf("RTOS NET ONLINE\r\n");
 800171c:	4814      	ldr	r0, [pc, #80]	; (8001770 <main+0x144>)
 800171e:	f000 f951 	bl	80019c4 <myHAL_UART_printf>

  vTaskStartScheduler();
 8001722:	f008 f883 	bl	800982c <vTaskStartScheduler>
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200003c8 	.word	0x200003c8
 8001734:	0800c2ec 	.word	0x0800c2ec
 8001738:	08001101 	.word	0x08001101
 800173c:	200003cc 	.word	0x200003cc
 8001740:	0800c2f4 	.word	0x0800c2f4
 8001744:	08001535 	.word	0x08001535
 8001748:	200003d0 	.word	0x200003d0
 800174c:	0800c2fc 	.word	0x0800c2fc
 8001750:	08001561 	.word	0x08001561
 8001754:	200003d4 	.word	0x200003d4
 8001758:	40004400 	.word	0x40004400
 800175c:	e000e100 	.word	0xe000e100
 8001760:	0800c2e4 	.word	0x0800c2e4
 8001764:	20002938 	.word	0x20002938
 8001768:	2000032c 	.word	0x2000032c
 800176c:	200023d8 	.word	0x200023d8
 8001770:	0800c30c 	.word	0x0800c30c

08001774 <USART2_IRQHandler>:


char userInput[100];
int userInputPos = 0;
void USART2_IRQHandler(void){
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
	char r;

	if (USART2->ISR & USART_ISR_RXNE){
 800177a:	4b27      	ldr	r3, [pc, #156]	; (8001818 <USART2_IRQHandler+0xa4>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	2b00      	cmp	r3, #0
 8001784:	d040      	beq.n	8001808 <USART2_IRQHandler+0x94>

		r = USART2->RDR; // copy received char
 8001786:	4b24      	ldr	r3, [pc, #144]	; (8001818 <USART2_IRQHandler+0xa4>)
 8001788:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800178a:	b29b      	uxth	r3, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	71fb      	strb	r3, [r7, #7]

		if (r == 13){
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	2b0d      	cmp	r3, #13
 8001794:	d112      	bne.n	80017bc <USART2_IRQHandler+0x48>
			//enter
			userInput[userInputPos] = '\0';
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <USART2_IRQHandler+0xa8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a21      	ldr	r2, [pc, #132]	; (8001820 <USART2_IRQHandler+0xac>)
 800179c:	2100      	movs	r1, #0
 800179e:	54d1      	strb	r1, [r2, r3]
			userInputPos = 0;
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <USART2_IRQHandler+0xa8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, &r, 1, HAL_MAX_DELAY);
 80017a6:	1df9      	adds	r1, r7, #7
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ac:	2201      	movs	r2, #1
 80017ae:	481d      	ldr	r0, [pc, #116]	; (8001824 <USART2_IRQHandler+0xb0>)
 80017b0:	f006 f926 	bl	8007a00 <HAL_UART_Transmit>

			handleCommand(userInput);
 80017b4:	481a      	ldr	r0, [pc, #104]	; (8001820 <USART2_IRQHandler+0xac>)
 80017b6:	f000 f871 	bl	800189c <handleCommand>
 80017ba:	e01e      	b.n	80017fa <USART2_IRQHandler+0x86>


		} else if (r == 127){
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b7f      	cmp	r3, #127	; 0x7f
 80017c0:	d10c      	bne.n	80017dc <USART2_IRQHandler+0x68>
			//backspace case
			userInputPos--;
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <USART2_IRQHandler+0xa8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	4a14      	ldr	r2, [pc, #80]	; (800181c <USART2_IRQHandler+0xa8>)
 80017ca:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, &r, 1, HAL_MAX_DELAY);
 80017cc:	1df9      	adds	r1, r7, #7
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	2201      	movs	r2, #1
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <USART2_IRQHandler+0xb0>)
 80017d6:	f006 f913 	bl	8007a00 <HAL_UART_Transmit>
 80017da:	e00e      	b.n	80017fa <USART2_IRQHandler+0x86>
		}
		else {
			//NOT enter
			userInput[userInputPos++] = r;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <USART2_IRQHandler+0xa8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	490e      	ldr	r1, [pc, #56]	; (800181c <USART2_IRQHandler+0xa8>)
 80017e4:	600a      	str	r2, [r1, #0]
 80017e6:	79f9      	ldrb	r1, [r7, #7]
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <USART2_IRQHandler+0xac>)
 80017ea:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, &r, 1, HAL_MAX_DELAY);
 80017ec:	1df9      	adds	r1, r7, #7
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
 80017f2:	2201      	movs	r2, #1
 80017f4:	480b      	ldr	r0, [pc, #44]	; (8001824 <USART2_IRQHandler+0xb0>)
 80017f6:	f006 f903 	bl	8007a00 <HAL_UART_Transmit>

		}

		USART2->ISR &= ~(USART_ISR_RXNE); // clear the flag
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <USART2_IRQHandler+0xa4>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a06      	ldr	r2, [pc, #24]	; (8001818 <USART2_IRQHandler+0xa4>)
 8001800:	f023 0320 	bic.w	r3, r3, #32
 8001804:	61d3      	str	r3, [r2, #28]
	}
	else {
		USART2->ISR = 0; // clear the flag

	}
}
 8001806:	e002      	b.n	800180e <USART2_IRQHandler+0x9a>
		USART2->ISR = 0; // clear the flag
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <USART2_IRQHandler+0xa4>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40004400 	.word	0x40004400
 800181c:	2000247c 	.word	0x2000247c
 8001820:	20002418 	.word	0x20002418
 8001824:	20002938 	.word	0x20002938

08001828 <impersonate>:

void impersonate(){
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
	//change username and address to a desired person's

	SpiritGotoReadyState();
 800182e:	f000 f90d 	bl	8001a4c <SpiritGotoReadyState>
//
//	  /* Writes value on the register */
//	  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);

	  /* Fills array with the addresses passed in the structure */
	  tempRegValue[0] = BROADCAST_ADDRESS;
 8001832:	23ff      	movs	r3, #255	; 0xff
 8001834:	713b      	strb	r3, [r7, #4]
	  tempRegValue[1] = MULTICAST_ADDRESS;
 8001836:	23ee      	movs	r3, #238	; 0xee
 8001838:	717b      	strb	r3, [r7, #5]
	  tempRegValue[2] = skinSuit;
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <impersonate+0x60>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	71bb      	strb	r3, [r7, #6]

	  /* Writes them on the addresses registers */
	  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	461a      	mov	r2, r3
 8001844:	2103      	movs	r1, #3
 8001846:	204c      	movs	r0, #76	; 0x4c
 8001848:	f002 feb4 	bl	80045b4 <RadioSpiWriteRegisters>
 800184c:	4602      	mov	r2, r0
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <impersonate+0x64>)
 8001850:	b212      	sxth	r2, r2
 8001852:	4611      	mov	r1, r2
 8001854:	7019      	strb	r1, [r3, #0]
 8001856:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800185a:	705a      	strb	r2, [r3, #1]



	currentUser = skinSuit;
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <impersonate+0x60>)
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <impersonate+0x68>)
 8001862:	701a      	strb	r2, [r3, #0]
	skinSuit = 0; //clear skinsuit flag, avoids unnecessary calling of the above functions
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <impersonate+0x60>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]

	strcpy(&myUsername, names[currentUser]);
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <impersonate+0x68>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <impersonate+0x6c>)
 8001872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001876:	4619      	mov	r1, r3
 8001878:	4807      	ldr	r0, [pc, #28]	; (8001898 <impersonate+0x70>)
 800187a:	f009 ff07 	bl	800b68c <strcpy>

}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200023dc 	.word	0x200023dc
 800188c:	200029c8 	.word	0x200029c8
 8001890:	20000000 	.word	0x20000000
 8001894:	20000004 	.word	0x20000004
 8001898:	2000032c 	.word	0x2000032c

0800189c <handleCommand>:

void handleCommand(char* input){
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	//this is after the string has been entered and the user hits enter
	myHAL_UART_printf("                              entered: (%s) \r\n", userInput);
 80018a4:	4940      	ldr	r1, [pc, #256]	; (80019a8 <handleCommand+0x10c>)
 80018a6:	4841      	ldr	r0, [pc, #260]	; (80019ac <handleCommand+0x110>)
 80018a8:	f000 f88c 	bl	80019c4 <myHAL_UART_printf>


	if (userInput[0] == '/'){
 80018ac:	4b3e      	ldr	r3, [pc, #248]	; (80019a8 <handleCommand+0x10c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b2f      	cmp	r3, #47	; 0x2f
 80018b2:	d16d      	bne.n	8001990 <handleCommand+0xf4>

		switch (userInput[1]) {
 80018b4:	4b3c      	ldr	r3, [pc, #240]	; (80019a8 <handleCommand+0x10c>)
 80018b6:	785b      	ldrb	r3, [r3, #1]
 80018b8:	3b62      	subs	r3, #98	; 0x62
 80018ba:	2b13      	cmp	r3, #19
 80018bc:	d863      	bhi.n	8001986 <handleCommand+0xea>
 80018be:	a201      	add	r2, pc, #4	; (adr r2, 80018c4 <handleCommand+0x28>)
 80018c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c4:	0800191f 	.word	0x0800191f
 80018c8:	08001987 	.word	0x08001987
 80018cc:	08001987 	.word	0x08001987
 80018d0:	08001987 	.word	0x08001987
 80018d4:	08001987 	.word	0x08001987
 80018d8:	08001987 	.word	0x08001987
 80018dc:	08001987 	.word	0x08001987
 80018e0:	0800195d 	.word	0x0800195d
 80018e4:	08001987 	.word	0x08001987
 80018e8:	08001987 	.word	0x08001987
 80018ec:	08001987 	.word	0x08001987
 80018f0:	08001987 	.word	0x08001987
 80018f4:	08001987 	.word	0x08001987
 80018f8:	08001987 	.word	0x08001987
 80018fc:	0800192d 	.word	0x0800192d
 8001900:	08001987 	.word	0x08001987
 8001904:	08001987 	.word	0x08001987
 8001908:	08001987 	.word	0x08001987
 800190c:	08001987 	.word	0x08001987
 8001910:	08001915 	.word	0x08001915

			case 'u': 	//list online users
				printUsersOnline();
 8001914:	f7ff fc82 	bl	800121c <printUsersOnline>
				reapUsers();
 8001918:	f7ff fcf4 	bl	8001304 <reapUsers>
				break;
 800191c:	e03f      	b.n	800199e <handleCommand+0x102>

			case 'b':	//broadcast message
				createPayload(PACKET_MESSAGE, myUsername, &userInput[3], 0xFF);
 800191e:	23ff      	movs	r3, #255	; 0xff
 8001920:	4a23      	ldr	r2, [pc, #140]	; (80019b0 <handleCommand+0x114>)
 8001922:	4924      	ldr	r1, [pc, #144]	; (80019b4 <handleCommand+0x118>)
 8001924:	2004      	movs	r0, #4
 8001926:	f7ff fe31 	bl	800158c <createPayload>
				break;
 800192a:	e038      	b.n	800199e <handleCommand+0x102>

			case 'p':	//private message
		        char hex_str[3];
		        hex_str[0] = userInput[2];
 800192c:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <handleCommand+0x10c>)
 800192e:	789b      	ldrb	r3, [r3, #2]
 8001930:	743b      	strb	r3, [r7, #16]
		        hex_str[1] = userInput[3];
 8001932:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <handleCommand+0x10c>)
 8001934:	78db      	ldrb	r3, [r3, #3]
 8001936:	747b      	strb	r3, [r7, #17]
		        hex_str[2] = '\0';
 8001938:	2300      	movs	r3, #0
 800193a:	74bb      	strb	r3, [r7, #18]

		        uint8_t PInt = strtol(hex_str, NULL, 16);
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	2210      	movs	r2, #16
 8001942:	2100      	movs	r1, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f009 fdd3 	bl	800b4f0 <strtol>
 800194a:	4603      	mov	r3, r0
 800194c:	75fb      	strb	r3, [r7, #23]
				createPayload(PACKET_MESSAGE, myUsername, &userInput[5], PInt);
 800194e:	7dfb      	ldrb	r3, [r7, #23]
 8001950:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <handleCommand+0x11c>)
 8001952:	4918      	ldr	r1, [pc, #96]	; (80019b4 <handleCommand+0x118>)
 8001954:	2004      	movs	r0, #4
 8001956:	f7ff fe19 	bl	800158c <createPayload>
				break;
 800195a:	e020      	b.n	800199e <handleCommand+0x102>

			case 'i':	//impersonate
				char hexStr[3];
				hexStr[0] = userInput[2]; hexStr[1] = userInput[3]; hexStr[2] = '\0';
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <handleCommand+0x10c>)
 800195e:	789b      	ldrb	r3, [r3, #2]
 8001960:	733b      	strb	r3, [r7, #12]
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <handleCommand+0x10c>)
 8001964:	78db      	ldrb	r3, [r3, #3]
 8001966:	737b      	strb	r3, [r7, #13]
 8001968:	2300      	movs	r3, #0
 800196a:	73bb      	strb	r3, [r7, #14]
				uint8_t hexInt = (uint8_t)strtol(hexStr, NULL, 16);
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	2210      	movs	r2, #16
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f009 fdbb 	bl	800b4f0 <strtol>
 800197a:	4603      	mov	r3, r0
 800197c:	75bb      	strb	r3, [r7, #22]
				skinSuit = hexInt; //save the address to be impersonated until next transmission (cannot change address in IRQ)
 800197e:	4a0f      	ldr	r2, [pc, #60]	; (80019bc <handleCommand+0x120>)
 8001980:	7dbb      	ldrb	r3, [r7, #22]
 8001982:	7013      	strb	r3, [r2, #0]
				break;
 8001984:	e00b      	b.n	800199e <handleCommand+0x102>

			default: 	//Bad command
				myHAL_UART_printf("                              Bad command: (%s) \r\n", userInput);
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <handleCommand+0x10c>)
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <handleCommand+0x124>)
 800198a:	f000 f81b 	bl	80019c4 <myHAL_UART_printf>
				break;
 800198e:	e006      	b.n	800199e <handleCommand+0x102>
		}

	} else {
		//else just assume it's a broadcast message
		createPayload(PACKET_MESSAGE, myUsername, userInput, 0xFF);
 8001990:	23ff      	movs	r3, #255	; 0xff
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <handleCommand+0x10c>)
 8001994:	4907      	ldr	r1, [pc, #28]	; (80019b4 <handleCommand+0x118>)
 8001996:	2004      	movs	r0, #4
 8001998:	f7ff fdf8 	bl	800158c <createPayload>
	}

}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20002418 	.word	0x20002418
 80019ac:	0800c320 	.word	0x0800c320
 80019b0:	2000241b 	.word	0x2000241b
 80019b4:	2000032c 	.word	0x2000032c
 80019b8:	2000241d 	.word	0x2000241d
 80019bc:	200023dc 	.word	0x200023dc
 80019c0:	0800c350 	.word	0x0800c350

080019c4 <myHAL_UART_printf>:





void myHAL_UART_printf(const char* format, ...) {
 80019c4:	b40f      	push	{r0, r1, r2, r3}
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, format);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	603b      	str	r3, [r7, #0]

	// Allocate temporary buffer for formatted string
	static char buffer[1024]; // Adjust buffer size as needed
	int formatted_length = vsnprintf(buffer, sizeof(buffer), format, args);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019da:	480c      	ldr	r0, [pc, #48]	; (8001a0c <myHAL_UART_printf+0x48>)
 80019dc:	f009 fdbe 	bl	800b55c <vsniprintf>
 80019e0:	6078      	str	r0, [r7, #4]

	// Check for potential buffer overflow (optional)
	if (formatted_length >= sizeof(buffer)) {
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e8:	d300      	bcc.n	80019ec <myHAL_UART_printf+0x28>
		// Handle buffer overflow (e.g., print error message)
		while(1);
 80019ea:	e7fe      	b.n	80019ea <myHAL_UART_printf+0x26>
	} else {
		// Print the formatted string
		HAL_UART_Transmit(&huart2, buffer, formatted_length, HAL_MAX_DELAY);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295
 80019f4:	4905      	ldr	r1, [pc, #20]	; (8001a0c <myHAL_UART_printf+0x48>)
 80019f6:	4806      	ldr	r0, [pc, #24]	; (8001a10 <myHAL_UART_printf+0x4c>)
 80019f8:	f006 f802 	bl	8007a00 <HAL_UART_Transmit>
	}

	va_end(args);
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a06:	b004      	add	sp, #16
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20002480 	.word	0x20002480
 8001a10:	20002938 	.word	0x20002938

08001a14 <myHAL_UART_clear>:

void myHAL_UART_clear(){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
	char clear[] = "\x1B[2J\x1B[0m\x1B[H"; // clear
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <myHAL_UART_clear+0x30>)
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart2, clear, strlen(clear), 100);
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fbd2 	bl	80001d0 <strlen>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	1d39      	adds	r1, r7, #4
 8001a32:	2364      	movs	r3, #100	; 0x64
 8001a34:	4804      	ldr	r0, [pc, #16]	; (8001a48 <myHAL_UART_clear+0x34>)
 8001a36:	f005 ffe3 	bl	8007a00 <HAL_UART_Transmit>

}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	0800c384 	.word	0x0800c384
 8001a48:	20002938 	.word	0x20002938

08001a4c <SpiritGotoReadyState>:

void SpiritGotoReadyState(void) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  static unsigned int i;
  /* Wait for the radio to enter the ready state */
  do {
    /* Go to the ready state */
    if (g_xStatus.MC_STATE == MC_STATE_LOCK) {
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <SpiritGotoReadyState+0x60>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b0f      	cmp	r3, #15
 8001a5c:	d103      	bne.n	8001a66 <SpiritGotoReadyState+0x1a>
      SpiritCmdStrobeReady();
 8001a5e:	2062      	movs	r0, #98	; 0x62
 8001a60:	f000 fcd2 	bl	8002408 <SpiritCmdStrobeCommand>
 8001a64:	e002      	b.n	8001a6c <SpiritGotoReadyState+0x20>
    } else {
      SpiritCmdStrobeSabort();
 8001a66:	2067      	movs	r0, #103	; 0x67
 8001a68:	f000 fcce 	bl	8002408 <SpiritCmdStrobeCommand>
    }
    /* Delay for state transition */
    for (i = 0; i != 0xFF; i++)
 8001a6c:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <SpiritGotoReadyState+0x64>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	e004      	b.n	8001a7e <SpiritGotoReadyState+0x32>
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <SpiritGotoReadyState+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <SpiritGotoReadyState+0x64>)
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <SpiritGotoReadyState+0x64>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2bff      	cmp	r3, #255	; 0xff
 8001a84:	d1f6      	bne.n	8001a74 <SpiritGotoReadyState+0x28>
      ;
    /* Update the global status register variable */
    SpiritRefreshStatus();
 8001a86:	f002 fd63 	bl	8004550 <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <SpiritGotoReadyState+0x60>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d1db      	bne.n	8001a50 <SpiritGotoReadyState+0x4>

  xSemaphoreGive(FLAG_SPIRIT);
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <SpiritGotoReadyState+0x68>)
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	f006 ff3b 	bl	800891c <xQueueGenericSend>
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200029c8 	.word	0x200029c8
 8001ab0:	20002880 	.word	0x20002880
 8001ab4:	200003d4 	.word	0x200003d4

08001ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b096      	sub	sp, #88	; 0x58
 8001abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	2244      	movs	r2, #68	; 0x44
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f009 fd56 	bl	800b578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001acc:	463b      	mov	r3, r7
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ada:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ade:	f003 fa1b 	bl	8004f18 <HAL_PWREx_ControlVoltageScaling>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ae8:	f000 f84a 	bl	8001b80 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001aec:	2310      	movs	r3, #16
 8001aee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001af0:	2301      	movs	r3, #1
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001af8:	2360      	movs	r3, #96	; 0x60
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afc:	2302      	movs	r3, #2
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b00:	2301      	movs	r3, #1
 8001b02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001b08:	2328      	movs	r3, #40	; 0x28
 8001b0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b0c:	2307      	movs	r3, #7
 8001b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b10:	2302      	movs	r3, #2
 8001b12:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b14:	2302      	movs	r3, #2
 8001b16:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 fa51 	bl	8004fc4 <HAL_RCC_OscConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001b28:	f000 f82a 	bl	8001b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b30:	2303      	movs	r3, #3
 8001b32:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b40:	463b      	mov	r3, r7
 8001b42:	2104      	movs	r1, #4
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 fe19 	bl	800577c <HAL_RCC_ClockConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b50:	f000 f816 	bl	8001b80 <Error_Handler>
  }
}
 8001b54:	bf00      	nop
 8001b56:	3758      	adds	r7, #88	; 0x58
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d101      	bne.n	8001b72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b6e:	f002 feb7 	bl	80048e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40014400 	.word	0x40014400

08001b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <Error_Handler+0x8>
	...

08001b8c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <MX_SPI1_Init+0x74>)
 8001b92:	4a1c      	ldr	r2, [pc, #112]	; (8001c04 <MX_SPI1_Init+0x78>)
 8001b94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b96:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <MX_SPI1_Init+0x74>)
 8001b98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <MX_SPI1_Init+0x74>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ba4:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <MX_SPI1_Init+0x74>)
 8001ba6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001baa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bac:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_SPI1_Init+0x74>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <MX_SPI1_Init+0x74>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_SPI1_Init+0x74>)
 8001bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bbe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_SPI1_Init+0x74>)
 8001bc2:	2210      	movs	r2, #16
 8001bc4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_SPI1_Init+0x74>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_SPI1_Init+0x74>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <MX_SPI1_Init+0x74>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_SPI1_Init+0x74>)
 8001bda:	2207      	movs	r2, #7
 8001bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <MX_SPI1_Init+0x74>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_SPI1_Init+0x74>)
 8001be6:	2208      	movs	r2, #8
 8001be8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_SPI1_Init+0x74>)
 8001bec:	f004 fcd8 	bl	80065a0 <HAL_SPI_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001bf6:	f7ff ffc3 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20002884 	.word	0x20002884
 8001c04:	40013000 	.word	0x40013000

08001c08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <HAL_SPI_MspInit+0xb4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d144      	bne.n	8001cb4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c2a:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <HAL_SPI_MspInit+0xb8>)
 8001c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2e:	4a24      	ldr	r2, [pc, #144]	; (8001cc0 <HAL_SPI_MspInit+0xb8>)
 8001c30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c34:	6613      	str	r3, [r2, #96]	; 0x60
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <HAL_SPI_MspInit+0xb8>)
 8001c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <HAL_SPI_MspInit+0xb8>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	4a1e      	ldr	r2, [pc, #120]	; (8001cc0 <HAL_SPI_MspInit+0xb8>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <HAL_SPI_MspInit+0xb8>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_SPI_MspInit+0xb8>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <HAL_SPI_MspInit+0xb8>)
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_SPI_MspInit+0xb8>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c72:	23c0      	movs	r3, #192	; 0xc0
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c82:	2305      	movs	r3, #5
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c90:	f002 ff5a 	bl	8004b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c94:	2308      	movs	r3, #8
 8001c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ca4:	2305      	movs	r3, #5
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4619      	mov	r1, r3
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <HAL_SPI_MspInit+0xbc>)
 8001cb0:	f002 ff4a 	bl	8004b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3728      	adds	r7, #40	; 0x28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40013000 	.word	0x40013000
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	48000400 	.word	0x48000400

08001cc8 <SPSGRF_Init>:
* @brief  Initialize the SPIRIT1 transceiver in the SPSGRF module.
* @param  None
* @retval None
*/
void SPSGRF_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b096      	sub	sp, #88	; 0x58
 8001ccc:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktBasicInit xBasicInit;
  PktBasicAddressesInit xBasicAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 8001cce:	f002 fc61 	bl	8004594 <RadioSpiInit>

  // restart the radio
  SpiritEnterShutdown();
 8001cd2:	f002 fdd7 	bl	8004884 <RadioEnterShutdown>
  SpiritExitShutdown();
 8001cd6:	f002 fde0 	bl	800489a <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 8001cda:	f000 fef3 	bl	8002ac4 <SpiritManagementWaExtraCurrent>

  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 8001cde:	2300      	movs	r3, #0
 8001ce0:	70fb      	strb	r3, [r7, #3]
 8001ce2:	e004      	b.n	8001cee <SPSGRF_Init+0x26>
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	70fb      	strb	r3, [r7, #3]
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2bff      	cmp	r3, #255	; 0xff
 8001cf4:	d1f6      	bne.n	8001ce4 <SPSGRF_Init+0x1c>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 8001cf6:	f002 fc2b 	bl	8004550 <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 8001cfa:	4b4b      	ldr	r3, [pc, #300]	; (8001e28 <SPSGRF_Init+0x160>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d1ea      	bne.n	8001cde <SPSGRF_Init+0x16>

  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 8001d0c:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <SPSGRF_Init+0x164>)
 8001d0e:	643b      	str	r3, [r7, #64]	; 0x40
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 8001d10:	4b47      	ldr	r3, [pc, #284]	; (8001e30 <SPSGRF_Init+0x168>)
 8001d12:	647b      	str	r3, [r7, #68]	; 0x44
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  xRadioInit.lDatarate = DATARATE;
 8001d20:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001d24:	64fb      	str	r3, [r7, #76]	; 0x4c
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 8001d26:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001d2a:	653b      	str	r3, [r7, #80]	; 0x50
  xRadioInit.lBandwidth = BANDWIDTH;
 8001d2c:	4b40      	ldr	r3, [pc, #256]	; (8001e30 <SPSGRF_Init+0x168>)
 8001d2e:	657b      	str	r3, [r7, #84]	; 0x54
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 8001d30:	4840      	ldr	r0, [pc, #256]	; (8001e34 <SPSGRF_Init+0x16c>)
 8001d32:	f002 fb9b 	bl	800446c <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 8001d36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f001 f9e8 	bl	8003110 <SpiritRadioInit>

  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 8001d40:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8001e38 <SPSGRF_Init+0x170>
 8001d44:	2007      	movs	r0, #7
 8001d46:	f002 fa2d 	bl	80041a4 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 8001d4a:	2007      	movs	r0, #7
 8001d4c:	f002 fa80 	bl	8004250 <SpiritRadioSetPALevelMaxIndex>
	PktStackInit xSTackInit;
	PktStackAddressesInit xSTackAddress;
	PktStackLlpInit xSTackLlp;

//	xSTackInit.xPreambleLength = PREAMBLE_LENGTH;
	xSTackInit.xPreambleLength = PKT_PREAMBLE_LENGTH_04BYTES;
 8001d50:	2318      	movs	r3, #24
 8001d52:	743b      	strb	r3, [r7, #16]
	xSTackInit.xSyncLength = SYNC_LENGTH;
 8001d54:	2306      	movs	r3, #6
 8001d56:	747b      	strb	r3, [r7, #17]
	xSTackInit.lSyncWords = SYNC_WORD; //double check this one?
 8001d58:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 8001d5c:	617b      	str	r3, [r7, #20]
	xSTackInit.xFixVarLength = LENGTH_TYPE;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	763b      	strb	r3, [r7, #24]
	xSTackInit.cPktLengthWidth = LENGTH_WIDTH;
 8001d62:	2307      	movs	r3, #7
 8001d64:	767b      	strb	r3, [r7, #25]
	xSTackInit.xCrcMode = CRC_MODE; //todo:set to 8 bit CRC? is this right?
 8001d66:	2320      	movs	r3, #32
 8001d68:	76bb      	strb	r3, [r7, #26]
	xSTackInit.xControlLength = CONTROL_LENGTH;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	76fb      	strb	r3, [r7, #27]
	xSTackInit.xFec = S_DISABLE; //todo: what is FEN?
 8001d6e:	2300      	movs	r3, #0
 8001d70:	773b      	strb	r3, [r7, #28]
	xSTackInit.xDataWhitening = EN_WHITENING;
 8001d72:	2301      	movs	r3, #1
 8001d74:	777b      	strb	r3, [r7, #29]
	SpiritPktStackInit(&xSTackInit);
 8001d76:	f107 0310 	add.w	r3, r7, #16
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 ff7e 	bl	8002c7c <SpiritPktStackInit>

	xSTackAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 8001d80:	2301      	movs	r3, #1
 8001d82:	723b      	strb	r3, [r7, #8]
	xSTackAddress.cMyAddress = MY_ADDRESS;
 8001d84:	23b0      	movs	r3, #176	; 0xb0
 8001d86:	727b      	strb	r3, [r7, #9]
	xSTackAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	72bb      	strb	r3, [r7, #10]
	xSTackAddress.cMulticastAddress = MULTICAST_ADDRESS;
 8001d8c:	23ee      	movs	r3, #238	; 0xee
 8001d8e:	72fb      	strb	r3, [r7, #11]
	xSTackAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 8001d90:	2301      	movs	r3, #1
 8001d92:	733b      	strb	r3, [r7, #12]
	xSTackAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 8001d94:	23ff      	movs	r3, #255	; 0xff
 8001d96:	737b      	strb	r3, [r7, #13]
	SpiritPktStackAddressesInit(&xSTackAddress);
 8001d98:	f107 0308 	add.w	r3, r7, #8
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f001 f83d 	bl	8002e1c <SpiritPktStackAddressesInit>

	xSTackLlp.xAutoAck = S_DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	713b      	strb	r3, [r7, #4]
	xSTackLlp.xPiggybacking = S_ENABLE;
 8001da6:	2301      	movs	r3, #1
 8001da8:	717b      	strb	r3, [r7, #5]
	xSTackLlp.xNMaxRetx = PKT_DISABLE_RETX; //todo?
 8001daa:	2300      	movs	r3, #0
 8001dac:	71bb      	strb	r3, [r7, #6]

	SpiritPktStackLlpInit(&xSTackLlp);
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	4618      	mov	r0, r3
 8001db2:	f001 f8a1 	bl	8002ef8 <SpiritPktStackLlpInit>




  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 8001db6:	2302      	movs	r3, #2
 8001db8:	f887 3020 	strb.w	r3, [r7, #32]
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  SpiritGpioInit(&xGpioInit);
 8001dc8:	f107 0320 	add.w	r3, r7, #32
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 fb33 	bl	8002438 <SpiritGpioInit>

  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f000 fb54 	bl	8002480 <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 8001dd8:	2101      	movs	r1, #1
 8001dda:	2004      	movs	r0, #4
 8001ddc:	f000 fb7c 	bl	80024d8 <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 8001de0:	2101      	movs	r1, #1
 8001de2:	2001      	movs	r0, #1
 8001de4:	f000 fb78 	bl	80024d8 <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 8001de8:	2101      	movs	r1, #1
 8001dea:	2002      	movs	r0, #2
 8001dec:	f000 fb74 	bl	80024d8 <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 8001df0:	2101      	movs	r1, #1
 8001df2:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001df6:	f000 fb6f 	bl	80024d8 <SpiritIrq>
  SpiritIrqClearStatus();
 8001dfa:	f000 fc05 	bl	8002608 <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f001 f932 	bl	8003068 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 8001e04:	2001      	movs	r0, #1
 8001e06:	f001 f8f7 	bl	8002ff8 <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8001e0a:	f06f 0077 	mvn.w	r0, #119	; 0x77
 8001e0e:	f001 f95f 	bl	80030d0 <SpiritQiSetRssiThresholddBm>

  // Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
  SpiritTimerSetRxTimeoutMs(RECEIVE_TIMEOUT);
#else
  SET_INFINITE_RX_TIMEOUT();
 8001e12:	2000      	movs	r0, #0
 8001e14:	f002 fb3a 	bl	800448c <SpiritTimerSetRxTimeoutCounter>
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 8001e18:	2002      	movs	r0, #2
 8001e1a:	f002 fb51 	bl	80044c0 <SpiritTimerSetRxTimeoutStopCondition>
}
 8001e1e:	bf00      	nop
 8001e20:	3758      	adds	r7, #88	; 0x58
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200029c8 	.word	0x200029c8
 8001e2c:	3689cac0 	.word	0x3689cac0
 8001e30:	000186a0 	.word	0x000186a0
 8001e34:	02faf080 	.word	0x02faf080
 8001e38:	4139999a 	.word	0x4139999a

08001e3c <SPSGRF_StartTx>:
* @param  txBuff: pointer to the data to transmit
* @param  txLen: number of bytes to transmit
* @retval None
*/
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	70fb      	strb	r3, [r7, #3]
  // flush the TX FIFO
  SpiritCmdStrobeFlushTxFifo();
 8001e48:	2072      	movs	r0, #114	; 0x72
 8001e4a:	f000 fadd 	bl	8002408 <SpiritCmdStrobeCommand>

  // Avoid TX FIFO overflow
  txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	2b60      	cmp	r3, #96	; 0x60
 8001e52:	bf28      	it	cs
 8001e54:	2360      	movcs	r3, #96	; 0x60
 8001e56:	70fb      	strb	r3, [r7, #3]

  // start TX operation
  SpiritSpiWriteLinearFifo(txLen, txBuff);
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f002 fc81 	bl	8004764 <RadioSpiWriteFifo>
  SpiritPktStackSetPayloadLength(txLen);
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f001 f898 	bl	8002f9c <SpiritPktStackSetPayloadLength>
  SpiritCmdStrobeTx();
 8001e6c:	f000 fdc2 	bl	80029f4 <SpiritManagementWaCmdStrobeTx>
 8001e70:	2060      	movs	r0, #96	; 0x60
 8001e72:	f000 fac9 	bl	8002408 <SpiritCmdStrobeCommand>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <SPSGRF_StartRx>:
* @brief  Enter the receive state.
* @param  None
* @retval None
*/
void SPSGRF_StartRx(void)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	af00      	add	r7, sp, #0
  SpiritCmdStrobeRx();
 8001e82:	f000 fdef 	bl	8002a64 <SpiritManagementWaCmdStrobeRx>
 8001e86:	2061      	movs	r0, #97	; 0x61
 8001e88:	f000 fabe 	bl	8002408 <SpiritCmdStrobeCommand>
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <SPSGRF_GetRxData>:
* @brief  To be called after a reception is complete
* @param  rxBuff: pointer to a buffer to hold the received data
* @retval Number of bytes received
*/
uint8_t SPSGRF_GetRxData(uint8_t *rxBuff)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint8_t len;

  len = SpiritLinearFifoReadNumElementsRxFifo();
 8001e98:	f000 fbce 	bl	8002638 <SpiritLinearFifoReadNumElementsRxFifo>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	73fb      	strb	r3, [r7, #15]
  SpiritSpiReadLinearFifo(len, rxBuff);
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f002 fca5 	bl	80047f4 <RadioSpiReadFifo>

  return len;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <HAL_MspInit+0x4c>)
 8001ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ebe:	4a10      	ldr	r2, [pc, #64]	; (8001f00 <HAL_MspInit+0x4c>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_MspInit+0x4c>)
 8001ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_MspInit+0x4c>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_MspInit+0x4c>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001edc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_MspInit+0x4c>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	210f      	movs	r1, #15
 8001eee:	f06f 0001 	mvn.w	r0, #1
 8001ef2:	f002 fdf1 	bl	8004ad8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000

08001f04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08c      	sub	sp, #48	; 0x30
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001f12:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <HAL_InitTick+0xc8>)
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	4a2d      	ldr	r2, [pc, #180]	; (8001fcc <HAL_InitTick+0xc8>)
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f1e:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <HAL_InitTick+0xc8>)
 8001f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f2a:	f107 020c 	add.w	r2, r7, #12
 8001f2e:	f107 0310 	add.w	r3, r7, #16
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f003 fde5 	bl	8005b04 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f3a:	f003 fdcd 	bl	8005ad8 <HAL_RCC_GetPCLK2Freq>
 8001f3e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f42:	4a23      	ldr	r2, [pc, #140]	; (8001fd0 <HAL_InitTick+0xcc>)
 8001f44:	fba2 2303 	umull	r2, r3, r2, r3
 8001f48:	0c9b      	lsrs	r3, r3, #18
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001f4e:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <HAL_InitTick+0xd0>)
 8001f50:	4a21      	ldr	r2, [pc, #132]	; (8001fd8 <HAL_InitTick+0xd4>)
 8001f52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001f54:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <HAL_InitTick+0xd0>)
 8001f56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f5a:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001f5c:	4a1d      	ldr	r2, [pc, #116]	; (8001fd4 <HAL_InitTick+0xd0>)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_InitTick+0xd0>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <HAL_InitTick+0xd0>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6e:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <HAL_InitTick+0xd0>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8001f74:	4817      	ldr	r0, [pc, #92]	; (8001fd4 <HAL_InitTick+0xd0>)
 8001f76:	f005 fa41 	bl	80073fc <HAL_TIM_Base_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001f80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d11b      	bne.n	8001fc0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8001f88:	4812      	ldr	r0, [pc, #72]	; (8001fd4 <HAL_InitTick+0xd0>)
 8001f8a:	f005 fa99 	bl	80074c0 <HAL_TIM_Base_Start_IT>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001f94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d111      	bne.n	8001fc0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f9c:	2019      	movs	r0, #25
 8001f9e:	f002 fdb7 	bl	8004b10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b0f      	cmp	r3, #15
 8001fa6:	d808      	bhi.n	8001fba <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	2019      	movs	r0, #25
 8001fae:	f002 fd93 	bl	8004ad8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_InitTick+0xd8>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	e002      	b.n	8001fc0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001fc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3730      	adds	r7, #48	; 0x30
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	431bde83 	.word	0x431bde83
 8001fd4:	200028e8 	.word	0x200028e8
 8001fd8:	40014400 	.word	0x40014400
 8001fdc:	20000350 	.word	0x20000350

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <NMI_Handler+0x4>

08001fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fea:	e7fe      	b.n	8001fea <HardFault_Handler+0x4>

08001fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <MemManage_Handler+0x4>

08001ff2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <BusFault_Handler+0x4>

08001ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <UsageFault_Handler+0x4>

08001ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 8002010:	2080      	movs	r0, #128	; 0x80
 8002012:	f002 ff5b 	bl	8004ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002022:	f005 fabd 	bl	80075a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200028e8 	.word	0x200028e8

08002030 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002034:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002038:	f002 ff48 	bl	8004ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}

08002040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002048:	4a14      	ldr	r2, [pc, #80]	; (800209c <_sbrk+0x5c>)
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <_sbrk+0x60>)
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <_sbrk+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d102      	bne.n	8002062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <_sbrk+0x64>)
 800205e:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <_sbrk+0x68>)
 8002060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <_sbrk+0x64>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	429a      	cmp	r2, r3
 800206e:	d207      	bcs.n	8002080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002070:	f009 fae0 	bl	800b634 <__errno>
 8002074:	4603      	mov	r3, r0
 8002076:	220c      	movs	r2, #12
 8002078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800207a:	f04f 33ff 	mov.w	r3, #4294967295
 800207e:	e009      	b.n	8002094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <_sbrk+0x64>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <_sbrk+0x64>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <_sbrk+0x64>)
 8002090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002092:	68fb      	ldr	r3, [r7, #12]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20018000 	.word	0x20018000
 80020a0:	00000400 	.word	0x00000400
 80020a4:	20002934 	.word	0x20002934
 80020a8:	200044c8 	.word	0x200044c8

080020ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <SystemInit+0x20>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b6:	4a05      	ldr	r2, [pc, #20]	; (80020cc <SystemInit+0x20>)
 80020b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <MX_USART2_UART_Init+0x58>)
 80020d6:	4a15      	ldr	r2, [pc, #84]	; (800212c <MX_USART2_UART_Init+0x5c>)
 80020d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <MX_USART2_UART_Init+0x58>)
 80020dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <MX_USART2_UART_Init+0x58>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_USART2_UART_Init+0x58>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <MX_USART2_UART_Init+0x58>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_USART2_UART_Init+0x58>)
 80020f6:	220c      	movs	r2, #12
 80020f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <MX_USART2_UART_Init+0x58>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <MX_USART2_UART_Init+0x58>)
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <MX_USART2_UART_Init+0x58>)
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_USART2_UART_Init+0x58>)
 800210e:	2200      	movs	r2, #0
 8002110:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002112:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_USART2_UART_Init+0x58>)
 8002114:	f005 fc26 	bl	8007964 <HAL_UART_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800211e:	f7ff fd2f 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20002938 	.word	0x20002938
 800212c:	40004400 	.word	0x40004400

08002130 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b0ac      	sub	sp, #176	; 0xb0
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	2288      	movs	r2, #136	; 0x88
 800214e:	2100      	movs	r1, #0
 8002150:	4618      	mov	r0, r3
 8002152:	f009 fa11 	bl	800b578 <memset>
  if(uartHandle->Instance==USART2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <HAL_UART_MspInit+0xb0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d13b      	bne.n	80021d8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002160:	2302      	movs	r3, #2
 8002162:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002164:	2300      	movs	r3, #0
 8002166:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	4618      	mov	r0, r3
 800216e:	f003 fd5b 	bl	8005c28 <HAL_RCCEx_PeriphCLKConfig>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002178:	f7ff fd02 	bl	8001b80 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_UART_MspInit+0xb4>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <HAL_UART_MspInit+0xb4>)
 8002182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002186:	6593      	str	r3, [r2, #88]	; 0x58
 8002188:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <HAL_UART_MspInit+0xb4>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002194:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HAL_UART_MspInit+0xb4>)
 8002196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002198:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <HAL_UART_MspInit+0xb4>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a0:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <HAL_UART_MspInit+0xb4>)
 80021a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021ac:	230c      	movs	r3, #12
 80021ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021c4:	2307      	movs	r3, #7
 80021c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021ce:	4619      	mov	r1, r3
 80021d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d4:	f002 fcb8 	bl	8004b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021d8:	bf00      	nop
 80021da:	37b0      	adds	r7, #176	; 0xb0
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40004400 	.word	0x40004400
 80021e4:	40021000 	.word	0x40021000

080021e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002220 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021ec:	f7ff ff5e 	bl	80020ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021f0:	480c      	ldr	r0, [pc, #48]	; (8002224 <LoopForever+0x6>)
  ldr r1, =_edata
 80021f2:	490d      	ldr	r1, [pc, #52]	; (8002228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021f4:	4a0d      	ldr	r2, [pc, #52]	; (800222c <LoopForever+0xe>)
  movs r3, #0
 80021f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f8:	e002      	b.n	8002200 <LoopCopyDataInit>

080021fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fe:	3304      	adds	r3, #4

08002200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002204:	d3f9      	bcc.n	80021fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002206:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002208:	4c0a      	ldr	r4, [pc, #40]	; (8002234 <LoopForever+0x16>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800220c:	e001      	b.n	8002212 <LoopFillZerobss>

0800220e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002210:	3204      	adds	r2, #4

08002212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002214:	d3fb      	bcc.n	800220e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002216:	f009 fa13 	bl	800b640 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800221a:	f7ff fa07 	bl	800162c <main>

0800221e <LoopForever>:

LoopForever:
    b LoopForever
 800221e:	e7fe      	b.n	800221e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002220:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002228:	200003ac 	.word	0x200003ac
  ldr r2, =_sidata
 800222c:	0800c690 	.word	0x0800c690
  ldr r2, =_sbss
 8002230:	200003ac 	.word	0x200003ac
  ldr r4, =_ebss
 8002234:	200044c4 	.word	0x200044c4

08002238 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002238:	e7fe      	b.n	8002238 <ADC1_2_IRQHandler>
	...

0800223c <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8002246:	f107 030f 	add.w	r3, r7, #15
 800224a:	461a      	mov	r2, r3
 800224c:	2101      	movs	r1, #1
 800224e:	2050      	movs	r0, #80	; 0x50
 8002250:	f002 f9fc 	bl	800464c <RadioSpiReadRegisters>
 8002254:	4602      	mov	r2, r0
 8002256:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <SpiritCalibrationVco+0x6c>)
 8002258:	b212      	sxth	r2, r2
 800225a:	4611      	mov	r1, r2
 800225c:	7019      	strb	r1, [r3, #0]
 800225e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002262:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d105      	bne.n	8002276 <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	b2db      	uxtb	r3, r3
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	e004      	b.n	8002280 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	f023 0302 	bic.w	r3, r3, #2
 800227c:	b2db      	uxtb	r3, r3
 800227e:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8002280:	f107 030f 	add.w	r3, r7, #15
 8002284:	461a      	mov	r2, r3
 8002286:	2101      	movs	r1, #1
 8002288:	2050      	movs	r0, #80	; 0x50
 800228a:	f002 f993 	bl	80045b4 <RadioSpiWriteRegisters>
 800228e:	4602      	mov	r2, r0
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <SpiritCalibrationVco+0x6c>)
 8002292:	b212      	sxth	r2, r2
 8002294:	4611      	mov	r1, r2
 8002296:	7019      	strb	r1, [r3, #0]
 8002298:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800229c:	705a      	strb	r2, [r3, #1]

}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200029c8 	.word	0x200029c8

080022ac <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 80022b2:	1dfb      	adds	r3, r7, #7
 80022b4:	461a      	mov	r2, r3
 80022b6:	2101      	movs	r1, #1
 80022b8:	20e5      	movs	r0, #229	; 0xe5
 80022ba:	f002 f9c7 	bl	800464c <RadioSpiReadRegisters>
 80022be:	4602      	mov	r2, r0
 80022c0:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <SpiritCalibrationGetVcoCalData+0x34>)
 80022c2:	b212      	sxth	r2, r2
 80022c4:	4611      	mov	r1, r2
 80022c6:	7019      	strb	r1, [r3, #0]
 80022c8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022cc:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022d4:	b2db      	uxtb	r3, r3

}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200029c8 	.word	0x200029c8

080022e4 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 80022ee:	f107 030f 	add.w	r3, r7, #15
 80022f2:	461a      	mov	r2, r3
 80022f4:	2101      	movs	r1, #1
 80022f6:	206e      	movs	r0, #110	; 0x6e
 80022f8:	f002 f9a8 	bl	800464c <RadioSpiReadRegisters>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8002300:	b212      	sxth	r2, r2
 8002302:	4611      	mov	r1, r2
 8002304:	7019      	strb	r1, [r3, #0]
 8002306:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800230a:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002312:	b2db      	uxtb	r3, r3
 8002314:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8002316:	7bfa      	ldrb	r2, [r7, #15]
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	4313      	orrs	r3, r2
 800231c:	b2db      	uxtb	r3, r3
 800231e:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8002320:	f107 030f 	add.w	r3, r7, #15
 8002324:	461a      	mov	r2, r3
 8002326:	2101      	movs	r1, #1
 8002328:	206e      	movs	r0, #110	; 0x6e
 800232a:	f002 f943 	bl	80045b4 <RadioSpiWriteRegisters>
 800232e:	4602      	mov	r2, r0
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8002332:	b212      	sxth	r2, r2
 8002334:	4611      	mov	r1, r2
 8002336:	7019      	strb	r1, [r3, #0]
 8002338:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800233c:	705a      	strb	r2, [r3, #1]

}
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200029c8 	.word	0x200029c8

0800234c <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8002356:	f107 030f 	add.w	r3, r7, #15
 800235a:	461a      	mov	r2, r3
 800235c:	2101      	movs	r1, #1
 800235e:	206f      	movs	r0, #111	; 0x6f
 8002360:	f002 f974 	bl	800464c <RadioSpiReadRegisters>
 8002364:	4602      	mov	r2, r0
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8002368:	b212      	sxth	r2, r2
 800236a:	4611      	mov	r1, r2
 800236c:	7019      	strb	r1, [r3, #0]
 800236e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002372:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800237a:	b2db      	uxtb	r3, r3
 800237c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	4313      	orrs	r3, r2
 8002384:	b2db      	uxtb	r3, r3
 8002386:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8002388:	f107 030f 	add.w	r3, r7, #15
 800238c:	461a      	mov	r2, r3
 800238e:	2101      	movs	r1, #1
 8002390:	206f      	movs	r0, #111	; 0x6f
 8002392:	f002 f90f 	bl	80045b4 <RadioSpiWriteRegisters>
 8002396:	4602      	mov	r2, r0
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 800239a:	b212      	sxth	r2, r2
 800239c:	4611      	mov	r1, r2
 800239e:	7019      	strb	r1, [r3, #0]
 80023a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023a4:	705a      	strb	r2, [r3, #1]

}
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	200029c8 	.word	0x200029c8

080023b4 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80023be:	f107 030f 	add.w	r3, r7, #15
 80023c2:	461a      	mov	r2, r3
 80023c4:	2101      	movs	r1, #1
 80023c6:	209e      	movs	r0, #158	; 0x9e
 80023c8:	f002 f940 	bl	800464c <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	f023 0306 	bic.w	r3, r3, #6
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d105      	bne.n	80023e8 <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	f043 0302 	orr.w	r3, r3, #2
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	73fb      	strb	r3, [r7, #15]
 80023e6:	e004      	b.n	80023f2 <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 80023f2:	f107 030f 	add.w	r3, r7, #15
 80023f6:	461a      	mov	r2, r3
 80023f8:	2101      	movs	r1, #1
 80023fa:	209e      	movs	r0, #158	; 0x9e
 80023fc:	f002 f8da 	bl	80045b4 <RadioSpiWriteRegisters>
  
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	4618      	mov	r0, r3
 8002416:	f002 f965 	bl	80046e4 <RadioSpiCommandStrobes>
 800241a:	4602      	mov	r2, r0
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <SpiritCmdStrobeCommand+0x2c>)
 800241e:	b212      	sxth	r2, r2
 8002420:	4611      	mov	r1, r2
 8002422:	7019      	strb	r1, [r3, #0]
 8002424:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002428:	705a      	strb	r2, [r3, #1]
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200029c8 	.word	0x200029c8

08002438 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8002440:	2300      	movs	r3, #0
 8002442:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	785a      	ldrb	r2, [r3, #1]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	789b      	ldrb	r3, [r3, #2]
 800244c:	4313      	orrs	r3, r2
 800244e:	b2db      	uxtb	r3, r3
 8002450:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	f107 020f 	add.w	r2, r7, #15
 800245a:	2101      	movs	r1, #1
 800245c:	4618      	mov	r0, r3
 800245e:	f002 f8a9 	bl	80045b4 <RadioSpiWriteRegisters>
 8002462:	4602      	mov	r2, r0
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <SpiritGpioInit+0x44>)
 8002466:	b212      	sxth	r2, r2
 8002468:	4611      	mov	r1, r2
 800246a:	7019      	strb	r1, [r3, #0]
 800246c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002470:	705a      	strb	r2, [r3, #1]

}
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200029c8 	.word	0x200029c8

08002480 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00c      	beq.n	80024ac <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 8002492:	f107 0308 	add.w	r3, r7, #8
 8002496:	2204      	movs	r2, #4
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f009 f86c 	bl	800b578 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	461a      	mov	r2, r3
 80024a4:	f107 0308 	add.w	r3, r7, #8
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 80024ac:	f107 030c 	add.w	r3, r7, #12
 80024b0:	461a      	mov	r2, r3
 80024b2:	2104      	movs	r1, #4
 80024b4:	2090      	movs	r0, #144	; 0x90
 80024b6:	f002 f87d 	bl	80045b4 <RadioSpiWriteRegisters>
 80024ba:	4602      	mov	r2, r0
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <SpiritIrqDeInit+0x54>)
 80024be:	b212      	sxth	r2, r2
 80024c0:	4611      	mov	r1, r2
 80024c2:	7019      	strb	r1, [r3, #0]
 80024c4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80024c8:	705a      	strb	r2, [r3, #1]
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	200029c8 	.word	0x200029c8

080024d8 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 80024e8:	f107 030c 	add.w	r3, r7, #12
 80024ec:	461a      	mov	r2, r3
 80024ee:	2104      	movs	r1, #4
 80024f0:	2090      	movs	r0, #144	; 0x90
 80024f2:	f002 f8ab 	bl	800464c <RadioSpiReadRegisters>
 80024f6:	4602      	mov	r2, r0
 80024f8:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <SpiritIrq+0xc8>)
 80024fa:	b212      	sxth	r2, r2
 80024fc:	4611      	mov	r1, r2
 80024fe:	7019      	strb	r1, [r3, #0]
 8002500:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002504:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8002506:	2300      	movs	r3, #0
 8002508:	74fb      	strb	r3, [r7, #19]
 800250a:	e011      	b.n	8002530 <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 800250c:	7cfb      	ldrb	r3, [r7, #19]
 800250e:	3318      	adds	r3, #24
 8002510:	443b      	add	r3, r7
 8002512:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002516:	461a      	mov	r2, r3
 8002518:	7cfb      	ldrb	r3, [r7, #19]
 800251a:	f1c3 0303 	rsb	r3, r3, #3
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	4413      	add	r3, r2
 8002528:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	3301      	adds	r3, #1
 800252e:	74fb      	strb	r3, [r7, #19]
 8002530:	7cfb      	ldrb	r3, [r7, #19]
 8002532:	2b03      	cmp	r3, #3
 8002534:	d9ea      	bls.n	800250c <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d105      	bne.n	8002548 <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	43db      	mvns	r3, r3
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	4013      	ands	r3, r2
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	e003      	b.n	8002550 <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4313      	orrs	r3, r2
 800254e:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8002550:	2300      	movs	r3, #0
 8002552:	74bb      	strb	r3, [r7, #18]
 8002554:	e00e      	b.n	8002574 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 8002556:	7cbb      	ldrb	r3, [r7, #18]
 8002558:	f1c3 0303 	rsb	r3, r3, #3
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	40da      	lsrs	r2, r3
 8002562:	7cbb      	ldrb	r3, [r7, #18]
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	3318      	adds	r3, #24
 8002568:	443b      	add	r3, r7
 800256a:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 800256e:	7cbb      	ldrb	r3, [r7, #18]
 8002570:	3301      	adds	r3, #1
 8002572:	74bb      	strb	r3, [r7, #18]
 8002574:	7cbb      	ldrb	r3, [r7, #18]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d9ed      	bls.n	8002556 <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 800257a:	f107 030c 	add.w	r3, r7, #12
 800257e:	461a      	mov	r2, r3
 8002580:	2104      	movs	r1, #4
 8002582:	2090      	movs	r0, #144	; 0x90
 8002584:	f002 f816 	bl	80045b4 <RadioSpiWriteRegisters>
 8002588:	4602      	mov	r2, r0
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <SpiritIrq+0xc8>)
 800258c:	b212      	sxth	r2, r2
 800258e:	4611      	mov	r1, r2
 8002590:	7019      	strb	r1, [r3, #0]
 8002592:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002596:	705a      	strb	r2, [r3, #1]

}
 8002598:	bf00      	nop
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200029c8 	.word	0x200029c8

080025a4 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	461a      	mov	r2, r3
 80025b6:	2104      	movs	r1, #4
 80025b8:	20fa      	movs	r0, #250	; 0xfa
 80025ba:	f002 f847 	bl	800464c <RadioSpiReadRegisters>
 80025be:	4602      	mov	r2, r0
 80025c0:	4b10      	ldr	r3, [pc, #64]	; (8002604 <SpiritIrqGetStatus+0x60>)
 80025c2:	b212      	sxth	r2, r2
 80025c4:	4611      	mov	r1, r2
 80025c6:	7019      	strb	r1, [r3, #0]
 80025c8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025cc:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	74fb      	strb	r3, [r7, #19]
 80025d2:	e00e      	b.n	80025f2 <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 80025d4:	7cfb      	ldrb	r3, [r7, #19]
 80025d6:	f1c3 0303 	rsb	r3, r3, #3
 80025da:	3318      	adds	r3, #24
 80025dc:	443b      	add	r3, r7
 80025de:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3301      	adds	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	3301      	adds	r3, #1
 80025f0:	74fb      	strb	r3, [r7, #19]
 80025f2:	7cfb      	ldrb	r3, [r7, #19]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d9ed      	bls.n	80025d4 <SpiritIrqGetStatus+0x30>
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200029c8 	.word	0x200029c8

08002608 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 800260e:	1d3b      	adds	r3, r7, #4
 8002610:	461a      	mov	r2, r3
 8002612:	2104      	movs	r1, #4
 8002614:	20fa      	movs	r0, #250	; 0xfa
 8002616:	f002 f819 	bl	800464c <RadioSpiReadRegisters>
 800261a:	4602      	mov	r2, r0
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <SpiritIrqClearStatus+0x2c>)
 800261e:	b212      	sxth	r2, r2
 8002620:	4611      	mov	r1, r2
 8002622:	7019      	strb	r1, [r3, #0]
 8002624:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002628:	705a      	strb	r2, [r3, #1]

}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200029c8 	.word	0x200029c8

08002638 <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 800263e:	1dfb      	adds	r3, r7, #7
 8002640:	461a      	mov	r2, r3
 8002642:	2101      	movs	r1, #1
 8002644:	20e7      	movs	r0, #231	; 0xe7
 8002646:	f002 f801 	bl	800464c <RadioSpiReadRegisters>
 800264a:	4602      	mov	r2, r0
 800264c:	4b07      	ldr	r3, [pc, #28]	; (800266c <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 800264e:	b212      	sxth	r2, r2
 8002650:	4611      	mov	r1, r2
 8002652:	7019      	strb	r1, [r3, #0]
 8002654:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002658:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002660:	b2db      	uxtb	r3, r3

}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	200029c8 	.word	0x200029c8

08002670 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8002670:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002674:	b08a      	sub	sp, #40	; 0x28
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a70      	ldr	r2, [pc, #448]	; (8002840 <SpiritManagementSetFrequencyBase+0x1d0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d307      	bcc.n	8002692 <SpiritManagementSetFrequencyBase+0x22>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a6f      	ldr	r2, [pc, #444]	; (8002844 <SpiritManagementSetFrequencyBase+0x1d4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d803      	bhi.n	8002692 <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 800268a:	2300      	movs	r3, #0
 800268c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002690:	e01a      	b.n	80026c8 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a6c      	ldr	r2, [pc, #432]	; (8002848 <SpiritManagementSetFrequencyBase+0x1d8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d907      	bls.n	80026aa <SpiritManagementSetFrequencyBase+0x3a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a6b      	ldr	r2, [pc, #428]	; (800284c <SpiritManagementSetFrequencyBase+0x1dc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d803      	bhi.n	80026aa <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80026a8:	e00e      	b.n	80026c8 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a68      	ldr	r2, [pc, #416]	; (8002850 <SpiritManagementSetFrequencyBase+0x1e0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d907      	bls.n	80026c2 <SpiritManagementSetFrequencyBase+0x52>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a67      	ldr	r2, [pc, #412]	; (8002854 <SpiritManagementSetFrequencyBase+0x1e4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d803      	bhi.n	80026c2 <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 80026ba:	2302      	movs	r3, #2
 80026bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80026c0:	e002      	b.n	80026c8 <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 80026c2:	2303      	movs	r3, #3
 80026c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 80026c8:	f001 f860 	bl	800378c <SpiritRadioGetFrequencyOffset>
 80026cc:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 80026ce:	f001 f83d 	bl	800374c <SpiritRadioGetChannelSpace>
 80026d2:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 80026d4:	f001 f822 	bl	800371c <SpiritRadioGetChannel>
 80026d8:	4603      	mov	r3, r0
 80026da:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80026dc:	6a3a      	ldr	r2, [r7, #32]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	441a      	add	r2, r3
 80026e2:	7efb      	ldrb	r3, [r7, #27]
 80026e4:	69f9      	ldr	r1, [r7, #28]
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80026ee:	f001 fe3d 	bl	800436c <SpiritRadioGetRefDiv>
 80026f2:	4603      	mov	r3, r0
 80026f4:	3301      	adds	r3, #1
 80026f6:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 80026f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d83a      	bhi.n	8002776 <SpiritManagementSetFrequencyBase+0x106>
 8002700:	a201      	add	r2, pc, #4	; (adr r2, 8002708 <SpiritManagementSetFrequencyBase+0x98>)
 8002702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002706:	bf00      	nop
 8002708:	08002761 	.word	0x08002761
 800270c:	08002749 	.word	0x08002749
 8002710:	08002731 	.word	0x08002731
 8002714:	08002719 	.word	0x08002719
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	4a4f      	ldr	r2, [pc, #316]	; (8002858 <SpiritManagementSetFrequencyBase+0x1e8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d803      	bhi.n	8002728 <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002720:	2000      	movs	r0, #0
 8002722:	f7ff fe47 	bl	80023b4 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002726:	e026      	b.n	8002776 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002728:	2001      	movs	r0, #1
 800272a:	f7ff fe43 	bl	80023b4 <SpiritCalibrationSelectVco>
    break;
 800272e:	e022      	b.n	8002776 <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	4a4a      	ldr	r2, [pc, #296]	; (800285c <SpiritManagementSetFrequencyBase+0x1ec>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d803      	bhi.n	8002740 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002738:	2000      	movs	r0, #0
 800273a:	f7ff fe3b 	bl	80023b4 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800273e:	e01a      	b.n	8002776 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002740:	2001      	movs	r0, #1
 8002742:	f7ff fe37 	bl	80023b4 <SpiritCalibrationSelectVco>
    break;
 8002746:	e016      	b.n	8002776 <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	4a45      	ldr	r2, [pc, #276]	; (8002860 <SpiritManagementSetFrequencyBase+0x1f0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d803      	bhi.n	8002758 <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002750:	2000      	movs	r0, #0
 8002752:	f7ff fe2f 	bl	80023b4 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002756:	e00e      	b.n	8002776 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002758:	2001      	movs	r0, #1
 800275a:	f7ff fe2b 	bl	80023b4 <SpiritCalibrationSelectVco>
    break;
 800275e:	e00a      	b.n	8002776 <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	4a40      	ldr	r2, [pc, #256]	; (8002864 <SpiritManagementSetFrequencyBase+0x1f4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d803      	bhi.n	8002770 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002768:	2000      	movs	r0, #0
 800276a:	f7ff fe23 	bl	80023b4 <SpiritCalibrationSelectVco>
 800276e:	e002      	b.n	8002776 <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8002770:	2001      	movs	r0, #1
 8002772:	f7ff fe1f 	bl	80023b4 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8002776:	6978      	ldr	r0, [r7, #20]
 8002778:	f000 fee8 	bl	800354c <SpiritRadioSearchWCP>
 800277c:	4603      	mov	r3, r0
 800277e:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7fd febf 	bl	8000504 <__aeabi_ui2d>
 8002786:	4604      	mov	r4, r0
 8002788:	460d      	mov	r5, r1
 800278a:	7cfb      	ldrb	r3, [r7, #19]
 800278c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002790:	4935      	ldr	r1, [pc, #212]	; (8002868 <SpiritManagementSetFrequencyBase+0x1f8>)
 8002792:	5c8a      	ldrb	r2, [r1, r2]
 8002794:	fb02 f303 	mul.w	r3, r2, r3
 8002798:	049b      	lsls	r3, r3, #18
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fec2 	bl	8000524 <__aeabi_i2d>
 80027a0:	4680      	mov	r8, r0
 80027a2:	4689      	mov	r9, r1
 80027a4:	f001 fe56 	bl	8004454 <SpiritRadioGetXtalFrequency>
 80027a8:	4603      	mov	r3, r0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fd feaa 	bl	8000504 <__aeabi_ui2d>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4640      	mov	r0, r8
 80027b6:	4649      	mov	r1, r9
 80027b8:	f7fe f848 	bl	800084c <__aeabi_ddiv>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4620      	mov	r0, r4
 80027c2:	4629      	mov	r1, r5
 80027c4:	f7fd ff18 	bl	80005f8 <__aeabi_dmul>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	f7fe f924 	bl	8000a1c <__aeabi_d2uiz>
 80027d4:	4603      	mov	r3, r0
 80027d6:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	0d5b      	lsrs	r3, r3, #21
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	7cbb      	ldrb	r3, [r7, #18]
 80027e6:	015b      	lsls	r3, r3, #5
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	4313      	orrs	r3, r2
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	0b5b      	lsrs	r3, r3, #13
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	b2da      	uxtb	r2, r3
 8002808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800280c:	4917      	ldr	r1, [pc, #92]	; (800286c <SpiritManagementSetFrequencyBase+0x1fc>)
 800280e:	5ccb      	ldrb	r3, [r1, r3]
 8002810:	4313      	orrs	r3, r2
 8002812:	b2db      	uxtb	r3, r3
 8002814:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8002816:	f107 0308 	add.w	r3, r7, #8
 800281a:	461a      	mov	r2, r3
 800281c:	2104      	movs	r1, #4
 800281e:	2008      	movs	r0, #8
 8002820:	f001 fec8 	bl	80045b4 <RadioSpiWriteRegisters>
 8002824:	4602      	mov	r2, r0
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <SpiritManagementSetFrequencyBase+0x200>)
 8002828:	b212      	sxth	r2, r2
 800282a:	4611      	mov	r1, r2
 800282c:	7019      	strb	r1, [r3, #0]
 800282e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002832:	705a      	strb	r2, [r3, #1]
}
 8002834:	bf00      	nop
 8002836:	3728      	adds	r7, #40	; 0x28
 8002838:	46bd      	mov	sp, r7
 800283a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800283e:	bf00      	nop
 8002840:	2e5f5680 	.word	0x2e5f5680
 8002844:	390c2fe0 	.word	0x390c2fe0
 8002848:	1701e47f 	.word	0x1701e47f
 800284c:	1c146a60 	.word	0x1c146a60
 8002850:	11d260bf 	.word	0x11d260bf
 8002854:	14ced7e0 	.word	0x14ced7e0
 8002858:	099cf4e1 	.word	0x099cf4e1
 800285c:	1339e9c3 	.word	0x1339e9c3
 8002860:	19a28d05 	.word	0x19a28d05
 8002864:	33451a0a 	.word	0x33451a0a
 8002868:	0800c3f4 	.word	0x0800c3f4
 800286c:	0800c3f0 	.word	0x0800c3f0
 8002870:	200029c8 	.word	0x200029c8

08002874 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 8002882:	f001 fde7 	bl	8004454 <SpiritRadioGetXtalFrequency>
 8002886:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 8002888:	2300      	movs	r3, #0
 800288a:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4a57      	ldr	r2, [pc, #348]	; (80029ec <SpiritManagementWaVcoCalibration+0x178>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d90f      	bls.n	80028b4 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8002894:	f001 fd6a 	bl	800436c <SpiritRadioGetRefDiv>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10a      	bne.n	80028b4 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 800289e:	2301      	movs	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 80028a2:	f001 f8d5 	bl	8003a50 <SpiritRadioGetFrequencyBase>
 80028a6:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 80028a8:	2001      	movs	r0, #1
 80028aa:	f001 fd2f 	bl	800430c <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff fede 	bl	8002670 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 80028b4:	f001 f8cc 	bl	8003a50 <SpiritRadioGetFrequencyBase>
 80028b8:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 80028ba:	2325      	movs	r3, #37	; 0x25
 80028bc:	707b      	strb	r3, [r7, #1]
 80028be:	1c7b      	adds	r3, r7, #1
 80028c0:	461a      	mov	r2, r3
 80028c2:	2101      	movs	r1, #1
 80028c4:	20a1      	movs	r0, #161	; 0xa1
 80028c6:	f001 fe75 	bl	80045b4 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 80028ca:	2001      	movs	r0, #1
 80028cc:	f7ff fcb6 	bl	800223c <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 80028d0:	f001 fe3e 	bl	8004550 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 80028d4:	4b46      	ldr	r3, [pc, #280]	; (80029f0 <SpiritManagementWaVcoCalibration+0x17c>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b40      	cmp	r3, #64	; 0x40
 80028e0:	d10d      	bne.n	80028fe <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 80028e2:	2301      	movs	r3, #1
 80028e4:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 80028e6:	2062      	movs	r0, #98	; 0x62
 80028e8:	f7ff fd8e 	bl	8002408 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 80028ec:	f001 fe30 	bl	8004550 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80028f0:	4b3f      	ldr	r3, [pc, #252]	; (80029f0 <SpiritManagementWaVcoCalibration+0x17c>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d1f6      	bne.n	80028ec <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 80028fe:	2066      	movs	r0, #102	; 0x66
 8002900:	f7ff fd82 	bl	8002408 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002904:	2300      	movs	r3, #0
 8002906:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002908:	f001 fe22 	bl	8004550 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 800290c:	4b38      	ldr	r3, [pc, #224]	; (80029f0 <SpiritManagementWaVcoCalibration+0x17c>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b13      	cmp	r3, #19
 8002918:	d106      	bne.n	8002928 <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 800291a:	7b7b      	ldrb	r3, [r7, #13]
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	737a      	strb	r2, [r7, #13]
 8002920:	2b05      	cmp	r3, #5
 8002922:	d101      	bne.n	8002928 <SpiritManagementWaVcoCalibration+0xb4>
 8002924:	2301      	movs	r3, #1
 8002926:	e05d      	b.n	80029e4 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002928:	4b31      	ldr	r3, [pc, #196]	; (80029f0 <SpiritManagementWaVcoCalibration+0x17c>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b0f      	cmp	r3, #15
 8002934:	d1e8      	bne.n	8002908 <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 8002936:	f7ff fcb9 	bl	80022ac <SpiritCalibrationGetVcoCalData>
 800293a:	4603      	mov	r3, r0
 800293c:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 800293e:	2062      	movs	r0, #98	; 0x62
 8002940:	f7ff fd62 	bl	8002408 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002944:	f001 fe04 	bl	8004550 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8002948:	4b29      	ldr	r3, [pc, #164]	; (80029f0 <SpiritManagementWaVcoCalibration+0x17c>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b03      	cmp	r3, #3
 8002954:	d1f6      	bne.n	8002944 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 8002956:	2065      	movs	r0, #101	; 0x65
 8002958:	f7ff fd56 	bl	8002408 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 800295c:	2300      	movs	r3, #0
 800295e:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002960:	f001 fdf6 	bl	8004550 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002964:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <SpiritManagementWaVcoCalibration+0x17c>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b13      	cmp	r3, #19
 8002970:	d106      	bne.n	8002980 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 8002972:	7b7b      	ldrb	r3, [r7, #13]
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	737a      	strb	r2, [r7, #13]
 8002978:	2b05      	cmp	r3, #5
 800297a:	d101      	bne.n	8002980 <SpiritManagementWaVcoCalibration+0x10c>
 800297c:	2301      	movs	r3, #1
 800297e:	e031      	b.n	80029e4 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002980:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <SpiritManagementWaVcoCalibration+0x17c>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b0f      	cmp	r3, #15
 800298c:	d1e8      	bne.n	8002960 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 800298e:	f7ff fc8d 	bl	80022ac <SpiritCalibrationGetVcoCalData>
 8002992:	4603      	mov	r3, r0
 8002994:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 8002996:	2062      	movs	r0, #98	; 0x62
 8002998:	f7ff fd36 	bl	8002408 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 800299c:	f001 fdd8 	bl	8004550 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 80029a0:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <SpiritManagementWaVcoCalibration+0x17c>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d1f6      	bne.n	800299c <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 80029ae:	7bbb      	ldrb	r3, [r7, #14]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d102      	bne.n	80029ba <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 80029b4:	2063      	movs	r0, #99	; 0x63
 80029b6:	f7ff fd27 	bl	8002408 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 80029ba:	2000      	movs	r0, #0
 80029bc:	f7ff fc3e 	bl	800223c <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 80029c6:	2000      	movs	r0, #0
 80029c8:	f001 fca0 	bl	800430c <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff fe4f 	bl	8002670 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fc85 	bl	80022e4 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 80029da:	78bb      	ldrb	r3, [r7, #2]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fcb5 	bl	800234c <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	01c9c380 	.word	0x01c9c380
 80029f0:	200029c8 	.word	0x200029c8

080029f4 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <SpiritManagementWaCmdStrobeTx+0x60>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d023      	beq.n	8002a4c <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 8002a04:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <SpiritManagementWaCmdStrobeTx+0x64>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <SpiritManagementWaCmdStrobeTx+0x68>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d908      	bls.n	8002a20 <SpiritManagementWaCmdStrobeTx+0x2c>
 8002a0e:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <SpiritManagementWaCmdStrobeTx+0x64>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <SpiritManagementWaCmdStrobeTx+0x6c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d803      	bhi.n	8002a20 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 8002a18:	20c0      	movs	r0, #192	; 0xc0
 8002a1a:	f001 fbed 	bl	80041f8 <SpiritRadioSetPACwc>
 8002a1e:	e002      	b.n	8002a26 <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f001 fbe9 	bl	80041f8 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 8002a26:	2311      	movs	r3, #17
 8002a28:	71fb      	strb	r3, [r7, #7]
 8002a2a:	1dfb      	adds	r3, r7, #7
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2101      	movs	r1, #1
 8002a30:	20a9      	movs	r0, #169	; 0xa9
 8002a32:	f001 fdbf 	bl	80045b4 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 8002a36:	2320      	movs	r3, #32
 8002a38:	71fb      	strb	r3, [r7, #7]
 8002a3a:	1dfb      	adds	r3, r7, #7
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2101      	movs	r1, #1
 8002a40:	20a5      	movs	r0, #165	; 0xa5
 8002a42:	f001 fdb7 	bl	80045b4 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 8002a46:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <SpiritManagementWaCmdStrobeTx+0x60>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000348 	.word	0x20000348
 8002a58:	200029c0 	.word	0x200029c0
 8002a5c:	08f0d17f 	.word	0x08f0d17f
 8002a60:	1c03a180 	.word	0x1c03a180

08002a64 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d00d      	beq.n	8002a90 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 8002a74:	2398      	movs	r3, #152	; 0x98
 8002a76:	71fb      	strb	r3, [r7, #7]
 8002a78:	1dfb      	adds	r3, r7, #7
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	20a5      	movs	r0, #165	; 0xa5
 8002a80:	f001 fd98 	bl	80045b4 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8002a84:	2000      	movs	r0, #0
 8002a86:	f001 fbb7 	bl	80041f8 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 8002a8a:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
  }
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000348 	.word	0x20000348

08002a9c <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <SpiritManagementWaTRxFcMem+0x20>)
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 8002aaa:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <SpiritManagementWaTRxFcMem+0x24>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6013      	str	r3, [r2, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	20000348 	.word	0x20000348
 8002ac0:	200029c0 	.word	0x200029c0

08002ac4 <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 8002aca:	23ca      	movs	r3, #202	; 0xca
 8002acc:	71fb      	strb	r3, [r7, #7]
 8002ace:	1dfb      	adds	r3, r7, #7
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	20b2      	movs	r0, #178	; 0xb2
 8002ad6:	f001 fd6d 	bl	80045b4 <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8002ada:	2304      	movs	r3, #4
 8002adc:	71fb      	strb	r3, [r7, #7]
 8002ade:	1dfb      	adds	r3, r7, #7
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	20a8      	movs	r0, #168	; 0xa8
 8002ae6:	f001 fd65 	bl	80045b4 <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 8002aea:	1dfb      	adds	r3, r7, #7
 8002aec:	461a      	mov	r2, r3
 8002aee:	2101      	movs	r1, #1
 8002af0:	20a8      	movs	r0, #168	; 0xa8
 8002af2:	f001 fdab 	bl	800464c <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8002af6:	2300      	movs	r3, #0
 8002af8:	71fb      	strb	r3, [r7, #7]
 8002afa:	1dfb      	adds	r3, r7, #7
 8002afc:	461a      	mov	r2, r3
 8002afe:	2101      	movs	r1, #1
 8002b00:	20a8      	movs	r0, #168	; 0xa8
 8002b02:	f001 fd57 	bl	80045b4 <RadioSpiWriteRegisters>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002b16:	1dfb      	adds	r3, r7, #7
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	2030      	movs	r0, #48	; 0x30
 8002b1e:	f001 fd95 	bl	800464c <RadioSpiReadRegisters>
 8002b22:	4602      	mov	r2, r0
 8002b24:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <SpiritPktCommonGetControlLength+0x34>)
 8002b26:	b212      	sxth	r2, r2
 8002b28:	4611      	mov	r1, r2
 8002b2a:	7019      	strb	r1, [r3, #0]
 8002b2c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b30:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	b2db      	uxtb	r3, r3

}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200029c8 	.word	0x200029c8

08002b48 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002b52:	f107 030f 	add.w	r3, r7, #15
 8002b56:	461a      	mov	r2, r3
 8002b58:	2101      	movs	r1, #1
 8002b5a:	204f      	movs	r0, #79	; 0x4f
 8002b5c:	f001 fd76 	bl	800464c <RadioSpiReadRegisters>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002b64:	b212      	sxth	r2, r2
 8002b66:	4611      	mov	r1, r2
 8002b68:	7019      	strb	r1, [r3, #0]
 8002b6a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b6e:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d105      	bne.n	8002b82 <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	e004      	b.n	8002b8c <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002b8c:	f107 030f 	add.w	r3, r7, #15
 8002b90:	461a      	mov	r2, r3
 8002b92:	2101      	movs	r1, #1
 8002b94:	204f      	movs	r0, #79	; 0x4f
 8002b96:	f001 fd0d 	bl	80045b4 <RadioSpiWriteRegisters>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002b9e:	b212      	sxth	r2, r2
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	7019      	strb	r1, [r3, #0]
 8002ba4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ba8:	705a      	strb	r2, [r3, #1]

}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200029c8 	.word	0x200029c8

08002bb8 <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8002bc2:	1dfb      	adds	r3, r7, #7
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	204b      	movs	r0, #75	; 0x4b
 8002bca:	f001 fcf3 	bl	80045b4 <RadioSpiWriteRegisters>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <SpiritPktCommonSetDestinationAddress+0x30>)
 8002bd2:	b212      	sxth	r2, r2
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	7019      	strb	r1, [r3, #0]
 8002bd8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bdc:	705a      	strb	r2, [r3, #1]

}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	200029c8 	.word	0x200029c8

08002bec <SpiritPktCommonGetBroadcastAddress>:
 * @brief  Returns the broadcast address.
 * @param  None.
 * @retval uint8_t Broadcast address.
 */
uint8_t SpiritPktCommonGetBroadcastAddress(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads value on the PCKT_FLT_GOALS_BROADCAST register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 1, &tempRegValue);
 8002bf2:	1dfb      	adds	r3, r7, #7
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	204c      	movs	r0, #76	; 0x4c
 8002bfa:	f001 fd27 	bl	800464c <RadioSpiReadRegisters>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <SpiritPktCommonGetBroadcastAddress+0x2c>)
 8002c02:	b212      	sxth	r2, r2
 8002c04:	4611      	mov	r1, r2
 8002c06:	7019      	strb	r1, [r3, #0]
 8002c08:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c0c:	705a      	strb	r2, [r3, #1]

  /* Return value */
  return tempRegValue;
 8002c0e:	79fb      	ldrb	r3, [r7, #7]

}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	200029c8 	.word	0x200029c8

08002c1c <SpiritPktCommonGetReceivedDestAddress>:
 * @brief  Returns the destination address of the received packet.
 * @param  None.
 * @retval uint8_t Destination address of the received address.
 */
uint8_t SpiritPktCommonGetReceivedDestAddress(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD0 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD0_BASE, 1, &tempRegValue);
 8002c22:	1dfb      	adds	r3, r7, #7
 8002c24:	461a      	mov	r2, r3
 8002c26:	2101      	movs	r1, #1
 8002c28:	20d3      	movs	r0, #211	; 0xd3
 8002c2a:	f001 fd0f 	bl	800464c <RadioSpiReadRegisters>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <SpiritPktCommonGetReceivedDestAddress+0x2c>)
 8002c32:	b212      	sxth	r2, r2
 8002c34:	4611      	mov	r1, r2
 8002c36:	7019      	strb	r1, [r3, #0]
 8002c38:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c3c:	705a      	strb	r2, [r3, #1]

  /* Return value */
  return tempRegValue;
 8002c3e:	79fb      	ldrb	r3, [r7, #7]

}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	200029c8 	.word	0x200029c8

08002c4c <SpiritPktCommonGetReceivedSourceAddress>:
 * @brief  Returns the source address of the received packet.
 * @param  None.
 * @retval uint8_t Source address of the received packet.
 */
uint8_t SpiritPktCommonGetReceivedSourceAddress(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD1 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD1_BASE, 1, &tempRegValue);
 8002c52:	1dfb      	adds	r3, r7, #7
 8002c54:	461a      	mov	r2, r3
 8002c56:	2101      	movs	r1, #1
 8002c58:	20d2      	movs	r0, #210	; 0xd2
 8002c5a:	f001 fcf7 	bl	800464c <RadioSpiReadRegisters>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <SpiritPktCommonGetReceivedSourceAddress+0x2c>)
 8002c62:	b212      	sxth	r2, r2
 8002c64:	4611      	mov	r1, r2
 8002c66:	7019      	strb	r1, [r3, #0]
 8002c68:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c6c:	705a      	strb	r2, [r3, #1]

  /* Returns value */
  return tempRegValue;
 8002c6e:	79fb      	ldrb	r3, [r7, #7]

}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	200029c8 	.word	0x200029c8

08002c7c <SpiritPktStackInit>:
 * @param  pxPktStackInit STack packet init structure.
 *         This parameter is a pointer to @ref PktStackInit.
 * @retval None.
 */
void SpiritPktStackInit(PktStackInit* pxPktStackInit)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackInit->xDataWhitening));
  s_assert_param(IS_STACK_CONTROL_LENGTH(pxPktStackInit->xControlLength));


  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002c84:	f107 0308 	add.w	r3, r7, #8
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	2051      	movs	r0, #81	; 0x51
 8002c8e:	f001 fcdd 	bl	800464c <RadioSpiReadRegisters>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4b60      	ldr	r3, [pc, #384]	; (8002e18 <SpiritPktStackInit+0x19c>)
 8002c96:	b212      	sxth	r2, r2
 8002c98:	4611      	mov	r1, r2
 8002c9a:	7019      	strb	r1, [r3, #0]
 8002c9c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ca0:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 8002ca2:	7a3b      	ldrb	r3, [r7, #8]
 8002ca4:	f023 0320 	bic.w	r3, r3, #32
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	723b      	strb	r3, [r7, #8]

  /* Always (!) set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8002cac:	7a3b      	ldrb	r3, [r7, #8]
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002cb6:	f107 0308 	add.w	r3, r7, #8
 8002cba:	461a      	mov	r2, r3
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	2051      	movs	r0, #81	; 0x51
 8002cc0:	f001 fc78 	bl	80045b4 <RadioSpiWriteRegisters>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	4b54      	ldr	r3, [pc, #336]	; (8002e18 <SpiritPktStackInit+0x19c>)
 8002cc8:	b212      	sxth	r2, r2
 8002cca:	4611      	mov	r1, r2
 8002ccc:	7019      	strb	r1, [r3, #0]
 8002cce:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002cd2:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002cd4:	f107 0308 	add.w	r3, r7, #8
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2101      	movs	r1, #1
 8002cdc:	204f      	movs	r0, #79	; 0x4f
 8002cde:	f001 fcb5 	bl	800464c <RadioSpiReadRegisters>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	4b4c      	ldr	r3, [pc, #304]	; (8002e18 <SpiritPktStackInit+0x19c>)
 8002ce6:	b212      	sxth	r2, r2
 8002ce8:	4611      	mov	r1, r2
 8002cea:	7019      	strb	r1, [r3, #0]
 8002cec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002cf0:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 8002cf2:	7a3b      	ldrb	r3, [r7, #8]
 8002cf4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002cfc:	f107 0308 	add.w	r3, r7, #8
 8002d00:	461a      	mov	r2, r3
 8002d02:	2101      	movs	r1, #1
 8002d04:	204f      	movs	r0, #79	; 0x4f
 8002d06:	f001 fc55 	bl	80045b4 <RadioSpiWriteRegisters>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	4b42      	ldr	r3, [pc, #264]	; (8002e18 <SpiritPktStackInit+0x19c>)
 8002d0e:	b212      	sxth	r2, r2
 8002d10:	4611      	mov	r1, r2
 8002d12:	7019      	strb	r1, [r3, #0]
 8002d14:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d18:	705a      	strb	r2, [r3, #1]


  /* Address and control length setting: source and destination address are always present so ADDRESS_LENGTH=2 */
  tempRegValue[0] = 0x10 | ((uint8_t) pxPktStackInit->xControlLength);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	7adb      	ldrb	r3, [r3, #11]
 8002d1e:	f043 0310 	orr.w	r3, r3, #16
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	723b      	strb	r3, [r7, #8]


  /* Packet format and width length setting */
  pxPktStackInit->cPktLengthWidth == 0 ? pxPktStackInit->cPktLengthWidth=1 : pxPktStackInit->cPktLengthWidth;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	7a5b      	ldrb	r3, [r3, #9]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d102      	bne.n	8002d34 <SpiritPktStackInit+0xb8>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_STACK) | ((uint8_t)(pxPktStackInit->cPktLengthWidth-1));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	7a5b      	ldrb	r3, [r3, #9]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	781a      	ldrb	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	785b      	ldrb	r3, [r3, #1]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktStackInit->xFixVarLength);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 8002d54:	4313      	orrs	r3, r2
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktStackInit->xCrcMode;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	7a9b      	ldrb	r3, [r3, #10]
 8002d5e:	72fb      	strb	r3, [r7, #11]

  if(pxPktStackInit->xDataWhitening == S_ENABLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7b5b      	ldrb	r3, [r3, #13]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d104      	bne.n	8002d72 <SpiritPktStackInit+0xf6>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8002d68:	7afb      	ldrb	r3, [r7, #11]
 8002d6a:	f043 0310 	orr.w	r3, r3, #16
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktStackInit->xFec == S_ENABLE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7b1b      	ldrb	r3, [r3, #12]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d104      	bne.n	8002d84 <SpiritPktStackInit+0x108>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8002d7a:	7afb      	ldrb	r3, [r7, #11]
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 8002d84:	f107 0308 	add.w	r3, r7, #8
 8002d88:	461a      	mov	r2, r3
 8002d8a:	2104      	movs	r1, #4
 8002d8c:	2030      	movs	r0, #48	; 0x30
 8002d8e:	f001 fc11 	bl	80045b4 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 8002d92:	2300      	movs	r3, #0
 8002d94:	73fb      	strb	r3, [r7, #15]
 8002d96:	e01d      	b.n	8002dd4 <SpiritPktStackInit+0x158>
  {
    if(i<3-(pxPktStackInit->xSyncLength >>1))
 8002d98:	7bfa      	ldrb	r2, [r7, #15]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	785b      	ldrb	r3, [r3, #1]
 8002d9e:	085b      	lsrs	r3, r3, #1
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	f1c3 0303 	rsb	r3, r3, #3
 8002da6:	429a      	cmp	r2, r3
 8002da8:	da06      	bge.n	8002db8 <SpiritPktStackInit+0x13c>
    {
      tempRegValue[i]=0;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	3310      	adds	r3, #16
 8002dae:	443b      	add	r3, r7
 8002db0:	2200      	movs	r2, #0
 8002db2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002db6:	e00a      	b.n	8002dce <SpiritPktStackInit+0x152>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktStackInit->lSyncWords>>(8*i));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	40da      	lsrs	r2, r3
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	3310      	adds	r3, #16
 8002dc8:	443b      	add	r3, r7
 8002dca:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d9de      	bls.n	8002d98 <SpiritPktStackInit+0x11c>
    }
  }

  /* Enables or disables the CRC check */
  if(pxPktStackInit->xCrcMode == PKT_NO_CRC)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7a9b      	ldrb	r3, [r3, #10]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d103      	bne.n	8002dea <SpiritPktStackInit+0x16e>
  {
    SpiritPktStackFilterOnCrc(S_DISABLE);
 8002de2:	2000      	movs	r0, #0
 8002de4:	f7ff feb0 	bl	8002b48 <SpiritPktCommonFilterOnCrc>
 8002de8:	e002      	b.n	8002df0 <SpiritPktStackInit+0x174>
  }
  else
  {
    SpiritPktStackFilterOnCrc(S_ENABLE);
 8002dea:	2001      	movs	r0, #1
 8002dec:	f7ff feac 	bl	8002b48 <SpiritPktCommonFilterOnCrc>
  }

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002df0:	f107 0308 	add.w	r3, r7, #8
 8002df4:	461a      	mov	r2, r3
 8002df6:	2104      	movs	r1, #4
 8002df8:	2036      	movs	r0, #54	; 0x36
 8002dfa:	f001 fbdb 	bl	80045b4 <RadioSpiWriteRegisters>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <SpiritPktStackInit+0x19c>)
 8002e02:	b212      	sxth	r2, r2
 8002e04:	4611      	mov	r1, r2
 8002e06:	7019      	strb	r1, [r3, #0]
 8002e08:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e0c:	705a      	strb	r2, [r3, #1]

}
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200029c8 	.word	0x200029c8

08002e1c <SpiritPktStackAddressesInit>:
 * @param  pxPktStackAddresses STack packet addresses init structure.
 *         This parameter is a pointer to @ref PktStackAddressesInit .
 * @retval None.
 */
void SpiritPktStackAddressesInit(PktStackAddressesInit* pxPktStackAddresses)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMyAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnBroadcastAddress));
  
  /* Reads the filtering options ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	204f      	movs	r0, #79	; 0x4f
 8002e2e:	f001 fc0d 	bl	800464c <RadioSpiReadRegisters>
 8002e32:	4602      	mov	r2, r0
 8002e34:	4b2f      	ldr	r3, [pc, #188]	; (8002ef4 <SpiritPktStackAddressesInit+0xd8>)
 8002e36:	b212      	sxth	r2, r2
 8002e38:	4611      	mov	r1, r2
 8002e3a:	7019      	strb	r1, [r3, #0]
 8002e3c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e40:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktStackAddresses->xFilterOnMyAddress == S_ENABLE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d105      	bne.n	8002e56 <SpiritPktStackAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002e4a:	7b3b      	ldrb	r3, [r7, #12]
 8002e4c:	f043 0308 	orr.w	r3, r3, #8
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	733b      	strb	r3, [r7, #12]
 8002e54:	e004      	b.n	8002e60 <SpiritPktStackAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002e56:	7b3b      	ldrb	r3, [r7, #12]
 8002e58:	f023 0308 	bic.w	r3, r3, #8
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktStackAddresses->xFilterOnMulticastAddress == S_ENABLE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	789b      	ldrb	r3, [r3, #2]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d105      	bne.n	8002e74 <SpiritPktStackAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002e68:	7b3b      	ldrb	r3, [r7, #12]
 8002e6a:	f043 0304 	orr.w	r3, r3, #4
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	733b      	strb	r3, [r7, #12]
 8002e72:	e004      	b.n	8002e7e <SpiritPktStackAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002e74:	7b3b      	ldrb	r3, [r7, #12]
 8002e76:	f023 0304 	bic.w	r3, r3, #4
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktStackAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	791b      	ldrb	r3, [r3, #4]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d105      	bne.n	8002e92 <SpiritPktStackAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002e86:	7b3b      	ldrb	r3, [r7, #12]
 8002e88:	f043 0302 	orr.w	r3, r3, #2
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	733b      	strb	r3, [r7, #12]
 8002e90:	e004      	b.n	8002e9c <SpiritPktStackAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002e92:	7b3b      	ldrb	r3, [r7, #12]
 8002e94:	f023 0302 	bic.w	r3, r3, #2
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes value on the register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002e9c:	f107 030c 	add.w	r3, r7, #12
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	204f      	movs	r0, #79	; 0x4f
 8002ea6:	f001 fb85 	bl	80045b4 <RadioSpiWriteRegisters>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <SpiritPktStackAddressesInit+0xd8>)
 8002eae:	b212      	sxth	r2, r2
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	7019      	strb	r1, [r3, #0]
 8002eb4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002eb8:	705a      	strb	r2, [r3, #1]
  
  /* Fills array with the addresses passed in the structure */
  tempRegValue[0] = pxPktStackAddresses->cBroadcastAddress;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	795b      	ldrb	r3, [r3, #5]
 8002ebe:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktStackAddresses->cMulticastAddress;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	78db      	ldrb	r3, [r3, #3]
 8002ec4:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktStackAddresses->cMyAddress;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	785b      	ldrb	r3, [r3, #1]
 8002eca:	73bb      	strb	r3, [r7, #14]
  
  /* Writes them on the addresses registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002ecc:	f107 030c 	add.w	r3, r7, #12
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2103      	movs	r1, #3
 8002ed4:	204c      	movs	r0, #76	; 0x4c
 8002ed6:	f001 fb6d 	bl	80045b4 <RadioSpiWriteRegisters>
 8002eda:	4602      	mov	r2, r0
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <SpiritPktStackAddressesInit+0xd8>)
 8002ede:	b212      	sxth	r2, r2
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	7019      	strb	r1, [r3, #0]
 8002ee4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ee8:	705a      	strb	r2, [r3, #1]
  
}
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	200029c8 	.word	0x200029c8

08002ef8 <SpiritPktStackLlpInit>:
* @param  pxPktStackLlpInit STack packet LLP init structure.
*         This parameter is a pointer to @ref PktStackLlpInit.
* @retval None.
*/
void SpiritPktStackLlpInit(PktStackLlpInit* pxPktStackLlpInit)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_STACK_NMAX_RETX(pxPktStackLlpInit->xNMaxRetx));
  /* check if piggybacking is enabled and autoack is disabled */
  s_assert_param(!(pxPktStackLlpInit->xPiggybacking==S_ENABLE && pxPktStackLlpInit->xAutoAck==S_DISABLE));

  /* Piggybacking mechanism setting on the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 8002f00:	f107 030c 	add.w	r3, r7, #12
 8002f04:	461a      	mov	r2, r3
 8002f06:	2102      	movs	r1, #2
 8002f08:	2051      	movs	r0, #81	; 0x51
 8002f0a:	f001 fb9f 	bl	800464c <RadioSpiReadRegisters>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	4b21      	ldr	r3, [pc, #132]	; (8002f98 <SpiritPktStackLlpInit+0xa0>)
 8002f12:	b212      	sxth	r2, r2
 8002f14:	4611      	mov	r1, r2
 8002f16:	7019      	strb	r1, [r3, #0]
 8002f18:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f1c:	705a      	strb	r2, [r3, #1]
  if(pxPktStackLlpInit->xPiggybacking == S_ENABLE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	785b      	ldrb	r3, [r3, #1]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d105      	bne.n	8002f32 <SpiritPktStackLlpInit+0x3a>
  {
    tempRegValue[0] |= PROTOCOL1_PIGGYBACKING_MASK;
 8002f26:	7b3b      	ldrb	r3, [r7, #12]
 8002f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	733b      	strb	r3, [r7, #12]
 8002f30:	e004      	b.n	8002f3c <SpiritPktStackLlpInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PROTOCOL1_PIGGYBACKING_MASK;
 8002f32:	7b3b      	ldrb	r3, [r7, #12]
 8002f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	733b      	strb	r3, [r7, #12]
  }

  /* RX and TX autoack mechanisms setting on the PROTOCOL0 register */
  if(pxPktStackLlpInit->xAutoAck == S_ENABLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d105      	bne.n	8002f50 <SpiritPktStackLlpInit+0x58>
  {
    tempRegValue[1] |= PROTOCOL0_AUTO_ACK_MASK;
 8002f44:	7b7b      	ldrb	r3, [r7, #13]
 8002f46:	f043 0304 	orr.w	r3, r3, #4
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	737b      	strb	r3, [r7, #13]
 8002f4e:	e004      	b.n	8002f5a <SpiritPktStackLlpInit+0x62>
  }
  else
  {
    tempRegValue[1] &= ~PROTOCOL0_AUTO_ACK_MASK;
 8002f50:	7b7b      	ldrb	r3, [r7, #13]
 8002f52:	f023 0304 	bic.w	r3, r3, #4
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	737b      	strb	r3, [r7, #13]
  }

  /* Max number of retransmission setting */
  tempRegValue[1] &= ~PROTOCOL0_NMAX_RETX_MASK;
 8002f5a:	7b7b      	ldrb	r3, [r7, #13]
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= pxPktStackLlpInit->xNMaxRetx;
 8002f64:	7b7a      	ldrb	r2, [r7, #13]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	789b      	ldrb	r3, [r3, #2]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	737b      	strb	r3, [r7, #13]

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 8002f70:	f107 030c 	add.w	r3, r7, #12
 8002f74:	461a      	mov	r2, r3
 8002f76:	2102      	movs	r1, #2
 8002f78:	2051      	movs	r0, #81	; 0x51
 8002f7a:	f001 fb1b 	bl	80045b4 <RadioSpiWriteRegisters>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <SpiritPktStackLlpInit+0xa0>)
 8002f82:	b212      	sxth	r2, r2
 8002f84:	4611      	mov	r1, r2
 8002f86:	7019      	strb	r1, [r3, #0]
 8002f88:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f8c:	705a      	strb	r2, [r3, #1]

}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	200029c8 	.word	0x200029c8

08002f9c <SpiritPktStackSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter can be any value of uint16_t.
 * @retval None.
 */
void SpiritPktStackSetPayloadLength(uint16_t nPayloadLength)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];

  /* Computes the oversize (address + control) size */
  uint16_t overSize = 2 + (uint16_t) SpiritPktStackGetControlLength();
 8002fa6:	f7ff fdb3 	bl	8002b10 <SpiritPktCommonGetControlLength>
 8002faa:	4603      	mov	r3, r0
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3302      	adds	r3, #2
 8002fb0:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from lPayloadLength */
  tempRegValue[1]=STACK_BUILD_PCKTLEN0(nPayloadLength+overSize);
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	89fb      	ldrh	r3, [r7, #14]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from lPayloadLength */
  tempRegValue[0]=STACK_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8002fc0:	88fa      	ldrh	r2, [r7, #6]
 8002fc2:	89fb      	ldrh	r3, [r7, #14]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	121b      	asrs	r3, r3, #8
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	733b      	strb	r3, [r7, #12]

  /* Writes the value on the PCKTLENx registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8002fcc:	f107 030c 	add.w	r3, r7, #12
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2102      	movs	r1, #2
 8002fd4:	2034      	movs	r0, #52	; 0x34
 8002fd6:	f001 faed 	bl	80045b4 <RadioSpiWriteRegisters>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <SpiritPktStackSetPayloadLength+0x58>)
 8002fde:	b212      	sxth	r2, r2
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	7019      	strb	r1, [r3, #0]
 8002fe4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002fe8:	705a      	strb	r2, [r3, #1]

}
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	200029c8 	.word	0x200029c8

08002ff8 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8003002:	f107 030f 	add.w	r3, r7, #15
 8003006:	461a      	mov	r2, r3
 8003008:	2101      	movs	r1, #1
 800300a:	203a      	movs	r0, #58	; 0x3a
 800300c:	f001 fb1e 	bl	800464c <RadioSpiReadRegisters>
 8003010:	4602      	mov	r2, r0
 8003012:	4b14      	ldr	r3, [pc, #80]	; (8003064 <SpiritQiSqiCheck+0x6c>)
 8003014:	b212      	sxth	r2, r2
 8003016:	4611      	mov	r1, r2
 8003018:	7019      	strb	r1, [r3, #0]
 800301a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800301e:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d105      	bne.n	8003032 <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	f043 0302 	orr.w	r3, r3, #2
 800302c:	b2db      	uxtb	r3, r3
 800302e:	73fb      	strb	r3, [r7, #15]
 8003030:	e004      	b.n	800303c <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	f023 0302 	bic.w	r3, r3, #2
 8003038:	b2db      	uxtb	r3, r3
 800303a:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 800303c:	f107 030f 	add.w	r3, r7, #15
 8003040:	461a      	mov	r2, r3
 8003042:	2101      	movs	r1, #1
 8003044:	203a      	movs	r0, #58	; 0x3a
 8003046:	f001 fab5 	bl	80045b4 <RadioSpiWriteRegisters>
 800304a:	4602      	mov	r2, r0
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <SpiritQiSqiCheck+0x6c>)
 800304e:	b212      	sxth	r2, r2
 8003050:	4611      	mov	r1, r2
 8003052:	7019      	strb	r1, [r3, #0]
 8003054:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003058:	705a      	strb	r2, [r3, #1]

}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	200029c8 	.word	0x200029c8

08003068 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8003072:	f107 030f 	add.w	r3, r7, #15
 8003076:	461a      	mov	r2, r3
 8003078:	2101      	movs	r1, #1
 800307a:	203a      	movs	r0, #58	; 0x3a
 800307c:	f001 fae6 	bl	800464c <RadioSpiReadRegisters>
 8003080:	4602      	mov	r2, r0
 8003082:	4b12      	ldr	r3, [pc, #72]	; (80030cc <SpiritQiSetSqiThreshold+0x64>)
 8003084:	b212      	sxth	r2, r2
 8003086:	4611      	mov	r1, r2
 8003088:	7019      	strb	r1, [r3, #0]
 800308a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800308e:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003096:	b2db      	uxtb	r3, r3
 8003098:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 800309a:	7bfa      	ldrb	r2, [r7, #15]
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	4313      	orrs	r3, r2
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 80030a4:	f107 030f 	add.w	r3, r7, #15
 80030a8:	461a      	mov	r2, r3
 80030aa:	2101      	movs	r1, #1
 80030ac:	203a      	movs	r0, #58	; 0x3a
 80030ae:	f001 fa81 	bl	80045b4 <RadioSpiWriteRegisters>
 80030b2:	4602      	mov	r2, r0
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <SpiritQiSetSqiThreshold+0x64>)
 80030b6:	b212      	sxth	r2, r2
 80030b8:	4611      	mov	r1, r2
 80030ba:	7019      	strb	r1, [r3, #0]
 80030bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80030c0:	705a      	strb	r2, [r3, #1]

}
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200029c8 	.word	0x200029c8

080030d0 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3382      	adds	r3, #130	; 0x82
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 80030e4:	f107 030f 	add.w	r3, r7, #15
 80030e8:	461a      	mov	r2, r3
 80030ea:	2101      	movs	r1, #1
 80030ec:	2022      	movs	r0, #34	; 0x22
 80030ee:	f001 fa61 	bl	80045b4 <RadioSpiWriteRegisters>
 80030f2:	4602      	mov	r2, r0
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <SpiritQiSetRssiThresholddBm+0x3c>)
 80030f6:	b212      	sxth	r2, r2
 80030f8:	4611      	mov	r1, r2
 80030fa:	7019      	strb	r1, [r3, #0]
 80030fc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003100:	705a      	strb	r2, [r3, #1]

}
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200029c8 	.word	0x200029c8

08003110 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08c      	sub	sp, #48	; 0x30
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8003118:	23a0      	movs	r3, #160	; 0xa0
 800311a:	747b      	strb	r3, [r7, #17]
 800311c:	f107 0311 	add.w	r3, r7, #17
 8003120:	461a      	mov	r2, r3
 8003122:	2101      	movs	r1, #1
 8003124:	209f      	movs	r0, #159	; 0x9f
 8003126:	f001 fa45 	bl	80045b4 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003130:	ee07 3a90 	vmov	s15, r3
 8003134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	ee07 3a90 	vmov	s15, r3
 8003140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003144:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003148:	eddf 6aae 	vldr	s13, [pc, #696]	; 8003404 <SpiritRadioInit+0x2f4>
 800314c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003154:	ee17 3a90 	vmov	r3, s15
 8003158:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 800315a:	2063      	movs	r0, #99	; 0x63
 800315c:	f001 fac2 	bl	80046e4 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8003160:	2300      	movs	r3, #0
 8003162:	73bb      	strb	r3, [r7, #14]
 8003164:	e004      	b.n	8003170 <SpiritRadioInit+0x60>
 8003166:	7bbb      	ldrb	r3, [r7, #14]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	3301      	adds	r3, #1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	73bb      	strb	r3, [r7, #14]
 8003170:	7bbb      	ldrb	r3, [r7, #14]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2bff      	cmp	r3, #255	; 0xff
 8003176:	d1f6      	bne.n	8003166 <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8003178:	f001 f9ea 	bl	8004550 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 800317c:	4ba2      	ldr	r3, [pc, #648]	; (8003408 <SpiritRadioInit+0x2f8>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b40      	cmp	r3, #64	; 0x40
 8003188:	d1ea      	bne.n	8003160 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 800318a:	4ba0      	ldr	r3, [pc, #640]	; (800340c <SpiritRadioInit+0x2fc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4aa0      	ldr	r2, [pc, #640]	; (8003410 <SpiritRadioInit+0x300>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d803      	bhi.n	800319c <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8003194:	2000      	movs	r0, #0
 8003196:	f001 f90b 	bl	80043b0 <SpiritRadioSetDigDiv>
 800319a:	e002      	b.n	80031a2 <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 800319c:	2001      	movs	r0, #1
 800319e:	f001 f907 	bl	80043b0 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 80031a2:	2062      	movs	r0, #98	; 0x62
 80031a4:	f001 fa9e 	bl	80046e4 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 80031a8:	2300      	movs	r3, #0
 80031aa:	737b      	strb	r3, [r7, #13]
 80031ac:	e004      	b.n	80031b8 <SpiritRadioInit+0xa8>
 80031ae:	7b7b      	ldrb	r3, [r7, #13]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	3301      	adds	r3, #1
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	737b      	strb	r3, [r7, #13]
 80031b8:	7b7b      	ldrb	r3, [r7, #13]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2bff      	cmp	r3, #255	; 0xff
 80031be:	d1f6      	bne.n	80031ae <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 80031c0:	f001 f9c6 	bl	8004550 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 80031c4:	4b90      	ldr	r3, [pc, #576]	; (8003408 <SpiritRadioInit+0x2f8>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d1ea      	bne.n	80031a8 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 80031d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d4:	ee07 3a90 	vmov	s15, r3
 80031d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031dc:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8003414 <SpiritRadioInit+0x304>
 80031e0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80031e4:	4b89      	ldr	r3, [pc, #548]	; (800340c <SpiritRadioInit+0x2fc>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	ee07 3a90 	vmov	s15, r3
 80031ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031f8:	ee17 3a90 	vmov	r3, s15
 80031fc:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 80031fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	b29b      	uxth	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	b2db      	uxtb	r3, r3
 800320c:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 800320e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003210:	b2db      	uxtb	r3, r3
 8003212:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	025a      	lsls	r2, r3, #9
 800321a:	4b7c      	ldr	r3, [pc, #496]	; (800340c <SpiritRadioInit+0x2fc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	099b      	lsrs	r3, r3, #6
 8003220:	fbb2 f3f3 	udiv	r3, r2, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	3301      	adds	r3, #1
 8003228:	b2db      	uxtb	r3, r3
 800322a:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fc33 	bl	8002a9c <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8003236:	f107 0310 	add.w	r3, r7, #16
 800323a:	461a      	mov	r2, r3
 800323c:	2101      	movs	r1, #1
 800323e:	20a3      	movs	r0, #163	; 0xa3
 8003240:	f001 fa04 	bl	800464c <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8003244:	7c3b      	ldrb	r3, [r7, #16]
 8003246:	f023 0302 	bic.w	r3, r3, #2
 800324a:	b2db      	uxtb	r3, r3
 800324c:	743b      	strb	r3, [r7, #16]
 800324e:	f107 0310 	add.w	r3, r7, #16
 8003252:	461a      	mov	r2, r3
 8003254:	2101      	movs	r1, #1
 8003256:	20a3      	movs	r0, #163	; 0xa3
 8003258:	f001 f9ac 	bl	80045b4 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f107 0216 	add.w	r2, r7, #22
 8003264:	f107 0117 	add.w	r1, r7, #23
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fc3d 	bl	8003ae8 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 800326e:	7dfb      	ldrb	r3, [r7, #23]
 8003270:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	7b5a      	ldrb	r2, [r3, #13]
 8003276:	7dbb      	ldrb	r3, [r7, #22]
 8003278:	4313      	orrs	r3, r2
 800327a:	b2db      	uxtb	r3, r3
 800327c:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 800327e:	f107 0310 	add.w	r3, r7, #16
 8003282:	461a      	mov	r2, r3
 8003284:	2101      	movs	r1, #1
 8003286:	201c      	movs	r0, #28
 8003288:	f001 f9e0 	bl	800464c <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f107 0214 	add.w	r2, r7, #20
 8003294:	f107 0115 	add.w	r1, r7, #21
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fdbd 	bl	8003e18 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 800329e:	7d3b      	ldrb	r3, [r7, #20]
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	b25a      	sxtb	r2, r3
 80032a4:	7c3b      	ldrb	r3, [r7, #16]
 80032a6:	b25b      	sxtb	r3, r3
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	b25b      	sxtb	r3, r3
 80032ae:	4313      	orrs	r3, r2
 80032b0:	b25a      	sxtb	r2, r3
 80032b2:	7d7b      	ldrb	r3, [r7, #21]
 80032b4:	b25b      	sxtb	r3, r3
 80032b6:	4313      	orrs	r3, r2
 80032b8:	b25b      	sxtb	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f107 0212 	add.w	r2, r7, #18
 80032c6:	f107 0113 	add.w	r1, r7, #19
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fcbe 	bl	8003c4c <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 80032d0:	7cfb      	ldrb	r3, [r7, #19]
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	b25a      	sxtb	r2, r3
 80032d6:	7cbb      	ldrb	r3, [r7, #18]
 80032d8:	b25b      	sxtb	r3, r3
 80032da:	4313      	orrs	r3, r2
 80032dc:	b25b      	sxtb	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 80032e2:	4b4a      	ldr	r3, [pc, #296]	; (800340c <SpiritRadioInit+0x2fc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	0b1b      	lsrs	r3, r3, #12
 80032e8:	ee07 3a90 	vmov	s15, r3
 80032ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032f0:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003418 <SpiritRadioInit+0x308>
 80032f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032f8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800341c <SpiritRadioInit+0x30c>
 80032fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003300:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8003304:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800330c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003310:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003314:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003318:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800331c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003324:	dd09      	ble.n	800333a <SpiritRadioInit+0x22a>
 8003326:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800332a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800332e:	edc7 7a00 	vstr	s15, [r7]
 8003332:	783b      	ldrb	r3, [r7, #0]
 8003334:	3301      	adds	r3, #1
 8003336:	b2db      	uxtb	r3, r3
 8003338:	e006      	b.n	8003348 <SpiritRadioInit+0x238>
 800333a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800333e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003342:	edc7 7a00 	vstr	s15, [r7]
 8003346:	783b      	ldrb	r3, [r7, #0]
 8003348:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 800334a:	4b30      	ldr	r3, [pc, #192]	; (800340c <SpiritRadioInit+0x2fc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a30      	ldr	r2, [pc, #192]	; (8003410 <SpiritRadioInit+0x300>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d802      	bhi.n	800335a <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	777b      	strb	r3, [r7, #29]
 8003358:	e033      	b.n	80033c2 <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 800335a:	4b2c      	ldr	r3, [pc, #176]	; (800340c <SpiritRadioInit+0x2fc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	0b5b      	lsrs	r3, r3, #13
 8003360:	ee07 3a90 	vmov	s15, r3
 8003364:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003368:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003418 <SpiritRadioInit+0x308>
 800336c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003370:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800341c <SpiritRadioInit+0x30c>
 8003374:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003378:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 800337c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003388:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800338c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003390:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339c:	dd09      	ble.n	80033b2 <SpiritRadioInit+0x2a2>
 800339e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80033a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033a6:	edc7 7a00 	vstr	s15, [r7]
 80033aa:	783b      	ldrb	r3, [r7, #0]
 80033ac:	3301      	adds	r3, #1
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	e006      	b.n	80033c0 <SpiritRadioInit+0x2b0>
 80033b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80033b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ba:	edc7 7a00 	vstr	s15, [r7]
 80033be:	783b      	ldrb	r3, [r7, #0]
 80033c0:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 80033c2:	f107 030f 	add.w	r3, r7, #15
 80033c6:	461a      	mov	r2, r3
 80033c8:	2101      	movs	r1, #1
 80033ca:	2007      	movs	r0, #7
 80033cc:	f001 f8f2 	bl	80045b4 <RadioSpiWriteRegisters>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <SpiritRadioInit+0x2f8>)
 80033d4:	b212      	sxth	r2, r2
 80033d6:	4611      	mov	r1, r2
 80033d8:	7019      	strb	r1, [r3, #0]
 80033da:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80033de:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 80033e0:	4b0a      	ldr	r3, [pc, #40]	; (800340c <SpiritRadioInit+0x2fc>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0e      	ldr	r2, [pc, #56]	; (8003420 <SpiritRadioInit+0x310>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d91e      	bls.n	8003428 <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 80033ea:	4b08      	ldr	r3, [pc, #32]	; (800340c <SpiritRadioInit+0x2fc>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a0d      	ldr	r2, [pc, #52]	; (8003424 <SpiritRadioInit+0x314>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	bf8c      	ite	hi
 80033f4:	2301      	movhi	r3, #1
 80033f6:	2300      	movls	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f86c 	bl	80034d8 <SpiritRadioSetXtalFlag>
 8003400:	e01d      	b.n	800343e <SpiritRadioInit+0x32e>
 8003402:	bf00      	nop
 8003404:	49742400 	.word	0x49742400
 8003408:	200029c8 	.word	0x200029c8
 800340c:	200029c4 	.word	0x200029c4
 8003410:	01c9c37f 	.word	0x01c9c37f
 8003414:	48800000 	.word	0x48800000
 8003418:	49afd520 	.word	0x49afd520
 800341c:	42800000 	.word	0x42800000
 8003420:	01c9c380 	.word	0x01c9c380
 8003424:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8003428:	4b28      	ldr	r3, [pc, #160]	; (80034cc <SpiritRadioInit+0x3bc>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a28      	ldr	r2, [pc, #160]	; (80034d0 <SpiritRadioInit+0x3c0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	bf8c      	ite	hi
 8003432:	2301      	movhi	r3, #1
 8003434:	2300      	movls	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	4618      	mov	r0, r3
 800343a:	f000 f84d 	bl	80034d8 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	330c      	adds	r3, #12
 8003442:	461a      	mov	r2, r3
 8003444:	2101      	movs	r1, #1
 8003446:	206c      	movs	r0, #108	; 0x6c
 8003448:	f001 f8b4 	bl	80045b4 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 800344c:	f107 031c 	add.w	r3, r7, #28
 8003450:	461a      	mov	r2, r3
 8003452:	2104      	movs	r1, #4
 8003454:	200c      	movs	r0, #12
 8003456:	f001 f8ad 	bl	80045b4 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 800345a:	f107 0318 	add.w	r3, r7, #24
 800345e:	461a      	mov	r2, r3
 8003460:	2104      	movs	r1, #4
 8003462:	201a      	movs	r0, #26
 8003464:	f001 f8a6 	bl	80045b4 <RadioSpiWriteRegisters>
 8003468:	4602      	mov	r2, r0
 800346a:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <SpiritRadioInit+0x3c4>)
 800346c:	b212      	sxth	r2, r2
 800346e:	4611      	mov	r1, r2
 8003470:	7019      	strb	r1, [r3, #0]
 8003472:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003476:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8003478:	2001      	movs	r0, #1
 800347a:	f000 ff15 	bl	80042a8 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8003482:	23e3      	movs	r3, #227	; 0xe3
 8003484:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8003486:	f107 031c 	add.w	r3, r7, #28
 800348a:	461a      	mov	r2, r3
 800348c:	2102      	movs	r1, #2
 800348e:	2099      	movs	r0, #153	; 0x99
 8003490:	f001 f890 	bl	80045b4 <RadioSpiWriteRegisters>
 8003494:	4602      	mov	r2, r0
 8003496:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <SpiritRadioInit+0x3c4>)
 8003498:	b212      	sxth	r2, r2
 800349a:	4611      	mov	r1, r2
 800349c:	7019      	strb	r1, [r3, #0]
 800349e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80034a2:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 80034a4:	2322      	movs	r3, #34	; 0x22
 80034a6:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 80034a8:	f107 031c 	add.w	r3, r7, #28
 80034ac:	461a      	mov	r2, r3
 80034ae:	2101      	movs	r1, #1
 80034b0:	20bc      	movs	r0, #188	; 0xbc
 80034b2:	f001 f87f 	bl	80045b4 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f9aa 	bl	8003814 <SpiritRadioSetFrequencyBase>
 80034c0:	4603      	mov	r3, r0
  
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3730      	adds	r7, #48	; 0x30
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	200029c4 	.word	0x200029c4
 80034d0:	017d783f 	.word	0x017d783f
 80034d4:	200029c8 	.word	0x200029c8

080034d8 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 80034e2:	2300      	movs	r3, #0
 80034e4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 80034e6:	f107 030f 	add.w	r3, r7, #15
 80034ea:	461a      	mov	r2, r3
 80034ec:	2101      	movs	r1, #1
 80034ee:	2001      	movs	r0, #1
 80034f0:	f001 f8ac 	bl	800464c <RadioSpiReadRegisters>
 80034f4:	4602      	mov	r2, r0
 80034f6:	4b14      	ldr	r3, [pc, #80]	; (8003548 <SpiritRadioSetXtalFlag+0x70>)
 80034f8:	b212      	sxth	r2, r2
 80034fa:	4611      	mov	r1, r2
 80034fc:	7019      	strb	r1, [r3, #0]
 80034fe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003502:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d105      	bne.n	8003516 <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003510:	b2db      	uxtb	r3, r3
 8003512:	73fb      	strb	r3, [r7, #15]
 8003514:	e004      	b.n	8003520 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800351c:	b2db      	uxtb	r3, r3
 800351e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8003520:	f107 030f 	add.w	r3, r7, #15
 8003524:	461a      	mov	r2, r3
 8003526:	2101      	movs	r1, #1
 8003528:	2001      	movs	r0, #1
 800352a:	f001 f843 	bl	80045b4 <RadioSpiWriteRegisters>
 800352e:	4602      	mov	r2, r0
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <SpiritRadioSetXtalFlag+0x70>)
 8003532:	b212      	sxth	r2, r2
 8003534:	4611      	mov	r1, r2
 8003536:	7019      	strb	r1, [r3, #0]
 8003538:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800353c:	705a      	strb	r2, [r3, #1]
  
}
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	200029c8 	.word	0x200029c8

0800354c <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8003558:	2300      	movs	r3, #0
 800355a:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 800355c:	2300      	movs	r3, #0
 800355e:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a3a      	ldr	r2, [pc, #232]	; (800364c <SpiritRadioSearchWCP+0x100>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d306      	bcc.n	8003576 <SpiritRadioSearchWCP+0x2a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a39      	ldr	r2, [pc, #228]	; (8003650 <SpiritRadioSearchWCP+0x104>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d802      	bhi.n	8003576 <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8003570:	2306      	movs	r3, #6
 8003572:	73bb      	strb	r3, [r7, #14]
 8003574:	e01f      	b.n	80035b6 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a36      	ldr	r2, [pc, #216]	; (8003654 <SpiritRadioSearchWCP+0x108>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d906      	bls.n	800358c <SpiritRadioSearchWCP+0x40>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a35      	ldr	r2, [pc, #212]	; (8003658 <SpiritRadioSearchWCP+0x10c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d802      	bhi.n	800358c <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8003586:	230c      	movs	r3, #12
 8003588:	73bb      	strb	r3, [r7, #14]
 800358a:	e014      	b.n	80035b6 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a33      	ldr	r2, [pc, #204]	; (800365c <SpiritRadioSearchWCP+0x110>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d906      	bls.n	80035a2 <SpiritRadioSearchWCP+0x56>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a32      	ldr	r2, [pc, #200]	; (8003660 <SpiritRadioSearchWCP+0x114>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d802      	bhi.n	80035a2 <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 800359c:	2310      	movs	r3, #16
 800359e:	73bb      	strb	r3, [r7, #14]
 80035a0:	e009      	b.n	80035b6 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a2f      	ldr	r2, [pc, #188]	; (8003664 <SpiritRadioSearchWCP+0x118>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d905      	bls.n	80035b6 <SpiritRadioSearchWCP+0x6a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a2e      	ldr	r2, [pc, #184]	; (8003668 <SpiritRadioSearchWCP+0x11c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d801      	bhi.n	80035b6 <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 80035b2:	2320      	movs	r3, #32
 80035b4:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a2c      	ldr	r2, [pc, #176]	; (800366c <SpiritRadioSearchWCP+0x120>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	099b      	lsrs	r3, r3, #6
 80035c0:	7bba      	ldrb	r2, [r7, #14]
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 80035c8:	f241 631f 	movw	r3, #5663	; 0x161f
 80035cc:	461a      	mov	r2, r3
 80035ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d302      	bcc.n	80035e2 <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 80035dc:	230f      	movs	r3, #15
 80035de:	73fb      	strb	r3, [r7, #15]
 80035e0:	e023      	b.n	800362a <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 80035e2:	2300      	movs	r3, #0
 80035e4:	73fb      	strb	r3, [r7, #15]
 80035e6:	e005      	b.n	80035f4 <SpiritRadioSearchWCP+0xa8>
 80035e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	3301      	adds	r3, #1
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	73fb      	strb	r3, [r7, #15]
 80035f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035f8:	2b0e      	cmp	r3, #14
 80035fa:	dc0c      	bgt.n	8003616 <SpiritRadioSearchWCP+0xca>
 80035fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003600:	4a1b      	ldr	r2, [pc, #108]	; (8003670 <SpiritRadioSearchWCP+0x124>)
 8003602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003606:	461a      	mov	r2, r3
 8003608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800360c:	fb02 f303 	mul.w	r3, r2, r3
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	429a      	cmp	r2, r3
 8003614:	d8e8      	bhi.n	80035e8 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 8003616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <SpiritRadioSearchWCP+0xde>
      i--;
 800361e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b2db      	uxtb	r3, r3
 8003628:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 800362a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800362e:	425a      	negs	r2, r3
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	f002 0207 	and.w	r2, r2, #7
 8003638:	bf58      	it	pl
 800363a:	4253      	negpl	r3, r2
 800363c:	b25b      	sxtb	r3, r3
 800363e:	b2db      	uxtb	r3, r3
  
}
 8003640:	4618      	mov	r0, r3
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	2e5f5680 	.word	0x2e5f5680
 8003650:	390c2fe0 	.word	0x390c2fe0
 8003654:	1701e47f 	.word	0x1701e47f
 8003658:	1c146a60 	.word	0x1c146a60
 800365c:	11d260bf 	.word	0x11d260bf
 8003660:	14ced7e0 	.word	0x14ced7e0
 8003664:	08e18f3f 	.word	0x08e18f3f
 8003668:	0a6fd060 	.word	0x0a6fd060
 800366c:	10624dd3 	.word	0x10624dd3
 8003670:	0800c4b4 	.word	0x0800c4b4

08003674 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 800367a:	1d3b      	adds	r3, r7, #4
 800367c:	461a      	mov	r2, r3
 800367e:	2104      	movs	r1, #4
 8003680:	2008      	movs	r0, #8
 8003682:	f000 ffe3 	bl	800464c <RadioSpiReadRegisters>
 8003686:	4602      	mov	r2, r0
 8003688:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <SpiritRadioGetSynthWord+0x48>)
 800368a:	b212      	sxth	r2, r2
 800368c:	4611      	mov	r1, r2
 800368e:	7019      	strb	r1, [r3, #0]
 8003690:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003694:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8003696:	793b      	ldrb	r3, [r7, #4]
 8003698:	055b      	lsls	r3, r3, #21
 800369a:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 800369e:	797b      	ldrb	r3, [r7, #5]
 80036a0:	035b      	lsls	r3, r3, #13
 80036a2:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80036a4:	79bb      	ldrb	r3, [r7, #6]
 80036a6:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80036a8:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80036aa:	79fa      	ldrb	r2, [r7, #7]
 80036ac:	08d2      	lsrs	r2, r2, #3
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	4413      	add	r3, r2
  
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	200029c8 	.word	0x200029c8

080036c0 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 80036c6:	1dfb      	adds	r3, r7, #7
 80036c8:	461a      	mov	r2, r3
 80036ca:	2101      	movs	r1, #1
 80036cc:	200b      	movs	r0, #11
 80036ce:	f000 ffbd 	bl	800464c <RadioSpiReadRegisters>
 80036d2:	4602      	mov	r2, r0
 80036d4:	4b10      	ldr	r3, [pc, #64]	; (8003718 <SpiritRadioGetBand+0x58>)
 80036d6:	b212      	sxth	r2, r2
 80036d8:	4611      	mov	r1, r2
 80036da:	7019      	strb	r1, [r3, #0]
 80036dc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80036e0:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 80036ec:	2300      	movs	r3, #0
 80036ee:	e00e      	b.n	800370e <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d101      	bne.n	80036fe <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e007      	b.n	800370e <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	2b04      	cmp	r3, #4
 8003706:	d101      	bne.n	800370c <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8003708:	2302      	movs	r3, #2
 800370a:	e000      	b.n	800370e <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 800370c:	2303      	movs	r3, #3
  }
  
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	200029c8 	.word	0x200029c8

0800371c <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 8003722:	1dfb      	adds	r3, r7, #7
 8003724:	461a      	mov	r2, r3
 8003726:	2101      	movs	r1, #1
 8003728:	206c      	movs	r0, #108	; 0x6c
 800372a:	f000 ff8f 	bl	800464c <RadioSpiReadRegisters>
 800372e:	4602      	mov	r2, r0
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <SpiritRadioGetChannel+0x2c>)
 8003732:	b212      	sxth	r2, r2
 8003734:	4611      	mov	r1, r2
 8003736:	7019      	strb	r1, [r3, #0]
 8003738:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800373c:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 800373e:	79fb      	ldrb	r3, [r7, #7]
  
}
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	200029c8 	.word	0x200029c8

0800374c <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 8003752:	1dfb      	adds	r3, r7, #7
 8003754:	461a      	mov	r2, r3
 8003756:	2101      	movs	r1, #1
 8003758:	200c      	movs	r0, #12
 800375a:	f000 ff77 	bl	800464c <RadioSpiReadRegisters>
 800375e:	4602      	mov	r2, r0
 8003760:	4b08      	ldr	r3, [pc, #32]	; (8003784 <SpiritRadioGetChannelSpace+0x38>)
 8003762:	b212      	sxth	r2, r2
 8003764:	4611      	mov	r1, r2
 8003766:	7019      	strb	r1, [r3, #0]
 8003768:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800376c:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	461a      	mov	r2, r3
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <SpiritRadioGetChannelSpace+0x3c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	fb02 f303 	mul.w	r3, r2, r3
 800377a:	0bdb      	lsrs	r3, r3, #15
  
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	200029c8 	.word	0x200029c8
 8003788:	200029c4 	.word	0x200029c4

0800378c <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	461a      	mov	r2, r3
 8003796:	2102      	movs	r1, #2
 8003798:	200e      	movs	r0, #14
 800379a:	f000 ff57 	bl	800464c <RadioSpiReadRegisters>
 800379e:	4602      	mov	r2, r0
 80037a0:	4b1a      	ldr	r3, [pc, #104]	; (800380c <SpiritRadioGetFrequencyOffset+0x80>)
 80037a2:	b212      	sxth	r2, r2
 80037a4:	4611      	mov	r1, r2
 80037a6:	7019      	strb	r1, [r3, #0]
 80037a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80037ac:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 80037ae:	793b      	ldrb	r3, [r7, #4]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	797b      	ldrb	r3, [r7, #5]
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	b29b      	uxth	r3, r3
 80037be:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 80037c0:	887b      	ldrh	r3, [r7, #2]
 80037c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 80037ca:	887b      	ldrh	r3, [r7, #2]
 80037cc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80037d0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	807b      	strh	r3, [r7, #2]
 80037d8:	e004      	b.n	80037e4 <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 80037da:	887b      	ldrh	r3, [r7, #2]
 80037dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 80037e4:	1cbb      	adds	r3, r7, #2
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 80037ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037ee:	4a08      	ldr	r2, [pc, #32]	; (8003810 <SpiritRadioGetFrequencyOffset+0x84>)
 80037f0:	6812      	ldr	r2, [r2, #0]
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	da03      	bge.n	8003802 <SpiritRadioGetFrequencyOffset+0x76>
 80037fa:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 80037fe:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003802:	149b      	asrs	r3, r3, #18
  
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	200029c8 	.word	0x200029c8
 8003810:	200029c4 	.word	0x200029c4

08003814 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 8003814:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003818:	b08a      	sub	sp, #40	; 0x28
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 800381e:	2300      	movs	r3, #0
 8003820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a79      	ldr	r2, [pc, #484]	; (8003a0c <SpiritRadioSetFrequencyBase+0x1f8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d307      	bcc.n	800383c <SpiritRadioSetFrequencyBase+0x28>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a78      	ldr	r2, [pc, #480]	; (8003a10 <SpiritRadioSetFrequencyBase+0x1fc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d803      	bhi.n	800383c <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8003834:	2300      	movs	r3, #0
 8003836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800383a:	e022      	b.n	8003882 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a75      	ldr	r2, [pc, #468]	; (8003a14 <SpiritRadioSetFrequencyBase+0x200>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d907      	bls.n	8003854 <SpiritRadioSetFrequencyBase+0x40>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a74      	ldr	r2, [pc, #464]	; (8003a18 <SpiritRadioSetFrequencyBase+0x204>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d803      	bhi.n	8003854 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003852:	e016      	b.n	8003882 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a71      	ldr	r2, [pc, #452]	; (8003a1c <SpiritRadioSetFrequencyBase+0x208>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d907      	bls.n	800386c <SpiritRadioSetFrequencyBase+0x58>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a70      	ldr	r2, [pc, #448]	; (8003a20 <SpiritRadioSetFrequencyBase+0x20c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d803      	bhi.n	800386c <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8003864:	2302      	movs	r3, #2
 8003866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800386a:	e00a      	b.n	8003882 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a6d      	ldr	r2, [pc, #436]	; (8003a24 <SpiritRadioSetFrequencyBase+0x210>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d906      	bls.n	8003882 <SpiritRadioSetFrequencyBase+0x6e>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a6c      	ldr	r2, [pc, #432]	; (8003a28 <SpiritRadioSetFrequencyBase+0x214>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d802      	bhi.n	8003882 <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 800387c:	2303      	movs	r3, #3
 800387e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8003882:	f7ff ff83 	bl	800378c <SpiritRadioGetFrequencyOffset>
 8003886:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8003888:	f7ff ff60 	bl	800374c <SpiritRadioGetChannelSpace>
 800388c:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 800388e:	f7ff ff45 	bl	800371c <SpiritRadioGetChannel>
 8003892:	4603      	mov	r3, r0
 8003894:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8003896:	6a3a      	ldr	r2, [r7, #32]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	441a      	add	r2, r3
 800389c:	7efb      	ldrb	r3, [r7, #27]
 800389e:	69f9      	ldr	r1, [r7, #28]
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80038a8:	f000 fd60 	bl	800436c <SpiritRadioGetRefDiv>
 80038ac:	4603      	mov	r3, r0
 80038ae:	3301      	adds	r3, #1
 80038b0:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 80038b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d839      	bhi.n	800392e <SpiritRadioSetFrequencyBase+0x11a>
 80038ba:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <SpiritRadioSetFrequencyBase+0xac>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	08003919 	.word	0x08003919
 80038c4:	08003901 	.word	0x08003901
 80038c8:	080038e9 	.word	0x080038e9
 80038cc:	080038d1 	.word	0x080038d1
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	4a56      	ldr	r2, [pc, #344]	; (8003a2c <SpiritRadioSetFrequencyBase+0x218>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d803      	bhi.n	80038e0 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80038d8:	2000      	movs	r0, #0
 80038da:	f7fe fd6b 	bl	80023b4 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80038de:	e026      	b.n	800392e <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80038e0:	2001      	movs	r0, #1
 80038e2:	f7fe fd67 	bl	80023b4 <SpiritCalibrationSelectVco>
    break;
 80038e6:	e022      	b.n	800392e <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	4a51      	ldr	r2, [pc, #324]	; (8003a30 <SpiritRadioSetFrequencyBase+0x21c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d803      	bhi.n	80038f8 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80038f0:	2000      	movs	r0, #0
 80038f2:	f7fe fd5f 	bl	80023b4 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80038f6:	e01a      	b.n	800392e <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80038f8:	2001      	movs	r0, #1
 80038fa:	f7fe fd5b 	bl	80023b4 <SpiritCalibrationSelectVco>
    break;
 80038fe:	e016      	b.n	800392e <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	4a4c      	ldr	r2, [pc, #304]	; (8003a34 <SpiritRadioSetFrequencyBase+0x220>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d803      	bhi.n	8003910 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003908:	2000      	movs	r0, #0
 800390a:	f7fe fd53 	bl	80023b4 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800390e:	e00e      	b.n	800392e <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003910:	2001      	movs	r0, #1
 8003912:	f7fe fd4f 	bl	80023b4 <SpiritCalibrationSelectVco>
    break;
 8003916:	e00a      	b.n	800392e <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	4a47      	ldr	r2, [pc, #284]	; (8003a38 <SpiritRadioSetFrequencyBase+0x224>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d803      	bhi.n	8003928 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003920:	2000      	movs	r0, #0
 8003922:	f7fe fd47 	bl	80023b4 <SpiritCalibrationSelectVco>
 8003926:	e002      	b.n	800392e <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8003928:	2001      	movs	r0, #1
 800392a:	f7fe fd43 	bl	80023b4 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800392e:	6978      	ldr	r0, [r7, #20]
 8003930:	f7ff fe0c 	bl	800354c <SpiritRadioSearchWCP>
 8003934:	4603      	mov	r3, r0
 8003936:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8003938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800393c:	4a3f      	ldr	r2, [pc, #252]	; (8003a3c <SpiritRadioSetFrequencyBase+0x228>)
 800393e:	5cd3      	ldrb	r3, [r2, r3]
 8003940:	461a      	mov	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	fb02 f303 	mul.w	r3, r2, r3
 8003948:	4618      	mov	r0, r3
 800394a:	f7fc fddb 	bl	8000504 <__aeabi_ui2d>
 800394e:	4604      	mov	r4, r0
 8003950:	460d      	mov	r5, r1
 8003952:	7cfb      	ldrb	r3, [r7, #19]
 8003954:	049b      	lsls	r3, r3, #18
 8003956:	4618      	mov	r0, r3
 8003958:	f7fc fde4 	bl	8000524 <__aeabi_i2d>
 800395c:	4680      	mov	r8, r0
 800395e:	4689      	mov	r9, r1
 8003960:	4b37      	ldr	r3, [pc, #220]	; (8003a40 <SpiritRadioSetFrequencyBase+0x22c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7fc fdcd 	bl	8000504 <__aeabi_ui2d>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4640      	mov	r0, r8
 8003970:	4649      	mov	r1, r9
 8003972:	f7fc ff6b 	bl	800084c <__aeabi_ddiv>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	4620      	mov	r0, r4
 800397c:	4629      	mov	r1, r5
 800397e:	f7fc fe3b 	bl	80005f8 <__aeabi_dmul>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4610      	mov	r0, r2
 8003988:	4619      	mov	r1, r3
 800398a:	f7fd f847 	bl	8000a1c <__aeabi_d2uiz>
 800398e:	4603      	mov	r3, r0
 8003990:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	0d5b      	lsrs	r3, r3, #21
 8003996:	b2db      	uxtb	r3, r3
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	b2da      	uxtb	r2, r3
 800399e:	7cbb      	ldrb	r3, [r7, #18]
 80039a0:	015b      	lsls	r3, r3, #5
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	4313      	orrs	r3, r2
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	0b5b      	lsrs	r3, r3, #13
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039c6:	491f      	ldr	r1, [pc, #124]	; (8003a44 <SpiritRadioSetFrequencyBase+0x230>)
 80039c8:	5ccb      	ldrb	r3, [r1, r3]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80039d0:	f107 0308 	add.w	r3, r7, #8
 80039d4:	461a      	mov	r2, r3
 80039d6:	2104      	movs	r1, #4
 80039d8:	2008      	movs	r0, #8
 80039da:	f000 fdeb 	bl	80045b4 <RadioSpiWriteRegisters>
 80039de:	4602      	mov	r2, r0
 80039e0:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <SpiritRadioSetFrequencyBase+0x234>)
 80039e2:	b212      	sxth	r2, r2
 80039e4:	4611      	mov	r1, r2
 80039e6:	7019      	strb	r1, [r3, #0]
 80039e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80039ec:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 80039ee:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <SpiritRadioSetFrequencyBase+0x238>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d103      	bne.n	80039fe <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 80039f6:	f7fe ff3d 	bl	8002874 <SpiritManagementWaVcoCalibration>
 80039fa:	4603      	mov	r3, r0
 80039fc:	e000      	b.n	8003a00 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3728      	adds	r7, #40	; 0x28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a0a:	bf00      	nop
 8003a0c:	2e5f5680 	.word	0x2e5f5680
 8003a10:	390c2fe0 	.word	0x390c2fe0
 8003a14:	1701e47f 	.word	0x1701e47f
 8003a18:	1c146a60 	.word	0x1c146a60
 8003a1c:	11d260bf 	.word	0x11d260bf
 8003a20:	14ced7e0 	.word	0x14ced7e0
 8003a24:	08e18f3f 	.word	0x08e18f3f
 8003a28:	0a6fd060 	.word	0x0a6fd060
 8003a2c:	099cf4e1 	.word	0x099cf4e1
 8003a30:	1339e9c3 	.word	0x1339e9c3
 8003a34:	19a28d05 	.word	0x19a28d05
 8003a38:	33451a0a 	.word	0x33451a0a
 8003a3c:	0800c3f8 	.word	0x0800c3f8
 8003a40:	200029c4 	.word	0x200029c4
 8003a44:	0800c3fc 	.word	0x0800c3fc
 8003a48:	200029c8 	.word	0x200029c8
 8003a4c:	20000349 	.word	0x20000349

08003a50 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8003a50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8003a58:	f7ff fe0c 	bl	8003674 <SpiritRadioGetSynthWord>
 8003a5c:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 8003a5e:	f7ff fe2f 	bl	80036c0 <SpiritRadioGetBand>
 8003a62:	4603      	mov	r3, r0
 8003a64:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 8003a66:	f000 fc81 	bl	800436c <SpiritRadioGetRefDiv>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7fc fd47 	bl	8000504 <__aeabi_ui2d>
 8003a76:	4604      	mov	r4, r0
 8003a78:	460d      	mov	r5, r1
 8003a7a:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <SpiritRadioGetFrequencyBase+0x90>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fc fd40 	bl	8000504 <__aeabi_ui2d>
 8003a84:	4680      	mov	r8, r0
 8003a86:	4689      	mov	r9, r1
 8003a88:	78bb      	ldrb	r3, [r7, #2]
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	4915      	ldr	r1, [pc, #84]	; (8003ae4 <SpiritRadioGetFrequencyBase+0x94>)
 8003a8e:	5c8a      	ldrb	r2, [r1, r2]
 8003a90:	fb02 f303 	mul.w	r3, r2, r3
 8003a94:	049b      	lsls	r3, r3, #18
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fc fd44 	bl	8000524 <__aeabi_i2d>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4640      	mov	r0, r8
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	f7fc fed2 	bl	800084c <__aeabi_ddiv>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4620      	mov	r0, r4
 8003aae:	4629      	mov	r1, r5
 8003ab0:	f7fc fda2 	bl	80005f8 <__aeabi_dmul>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	ec43 2b17 	vmov	d7, r2, r3
 8003abc:	eeb0 0a47 	vmov.f32	s0, s14
 8003ac0:	eef0 0a67 	vmov.f32	s1, s15
 8003ac4:	f008 fa3a 	bl	800bf3c <round>
 8003ac8:	ec53 2b10 	vmov	r2, r3, d0
 8003acc:	4610      	mov	r0, r2
 8003ace:	4619      	mov	r1, r3
 8003ad0:	f7fc ffa4 	bl	8000a1c <__aeabi_d2uiz>
 8003ad4:	4603      	mov	r3, r0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ae0:	200029c4 	.word	0x200029c4
 8003ae4:	0800c3f8 	.word	0x0800c3f8

08003ae8 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 8003af8:	230f      	movs	r3, #15
 8003afa:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 8003b00:	f000 fc86 	bl	8004410 <SpiritRadioGetDigDiv>
 8003b04:	4603      	mov	r3, r0
 8003b06:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 8003b08:	e015      	b.n	8003b36 <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 8003b0a:	4b4f      	ldr	r3, [pc, #316]	; (8003c48 <SpiritRadioSearchDatarateME+0x160>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b12:	f1c3 0114 	rsb	r1, r3, #20
 8003b16:	7ebb      	ldrb	r3, [r7, #26]
 8003b18:	440b      	add	r3, r1
 8003b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d302      	bcc.n	8003b2a <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 8003b24:	2301      	movs	r3, #1
 8003b26:	763b      	strb	r3, [r7, #24]
 8003b28:	e005      	b.n	8003b36 <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 8003b2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 8003b36:	7e3b      	ldrb	r3, [r7, #24]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d103      	bne.n	8003b46 <SpiritRadioSearchDatarateME+0x5e>
 8003b3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	dae1      	bge.n	8003b0a <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 8003b46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	da01      	bge.n	8003b52 <SpiritRadioSearchDatarateME+0x6a>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 8003b52:	7ffa      	ldrb	r2, [r7, #31]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8003b58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b5c:	f1c3 0317 	rsb	r3, r3, #23
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	409a      	lsls	r2, r3
 8003b64:	4b38      	ldr	r3, [pc, #224]	; (8003c48 <SpiritRadioSearchDatarateME+0x160>)
 8003b66:	6819      	ldr	r1, [r3, #0]
 8003b68:	7ebb      	ldrb	r3, [r7, #26]
 8003b6a:	3305      	adds	r3, #5
 8003b6c:	fa21 f303 	lsr.w	r3, r1, r3
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8003b76:	2300      	movs	r3, #0
 8003b78:	77bb      	strb	r3, [r7, #30]
 8003b7a:	e031      	b.n	8003be0 <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 8003b7c:	7e7a      	ldrb	r2, [r7, #25]
 8003b7e:	7fbb      	ldrb	r3, [r7, #30]
 8003b80:	4413      	add	r3, r2
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d021      	beq.n	8003bca <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	7e7b      	ldrb	r3, [r7, #25]
 8003b8c:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8003b90:	7fbb      	ldrb	r3, [r7, #30]
 8003b92:	440b      	add	r3, r1
 8003b94:	3b01      	subs	r3, #1
 8003b96:	4618      	mov	r0, r3
 8003b98:	4b2b      	ldr	r3, [pc, #172]	; (8003c48 <SpiritRadioSearchDatarateME+0x160>)
 8003b9a:	6819      	ldr	r1, [r3, #0]
 8003b9c:	7ebb      	ldrb	r3, [r7, #26]
 8003b9e:	3305      	adds	r3, #5
 8003ba0:	fa21 f303 	lsr.w	r3, r1, r3
 8003ba4:	fb03 f100 	mul.w	r1, r3, r0
 8003ba8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003bac:	f1c3 0317 	rsb	r3, r3, #23
 8003bb0:	fa21 f303 	lsr.w	r3, r1, r3
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	7fbb      	ldrb	r3, [r7, #30]
 8003bbc:	b212      	sxth	r2, r2
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	3320      	adds	r3, #32
 8003bc2:	443b      	add	r3, r7
 8003bc4:	f823 2c10 	strh.w	r2, [r3, #-16]
 8003bc8:	e007      	b.n	8003bda <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 8003bca:	7fbb      	ldrb	r3, [r7, #30]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	3320      	adds	r3, #32
 8003bd0:	443b      	add	r3, r7
 8003bd2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003bd6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 8003bda:	7fbb      	ldrb	r3, [r7, #30]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	77bb      	strb	r3, [r7, #30]
 8003be0:	7fbb      	ldrb	r3, [r7, #30]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d9ca      	bls.n	8003b7c <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 8003be6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bea:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 8003bec:	2300      	movs	r3, #0
 8003bee:	76fb      	strb	r3, [r7, #27]
 8003bf0:	e021      	b.n	8003c36 <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 8003bf2:	7efb      	ldrb	r3, [r7, #27]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	3320      	adds	r3, #32
 8003bf8:	443b      	add	r3, r7
 8003bfa:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bfb8      	it	lt
 8003c02:	425b      	neglt	r3, r3
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	8bba      	ldrh	r2, [r7, #28]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d911      	bls.n	8003c30 <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 8003c0c:	7efb      	ldrb	r3, [r7, #27]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	3320      	adds	r3, #32
 8003c12:	443b      	add	r3, r7
 8003c14:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bfb8      	it	lt
 8003c1c:	425b      	neglt	r3, r3
 8003c1e:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 8003c20:	7e7a      	ldrb	r2, [r7, #25]
 8003c22:	7efb      	ldrb	r3, [r7, #27]
 8003c24:	4413      	add	r3, r2
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003c30:	7efb      	ldrb	r3, [r7, #27]
 8003c32:	3301      	adds	r3, #1
 8003c34:	76fb      	strb	r3, [r7, #27]
 8003c36:	7efb      	ldrb	r3, [r7, #27]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d9da      	bls.n	8003bf2 <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	200029c4 	.word	0x200029c4

08003c4c <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08a      	sub	sp, #40	; 0x28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8003c5e:	f000 fbd7 	bl	8004410 <SpiritRadioGetDigDiv>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003c6e:	e002      	b.n	8003c76 <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003c70:	2301      	movs	r3, #1
 8003c72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8003c76:	4b63      	ldr	r3, [pc, #396]	; (8003e04 <SpiritRadioSearchChannelBwME+0x1b8>)
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c82:	4a61      	ldr	r2, [pc, #388]	; (8003e08 <SpiritRadioSearchChannelBwME+0x1bc>)
 8003c84:	fba2 2303 	umull	r2, r3, r2, r3
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c92:	e006      	b.n	8003ca2 <SpiritRadioSearchChannelBwME+0x56>
 8003c94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ca2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ca6:	2b59      	cmp	r3, #89	; 0x59
 8003ca8:	dc0f      	bgt.n	8003cca <SpiritRadioSearchChannelBwME+0x7e>
 8003caa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003cae:	4a57      	ldr	r2, [pc, #348]	; (8003e0c <SpiritRadioSearchChannelBwME+0x1c0>)
 8003cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	fb02 f303 	mul.w	r3, r2, r3
 8003cbc:	4a54      	ldr	r2, [pc, #336]	; (8003e10 <SpiritRadioSearchChannelBwME+0x1c4>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	0adb      	lsrs	r3, r3, #11
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d3e4      	bcc.n	8003c94 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 8003cca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d077      	beq.n	8003dc2 <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 8003cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cd6:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003cde:	e03a      	b.n	8003d56 <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8003ce0:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003ce4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003ce8:	4413      	add	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	dc06      	bgt.n	8003cfc <SpiritRadioSearchChannelBwME+0xb0>
 8003cee:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003cf2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003cf6:	4413      	add	r3, r2
 8003cf8:	2b5a      	cmp	r3, #90	; 0x5a
 8003cfa:	dc1e      	bgt.n	8003d3a <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8003d04:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d08:	440b      	add	r3, r1
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	493f      	ldr	r1, [pc, #252]	; (8003e0c <SpiritRadioSearchChannelBwME+0x1c0>)
 8003d0e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003d12:	4619      	mov	r1, r3
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	493d      	ldr	r1, [pc, #244]	; (8003e10 <SpiritRadioSearchChannelBwME+0x1c4>)
 8003d1c:	fba1 1303 	umull	r1, r3, r1, r3
 8003d20:	0adb      	lsrs	r3, r3, #11
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d2c:	b212      	sxth	r2, r2
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	3328      	adds	r3, #40	; 0x28
 8003d32:	443b      	add	r3, r7
 8003d34:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003d38:	e008      	b.n	8003d4c <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 8003d3a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	3328      	adds	r3, #40	; 0x28
 8003d42:	443b      	add	r3, r7
 8003d44:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003d48:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 8003d4c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d50:	3301      	adds	r3, #1
 8003d52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003d56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d9c0      	bls.n	8003ce0 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8003d5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d62:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003d64:	2300      	movs	r3, #0
 8003d66:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003d6a:	e026      	b.n	8003dba <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8003d6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	3328      	adds	r3, #40	; 0x28
 8003d74:	443b      	add	r3, r7
 8003d76:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	bfb8      	it	lt
 8003d7e:	425b      	neglt	r3, r3
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d913      	bls.n	8003db0 <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8003d88:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	3328      	adds	r3, #40	; 0x28
 8003d90:	443b      	add	r3, r7
 8003d92:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	bfb8      	it	lt
 8003d9a:	425b      	neglt	r3, r3
 8003d9c:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 8003d9e:	7efa      	ldrb	r2, [r7, #27]
 8003da0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003da4:	4413      	add	r3, r2
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 8003db0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003db4:	3301      	adds	r3, #1
 8003db6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003dba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d9d4      	bls.n	8003d6c <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 8003dc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003dc6:	4a13      	ldr	r2, [pc, #76]	; (8003e14 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003dc8:	fb82 1203 	smull	r1, r2, r2, r3
 8003dcc:	1052      	asrs	r2, r2, #1
 8003dce:	17db      	asrs	r3, r3, #31
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	b25b      	sxtb	r3, r3
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 8003dda:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8003dde:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003de0:	fb83 1302 	smull	r1, r3, r3, r2
 8003de4:	1059      	asrs	r1, r3, #1
 8003de6:	17d3      	asrs	r3, r2, #31
 8003de8:	1ac9      	subs	r1, r1, r3
 8003dea:	460b      	mov	r3, r1
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	440b      	add	r3, r1
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	b25b      	sxtb	r3, r3
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	701a      	strb	r2, [r3, #0]
  
}
 8003dfa:	bf00      	nop
 8003dfc:	3728      	adds	r7, #40	; 0x28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	200029c4 	.word	0x200029c4
 8003e08:	51eb851f 	.word	0x51eb851f
 8003e0c:	0800c400 	.word	0x0800c400
 8003e10:	c9a633fd 	.word	0xc9a633fd
 8003e14:	38e38e39 	.word	0x38e38e39

08003e18 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003e18:	b5b0      	push	{r4, r5, r7, lr}
 8003e1a:	b08a      	sub	sp, #40	; 0x28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003e28:	4b53      	ldr	r3, [pc, #332]	; (8003f78 <SpiritRadioSearchFreqDevME+0x160>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	ee07 3a90 	vmov	s15, r3
 8003e30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e34:	eddf 6a51 	vldr	s13, [pc, #324]	; 8003f7c <SpiritRadioSearchFreqDevME+0x164>
 8003e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e3c:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8003e40:	2300      	movs	r3, #0
 8003e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e46:	e028      	b.n	8003e9a <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8003e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fc fb66 	bl	8000524 <__aeabi_i2d>
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	4b48      	ldr	r3, [pc, #288]	; (8003f80 <SpiritRadioSearchFreqDevME+0x168>)
 8003e5e:	f7fc fbcb 	bl	80005f8 <__aeabi_dmul>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	f7fc fdd7 	bl	8000a1c <__aeabi_d2uiz>
 8003e6e:	ee07 0a90 	vmov	s15, r0
 8003e72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e76:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e82:	ee17 3a90 	vmov	r3, s15
 8003e86:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d309      	bcc.n	8003ea4 <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 8003e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e94:	3301      	adds	r3, #1
 8003e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e9e:	2b09      	cmp	r3, #9
 8003ea0:	d9d2      	bls.n	8003e48 <SpiritRadioSearchFreqDevME+0x30>
 8003ea2:	e000      	b.n	8003ea6 <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8003ea4:	bf00      	nop
  }
  (*pcE) = i;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003eac:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003eb4:	e043      	b.n	8003f3e <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 8003eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fc fb30 	bl	8000524 <__aeabi_i2d>
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	4b2e      	ldr	r3, [pc, #184]	; (8003f84 <SpiritRadioSearchFreqDevME+0x16c>)
 8003eca:	f7fc f9df 	bl	800028c <__adddf3>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ede:	f7fc fcb5 	bl	800084c <__aeabi_ddiv>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4614      	mov	r4, r2
 8003ee8:	461d      	mov	r5, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	4093      	lsls	r3, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fc fb15 	bl	8000524 <__aeabi_i2d>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4620      	mov	r0, r4
 8003f00:	4629      	mov	r1, r5
 8003f02:	f7fc fb79 	bl	80005f8 <__aeabi_dmul>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	f7fc fd85 	bl	8000a1c <__aeabi_d2uiz>
 8003f12:	ee07 0a90 	vmov	s15, r0
 8003f16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f26:	ee17 3a90 	vmov	r3, s15
 8003f2a:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d309      	bcc.n	8003f48 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 8003f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f38:	3301      	adds	r3, #1
 8003f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f42:	2b07      	cmp	r3, #7
 8003f44:	d9b7      	bls.n	8003eb6 <SpiritRadioSearchFreqDevME+0x9e>
 8003f46:	e000      	b.n	8003f4a <SpiritRadioSearchFreqDevME+0x132>
      break;
 8003f48:	bf00      	nop
  }
  
  (*pcM)=i;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003f50:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	1ad2      	subs	r2, r2, r3
 8003f58:	69f9      	ldr	r1, [r7, #28]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1acb      	subs	r3, r1, r3
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d205      	bcs.n	8003f6e <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	701a      	strb	r2, [r3, #0]
  
}
 8003f6e:	bf00      	nop
 8003f70:	3728      	adds	r7, #40	; 0x28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bdb0      	pop	{r4, r5, r7, pc}
 8003f76:	bf00      	nop
 8003f78:	200029c4 	.word	0x200029c4
 8003f7c:	48800000 	.word	0x48800000
 8003f80:	401e0000 	.word	0x401e0000
 8003f84:	40200000 	.word	0x40200000

08003f88 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4a74      	ldr	r2, [pc, #464]	; (8004170 <SpiritRadioGetdBm2Reg+0x1e8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d30c      	bcc.n	8003fbe <SpiritRadioGetdBm2Reg+0x36>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4a73      	ldr	r2, [pc, #460]	; (8004174 <SpiritRadioGetdBm2Reg+0x1ec>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d808      	bhi.n	8003fbe <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4a71      	ldr	r2, [pc, #452]	; (8004178 <SpiritRadioGetdBm2Reg+0x1f0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d822      	bhi.n	8003ffe <SpiritRadioGetdBm2Reg+0x76>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	75fb      	strb	r3, [r7, #23]
 8003fbc:	e01f      	b.n	8003ffe <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4a6e      	ldr	r2, [pc, #440]	; (800417c <SpiritRadioGetdBm2Reg+0x1f4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d906      	bls.n	8003fd4 <SpiritRadioGetdBm2Reg+0x4c>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4a6d      	ldr	r2, [pc, #436]	; (8004180 <SpiritRadioGetdBm2Reg+0x1f8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d802      	bhi.n	8003fd4 <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	75fb      	strb	r3, [r7, #23]
 8003fd2:	e014      	b.n	8003ffe <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4a6b      	ldr	r2, [pc, #428]	; (8004184 <SpiritRadioGetdBm2Reg+0x1fc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d906      	bls.n	8003fea <SpiritRadioGetdBm2Reg+0x62>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4a6a      	ldr	r2, [pc, #424]	; (8004188 <SpiritRadioGetdBm2Reg+0x200>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d802      	bhi.n	8003fea <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	75fb      	strb	r3, [r7, #23]
 8003fe8:	e009      	b.n	8003ffe <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4a67      	ldr	r2, [pc, #412]	; (800418c <SpiritRadioGetdBm2Reg+0x204>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d905      	bls.n	8003ffe <SpiritRadioGetdBm2Reg+0x76>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4a66      	ldr	r2, [pc, #408]	; (8004190 <SpiritRadioGetdBm2Reg+0x208>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d801      	bhi.n	8003ffe <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 8003ffa:	2304      	movs	r3, #4
 8003ffc:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 8003ffe:	2301      	movs	r3, #1
 8004000:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8004002:	edd7 7a02 	vldr	s15, [r7, #8]
 8004006:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800400a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400e:	dd2f      	ble.n	8004070 <SpiritRadioGetdBm2Reg+0xe8>
 8004010:	7dfa      	ldrb	r2, [r7, #23]
 8004012:	4960      	ldr	r1, [pc, #384]	; (8004194 <SpiritRadioGetdBm2Reg+0x20c>)
 8004014:	4613      	mov	r3, r2
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	4413      	add	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	440b      	add	r3, r1
 800401e:	3308      	adds	r3, #8
 8004020:	edd3 7a00 	vldr	s15, [r3]
 8004024:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8004028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800402c:	7dfa      	ldrb	r2, [r7, #23]
 800402e:	4959      	ldr	r1, [pc, #356]	; (8004194 <SpiritRadioGetdBm2Reg+0x20c>)
 8004030:	4613      	mov	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	440b      	add	r3, r1
 800403a:	330c      	adds	r3, #12
 800403c:	ed93 6a00 	vldr	s12, [r3]
 8004040:	7dfa      	ldrb	r2, [r7, #23]
 8004042:	4954      	ldr	r1, [pc, #336]	; (8004194 <SpiritRadioGetdBm2Reg+0x20c>)
 8004044:	4613      	mov	r3, r2
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	4413      	add	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	440b      	add	r3, r1
 800404e:	3308      	adds	r3, #8
 8004050:	edd3 6a00 	vldr	s13, [r3]
 8004054:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800405c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004060:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004068:	dd02      	ble.n	8004070 <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 800406a:	2300      	movs	r3, #0
 800406c:	75bb      	strb	r3, [r7, #22]
 800406e:	e035      	b.n	80040dc <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8004070:	edd7 7a02 	vldr	s15, [r7, #8]
 8004074:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407c:	d82e      	bhi.n	80040dc <SpiritRadioGetdBm2Reg+0x154>
 800407e:	7dfa      	ldrb	r2, [r7, #23]
 8004080:	4944      	ldr	r1, [pc, #272]	; (8004194 <SpiritRadioGetdBm2Reg+0x20c>)
 8004082:	4613      	mov	r3, r2
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4413      	add	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	440b      	add	r3, r1
 800408c:	3308      	adds	r3, #8
 800408e:	edd3 7a00 	vldr	s15, [r3]
 8004092:	eddf 6a41 	vldr	s13, [pc, #260]	; 8004198 <SpiritRadioGetdBm2Reg+0x210>
 8004096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800409a:	7dfa      	ldrb	r2, [r7, #23]
 800409c:	493d      	ldr	r1, [pc, #244]	; (8004194 <SpiritRadioGetdBm2Reg+0x20c>)
 800409e:	4613      	mov	r3, r2
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	4413      	add	r3, r2
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	440b      	add	r3, r1
 80040a8:	330c      	adds	r3, #12
 80040aa:	ed93 6a00 	vldr	s12, [r3]
 80040ae:	7dfa      	ldrb	r2, [r7, #23]
 80040b0:	4938      	ldr	r1, [pc, #224]	; (8004194 <SpiritRadioGetdBm2Reg+0x20c>)
 80040b2:	4613      	mov	r3, r2
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4413      	add	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	440b      	add	r3, r1
 80040bc:	3308      	adds	r3, #8
 80040be:	edd3 6a00 	vldr	s13, [r3]
 80040c2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80040c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80040ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d6:	d501      	bpl.n	80040dc <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 80040d8:	2302      	movs	r3, #2
 80040da:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 80040dc:	7dfa      	ldrb	r2, [r7, #23]
 80040de:	7dbb      	ldrb	r3, [r7, #22]
 80040e0:	0059      	lsls	r1, r3, #1
 80040e2:	482c      	ldr	r0, [pc, #176]	; (8004194 <SpiritRadioGetdBm2Reg+0x20c>)
 80040e4:	4613      	mov	r3, r2
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	4413      	add	r3, r2
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	440b      	add	r3, r1
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4403      	add	r3, r0
 80040f2:	ed93 7a00 	vldr	s14, [r3]
 80040f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80040fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040fe:	7dfa      	ldrb	r2, [r7, #23]
 8004100:	7dbb      	ldrb	r3, [r7, #22]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	1c59      	adds	r1, r3, #1
 8004106:	4823      	ldr	r0, [pc, #140]	; (8004194 <SpiritRadioGetdBm2Reg+0x20c>)
 8004108:	4613      	mov	r3, r2
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	4413      	add	r3, r2
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	440b      	add	r3, r1
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4403      	add	r3, r0
 8004116:	edd3 7a00 	vldr	s15, [r3]
 800411a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800411e:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 8004122:	edd7 7a04 	vldr	s15, [r7, #16]
 8004126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800412a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800412e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004132:	d503      	bpl.n	800413c <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 8004134:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	e00a      	b.n	8004152 <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 800413c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004140:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800419c <SpiritRadioGetdBm2Reg+0x214>
 8004144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800414c:	dd01      	ble.n	8004152 <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 800414e:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <SpiritRadioGetdBm2Reg+0x218>)
 8004150:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 8004152:	edd7 7a04 	vldr	s15, [r7, #16]
 8004156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800415a:	edc7 7a01 	vstr	s15, [r7, #4]
 800415e:	793b      	ldrb	r3, [r7, #4]
 8004160:	b2db      	uxtb	r3, r3
}
 8004162:	4618      	mov	r0, r3
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	2e5f5680 	.word	0x2e5f5680
 8004174:	390c2fe0 	.word	0x390c2fe0
 8004178:	35a4e8ff 	.word	0x35a4e8ff
 800417c:	1701e47f 	.word	0x1701e47f
 8004180:	1c146a60 	.word	0x1c146a60
 8004184:	11d260bf 	.word	0x11d260bf
 8004188:	14ced7e0 	.word	0x14ced7e0
 800418c:	08e18f3f 	.word	0x08e18f3f
 8004190:	0a6fd060 	.word	0x0a6fd060
 8004194:	0800c4d4 	.word	0x0800c4d4
 8004198:	42200000 	.word	0x42200000
 800419c:	42b40000 	.word	0x42b40000
 80041a0:	42b40000 	.word	0x42b40000

080041a4 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	ed87 0a00 	vstr	s0, [r7]
 80041b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 80041b2:	f7ff fc4d 	bl	8003a50 <SpiritRadioGetFrequencyBase>
 80041b6:	4603      	mov	r3, r0
 80041b8:	ed97 0a00 	vldr	s0, [r7]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fee3 	bl	8003f88 <SpiritRadioGetdBm2Reg>
 80041c2:	4603      	mov	r3, r0
 80041c4:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	f1c3 0317 	rsb	r3, r3, #23
 80041cc:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 80041ce:	f107 020e 	add.w	r2, r7, #14
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	2101      	movs	r1, #1
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 f9ec 	bl	80045b4 <RadioSpiWriteRegisters>
 80041dc:	4602      	mov	r2, r0
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <SpiritRadioSetPALeveldBm+0x50>)
 80041e0:	b212      	sxth	r2, r2
 80041e2:	4611      	mov	r1, r2
 80041e4:	7019      	strb	r1, [r3, #0]
 80041e6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80041ea:	705a      	strb	r2, [r3, #1]
  
}
 80041ec:	bf00      	nop
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	200029c8 	.word	0x200029c8

080041f8 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8004202:	f107 030f 	add.w	r3, r7, #15
 8004206:	461a      	mov	r2, r3
 8004208:	2101      	movs	r1, #1
 800420a:	2018      	movs	r0, #24
 800420c:	f000 fa1e 	bl	800464c <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004216:	b2db      	uxtb	r3, r3
 8004218:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 800421a:	7bfa      	ldrb	r2, [r7, #15]
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	4313      	orrs	r3, r2
 8004220:	b2db      	uxtb	r3, r3
 8004222:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8004224:	f107 030f 	add.w	r3, r7, #15
 8004228:	461a      	mov	r2, r3
 800422a:	2101      	movs	r1, #1
 800422c:	2018      	movs	r0, #24
 800422e:	f000 f9c1 	bl	80045b4 <RadioSpiWriteRegisters>
 8004232:	4602      	mov	r2, r0
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <SpiritRadioSetPACwc+0x54>)
 8004236:	b212      	sxth	r2, r2
 8004238:	4611      	mov	r1, r2
 800423a:	7019      	strb	r1, [r3, #0]
 800423c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004240:	705a      	strb	r2, [r3, #1]
  
}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	200029c8 	.word	0x200029c8

08004250 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800425a:	f107 030f 	add.w	r3, r7, #15
 800425e:	461a      	mov	r2, r3
 8004260:	2101      	movs	r1, #1
 8004262:	2018      	movs	r0, #24
 8004264:	f000 f9f2 	bl	800464c <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	f023 0307 	bic.w	r3, r3, #7
 800426e:	b2db      	uxtb	r3, r3
 8004270:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 8004272:	7bfa      	ldrb	r2, [r7, #15]
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	4313      	orrs	r3, r2
 8004278:	b2db      	uxtb	r3, r3
 800427a:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800427c:	f107 030f 	add.w	r3, r7, #15
 8004280:	461a      	mov	r2, r3
 8004282:	2101      	movs	r1, #1
 8004284:	2018      	movs	r0, #24
 8004286:	f000 f995 	bl	80045b4 <RadioSpiWriteRegisters>
 800428a:	4602      	mov	r2, r0
 800428c:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <SpiritRadioSetPALevelMaxIndex+0x54>)
 800428e:	b212      	sxth	r2, r2
 8004290:	4611      	mov	r1, r2
 8004292:	7019      	strb	r1, [r3, #0]
 8004294:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004298:	705a      	strb	r2, [r3, #1]
  
}
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	200029c8 	.word	0x200029c8

080042a8 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 80042b2:	2300      	movs	r3, #0
 80042b4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 80042b6:	f107 030f 	add.w	r3, r7, #15
 80042ba:	461a      	mov	r2, r3
 80042bc:	2101      	movs	r1, #1
 80042be:	201e      	movs	r0, #30
 80042c0:	f000 f9c4 	bl	800464c <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d105      	bne.n	80042d6 <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	73fb      	strb	r3, [r7, #15]
 80042d4:	e004      	b.n	80042e0 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
 80042d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 80042e0:	f107 030f 	add.w	r3, r7, #15
 80042e4:	461a      	mov	r2, r3
 80042e6:	2101      	movs	r1, #1
 80042e8:	201e      	movs	r0, #30
 80042ea:	f000 f963 	bl	80045b4 <RadioSpiWriteRegisters>
 80042ee:	4602      	mov	r2, r0
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <SpiritRadioAFCFreezeOnSync+0x60>)
 80042f2:	b212      	sxth	r2, r2
 80042f4:	4611      	mov	r1, r2
 80042f6:	7019      	strb	r1, [r3, #0]
 80042f8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80042fc:	705a      	strb	r2, [r3, #1]
  
}
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	200029c8 	.word	0x200029c8

0800430c <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	4603      	mov	r3, r0
 8004314:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8004316:	f107 030f 	add.w	r3, r7, #15
 800431a:	461a      	mov	r2, r3
 800431c:	2101      	movs	r1, #1
 800431e:	209e      	movs	r0, #158	; 0x9e
 8004320:	f000 f994 	bl	800464c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d105      	bne.n	8004336 <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004330:	b2db      	uxtb	r3, r3
 8004332:	73fb      	strb	r3, [r7, #15]
 8004334:	e004      	b.n	8004340 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800433c:	b2db      	uxtb	r3, r3
 800433e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8004340:	f107 030f 	add.w	r3, r7, #15
 8004344:	461a      	mov	r2, r3
 8004346:	2101      	movs	r1, #1
 8004348:	209e      	movs	r0, #158	; 0x9e
 800434a:	f000 f933 	bl	80045b4 <RadioSpiWriteRegisters>
 800434e:	4602      	mov	r2, r0
 8004350:	4b05      	ldr	r3, [pc, #20]	; (8004368 <SpiritRadioSetRefDiv+0x5c>)
 8004352:	b212      	sxth	r2, r2
 8004354:	4611      	mov	r1, r2
 8004356:	7019      	strb	r1, [r3, #0]
 8004358:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800435c:	705a      	strb	r2, [r3, #1]
  
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	200029c8 	.word	0x200029c8

0800436c <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8004372:	1dfb      	adds	r3, r7, #7
 8004374:	461a      	mov	r2, r3
 8004376:	2101      	movs	r1, #1
 8004378:	209e      	movs	r0, #158	; 0x9e
 800437a:	f000 f967 	bl	800464c <RadioSpiReadRegisters>
 800437e:	4602      	mov	r2, r0
 8004380:	4b0a      	ldr	r3, [pc, #40]	; (80043ac <SpiritRadioGetRefDiv+0x40>)
 8004382:	b212      	sxth	r2, r2
 8004384:	4611      	mov	r1, r2
 8004386:	7019      	strb	r1, [r3, #0]
 8004388:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800438c:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	09db      	lsrs	r3, r3, #7
 8004392:	b2db      	uxtb	r3, r3
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 80043a0:	2300      	movs	r3, #0
  }
  
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	200029c8 	.word	0x200029c8

080043b0 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80043ba:	f107 030f 	add.w	r3, r7, #15
 80043be:	461a      	mov	r2, r3
 80043c0:	2101      	movs	r1, #1
 80043c2:	20b4      	movs	r0, #180	; 0xb4
 80043c4:	f000 f942 	bl	800464c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d105      	bne.n	80043da <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	f023 0308 	bic.w	r3, r3, #8
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	73fb      	strb	r3, [r7, #15]
 80043d8:	e004      	b.n	80043e4 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 80043da:	7bfb      	ldrb	r3, [r7, #15]
 80043dc:	f043 0308 	orr.w	r3, r3, #8
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80043e4:	f107 030f 	add.w	r3, r7, #15
 80043e8:	461a      	mov	r2, r3
 80043ea:	2101      	movs	r1, #1
 80043ec:	20b4      	movs	r0, #180	; 0xb4
 80043ee:	f000 f8e1 	bl	80045b4 <RadioSpiWriteRegisters>
 80043f2:	4602      	mov	r2, r0
 80043f4:	4b05      	ldr	r3, [pc, #20]	; (800440c <SpiritRadioSetDigDiv+0x5c>)
 80043f6:	b212      	sxth	r2, r2
 80043f8:	4611      	mov	r1, r2
 80043fa:	7019      	strb	r1, [r3, #0]
 80043fc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004400:	705a      	strb	r2, [r3, #1]
  
}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	200029c8 	.word	0x200029c8

08004410 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8004416:	1dfb      	adds	r3, r7, #7
 8004418:	461a      	mov	r2, r3
 800441a:	2101      	movs	r1, #1
 800441c:	20b4      	movs	r0, #180	; 0xb4
 800441e:	f000 f915 	bl	800464c <RadioSpiReadRegisters>
 8004422:	4602      	mov	r2, r0
 8004424:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <SpiritRadioGetDigDiv+0x40>)
 8004426:	b212      	sxth	r2, r2
 8004428:	4611      	mov	r1, r2
 800442a:	7019      	strb	r1, [r3, #0]
 800442c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004430:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	08db      	lsrs	r3, r3, #3
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8004440:	2300      	movs	r3, #0
 8004442:	e000      	b.n	8004446 <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8004444:	2301      	movs	r3, #1
  }
  
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	200029c8 	.word	0x200029c8

08004454 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8004458:	4b03      	ldr	r3, [pc, #12]	; (8004468 <SpiritRadioGetXtalFrequency+0x14>)
 800445a:	681b      	ldr	r3, [r3, #0]
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	200029c4 	.word	0x200029c4

0800446c <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8004474:	4a04      	ldr	r2, [pc, #16]	; (8004488 <SpiritRadioSetXtalFrequency+0x1c>)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6013      	str	r3, [r2, #0]
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	200029c4 	.word	0x200029c4

0800448c <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	71fb      	strb	r3, [r7, #7]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 8004496:	1dfb      	adds	r3, r7, #7
 8004498:	461a      	mov	r2, r3
 800449a:	2101      	movs	r1, #1
 800449c:	2054      	movs	r0, #84	; 0x54
 800449e:	f000 f889 	bl	80045b4 <RadioSpiWriteRegisters>
 80044a2:	4602      	mov	r2, r0
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <SpiritTimerSetRxTimeoutCounter+0x30>)
 80044a6:	b212      	sxth	r2, r2
 80044a8:	4611      	mov	r1, r2
 80044aa:	7019      	strb	r1, [r3, #0]
 80044ac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80044b0:	705a      	strb	r2, [r3, #1]

}
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	200029c8 	.word	0x200029c8

080044c0 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 80044ca:	f107 030c 	add.w	r3, r7, #12
 80044ce:	461a      	mov	r2, r3
 80044d0:	2102      	movs	r1, #2
 80044d2:	204f      	movs	r0, #79	; 0x4f
 80044d4:	f000 f8ba 	bl	800464c <RadioSpiReadRegisters>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b1c      	ldr	r3, [pc, #112]	; (800454c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 80044dc:	b212      	sxth	r2, r2
 80044de:	4611      	mov	r1, r2
 80044e0:	7019      	strb	r1, [r3, #0]
 80044e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80044e6:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 80044e8:	7b3b      	ldrb	r3, [r7, #12]
 80044ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 80044f2:	7b3b      	ldrb	r3, [r7, #12]
 80044f4:	b25a      	sxtb	r2, r3
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	b25b      	sxtb	r3, r3
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	b25b      	sxtb	r3, r3
 8004502:	4313      	orrs	r3, r2
 8004504:	b25b      	sxtb	r3, r3
 8004506:	b2db      	uxtb	r3, r3
 8004508:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 800450a:	7b7b      	ldrb	r3, [r7, #13]
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	b2db      	uxtb	r3, r3
 8004512:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8004514:	7b7b      	ldrb	r3, [r7, #13]
 8004516:	b25a      	sxtb	r2, r3
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	015b      	lsls	r3, r3, #5
 800451c:	b25b      	sxtb	r3, r3
 800451e:	4313      	orrs	r3, r2
 8004520:	b25b      	sxtb	r3, r3
 8004522:	b2db      	uxtb	r3, r3
 8004524:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8004526:	f107 030c 	add.w	r3, r7, #12
 800452a:	461a      	mov	r2, r3
 800452c:	2102      	movs	r1, #2
 800452e:	204f      	movs	r0, #79	; 0x4f
 8004530:	f000 f840 	bl	80045b4 <RadioSpiWriteRegisters>
 8004534:	4602      	mov	r2, r0
 8004536:	4b05      	ldr	r3, [pc, #20]	; (800454c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8004538:	b212      	sxth	r2, r2
 800453a:	4611      	mov	r1, r2
 800453c:	7019      	strb	r1, [r3, #0]
 800453e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004542:	705a      	strb	r2, [r3, #1]

}
 8004544:	bf00      	nop
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	200029c8 	.word	0x200029c8

08004550 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 8004556:	1d3b      	adds	r3, r7, #4
 8004558:	461a      	mov	r2, r3
 800455a:	2102      	movs	r1, #2
 800455c:	20c0      	movs	r0, #192	; 0xc0
 800455e:	f000 f875 	bl	800464c <RadioSpiReadRegisters>
 8004562:	4603      	mov	r3, r0
 8004564:	4a09      	ldr	r2, [pc, #36]	; (800458c <SpiritRefreshStatus+0x3c>)
 8004566:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8004568:	4b08      	ldr	r3, [pc, #32]	; (800458c <SpiritRefreshStatus+0x3c>)
 800456a:	781a      	ldrb	r2, [r3, #0]
 800456c:	797b      	ldrb	r3, [r7, #5]
 800456e:	429a      	cmp	r2, r3
 8004570:	d1f1      	bne.n	8004556 <SpiritRefreshStatus+0x6>
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8004572:	4b07      	ldr	r3, [pc, #28]	; (8004590 <SpiritRefreshStatus+0x40>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 800457c:	4293      	cmp	r3, r2
 800457e:	d1ea      	bne.n	8004556 <SpiritRefreshStatus+0x6>

}
 8004580:	bf00      	nop
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	200029c8 	.word	0x200029c8
 8004590:	200029c9 	.word	0x200029c9

08004594 <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <RadioSpiInit+0x1c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <RadioSpiInit+0x16>
  {
    Error_Handler();
 80045a6:	f7fd faeb 	bl	8001b80 <Error_Handler>
  }
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	2000034c 	.word	0x2000034c

080045b4 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	4603      	mov	r3, r0
 80045bc:	603a      	str	r2, [r7, #0]
 80045be:	71fb      	strb	r3, [r7, #7]
 80045c0:	460b      	mov	r3, r1
 80045c2:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 80045c4:	2300      	movs	r3, #0
 80045c6:	743b      	strb	r3, [r7, #16]
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80045cc:	2017      	movs	r0, #23
 80045ce:	f000 faad 	bl	8004b2c <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 80045d2:	2200      	movs	r2, #0
 80045d4:	2140      	movs	r1, #64	; 0x40
 80045d6:	481b      	ldr	r0, [pc, #108]	; (8004644 <RadioSpiWriteRegisters+0x90>)
 80045d8:	f000 fc60 	bl	8004e9c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <RadioSpiWriteRegisters+0x94>)
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	f107 020c 	add.w	r2, r7, #12
 80045e4:	f107 0110 	add.w	r1, r7, #16
 80045e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	2302      	movs	r3, #2
 80045f0:	f002 fb25 	bl	8006c3e <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80045f4:	4b14      	ldr	r3, [pc, #80]	; (8004648 <RadioSpiWriteRegisters+0x94>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	79bb      	ldrb	r3, [r7, #6]
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004600:	6839      	ldr	r1, [r7, #0]
 8004602:	f002 f870 	bl	80066e6 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004606:	2201      	movs	r2, #1
 8004608:	2140      	movs	r1, #64	; 0x40
 800460a:	480e      	ldr	r0, [pc, #56]	; (8004644 <RadioSpiWriteRegisters+0x90>)
 800460c:	f000 fc46 	bl	8004e9c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004610:	2017      	movs	r0, #23
 8004612:	f000 fa7d 	bl	8004b10 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004616:	f107 0308 	add.w	r3, r7, #8
 800461a:	3301      	adds	r3, #1
 800461c:	7b3a      	ldrb	r2, [r7, #12]
 800461e:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004620:	f107 0308 	add.w	r3, r7, #8
 8004624:	7b7a      	ldrb	r2, [r7, #13]
 8004626:	701a      	strb	r2, [r3, #0]

  return status;
 8004628:	893b      	ldrh	r3, [r7, #8]
 800462a:	82bb      	strh	r3, [r7, #20]
 800462c:	2300      	movs	r3, #0
 800462e:	7d3a      	ldrb	r2, [r7, #20]
 8004630:	f362 0307 	bfi	r3, r2, #0, #8
 8004634:	7d7a      	ldrb	r2, [r7, #21]
 8004636:	f362 230f 	bfi	r3, r2, #8, #8

}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	48000400 	.word	0x48000400
 8004648:	2000034c 	.word	0x2000034c

0800464c <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af02      	add	r7, sp, #8
 8004652:	4603      	mov	r3, r0
 8004654:	603a      	str	r2, [r7, #0]
 8004656:	71fb      	strb	r3, [r7, #7]
 8004658:	460b      	mov	r3, r1
 800465a:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 800465c:	2301      	movs	r3, #1
 800465e:	743b      	strb	r3, [r7, #16]
 8004660:	79fb      	ldrb	r3, [r7, #7]
 8004662:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004664:	2017      	movs	r0, #23
 8004666:	f000 fa61 	bl	8004b2c <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800466a:	2200      	movs	r2, #0
 800466c:	2140      	movs	r1, #64	; 0x40
 800466e:	481b      	ldr	r0, [pc, #108]	; (80046dc <RadioSpiReadRegisters+0x90>)
 8004670:	f000 fc14 	bl	8004e9c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004674:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <RadioSpiReadRegisters+0x94>)
 8004676:	6818      	ldr	r0, [r3, #0]
 8004678:	f107 020c 	add.w	r2, r7, #12
 800467c:	f107 0110 	add.w	r1, r7, #16
 8004680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	2302      	movs	r3, #2
 8004688:	f002 fad9 	bl	8006c3e <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800468c:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <RadioSpiReadRegisters+0x94>)
 800468e:	6818      	ldr	r0, [r3, #0]
 8004690:	79bb      	ldrb	r3, [r7, #6]
 8004692:	b29a      	uxth	r2, r3
 8004694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004698:	6839      	ldr	r1, [r7, #0]
 800469a:	f002 f999 	bl	80069d0 <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800469e:	2201      	movs	r2, #1
 80046a0:	2140      	movs	r1, #64	; 0x40
 80046a2:	480e      	ldr	r0, [pc, #56]	; (80046dc <RadioSpiReadRegisters+0x90>)
 80046a4:	f000 fbfa 	bl	8004e9c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80046a8:	2017      	movs	r0, #23
 80046aa:	f000 fa31 	bl	8004b10 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80046ae:	f107 0308 	add.w	r3, r7, #8
 80046b2:	3301      	adds	r3, #1
 80046b4:	7b3a      	ldrb	r2, [r7, #12]
 80046b6:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80046b8:	f107 0308 	add.w	r3, r7, #8
 80046bc:	7b7a      	ldrb	r2, [r7, #13]
 80046be:	701a      	strb	r2, [r3, #0]

  return status;
 80046c0:	893b      	ldrh	r3, [r7, #8]
 80046c2:	82bb      	strh	r3, [r7, #20]
 80046c4:	2300      	movs	r3, #0
 80046c6:	7d3a      	ldrb	r2, [r7, #20]
 80046c8:	f362 0307 	bfi	r3, r2, #0, #8
 80046cc:	7d7a      	ldrb	r2, [r7, #21]
 80046ce:	f362 230f 	bfi	r3, r2, #8, #8
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	48000400 	.word	0x48000400
 80046e0:	2000034c 	.word	0x2000034c

080046e4 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	4603      	mov	r3, r0
 80046ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 80046ee:	2380      	movs	r3, #128	; 0x80
 80046f0:	743b      	strb	r3, [r7, #16]
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80046f6:	2017      	movs	r0, #23
 80046f8:	f000 fa18 	bl	8004b2c <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80046fc:	2200      	movs	r2, #0
 80046fe:	2140      	movs	r1, #64	; 0x40
 8004700:	4816      	ldr	r0, [pc, #88]	; (800475c <RadioSpiCommandStrobes+0x78>)
 8004702:	f000 fbcb 	bl	8004e9c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004706:	4b16      	ldr	r3, [pc, #88]	; (8004760 <RadioSpiCommandStrobes+0x7c>)
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	f107 020c 	add.w	r2, r7, #12
 800470e:	f107 0110 	add.w	r1, r7, #16
 8004712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	2302      	movs	r3, #2
 800471a:	f002 fa90 	bl	8006c3e <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800471e:	2201      	movs	r2, #1
 8004720:	2140      	movs	r1, #64	; 0x40
 8004722:	480e      	ldr	r0, [pc, #56]	; (800475c <RadioSpiCommandStrobes+0x78>)
 8004724:	f000 fbba 	bl	8004e9c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004728:	2017      	movs	r0, #23
 800472a:	f000 f9f1 	bl	8004b10 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800472e:	f107 0308 	add.w	r3, r7, #8
 8004732:	3301      	adds	r3, #1
 8004734:	7b3a      	ldrb	r2, [r7, #12]
 8004736:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004738:	f107 0308 	add.w	r3, r7, #8
 800473c:	7b7a      	ldrb	r2, [r7, #13]
 800473e:	701a      	strb	r2, [r3, #0]

  return status;
 8004740:	893b      	ldrh	r3, [r7, #8]
 8004742:	82bb      	strh	r3, [r7, #20]
 8004744:	2300      	movs	r3, #0
 8004746:	7d3a      	ldrb	r2, [r7, #20]
 8004748:	f362 0307 	bfi	r3, r2, #0, #8
 800474c:	7d7a      	ldrb	r2, [r7, #21]
 800474e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	48000400 	.word	0x48000400
 8004760:	2000034c 	.word	0x2000034c

08004764 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af02      	add	r7, sp, #8
 800476a:	4603      	mov	r3, r0
 800476c:	6039      	str	r1, [r7, #0]
 800476e:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 8004770:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004774:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004776:	2017      	movs	r0, #23
 8004778:	f000 f9d8 	bl	8004b2c <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800477c:	2200      	movs	r2, #0
 800477e:	2140      	movs	r1, #64	; 0x40
 8004780:	481a      	ldr	r0, [pc, #104]	; (80047ec <RadioSpiWriteFifo+0x88>)
 8004782:	f000 fb8b 	bl	8004e9c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004786:	4b1a      	ldr	r3, [pc, #104]	; (80047f0 <RadioSpiWriteFifo+0x8c>)
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	f107 020c 	add.w	r2, r7, #12
 800478e:	f107 0110 	add.w	r1, r7, #16
 8004792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	2302      	movs	r3, #2
 800479a:	f002 fa50 	bl	8006c3e <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800479e:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <RadioSpiWriteFifo+0x8c>)
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047aa:	6839      	ldr	r1, [r7, #0]
 80047ac:	f001 ff9b 	bl	80066e6 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80047b0:	2201      	movs	r2, #1
 80047b2:	2140      	movs	r1, #64	; 0x40
 80047b4:	480d      	ldr	r0, [pc, #52]	; (80047ec <RadioSpiWriteFifo+0x88>)
 80047b6:	f000 fb71 	bl	8004e9c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80047ba:	2017      	movs	r0, #23
 80047bc:	f000 f9a8 	bl	8004b10 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80047c0:	f107 0308 	add.w	r3, r7, #8
 80047c4:	3301      	adds	r3, #1
 80047c6:	7b3a      	ldrb	r2, [r7, #12]
 80047c8:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80047ca:	f107 0308 	add.w	r3, r7, #8
 80047ce:	7b7a      	ldrb	r2, [r7, #13]
 80047d0:	701a      	strb	r2, [r3, #0]

  return status;
 80047d2:	893b      	ldrh	r3, [r7, #8]
 80047d4:	82bb      	strh	r3, [r7, #20]
 80047d6:	2300      	movs	r3, #0
 80047d8:	7d3a      	ldrb	r2, [r7, #20]
 80047da:	f362 0307 	bfi	r3, r2, #0, #8
 80047de:	7d7a      	ldrb	r2, [r7, #21]
 80047e0:	f362 230f 	bfi	r3, r2, #8, #8
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	48000400 	.word	0x48000400
 80047f0:	2000034c 	.word	0x2000034c

080047f4 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval Device status
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	4603      	mov	r3, r0
 80047fc:	6039      	str	r1, [r7, #0]
 80047fe:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {READ_HEADER, LINEAR_FIFO_ADDRESS};
 8004800:	f64f 7301 	movw	r3, #65281	; 0xff01
 8004804:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004806:	2017      	movs	r0, #23
 8004808:	f000 f990 	bl	8004b2c <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800480c:	2200      	movs	r2, #0
 800480e:	2140      	movs	r1, #64	; 0x40
 8004810:	481a      	ldr	r0, [pc, #104]	; (800487c <RadioSpiReadFifo+0x88>)
 8004812:	f000 fb43 	bl	8004e9c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004816:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <RadioSpiReadFifo+0x8c>)
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	f107 020c 	add.w	r2, r7, #12
 800481e:	f107 0110 	add.w	r1, r7, #16
 8004822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	2302      	movs	r3, #2
 800482a:	f002 fa08 	bl	8006c3e <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800482e:	4b14      	ldr	r3, [pc, #80]	; (8004880 <RadioSpiReadFifo+0x8c>)
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	79fb      	ldrb	r3, [r7, #7]
 8004834:	b29a      	uxth	r2, r3
 8004836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800483a:	6839      	ldr	r1, [r7, #0]
 800483c:	f002 f8c8 	bl	80069d0 <HAL_SPI_Receive>
  RadioSpiCSHigh();  // Puts the SPI chip select high to end the transaction
 8004840:	2201      	movs	r2, #1
 8004842:	2140      	movs	r1, #64	; 0x40
 8004844:	480d      	ldr	r0, [pc, #52]	; (800487c <RadioSpiReadFifo+0x88>)
 8004846:	f000 fb29 	bl	8004e9c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 800484a:	2017      	movs	r0, #23
 800484c:	f000 f960 	bl	8004b10 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004850:	f107 0308 	add.w	r3, r7, #8
 8004854:	3301      	adds	r3, #1
 8004856:	7b3a      	ldrb	r2, [r7, #12]
 8004858:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 800485a:	f107 0308 	add.w	r3, r7, #8
 800485e:	7b7a      	ldrb	r2, [r7, #13]
 8004860:	701a      	strb	r2, [r3, #0]

  return status;
 8004862:	893b      	ldrh	r3, [r7, #8]
 8004864:	82bb      	strh	r3, [r7, #20]
 8004866:	2300      	movs	r3, #0
 8004868:	7d3a      	ldrb	r2, [r7, #20]
 800486a:	f362 0307 	bfi	r3, r2, #0, #8
 800486e:	7d7a      	ldrb	r2, [r7, #21]
 8004870:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	48000400 	.word	0x48000400
 8004880:	2000034c 	.word	0x2000034c

08004884 <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 8004888:	2201      	movs	r2, #1
 800488a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800488e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004892:	f000 fb03 	bl	8004e9c <HAL_GPIO_WritePin>
}
 8004896:	bf00      	nop
 8004898:	bd80      	pop	{r7, pc}

0800489a <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 800489e:	2200      	movs	r2, #0
 80048a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048a8:	f000 faf8 	bl	8004e9c <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
//  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
}
 80048ac:	bf00      	nop
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048ba:	2003      	movs	r0, #3
 80048bc:	f000 f901 	bl	8004ac2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048c0:	200f      	movs	r0, #15
 80048c2:	f7fd fb1f 	bl	8001f04 <HAL_InitTick>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	71fb      	strb	r3, [r7, #7]
 80048d0:	e001      	b.n	80048d6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80048d2:	f7fd faef 	bl	8001eb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048d6:	79fb      	ldrb	r3, [r7, #7]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80048e4:	4b06      	ldr	r3, [pc, #24]	; (8004900 <HAL_IncTick+0x20>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	4b06      	ldr	r3, [pc, #24]	; (8004904 <HAL_IncTick+0x24>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4413      	add	r3, r2
 80048f0:	4a04      	ldr	r2, [pc, #16]	; (8004904 <HAL_IncTick+0x24>)
 80048f2:	6013      	str	r3, [r2, #0]
}
 80048f4:	bf00      	nop
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20000354 	.word	0x20000354
 8004904:	200029cc 	.word	0x200029cc

08004908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  return uwTick;
 800490c:	4b03      	ldr	r3, [pc, #12]	; (800491c <HAL_GetTick+0x14>)
 800490e:	681b      	ldr	r3, [r3, #0]
}
 8004910:	4618      	mov	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	200029cc 	.word	0x200029cc

08004920 <__NVIC_SetPriorityGrouping>:
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004930:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <__NVIC_SetPriorityGrouping+0x44>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800493c:	4013      	ands	r3, r2
 800493e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800494c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004952:	4a04      	ldr	r2, [pc, #16]	; (8004964 <__NVIC_SetPriorityGrouping+0x44>)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	60d3      	str	r3, [r2, #12]
}
 8004958:	bf00      	nop
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	e000ed00 	.word	0xe000ed00

08004968 <__NVIC_GetPriorityGrouping>:
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800496c:	4b04      	ldr	r3, [pc, #16]	; (8004980 <__NVIC_GetPriorityGrouping+0x18>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	0a1b      	lsrs	r3, r3, #8
 8004972:	f003 0307 	and.w	r3, r3, #7
}
 8004976:	4618      	mov	r0, r3
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	e000ed00 	.word	0xe000ed00

08004984 <__NVIC_EnableIRQ>:
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800498e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004992:	2b00      	cmp	r3, #0
 8004994:	db0b      	blt.n	80049ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	f003 021f 	and.w	r2, r3, #31
 800499c:	4907      	ldr	r1, [pc, #28]	; (80049bc <__NVIC_EnableIRQ+0x38>)
 800499e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	2001      	movs	r0, #1
 80049a6:	fa00 f202 	lsl.w	r2, r0, r2
 80049aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	e000e100 	.word	0xe000e100

080049c0 <__NVIC_DisableIRQ>:
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	db12      	blt.n	80049f8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	f003 021f 	and.w	r2, r3, #31
 80049d8:	490a      	ldr	r1, [pc, #40]	; (8004a04 <__NVIC_DisableIRQ+0x44>)
 80049da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	2001      	movs	r0, #1
 80049e2:	fa00 f202 	lsl.w	r2, r0, r2
 80049e6:	3320      	adds	r3, #32
 80049e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80049ec:	f3bf 8f4f 	dsb	sy
}
 80049f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049f2:	f3bf 8f6f 	isb	sy
}
 80049f6:	bf00      	nop
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	e000e100 	.word	0xe000e100

08004a08 <__NVIC_SetPriority>:
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	6039      	str	r1, [r7, #0]
 8004a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	db0a      	blt.n	8004a32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	490c      	ldr	r1, [pc, #48]	; (8004a54 <__NVIC_SetPriority+0x4c>)
 8004a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a26:	0112      	lsls	r2, r2, #4
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a30:	e00a      	b.n	8004a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	4908      	ldr	r1, [pc, #32]	; (8004a58 <__NVIC_SetPriority+0x50>)
 8004a38:	79fb      	ldrb	r3, [r7, #7]
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	3b04      	subs	r3, #4
 8004a40:	0112      	lsls	r2, r2, #4
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	440b      	add	r3, r1
 8004a46:	761a      	strb	r2, [r3, #24]
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	e000e100 	.word	0xe000e100
 8004a58:	e000ed00 	.word	0xe000ed00

08004a5c <NVIC_EncodePriority>:
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b089      	sub	sp, #36	; 0x24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f1c3 0307 	rsb	r3, r3, #7
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	bf28      	it	cs
 8004a7a:	2304      	movcs	r3, #4
 8004a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	3304      	adds	r3, #4
 8004a82:	2b06      	cmp	r3, #6
 8004a84:	d902      	bls.n	8004a8c <NVIC_EncodePriority+0x30>
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	3b03      	subs	r3, #3
 8004a8a:	e000      	b.n	8004a8e <NVIC_EncodePriority+0x32>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a90:	f04f 32ff 	mov.w	r2, #4294967295
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43da      	mvns	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004aae:	43d9      	mvns	r1, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab4:	4313      	orrs	r3, r2
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3724      	adds	r7, #36	; 0x24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff ff28 	bl	8004920 <__NVIC_SetPriorityGrouping>
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004aea:	f7ff ff3d 	bl	8004968 <__NVIC_GetPriorityGrouping>
 8004aee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	68b9      	ldr	r1, [r7, #8]
 8004af4:	6978      	ldr	r0, [r7, #20]
 8004af6:	f7ff ffb1 	bl	8004a5c <NVIC_EncodePriority>
 8004afa:	4602      	mov	r2, r0
 8004afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b00:	4611      	mov	r1, r2
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff ff80 	bl	8004a08 <__NVIC_SetPriority>
}
 8004b08:	bf00      	nop
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff ff30 	bl	8004984 <__NVIC_EnableIRQ>
}
 8004b24:	bf00      	nop
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff ff40 	bl	80049c0 <__NVIC_DisableIRQ>
}
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b56:	e17f      	b.n	8004e58 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	fa01 f303 	lsl.w	r3, r1, r3
 8004b64:	4013      	ands	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 8171 	beq.w	8004e52 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d005      	beq.n	8004b88 <HAL_GPIO_Init+0x40>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d130      	bne.n	8004bea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	2203      	movs	r2, #3
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	091b      	lsrs	r3, r3, #4
 8004bd4:	f003 0201 	and.w	r2, r3, #1
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d118      	bne.n	8004c28 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	43db      	mvns	r3, r3
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	08db      	lsrs	r3, r3, #3
 8004c12:	f003 0201 	and.w	r2, r3, #1
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 0303 	and.w	r3, r3, #3
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d017      	beq.n	8004c64 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	2203      	movs	r2, #3
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	43db      	mvns	r3, r3
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d123      	bne.n	8004cb8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	08da      	lsrs	r2, r3, #3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3208      	adds	r2, #8
 8004c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	220f      	movs	r2, #15
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4013      	ands	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	08da      	lsrs	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3208      	adds	r2, #8
 8004cb2:	6939      	ldr	r1, [r7, #16]
 8004cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f003 0203 	and.w	r2, r3, #3
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 80ac 	beq.w	8004e52 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cfa:	4b5f      	ldr	r3, [pc, #380]	; (8004e78 <HAL_GPIO_Init+0x330>)
 8004cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cfe:	4a5e      	ldr	r2, [pc, #376]	; (8004e78 <HAL_GPIO_Init+0x330>)
 8004d00:	f043 0301 	orr.w	r3, r3, #1
 8004d04:	6613      	str	r3, [r2, #96]	; 0x60
 8004d06:	4b5c      	ldr	r3, [pc, #368]	; (8004e78 <HAL_GPIO_Init+0x330>)
 8004d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d12:	4a5a      	ldr	r2, [pc, #360]	; (8004e7c <HAL_GPIO_Init+0x334>)
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	089b      	lsrs	r3, r3, #2
 8004d18:	3302      	adds	r3, #2
 8004d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	220f      	movs	r2, #15
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4013      	ands	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d3c:	d025      	beq.n	8004d8a <HAL_GPIO_Init+0x242>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a4f      	ldr	r2, [pc, #316]	; (8004e80 <HAL_GPIO_Init+0x338>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d01f      	beq.n	8004d86 <HAL_GPIO_Init+0x23e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a4e      	ldr	r2, [pc, #312]	; (8004e84 <HAL_GPIO_Init+0x33c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d019      	beq.n	8004d82 <HAL_GPIO_Init+0x23a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a4d      	ldr	r2, [pc, #308]	; (8004e88 <HAL_GPIO_Init+0x340>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <HAL_GPIO_Init+0x236>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a4c      	ldr	r2, [pc, #304]	; (8004e8c <HAL_GPIO_Init+0x344>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00d      	beq.n	8004d7a <HAL_GPIO_Init+0x232>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a4b      	ldr	r2, [pc, #300]	; (8004e90 <HAL_GPIO_Init+0x348>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d007      	beq.n	8004d76 <HAL_GPIO_Init+0x22e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a4a      	ldr	r2, [pc, #296]	; (8004e94 <HAL_GPIO_Init+0x34c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d101      	bne.n	8004d72 <HAL_GPIO_Init+0x22a>
 8004d6e:	2306      	movs	r3, #6
 8004d70:	e00c      	b.n	8004d8c <HAL_GPIO_Init+0x244>
 8004d72:	2307      	movs	r3, #7
 8004d74:	e00a      	b.n	8004d8c <HAL_GPIO_Init+0x244>
 8004d76:	2305      	movs	r3, #5
 8004d78:	e008      	b.n	8004d8c <HAL_GPIO_Init+0x244>
 8004d7a:	2304      	movs	r3, #4
 8004d7c:	e006      	b.n	8004d8c <HAL_GPIO_Init+0x244>
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e004      	b.n	8004d8c <HAL_GPIO_Init+0x244>
 8004d82:	2302      	movs	r3, #2
 8004d84:	e002      	b.n	8004d8c <HAL_GPIO_Init+0x244>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <HAL_GPIO_Init+0x244>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	f002 0203 	and.w	r2, r2, #3
 8004d92:	0092      	lsls	r2, r2, #2
 8004d94:	4093      	lsls	r3, r2
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d9c:	4937      	ldr	r1, [pc, #220]	; (8004e7c <HAL_GPIO_Init+0x334>)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	089b      	lsrs	r3, r3, #2
 8004da2:	3302      	adds	r3, #2
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004daa:	4b3b      	ldr	r3, [pc, #236]	; (8004e98 <HAL_GPIO_Init+0x350>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	43db      	mvns	r3, r3
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4013      	ands	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004dce:	4a32      	ldr	r2, [pc, #200]	; (8004e98 <HAL_GPIO_Init+0x350>)
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004dd4:	4b30      	ldr	r3, [pc, #192]	; (8004e98 <HAL_GPIO_Init+0x350>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4013      	ands	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004df8:	4a27      	ldr	r2, [pc, #156]	; (8004e98 <HAL_GPIO_Init+0x350>)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004dfe:	4b26      	ldr	r3, [pc, #152]	; (8004e98 <HAL_GPIO_Init+0x350>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	43db      	mvns	r3, r3
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e22:	4a1d      	ldr	r2, [pc, #116]	; (8004e98 <HAL_GPIO_Init+0x350>)
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004e28:	4b1b      	ldr	r3, [pc, #108]	; (8004e98 <HAL_GPIO_Init+0x350>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	43db      	mvns	r3, r3
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4013      	ands	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e4c:	4a12      	ldr	r2, [pc, #72]	; (8004e98 <HAL_GPIO_Init+0x350>)
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	3301      	adds	r3, #1
 8004e56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f47f ae78 	bne.w	8004b58 <HAL_GPIO_Init+0x10>
  }
}
 8004e68:	bf00      	nop
 8004e6a:	bf00      	nop
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	40010000 	.word	0x40010000
 8004e80:	48000400 	.word	0x48000400
 8004e84:	48000800 	.word	0x48000800
 8004e88:	48000c00 	.word	0x48000c00
 8004e8c:	48001000 	.word	0x48001000
 8004e90:	48001400 	.word	0x48001400
 8004e94:	48001800 	.word	0x48001800
 8004e98:	40010400 	.word	0x40010400

08004e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	807b      	strh	r3, [r7, #2]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004eac:	787b      	ldrb	r3, [r7, #1]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004eb2:	887a      	ldrh	r2, [r7, #2]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004eb8:	e002      	b.n	8004ec0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004eba:	887a      	ldrh	r2, [r7, #2]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ed6:	4b08      	ldr	r3, [pc, #32]	; (8004ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ed8:	695a      	ldr	r2, [r3, #20]
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d006      	beq.n	8004ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ee2:	4a05      	ldr	r2, [pc, #20]	; (8004ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ee4:	88fb      	ldrh	r3, [r7, #6]
 8004ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ee8:	88fb      	ldrh	r3, [r7, #6]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fc f846 	bl	8000f7c <HAL_GPIO_EXTI_Callback>
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40010400 	.word	0x40010400

08004efc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004f00:	4b04      	ldr	r3, [pc, #16]	; (8004f14 <HAL_PWREx_GetVoltageRange+0x18>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40007000 	.word	0x40007000

08004f18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f26:	d130      	bne.n	8004f8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f28:	4b23      	ldr	r3, [pc, #140]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f34:	d038      	beq.n	8004fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f36:	4b20      	ldr	r3, [pc, #128]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f3e:	4a1e      	ldr	r2, [pc, #120]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f46:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2232      	movs	r2, #50	; 0x32
 8004f4c:	fb02 f303 	mul.w	r3, r2, r3
 8004f50:	4a1b      	ldr	r2, [pc, #108]	; (8004fc0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	0c9b      	lsrs	r3, r3, #18
 8004f58:	3301      	adds	r3, #1
 8004f5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f5c:	e002      	b.n	8004f64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f64:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f70:	d102      	bne.n	8004f78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f2      	bne.n	8004f5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f78:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f84:	d110      	bne.n	8004fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e00f      	b.n	8004faa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f96:	d007      	beq.n	8004fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f98:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fa0:	4a05      	ldr	r2, [pc, #20]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fa6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40007000 	.word	0x40007000
 8004fbc:	20000344 	.word	0x20000344
 8004fc0:	431bde83 	.word	0x431bde83

08004fc4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e3ca      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fd6:	4b97      	ldr	r3, [pc, #604]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 030c 	and.w	r3, r3, #12
 8004fde:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fe0:	4b94      	ldr	r3, [pc, #592]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0303 	and.w	r3, r3, #3
 8004fe8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0310 	and.w	r3, r3, #16
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 80e4 	beq.w	80051c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d007      	beq.n	800500e <HAL_RCC_OscConfig+0x4a>
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2b0c      	cmp	r3, #12
 8005002:	f040 808b 	bne.w	800511c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b01      	cmp	r3, #1
 800500a:	f040 8087 	bne.w	800511c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800500e:	4b89      	ldr	r3, [pc, #548]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d005      	beq.n	8005026 <HAL_RCC_OscConfig+0x62>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e3a2      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1a      	ldr	r2, [r3, #32]
 800502a:	4b82      	ldr	r3, [pc, #520]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d004      	beq.n	8005040 <HAL_RCC_OscConfig+0x7c>
 8005036:	4b7f      	ldr	r3, [pc, #508]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800503e:	e005      	b.n	800504c <HAL_RCC_OscConfig+0x88>
 8005040:	4b7c      	ldr	r3, [pc, #496]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8005042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800504c:	4293      	cmp	r3, r2
 800504e:	d223      	bcs.n	8005098 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fd87 	bl	8005b68 <RCC_SetFlashLatencyFromMSIRange>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e383      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005064:	4b73      	ldr	r3, [pc, #460]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a72      	ldr	r2, [pc, #456]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 800506a:	f043 0308 	orr.w	r3, r3, #8
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	4b70      	ldr	r3, [pc, #448]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	496d      	ldr	r1, [pc, #436]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 800507e:	4313      	orrs	r3, r2
 8005080:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005082:	4b6c      	ldr	r3, [pc, #432]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	4968      	ldr	r1, [pc, #416]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8005092:	4313      	orrs	r3, r2
 8005094:	604b      	str	r3, [r1, #4]
 8005096:	e025      	b.n	80050e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005098:	4b66      	ldr	r3, [pc, #408]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a65      	ldr	r2, [pc, #404]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 800509e:	f043 0308 	orr.w	r3, r3, #8
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	4b63      	ldr	r3, [pc, #396]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	4960      	ldr	r1, [pc, #384]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050b6:	4b5f      	ldr	r3, [pc, #380]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	021b      	lsls	r3, r3, #8
 80050c4:	495b      	ldr	r1, [pc, #364]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d109      	bne.n	80050e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fd47 	bl	8005b68 <RCC_SetFlashLatencyFromMSIRange>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e343      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050e4:	f000 fc4a 	bl	800597c <HAL_RCC_GetSysClockFreq>
 80050e8:	4602      	mov	r2, r0
 80050ea:	4b52      	ldr	r3, [pc, #328]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	091b      	lsrs	r3, r3, #4
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	4950      	ldr	r1, [pc, #320]	; (8005238 <HAL_RCC_OscConfig+0x274>)
 80050f6:	5ccb      	ldrb	r3, [r1, r3]
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005100:	4a4e      	ldr	r2, [pc, #312]	; (800523c <HAL_RCC_OscConfig+0x278>)
 8005102:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005104:	4b4e      	ldr	r3, [pc, #312]	; (8005240 <HAL_RCC_OscConfig+0x27c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f7fc fefb 	bl	8001f04 <HAL_InitTick>
 800510e:	4603      	mov	r3, r0
 8005110:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005112:	7bfb      	ldrb	r3, [r7, #15]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d052      	beq.n	80051be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	e327      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d032      	beq.n	800518a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005124:	4b43      	ldr	r3, [pc, #268]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a42      	ldr	r2, [pc, #264]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005130:	f7ff fbea 	bl	8004908 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005138:	f7ff fbe6 	bl	8004908 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e310      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800514a:	4b3a      	ldr	r3, [pc, #232]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005156:	4b37      	ldr	r3, [pc, #220]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a36      	ldr	r2, [pc, #216]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 800515c:	f043 0308 	orr.w	r3, r3, #8
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	4b34      	ldr	r3, [pc, #208]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	4931      	ldr	r1, [pc, #196]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8005170:	4313      	orrs	r3, r2
 8005172:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005174:	4b2f      	ldr	r3, [pc, #188]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	492c      	ldr	r1, [pc, #176]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8005184:	4313      	orrs	r3, r2
 8005186:	604b      	str	r3, [r1, #4]
 8005188:	e01a      	b.n	80051c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800518a:	4b2a      	ldr	r3, [pc, #168]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a29      	ldr	r2, [pc, #164]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8005190:	f023 0301 	bic.w	r3, r3, #1
 8005194:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005196:	f7ff fbb7 	bl	8004908 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800519e:	f7ff fbb3 	bl	8004908 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e2dd      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051b0:	4b20      	ldr	r3, [pc, #128]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f0      	bne.n	800519e <HAL_RCC_OscConfig+0x1da>
 80051bc:	e000      	b.n	80051c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d074      	beq.n	80052b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d005      	beq.n	80051de <HAL_RCC_OscConfig+0x21a>
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b0c      	cmp	r3, #12
 80051d6:	d10e      	bne.n	80051f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d10b      	bne.n	80051f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051de:	4b15      	ldr	r3, [pc, #84]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d064      	beq.n	80052b4 <HAL_RCC_OscConfig+0x2f0>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d160      	bne.n	80052b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e2ba      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fe:	d106      	bne.n	800520e <HAL_RCC_OscConfig+0x24a>
 8005200:	4b0c      	ldr	r3, [pc, #48]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a0b      	ldr	r2, [pc, #44]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8005206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	e026      	b.n	800525c <HAL_RCC_OscConfig+0x298>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005216:	d115      	bne.n	8005244 <HAL_RCC_OscConfig+0x280>
 8005218:	4b06      	ldr	r3, [pc, #24]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a05      	ldr	r2, [pc, #20]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 800521e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	4b03      	ldr	r3, [pc, #12]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a02      	ldr	r2, [pc, #8]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 800522a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	e014      	b.n	800525c <HAL_RCC_OscConfig+0x298>
 8005232:	bf00      	nop
 8005234:	40021000 	.word	0x40021000
 8005238:	0800c3a8 	.word	0x0800c3a8
 800523c:	20000344 	.word	0x20000344
 8005240:	20000350 	.word	0x20000350
 8005244:	4ba0      	ldr	r3, [pc, #640]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a9f      	ldr	r2, [pc, #636]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 800524a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	4b9d      	ldr	r3, [pc, #628]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a9c      	ldr	r2, [pc, #624]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 8005256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800525a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d013      	beq.n	800528c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7ff fb50 	bl	8004908 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800526c:	f7ff fb4c 	bl	8004908 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b64      	cmp	r3, #100	; 0x64
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e276      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800527e:	4b92      	ldr	r3, [pc, #584]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0f0      	beq.n	800526c <HAL_RCC_OscConfig+0x2a8>
 800528a:	e014      	b.n	80052b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528c:	f7ff fb3c 	bl	8004908 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005294:	f7ff fb38 	bl	8004908 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b64      	cmp	r3, #100	; 0x64
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e262      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052a6:	4b88      	ldr	r3, [pc, #544]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f0      	bne.n	8005294 <HAL_RCC_OscConfig+0x2d0>
 80052b2:	e000      	b.n	80052b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d060      	beq.n	8005384 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d005      	beq.n	80052d4 <HAL_RCC_OscConfig+0x310>
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2b0c      	cmp	r3, #12
 80052cc:	d119      	bne.n	8005302 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d116      	bne.n	8005302 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052d4:	4b7c      	ldr	r3, [pc, #496]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <HAL_RCC_OscConfig+0x328>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e23f      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ec:	4b76      	ldr	r3, [pc, #472]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	061b      	lsls	r3, r3, #24
 80052fa:	4973      	ldr	r1, [pc, #460]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005300:	e040      	b.n	8005384 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d023      	beq.n	8005352 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800530a:	4b6f      	ldr	r3, [pc, #444]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a6e      	ldr	r2, [pc, #440]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 8005310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005316:	f7ff faf7 	bl	8004908 <HAL_GetTick>
 800531a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800531c:	e008      	b.n	8005330 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800531e:	f7ff faf3 	bl	8004908 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e21d      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005330:	4b65      	ldr	r3, [pc, #404]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0f0      	beq.n	800531e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800533c:	4b62      	ldr	r3, [pc, #392]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	061b      	lsls	r3, r3, #24
 800534a:	495f      	ldr	r1, [pc, #380]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 800534c:	4313      	orrs	r3, r2
 800534e:	604b      	str	r3, [r1, #4]
 8005350:	e018      	b.n	8005384 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005352:	4b5d      	ldr	r3, [pc, #372]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a5c      	ldr	r2, [pc, #368]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 8005358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800535c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535e:	f7ff fad3 	bl	8004908 <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005366:	f7ff facf 	bl	8004908 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e1f9      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005378:	4b53      	ldr	r3, [pc, #332]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f0      	bne.n	8005366 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b00      	cmp	r3, #0
 800538e:	d03c      	beq.n	800540a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01c      	beq.n	80053d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005398:	4b4b      	ldr	r3, [pc, #300]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 800539a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800539e:	4a4a      	ldr	r2, [pc, #296]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 80053a0:	f043 0301 	orr.w	r3, r3, #1
 80053a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a8:	f7ff faae 	bl	8004908 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053b0:	f7ff faaa 	bl	8004908 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e1d4      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053c2:	4b41      	ldr	r3, [pc, #260]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 80053c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0ef      	beq.n	80053b0 <HAL_RCC_OscConfig+0x3ec>
 80053d0:	e01b      	b.n	800540a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053d2:	4b3d      	ldr	r3, [pc, #244]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 80053d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053d8:	4a3b      	ldr	r2, [pc, #236]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 80053da:	f023 0301 	bic.w	r3, r3, #1
 80053de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e2:	f7ff fa91 	bl	8004908 <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053ea:	f7ff fa8d 	bl	8004908 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e1b7      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053fc:	4b32      	ldr	r3, [pc, #200]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 80053fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1ef      	bne.n	80053ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 80a6 	beq.w	8005564 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005418:	2300      	movs	r3, #0
 800541a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800541c:	4b2a      	ldr	r3, [pc, #168]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 800541e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10d      	bne.n	8005444 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005428:	4b27      	ldr	r3, [pc, #156]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 800542a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542c:	4a26      	ldr	r2, [pc, #152]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 800542e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005432:	6593      	str	r3, [r2, #88]	; 0x58
 8005434:	4b24      	ldr	r3, [pc, #144]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 8005436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005440:	2301      	movs	r3, #1
 8005442:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005444:	4b21      	ldr	r3, [pc, #132]	; (80054cc <HAL_RCC_OscConfig+0x508>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544c:	2b00      	cmp	r3, #0
 800544e:	d118      	bne.n	8005482 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005450:	4b1e      	ldr	r3, [pc, #120]	; (80054cc <HAL_RCC_OscConfig+0x508>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1d      	ldr	r2, [pc, #116]	; (80054cc <HAL_RCC_OscConfig+0x508>)
 8005456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800545a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800545c:	f7ff fa54 	bl	8004908 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005464:	f7ff fa50 	bl	8004908 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e17a      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005476:	4b15      	ldr	r3, [pc, #84]	; (80054cc <HAL_RCC_OscConfig+0x508>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0f0      	beq.n	8005464 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d108      	bne.n	800549c <HAL_RCC_OscConfig+0x4d8>
 800548a:	4b0f      	ldr	r3, [pc, #60]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 800548c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005490:	4a0d      	ldr	r2, [pc, #52]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 8005492:	f043 0301 	orr.w	r3, r3, #1
 8005496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800549a:	e029      	b.n	80054f0 <HAL_RCC_OscConfig+0x52c>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b05      	cmp	r3, #5
 80054a2:	d115      	bne.n	80054d0 <HAL_RCC_OscConfig+0x50c>
 80054a4:	4b08      	ldr	r3, [pc, #32]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054aa:	4a07      	ldr	r2, [pc, #28]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 80054ac:	f043 0304 	orr.w	r3, r3, #4
 80054b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054b4:	4b04      	ldr	r3, [pc, #16]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ba:	4a03      	ldr	r2, [pc, #12]	; (80054c8 <HAL_RCC_OscConfig+0x504>)
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054c4:	e014      	b.n	80054f0 <HAL_RCC_OscConfig+0x52c>
 80054c6:	bf00      	nop
 80054c8:	40021000 	.word	0x40021000
 80054cc:	40007000 	.word	0x40007000
 80054d0:	4b9c      	ldr	r3, [pc, #624]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d6:	4a9b      	ldr	r2, [pc, #620]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 80054d8:	f023 0301 	bic.w	r3, r3, #1
 80054dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054e0:	4b98      	ldr	r3, [pc, #608]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e6:	4a97      	ldr	r2, [pc, #604]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 80054e8:	f023 0304 	bic.w	r3, r3, #4
 80054ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d016      	beq.n	8005526 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f8:	f7ff fa06 	bl	8004908 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054fe:	e00a      	b.n	8005516 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005500:	f7ff fa02 	bl	8004908 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	f241 3288 	movw	r2, #5000	; 0x1388
 800550e:	4293      	cmp	r3, r2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e12a      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005516:	4b8b      	ldr	r3, [pc, #556]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 8005518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0ed      	beq.n	8005500 <HAL_RCC_OscConfig+0x53c>
 8005524:	e015      	b.n	8005552 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005526:	f7ff f9ef 	bl	8004908 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800552c:	e00a      	b.n	8005544 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800552e:	f7ff f9eb 	bl	8004908 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	f241 3288 	movw	r2, #5000	; 0x1388
 800553c:	4293      	cmp	r3, r2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e113      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005544:	4b7f      	ldr	r3, [pc, #508]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 8005546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1ed      	bne.n	800552e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005552:	7ffb      	ldrb	r3, [r7, #31]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d105      	bne.n	8005564 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005558:	4b7a      	ldr	r3, [pc, #488]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 800555a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555c:	4a79      	ldr	r2, [pc, #484]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 800555e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005562:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 80fe 	beq.w	800576a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	2b02      	cmp	r3, #2
 8005574:	f040 80d0 	bne.w	8005718 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005578:	4b72      	ldr	r3, [pc, #456]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f003 0203 	and.w	r2, r3, #3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	429a      	cmp	r2, r3
 800558a:	d130      	bne.n	80055ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	3b01      	subs	r3, #1
 8005598:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800559a:	429a      	cmp	r2, r3
 800559c:	d127      	bne.n	80055ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d11f      	bne.n	80055ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055b8:	2a07      	cmp	r2, #7
 80055ba:	bf14      	ite	ne
 80055bc:	2201      	movne	r2, #1
 80055be:	2200      	moveq	r2, #0
 80055c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d113      	bne.n	80055ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d0:	085b      	lsrs	r3, r3, #1
 80055d2:	3b01      	subs	r3, #1
 80055d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d109      	bne.n	80055ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e4:	085b      	lsrs	r3, r3, #1
 80055e6:	3b01      	subs	r3, #1
 80055e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d06e      	beq.n	80056cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b0c      	cmp	r3, #12
 80055f2:	d069      	beq.n	80056c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80055f4:	4b53      	ldr	r3, [pc, #332]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d105      	bne.n	800560c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005600:	4b50      	ldr	r3, [pc, #320]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e0ad      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005610:	4b4c      	ldr	r3, [pc, #304]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a4b      	ldr	r2, [pc, #300]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 8005616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800561a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800561c:	f7ff f974 	bl	8004908 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005624:	f7ff f970 	bl	8004908 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e09a      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005636:	4b43      	ldr	r3, [pc, #268]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f0      	bne.n	8005624 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005642:	4b40      	ldr	r3, [pc, #256]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	4b40      	ldr	r3, [pc, #256]	; (8005748 <HAL_RCC_OscConfig+0x784>)
 8005648:	4013      	ands	r3, r2
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005652:	3a01      	subs	r2, #1
 8005654:	0112      	lsls	r2, r2, #4
 8005656:	4311      	orrs	r1, r2
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800565c:	0212      	lsls	r2, r2, #8
 800565e:	4311      	orrs	r1, r2
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005664:	0852      	lsrs	r2, r2, #1
 8005666:	3a01      	subs	r2, #1
 8005668:	0552      	lsls	r2, r2, #21
 800566a:	4311      	orrs	r1, r2
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005670:	0852      	lsrs	r2, r2, #1
 8005672:	3a01      	subs	r2, #1
 8005674:	0652      	lsls	r2, r2, #25
 8005676:	4311      	orrs	r1, r2
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800567c:	0912      	lsrs	r2, r2, #4
 800567e:	0452      	lsls	r2, r2, #17
 8005680:	430a      	orrs	r2, r1
 8005682:	4930      	ldr	r1, [pc, #192]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 8005684:	4313      	orrs	r3, r2
 8005686:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005688:	4b2e      	ldr	r3, [pc, #184]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a2d      	ldr	r2, [pc, #180]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 800568e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005692:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005694:	4b2b      	ldr	r3, [pc, #172]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	4a2a      	ldr	r2, [pc, #168]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 800569a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800569e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056a0:	f7ff f932 	bl	8004908 <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a8:	f7ff f92e 	bl	8004908 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e058      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ba:	4b22      	ldr	r3, [pc, #136]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f0      	beq.n	80056a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056c6:	e050      	b.n	800576a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e04f      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056cc:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d148      	bne.n	800576a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80056d8:	4b1a      	ldr	r3, [pc, #104]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a19      	ldr	r2, [pc, #100]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 80056de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056e4:	4b17      	ldr	r3, [pc, #92]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	4a16      	ldr	r2, [pc, #88]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 80056ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056f0:	f7ff f90a 	bl	8004908 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f8:	f7ff f906 	bl	8004908 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e030      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800570a:	4b0e      	ldr	r3, [pc, #56]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0f0      	beq.n	80056f8 <HAL_RCC_OscConfig+0x734>
 8005716:	e028      	b.n	800576a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	2b0c      	cmp	r3, #12
 800571c:	d023      	beq.n	8005766 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800571e:	4b09      	ldr	r3, [pc, #36]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a08      	ldr	r2, [pc, #32]	; (8005744 <HAL_RCC_OscConfig+0x780>)
 8005724:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572a:	f7ff f8ed 	bl	8004908 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005730:	e00c      	b.n	800574c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005732:	f7ff f8e9 	bl	8004908 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d905      	bls.n	800574c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e013      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
 8005744:	40021000 	.word	0x40021000
 8005748:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800574c:	4b09      	ldr	r3, [pc, #36]	; (8005774 <HAL_RCC_OscConfig+0x7b0>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1ec      	bne.n	8005732 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005758:	4b06      	ldr	r3, [pc, #24]	; (8005774 <HAL_RCC_OscConfig+0x7b0>)
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	4905      	ldr	r1, [pc, #20]	; (8005774 <HAL_RCC_OscConfig+0x7b0>)
 800575e:	4b06      	ldr	r3, [pc, #24]	; (8005778 <HAL_RCC_OscConfig+0x7b4>)
 8005760:	4013      	ands	r3, r2
 8005762:	60cb      	str	r3, [r1, #12]
 8005764:	e001      	b.n	800576a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3720      	adds	r7, #32
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40021000 	.word	0x40021000
 8005778:	feeefffc 	.word	0xfeeefffc

0800577c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0e7      	b.n	8005960 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005790:	4b75      	ldr	r3, [pc, #468]	; (8005968 <HAL_RCC_ClockConfig+0x1ec>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d910      	bls.n	80057c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579e:	4b72      	ldr	r3, [pc, #456]	; (8005968 <HAL_RCC_ClockConfig+0x1ec>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f023 0207 	bic.w	r2, r3, #7
 80057a6:	4970      	ldr	r1, [pc, #448]	; (8005968 <HAL_RCC_ClockConfig+0x1ec>)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ae:	4b6e      	ldr	r3, [pc, #440]	; (8005968 <HAL_RCC_ClockConfig+0x1ec>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d001      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e0cf      	b.n	8005960 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d010      	beq.n	80057ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	4b66      	ldr	r3, [pc, #408]	; (800596c <HAL_RCC_ClockConfig+0x1f0>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057d8:	429a      	cmp	r2, r3
 80057da:	d908      	bls.n	80057ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057dc:	4b63      	ldr	r3, [pc, #396]	; (800596c <HAL_RCC_ClockConfig+0x1f0>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	4960      	ldr	r1, [pc, #384]	; (800596c <HAL_RCC_ClockConfig+0x1f0>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d04c      	beq.n	8005894 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d107      	bne.n	8005812 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005802:	4b5a      	ldr	r3, [pc, #360]	; (800596c <HAL_RCC_ClockConfig+0x1f0>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d121      	bne.n	8005852 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e0a6      	b.n	8005960 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b02      	cmp	r3, #2
 8005818:	d107      	bne.n	800582a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800581a:	4b54      	ldr	r3, [pc, #336]	; (800596c <HAL_RCC_ClockConfig+0x1f0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d115      	bne.n	8005852 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e09a      	b.n	8005960 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d107      	bne.n	8005842 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005832:	4b4e      	ldr	r3, [pc, #312]	; (800596c <HAL_RCC_ClockConfig+0x1f0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d109      	bne.n	8005852 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e08e      	b.n	8005960 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005842:	4b4a      	ldr	r3, [pc, #296]	; (800596c <HAL_RCC_ClockConfig+0x1f0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e086      	b.n	8005960 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005852:	4b46      	ldr	r3, [pc, #280]	; (800596c <HAL_RCC_ClockConfig+0x1f0>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f023 0203 	bic.w	r2, r3, #3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	4943      	ldr	r1, [pc, #268]	; (800596c <HAL_RCC_ClockConfig+0x1f0>)
 8005860:	4313      	orrs	r3, r2
 8005862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005864:	f7ff f850 	bl	8004908 <HAL_GetTick>
 8005868:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586a:	e00a      	b.n	8005882 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800586c:	f7ff f84c 	bl	8004908 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	f241 3288 	movw	r2, #5000	; 0x1388
 800587a:	4293      	cmp	r3, r2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e06e      	b.n	8005960 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005882:	4b3a      	ldr	r3, [pc, #232]	; (800596c <HAL_RCC_ClockConfig+0x1f0>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 020c 	and.w	r2, r3, #12
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	429a      	cmp	r2, r3
 8005892:	d1eb      	bne.n	800586c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d010      	beq.n	80058c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	4b31      	ldr	r3, [pc, #196]	; (800596c <HAL_RCC_ClockConfig+0x1f0>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d208      	bcs.n	80058c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058b0:	4b2e      	ldr	r3, [pc, #184]	; (800596c <HAL_RCC_ClockConfig+0x1f0>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	492b      	ldr	r1, [pc, #172]	; (800596c <HAL_RCC_ClockConfig+0x1f0>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058c2:	4b29      	ldr	r3, [pc, #164]	; (8005968 <HAL_RCC_ClockConfig+0x1ec>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d210      	bcs.n	80058f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d0:	4b25      	ldr	r3, [pc, #148]	; (8005968 <HAL_RCC_ClockConfig+0x1ec>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f023 0207 	bic.w	r2, r3, #7
 80058d8:	4923      	ldr	r1, [pc, #140]	; (8005968 <HAL_RCC_ClockConfig+0x1ec>)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	4313      	orrs	r3, r2
 80058de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e0:	4b21      	ldr	r3, [pc, #132]	; (8005968 <HAL_RCC_ClockConfig+0x1ec>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d001      	beq.n	80058f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e036      	b.n	8005960 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d008      	beq.n	8005910 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058fe:	4b1b      	ldr	r3, [pc, #108]	; (800596c <HAL_RCC_ClockConfig+0x1f0>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	4918      	ldr	r1, [pc, #96]	; (800596c <HAL_RCC_ClockConfig+0x1f0>)
 800590c:	4313      	orrs	r3, r2
 800590e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b00      	cmp	r3, #0
 800591a:	d009      	beq.n	8005930 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800591c:	4b13      	ldr	r3, [pc, #76]	; (800596c <HAL_RCC_ClockConfig+0x1f0>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	4910      	ldr	r1, [pc, #64]	; (800596c <HAL_RCC_ClockConfig+0x1f0>)
 800592c:	4313      	orrs	r3, r2
 800592e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005930:	f000 f824 	bl	800597c <HAL_RCC_GetSysClockFreq>
 8005934:	4602      	mov	r2, r0
 8005936:	4b0d      	ldr	r3, [pc, #52]	; (800596c <HAL_RCC_ClockConfig+0x1f0>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	091b      	lsrs	r3, r3, #4
 800593c:	f003 030f 	and.w	r3, r3, #15
 8005940:	490b      	ldr	r1, [pc, #44]	; (8005970 <HAL_RCC_ClockConfig+0x1f4>)
 8005942:	5ccb      	ldrb	r3, [r1, r3]
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	fa22 f303 	lsr.w	r3, r2, r3
 800594c:	4a09      	ldr	r2, [pc, #36]	; (8005974 <HAL_RCC_ClockConfig+0x1f8>)
 800594e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005950:	4b09      	ldr	r3, [pc, #36]	; (8005978 <HAL_RCC_ClockConfig+0x1fc>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4618      	mov	r0, r3
 8005956:	f7fc fad5 	bl	8001f04 <HAL_InitTick>
 800595a:	4603      	mov	r3, r0
 800595c:	72fb      	strb	r3, [r7, #11]

  return status;
 800595e:	7afb      	ldrb	r3, [r7, #11]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40022000 	.word	0x40022000
 800596c:	40021000 	.word	0x40021000
 8005970:	0800c3a8 	.word	0x0800c3a8
 8005974:	20000344 	.word	0x20000344
 8005978:	20000350 	.word	0x20000350

0800597c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800597c:	b480      	push	{r7}
 800597e:	b089      	sub	sp, #36	; 0x24
 8005980:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	61fb      	str	r3, [r7, #28]
 8005986:	2300      	movs	r3, #0
 8005988:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800598a:	4b3e      	ldr	r3, [pc, #248]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x108>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 030c 	and.w	r3, r3, #12
 8005992:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005994:	4b3b      	ldr	r3, [pc, #236]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f003 0303 	and.w	r3, r3, #3
 800599c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d005      	beq.n	80059b0 <HAL_RCC_GetSysClockFreq+0x34>
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	2b0c      	cmp	r3, #12
 80059a8:	d121      	bne.n	80059ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d11e      	bne.n	80059ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80059b0:	4b34      	ldr	r3, [pc, #208]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d107      	bne.n	80059cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80059bc:	4b31      	ldr	r3, [pc, #196]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80059be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059c2:	0a1b      	lsrs	r3, r3, #8
 80059c4:	f003 030f 	and.w	r3, r3, #15
 80059c8:	61fb      	str	r3, [r7, #28]
 80059ca:	e005      	b.n	80059d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80059cc:	4b2d      	ldr	r3, [pc, #180]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	091b      	lsrs	r3, r3, #4
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80059d8:	4a2b      	ldr	r2, [pc, #172]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x10c>)
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10d      	bne.n	8005a04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059ec:	e00a      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b04      	cmp	r3, #4
 80059f2:	d102      	bne.n	80059fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059f4:	4b25      	ldr	r3, [pc, #148]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x110>)
 80059f6:	61bb      	str	r3, [r7, #24]
 80059f8:	e004      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d101      	bne.n	8005a04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a00:	4b23      	ldr	r3, [pc, #140]	; (8005a90 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	2b0c      	cmp	r3, #12
 8005a08:	d134      	bne.n	8005a74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a0a:	4b1e      	ldr	r3, [pc, #120]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d003      	beq.n	8005a22 <HAL_RCC_GetSysClockFreq+0xa6>
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d003      	beq.n	8005a28 <HAL_RCC_GetSysClockFreq+0xac>
 8005a20:	e005      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005a22:	4b1a      	ldr	r3, [pc, #104]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x110>)
 8005a24:	617b      	str	r3, [r7, #20]
      break;
 8005a26:	e005      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005a28:	4b19      	ldr	r3, [pc, #100]	; (8005a90 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a2a:	617b      	str	r3, [r7, #20]
      break;
 8005a2c:	e002      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	617b      	str	r3, [r7, #20]
      break;
 8005a32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a34:	4b13      	ldr	r3, [pc, #76]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	091b      	lsrs	r3, r3, #4
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	3301      	adds	r3, #1
 8005a40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a42:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	0a1b      	lsrs	r3, r3, #8
 8005a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	fb03 f202 	mul.w	r2, r3, r2
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a5a:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	0e5b      	lsrs	r3, r3, #25
 8005a60:	f003 0303 	and.w	r3, r3, #3
 8005a64:	3301      	adds	r3, #1
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a74:	69bb      	ldr	r3, [r7, #24]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3724      	adds	r7, #36	; 0x24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40021000 	.word	0x40021000
 8005a88:	0800c3c0 	.word	0x0800c3c0
 8005a8c:	00f42400 	.word	0x00f42400
 8005a90:	007a1200 	.word	0x007a1200

08005a94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a98:	4b03      	ldr	r3, [pc, #12]	; (8005aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	20000344 	.word	0x20000344

08005aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ab0:	f7ff fff0 	bl	8005a94 <HAL_RCC_GetHCLKFreq>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	4b06      	ldr	r3, [pc, #24]	; (8005ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	0a1b      	lsrs	r3, r3, #8
 8005abc:	f003 0307 	and.w	r3, r3, #7
 8005ac0:	4904      	ldr	r1, [pc, #16]	; (8005ad4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ac2:	5ccb      	ldrb	r3, [r1, r3]
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	0800c3b8 	.word	0x0800c3b8

08005ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005adc:	f7ff ffda 	bl	8005a94 <HAL_RCC_GetHCLKFreq>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	4b06      	ldr	r3, [pc, #24]	; (8005afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	0adb      	lsrs	r3, r3, #11
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	4904      	ldr	r1, [pc, #16]	; (8005b00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005aee:	5ccb      	ldrb	r3, [r1, r3]
 8005af0:	f003 031f 	and.w	r3, r3, #31
 8005af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	40021000 	.word	0x40021000
 8005b00:	0800c3b8 	.word	0x0800c3b8

08005b04 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	220f      	movs	r2, #15
 8005b12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005b14:	4b12      	ldr	r3, [pc, #72]	; (8005b60 <HAL_RCC_GetClockConfig+0x5c>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f003 0203 	and.w	r2, r3, #3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005b20:	4b0f      	ldr	r3, [pc, #60]	; (8005b60 <HAL_RCC_GetClockConfig+0x5c>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005b2c:	4b0c      	ldr	r3, [pc, #48]	; (8005b60 <HAL_RCC_GetClockConfig+0x5c>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005b38:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <HAL_RCC_GetClockConfig+0x5c>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	08db      	lsrs	r3, r3, #3
 8005b3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005b46:	4b07      	ldr	r3, [pc, #28]	; (8005b64 <HAL_RCC_GetClockConfig+0x60>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0207 	and.w	r2, r3, #7
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	601a      	str	r2, [r3, #0]
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40021000 	.word	0x40021000
 8005b64:	40022000 	.word	0x40022000

08005b68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005b70:	2300      	movs	r3, #0
 8005b72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005b74:	4b2a      	ldr	r3, [pc, #168]	; (8005c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005b80:	f7ff f9bc 	bl	8004efc <HAL_PWREx_GetVoltageRange>
 8005b84:	6178      	str	r0, [r7, #20]
 8005b86:	e014      	b.n	8005bb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b88:	4b25      	ldr	r3, [pc, #148]	; (8005c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8c:	4a24      	ldr	r2, [pc, #144]	; (8005c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b92:	6593      	str	r3, [r2, #88]	; 0x58
 8005b94:	4b22      	ldr	r3, [pc, #136]	; (8005c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ba0:	f7ff f9ac 	bl	8004efc <HAL_PWREx_GetVoltageRange>
 8005ba4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005ba6:	4b1e      	ldr	r3, [pc, #120]	; (8005c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005baa:	4a1d      	ldr	r2, [pc, #116]	; (8005c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bb8:	d10b      	bne.n	8005bd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b80      	cmp	r3, #128	; 0x80
 8005bbe:	d919      	bls.n	8005bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2ba0      	cmp	r3, #160	; 0xa0
 8005bc4:	d902      	bls.n	8005bcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	e013      	b.n	8005bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005bcc:	2301      	movs	r3, #1
 8005bce:	613b      	str	r3, [r7, #16]
 8005bd0:	e010      	b.n	8005bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b80      	cmp	r3, #128	; 0x80
 8005bd6:	d902      	bls.n	8005bde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005bd8:	2303      	movs	r3, #3
 8005bda:	613b      	str	r3, [r7, #16]
 8005bdc:	e00a      	b.n	8005bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b80      	cmp	r3, #128	; 0x80
 8005be2:	d102      	bne.n	8005bea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005be4:	2302      	movs	r3, #2
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	e004      	b.n	8005bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b70      	cmp	r3, #112	; 0x70
 8005bee:	d101      	bne.n	8005bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005bf4:	4b0b      	ldr	r3, [pc, #44]	; (8005c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f023 0207 	bic.w	r2, r3, #7
 8005bfc:	4909      	ldr	r1, [pc, #36]	; (8005c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c04:	4b07      	ldr	r3, [pc, #28]	; (8005c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d001      	beq.n	8005c16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e000      	b.n	8005c18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40021000 	.word	0x40021000
 8005c24:	40022000 	.word	0x40022000

08005c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c30:	2300      	movs	r3, #0
 8005c32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c34:	2300      	movs	r3, #0
 8005c36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d041      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c4c:	d02a      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005c4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c52:	d824      	bhi.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005c54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c58:	d008      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005c5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c5e:	d81e      	bhi.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00a      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c68:	d010      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c6a:	e018      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c6c:	4b86      	ldr	r3, [pc, #536]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	4a85      	ldr	r2, [pc, #532]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c78:	e015      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	2100      	movs	r1, #0
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 fabb 	bl	80061fc <RCCEx_PLLSAI1_Config>
 8005c86:	4603      	mov	r3, r0
 8005c88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c8a:	e00c      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3320      	adds	r3, #32
 8005c90:	2100      	movs	r1, #0
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fba6 	bl	80063e4 <RCCEx_PLLSAI2_Config>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c9c:	e003      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	74fb      	strb	r3, [r7, #19]
      break;
 8005ca2:	e000      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ca6:	7cfb      	ldrb	r3, [r7, #19]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10b      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cac:	4b76      	ldr	r3, [pc, #472]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cba:	4973      	ldr	r1, [pc, #460]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005cc2:	e001      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc4:	7cfb      	ldrb	r3, [r7, #19]
 8005cc6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d041      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cdc:	d02a      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005cde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ce2:	d824      	bhi.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ce4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ce8:	d008      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005cea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cee:	d81e      	bhi.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00a      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cf8:	d010      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005cfa:	e018      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005cfc:	4b62      	ldr	r3, [pc, #392]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	4a61      	ldr	r2, [pc, #388]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d08:	e015      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	2100      	movs	r1, #0
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 fa73 	bl	80061fc <RCCEx_PLLSAI1_Config>
 8005d16:	4603      	mov	r3, r0
 8005d18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d1a:	e00c      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3320      	adds	r3, #32
 8005d20:	2100      	movs	r1, #0
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fb5e 	bl	80063e4 <RCCEx_PLLSAI2_Config>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d2c:	e003      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	74fb      	strb	r3, [r7, #19]
      break;
 8005d32:	e000      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d36:	7cfb      	ldrb	r3, [r7, #19]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10b      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d3c:	4b52      	ldr	r3, [pc, #328]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d4a:	494f      	ldr	r1, [pc, #316]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d52:	e001      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d54:	7cfb      	ldrb	r3, [r7, #19]
 8005d56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 80a0 	beq.w	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d66:	2300      	movs	r3, #0
 8005d68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d6a:	4b47      	ldr	r3, [pc, #284]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005d76:	2301      	movs	r3, #1
 8005d78:	e000      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00d      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d80:	4b41      	ldr	r3, [pc, #260]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d84:	4a40      	ldr	r2, [pc, #256]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d8a:	6593      	str	r3, [r2, #88]	; 0x58
 8005d8c:	4b3e      	ldr	r3, [pc, #248]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d94:	60bb      	str	r3, [r7, #8]
 8005d96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d9c:	4b3b      	ldr	r3, [pc, #236]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a3a      	ldr	r2, [pc, #232]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005da8:	f7fe fdae 	bl	8004908 <HAL_GetTick>
 8005dac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005dae:	e009      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005db0:	f7fe fdaa 	bl	8004908 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d902      	bls.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	74fb      	strb	r3, [r7, #19]
        break;
 8005dc2:	e005      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005dc4:	4b31      	ldr	r3, [pc, #196]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0ef      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005dd0:	7cfb      	ldrb	r3, [r7, #19]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d15c      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005dd6:	4b2c      	ldr	r3, [pc, #176]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01f      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d019      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005df4:	4b24      	ldr	r3, [pc, #144]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e00:	4b21      	ldr	r3, [pc, #132]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e06:	4a20      	ldr	r2, [pc, #128]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e10:	4b1d      	ldr	r3, [pc, #116]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e16:	4a1c      	ldr	r2, [pc, #112]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e20:	4a19      	ldr	r2, [pc, #100]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d016      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e32:	f7fe fd69 	bl	8004908 <HAL_GetTick>
 8005e36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e38:	e00b      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e3a:	f7fe fd65 	bl	8004908 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d902      	bls.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	74fb      	strb	r3, [r7, #19]
            break;
 8005e50:	e006      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e52:	4b0d      	ldr	r3, [pc, #52]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0ec      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005e60:	7cfb      	ldrb	r3, [r7, #19]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10c      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e66:	4b08      	ldr	r3, [pc, #32]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e76:	4904      	ldr	r1, [pc, #16]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e7e:	e009      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e80:	7cfb      	ldrb	r3, [r7, #19]
 8005e82:	74bb      	strb	r3, [r7, #18]
 8005e84:	e006      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005e86:	bf00      	nop
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e90:	7cfb      	ldrb	r3, [r7, #19]
 8005e92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e94:	7c7b      	ldrb	r3, [r7, #17]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d105      	bne.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e9a:	4b9e      	ldr	r3, [pc, #632]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e9e:	4a9d      	ldr	r2, [pc, #628]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ea4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005eb2:	4b98      	ldr	r3, [pc, #608]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb8:	f023 0203 	bic.w	r2, r3, #3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	4994      	ldr	r1, [pc, #592]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ed4:	4b8f      	ldr	r3, [pc, #572]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eda:	f023 020c 	bic.w	r2, r3, #12
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee2:	498c      	ldr	r1, [pc, #560]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0304 	and.w	r3, r3, #4
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00a      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ef6:	4b87      	ldr	r3, [pc, #540]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	4983      	ldr	r1, [pc, #524]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00a      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f18:	4b7e      	ldr	r3, [pc, #504]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f26:	497b      	ldr	r1, [pc, #492]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0310 	and.w	r3, r3, #16
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f3a:	4b76      	ldr	r3, [pc, #472]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f48:	4972      	ldr	r1, [pc, #456]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0320 	and.w	r3, r3, #32
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00a      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f5c:	4b6d      	ldr	r3, [pc, #436]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6a:	496a      	ldr	r1, [pc, #424]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f7e:	4b65      	ldr	r3, [pc, #404]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f8c:	4961      	ldr	r1, [pc, #388]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00a      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fa0:	4b5c      	ldr	r3, [pc, #368]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fae:	4959      	ldr	r1, [pc, #356]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00a      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fc2:	4b54      	ldr	r3, [pc, #336]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd0:	4950      	ldr	r1, [pc, #320]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00a      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fe4:	4b4b      	ldr	r3, [pc, #300]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff2:	4948      	ldr	r1, [pc, #288]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006006:	4b43      	ldr	r3, [pc, #268]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006014:	493f      	ldr	r1, [pc, #252]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006016:	4313      	orrs	r3, r2
 8006018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d028      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006028:	4b3a      	ldr	r3, [pc, #232]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800602a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006036:	4937      	ldr	r1, [pc, #220]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006038:	4313      	orrs	r3, r2
 800603a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006046:	d106      	bne.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006048:	4b32      	ldr	r3, [pc, #200]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	4a31      	ldr	r2, [pc, #196]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800604e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006052:	60d3      	str	r3, [r2, #12]
 8006054:	e011      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800605a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800605e:	d10c      	bne.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3304      	adds	r3, #4
 8006064:	2101      	movs	r1, #1
 8006066:	4618      	mov	r0, r3
 8006068:	f000 f8c8 	bl	80061fc <RCCEx_PLLSAI1_Config>
 800606c:	4603      	mov	r3, r0
 800606e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006070:	7cfb      	ldrb	r3, [r7, #19]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006076:	7cfb      	ldrb	r3, [r7, #19]
 8006078:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d028      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006086:	4b23      	ldr	r3, [pc, #140]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006094:	491f      	ldr	r1, [pc, #124]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060a4:	d106      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060a6:	4b1b      	ldr	r3, [pc, #108]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	4a1a      	ldr	r2, [pc, #104]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060b0:	60d3      	str	r3, [r2, #12]
 80060b2:	e011      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060bc:	d10c      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	3304      	adds	r3, #4
 80060c2:	2101      	movs	r1, #1
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 f899 	bl	80061fc <RCCEx_PLLSAI1_Config>
 80060ca:	4603      	mov	r3, r0
 80060cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80060ce:	7cfb      	ldrb	r3, [r7, #19]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80060d4:	7cfb      	ldrb	r3, [r7, #19]
 80060d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d02b      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060e4:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f2:	4908      	ldr	r1, [pc, #32]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006102:	d109      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006104:	4b03      	ldr	r3, [pc, #12]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	4a02      	ldr	r2, [pc, #8]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800610a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800610e:	60d3      	str	r3, [r2, #12]
 8006110:	e014      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006112:	bf00      	nop
 8006114:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800611c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006120:	d10c      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	3304      	adds	r3, #4
 8006126:	2101      	movs	r1, #1
 8006128:	4618      	mov	r0, r3
 800612a:	f000 f867 	bl	80061fc <RCCEx_PLLSAI1_Config>
 800612e:	4603      	mov	r3, r0
 8006130:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006132:	7cfb      	ldrb	r3, [r7, #19]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006138:	7cfb      	ldrb	r3, [r7, #19]
 800613a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d02f      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006148:	4b2b      	ldr	r3, [pc, #172]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006156:	4928      	ldr	r1, [pc, #160]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006158:	4313      	orrs	r3, r2
 800615a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006166:	d10d      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3304      	adds	r3, #4
 800616c:	2102      	movs	r1, #2
 800616e:	4618      	mov	r0, r3
 8006170:	f000 f844 	bl	80061fc <RCCEx_PLLSAI1_Config>
 8006174:	4603      	mov	r3, r0
 8006176:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006178:	7cfb      	ldrb	r3, [r7, #19]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d014      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800617e:	7cfb      	ldrb	r3, [r7, #19]
 8006180:	74bb      	strb	r3, [r7, #18]
 8006182:	e011      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800618c:	d10c      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	3320      	adds	r3, #32
 8006192:	2102      	movs	r1, #2
 8006194:	4618      	mov	r0, r3
 8006196:	f000 f925 	bl	80063e4 <RCCEx_PLLSAI2_Config>
 800619a:	4603      	mov	r3, r0
 800619c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800619e:	7cfb      	ldrb	r3, [r7, #19]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80061a4:	7cfb      	ldrb	r3, [r7, #19]
 80061a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80061b4:	4b10      	ldr	r3, [pc, #64]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061c2:	490d      	ldr	r1, [pc, #52]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00b      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80061d6:	4b08      	ldr	r3, [pc, #32]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061e6:	4904      	ldr	r1, [pc, #16]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80061ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40021000 	.word	0x40021000

080061fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800620a:	4b75      	ldr	r3, [pc, #468]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d018      	beq.n	8006248 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006216:	4b72      	ldr	r3, [pc, #456]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f003 0203 	and.w	r2, r3, #3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d10d      	bne.n	8006242 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
       ||
 800622a:	2b00      	cmp	r3, #0
 800622c:	d009      	beq.n	8006242 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800622e:	4b6c      	ldr	r3, [pc, #432]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	091b      	lsrs	r3, r3, #4
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	1c5a      	adds	r2, r3, #1
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
       ||
 800623e:	429a      	cmp	r2, r3
 8006240:	d047      	beq.n	80062d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	73fb      	strb	r3, [r7, #15]
 8006246:	e044      	b.n	80062d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b03      	cmp	r3, #3
 800624e:	d018      	beq.n	8006282 <RCCEx_PLLSAI1_Config+0x86>
 8006250:	2b03      	cmp	r3, #3
 8006252:	d825      	bhi.n	80062a0 <RCCEx_PLLSAI1_Config+0xa4>
 8006254:	2b01      	cmp	r3, #1
 8006256:	d002      	beq.n	800625e <RCCEx_PLLSAI1_Config+0x62>
 8006258:	2b02      	cmp	r3, #2
 800625a:	d009      	beq.n	8006270 <RCCEx_PLLSAI1_Config+0x74>
 800625c:	e020      	b.n	80062a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800625e:	4b60      	ldr	r3, [pc, #384]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d11d      	bne.n	80062a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800626e:	e01a      	b.n	80062a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006270:	4b5b      	ldr	r3, [pc, #364]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006278:	2b00      	cmp	r3, #0
 800627a:	d116      	bne.n	80062aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006280:	e013      	b.n	80062aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006282:	4b57      	ldr	r3, [pc, #348]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10f      	bne.n	80062ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800628e:	4b54      	ldr	r3, [pc, #336]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d109      	bne.n	80062ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800629e:	e006      	b.n	80062ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	73fb      	strb	r3, [r7, #15]
      break;
 80062a4:	e004      	b.n	80062b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062a6:	bf00      	nop
 80062a8:	e002      	b.n	80062b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062aa:	bf00      	nop
 80062ac:	e000      	b.n	80062b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10d      	bne.n	80062d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062b6:	4b4a      	ldr	r3, [pc, #296]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6819      	ldr	r1, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	430b      	orrs	r3, r1
 80062cc:	4944      	ldr	r1, [pc, #272]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d17d      	bne.n	80063d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80062d8:	4b41      	ldr	r3, [pc, #260]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a40      	ldr	r2, [pc, #256]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062e4:	f7fe fb10 	bl	8004908 <HAL_GetTick>
 80062e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80062ea:	e009      	b.n	8006300 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062ec:	f7fe fb0c 	bl	8004908 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d902      	bls.n	8006300 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	73fb      	strb	r3, [r7, #15]
        break;
 80062fe:	e005      	b.n	800630c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006300:	4b37      	ldr	r3, [pc, #220]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1ef      	bne.n	80062ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d160      	bne.n	80063d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d111      	bne.n	800633c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006318:	4b31      	ldr	r3, [pc, #196]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6892      	ldr	r2, [r2, #8]
 8006328:	0211      	lsls	r1, r2, #8
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	68d2      	ldr	r2, [r2, #12]
 800632e:	0912      	lsrs	r2, r2, #4
 8006330:	0452      	lsls	r2, r2, #17
 8006332:	430a      	orrs	r2, r1
 8006334:	492a      	ldr	r1, [pc, #168]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006336:	4313      	orrs	r3, r2
 8006338:	610b      	str	r3, [r1, #16]
 800633a:	e027      	b.n	800638c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d112      	bne.n	8006368 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006342:	4b27      	ldr	r3, [pc, #156]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800634a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6892      	ldr	r2, [r2, #8]
 8006352:	0211      	lsls	r1, r2, #8
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	6912      	ldr	r2, [r2, #16]
 8006358:	0852      	lsrs	r2, r2, #1
 800635a:	3a01      	subs	r2, #1
 800635c:	0552      	lsls	r2, r2, #21
 800635e:	430a      	orrs	r2, r1
 8006360:	491f      	ldr	r1, [pc, #124]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006362:	4313      	orrs	r3, r2
 8006364:	610b      	str	r3, [r1, #16]
 8006366:	e011      	b.n	800638c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006368:	4b1d      	ldr	r3, [pc, #116]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006370:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6892      	ldr	r2, [r2, #8]
 8006378:	0211      	lsls	r1, r2, #8
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	6952      	ldr	r2, [r2, #20]
 800637e:	0852      	lsrs	r2, r2, #1
 8006380:	3a01      	subs	r2, #1
 8006382:	0652      	lsls	r2, r2, #25
 8006384:	430a      	orrs	r2, r1
 8006386:	4916      	ldr	r1, [pc, #88]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006388:	4313      	orrs	r3, r2
 800638a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800638c:	4b14      	ldr	r3, [pc, #80]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a13      	ldr	r2, [pc, #76]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006392:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006396:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006398:	f7fe fab6 	bl	8004908 <HAL_GetTick>
 800639c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800639e:	e009      	b.n	80063b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063a0:	f7fe fab2 	bl	8004908 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d902      	bls.n	80063b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	73fb      	strb	r3, [r7, #15]
          break;
 80063b2:	e005      	b.n	80063c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063b4:	4b0a      	ldr	r3, [pc, #40]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0ef      	beq.n	80063a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d106      	bne.n	80063d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80063c6:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c8:	691a      	ldr	r2, [r3, #16]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	4904      	ldr	r1, [pc, #16]	; (80063e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	40021000 	.word	0x40021000

080063e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063f2:	4b6a      	ldr	r3, [pc, #424]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d018      	beq.n	8006430 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80063fe:	4b67      	ldr	r3, [pc, #412]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f003 0203 	and.w	r2, r3, #3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d10d      	bne.n	800642a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
       ||
 8006412:	2b00      	cmp	r3, #0
 8006414:	d009      	beq.n	800642a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006416:	4b61      	ldr	r3, [pc, #388]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	091b      	lsrs	r3, r3, #4
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	1c5a      	adds	r2, r3, #1
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
       ||
 8006426:	429a      	cmp	r2, r3
 8006428:	d047      	beq.n	80064ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	73fb      	strb	r3, [r7, #15]
 800642e:	e044      	b.n	80064ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b03      	cmp	r3, #3
 8006436:	d018      	beq.n	800646a <RCCEx_PLLSAI2_Config+0x86>
 8006438:	2b03      	cmp	r3, #3
 800643a:	d825      	bhi.n	8006488 <RCCEx_PLLSAI2_Config+0xa4>
 800643c:	2b01      	cmp	r3, #1
 800643e:	d002      	beq.n	8006446 <RCCEx_PLLSAI2_Config+0x62>
 8006440:	2b02      	cmp	r3, #2
 8006442:	d009      	beq.n	8006458 <RCCEx_PLLSAI2_Config+0x74>
 8006444:	e020      	b.n	8006488 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006446:	4b55      	ldr	r3, [pc, #340]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d11d      	bne.n	800648e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006456:	e01a      	b.n	800648e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006458:	4b50      	ldr	r3, [pc, #320]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006460:	2b00      	cmp	r3, #0
 8006462:	d116      	bne.n	8006492 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006468:	e013      	b.n	8006492 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800646a:	4b4c      	ldr	r3, [pc, #304]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10f      	bne.n	8006496 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006476:	4b49      	ldr	r3, [pc, #292]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d109      	bne.n	8006496 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006486:	e006      	b.n	8006496 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	73fb      	strb	r3, [r7, #15]
      break;
 800648c:	e004      	b.n	8006498 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800648e:	bf00      	nop
 8006490:	e002      	b.n	8006498 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006492:	bf00      	nop
 8006494:	e000      	b.n	8006498 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006496:	bf00      	nop
    }

    if(status == HAL_OK)
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10d      	bne.n	80064ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800649e:	4b3f      	ldr	r3, [pc, #252]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6819      	ldr	r1, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	011b      	lsls	r3, r3, #4
 80064b2:	430b      	orrs	r3, r1
 80064b4:	4939      	ldr	r1, [pc, #228]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d167      	bne.n	8006590 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80064c0:	4b36      	ldr	r3, [pc, #216]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a35      	ldr	r2, [pc, #212]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064cc:	f7fe fa1c 	bl	8004908 <HAL_GetTick>
 80064d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80064d2:	e009      	b.n	80064e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80064d4:	f7fe fa18 	bl	8004908 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d902      	bls.n	80064e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	73fb      	strb	r3, [r7, #15]
        break;
 80064e6:	e005      	b.n	80064f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80064e8:	4b2c      	ldr	r3, [pc, #176]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1ef      	bne.n	80064d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d14a      	bne.n	8006590 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d111      	bne.n	8006524 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006500:	4b26      	ldr	r3, [pc, #152]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6892      	ldr	r2, [r2, #8]
 8006510:	0211      	lsls	r1, r2, #8
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	68d2      	ldr	r2, [r2, #12]
 8006516:	0912      	lsrs	r2, r2, #4
 8006518:	0452      	lsls	r2, r2, #17
 800651a:	430a      	orrs	r2, r1
 800651c:	491f      	ldr	r1, [pc, #124]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 800651e:	4313      	orrs	r3, r2
 8006520:	614b      	str	r3, [r1, #20]
 8006522:	e011      	b.n	8006548 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006524:	4b1d      	ldr	r3, [pc, #116]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800652c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6892      	ldr	r2, [r2, #8]
 8006534:	0211      	lsls	r1, r2, #8
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6912      	ldr	r2, [r2, #16]
 800653a:	0852      	lsrs	r2, r2, #1
 800653c:	3a01      	subs	r2, #1
 800653e:	0652      	lsls	r2, r2, #25
 8006540:	430a      	orrs	r2, r1
 8006542:	4916      	ldr	r1, [pc, #88]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006544:	4313      	orrs	r3, r2
 8006546:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006548:	4b14      	ldr	r3, [pc, #80]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a13      	ldr	r2, [pc, #76]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 800654e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006552:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006554:	f7fe f9d8 	bl	8004908 <HAL_GetTick>
 8006558:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800655a:	e009      	b.n	8006570 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800655c:	f7fe f9d4 	bl	8004908 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d902      	bls.n	8006570 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	73fb      	strb	r3, [r7, #15]
          break;
 800656e:	e005      	b.n	800657c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006570:	4b0a      	ldr	r3, [pc, #40]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0ef      	beq.n	800655c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800657c:	7bfb      	ldrb	r3, [r7, #15]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006582:	4b06      	ldr	r3, [pc, #24]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006584:	695a      	ldr	r2, [r3, #20]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	4904      	ldr	r1, [pc, #16]	; (800659c <RCCEx_PLLSAI2_Config+0x1b8>)
 800658c:	4313      	orrs	r3, r2
 800658e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006590:	7bfb      	ldrb	r3, [r7, #15]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	40021000 	.word	0x40021000

080065a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e095      	b.n	80066de <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d108      	bne.n	80065cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065c2:	d009      	beq.n	80065d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	61da      	str	r2, [r3, #28]
 80065ca:	e005      	b.n	80065d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7fb fb08 	bl	8001c08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800660e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006618:	d902      	bls.n	8006620 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
 800661e:	e002      	b.n	8006626 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006624:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800662e:	d007      	beq.n	8006640 <HAL_SPI_Init+0xa0>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006638:	d002      	beq.n	8006640 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006650:	431a      	orrs	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	431a      	orrs	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	431a      	orrs	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800666e:	431a      	orrs	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006678:	431a      	orrs	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006682:	ea42 0103 	orr.w	r1, r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	0c1b      	lsrs	r3, r3, #16
 800669c:	f003 0204 	and.w	r2, r3, #4
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	431a      	orrs	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ae:	f003 0308 	and.w	r3, r3, #8
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80066bc:	ea42 0103 	orr.w	r1, r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b088      	sub	sp, #32
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	603b      	str	r3, [r7, #0]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_SPI_Transmit+0x22>
 8006704:	2302      	movs	r3, #2
 8006706:	e15f      	b.n	80069c8 <HAL_SPI_Transmit+0x2e2>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006710:	f7fe f8fa 	bl	8004908 <HAL_GetTick>
 8006714:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006716:	88fb      	ldrh	r3, [r7, #6]
 8006718:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b01      	cmp	r3, #1
 8006724:	d002      	beq.n	800672c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006726:	2302      	movs	r3, #2
 8006728:	77fb      	strb	r3, [r7, #31]
    goto error;
 800672a:	e148      	b.n	80069be <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <HAL_SPI_Transmit+0x52>
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d102      	bne.n	800673e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800673c:	e13f      	b.n	80069be <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2203      	movs	r2, #3
 8006742:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	88fa      	ldrh	r2, [r7, #6]
 8006756:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	88fa      	ldrh	r2, [r7, #6]
 800675c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006788:	d10f      	bne.n	80067aa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006798:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b4:	2b40      	cmp	r3, #64	; 0x40
 80067b6:	d007      	beq.n	80067c8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067d0:	d94f      	bls.n	8006872 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <HAL_SPI_Transmit+0xfa>
 80067da:	8afb      	ldrh	r3, [r7, #22]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d142      	bne.n	8006866 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	881a      	ldrh	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f0:	1c9a      	adds	r2, r3, #2
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006804:	e02f      	b.n	8006866 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b02      	cmp	r3, #2
 8006812:	d112      	bne.n	800683a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	881a      	ldrh	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006824:	1c9a      	adds	r2, r3, #2
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006838:	e015      	b.n	8006866 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800683a:	f7fe f865 	bl	8004908 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d803      	bhi.n	8006852 <HAL_SPI_Transmit+0x16c>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006850:	d102      	bne.n	8006858 <HAL_SPI_Transmit+0x172>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d106      	bne.n	8006866 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006864:	e0ab      	b.n	80069be <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800686a:	b29b      	uxth	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1ca      	bne.n	8006806 <HAL_SPI_Transmit+0x120>
 8006870:	e080      	b.n	8006974 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <HAL_SPI_Transmit+0x19a>
 800687a:	8afb      	ldrh	r3, [r7, #22]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d174      	bne.n	800696a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b01      	cmp	r3, #1
 8006888:	d912      	bls.n	80068b0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688e:	881a      	ldrh	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689a:	1c9a      	adds	r2, r3, #2
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	3b02      	subs	r3, #2
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068ae:	e05c      	b.n	800696a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	330c      	adds	r3, #12
 80068ba:	7812      	ldrb	r2, [r2, #0]
 80068bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	3b01      	subs	r3, #1
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80068d6:	e048      	b.n	800696a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d12b      	bne.n	800693e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d912      	bls.n	8006916 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	881a      	ldrh	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	1c9a      	adds	r2, r3, #2
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800690a:	b29b      	uxth	r3, r3
 800690c:	3b02      	subs	r3, #2
 800690e:	b29a      	uxth	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006914:	e029      	b.n	800696a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	330c      	adds	r3, #12
 8006920:	7812      	ldrb	r2, [r2, #0]
 8006922:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006932:	b29b      	uxth	r3, r3
 8006934:	3b01      	subs	r3, #1
 8006936:	b29a      	uxth	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800693c:	e015      	b.n	800696a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800693e:	f7fd ffe3 	bl	8004908 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d803      	bhi.n	8006956 <HAL_SPI_Transmit+0x270>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006954:	d102      	bne.n	800695c <HAL_SPI_Transmit+0x276>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d106      	bne.n	800696a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006968:	e029      	b.n	80069be <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800696e:	b29b      	uxth	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1b1      	bne.n	80068d8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 fcf9 	bl	8007370 <SPI_EndRxTxTransaction>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2220      	movs	r2, #32
 8006988:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10a      	bne.n	80069a8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006992:	2300      	movs	r3, #0
 8006994:	613b      	str	r3, [r7, #16]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	613b      	str	r3, [r7, #16]
 80069a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d002      	beq.n	80069b6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	77fb      	strb	r3, [r7, #31]
 80069b4:	e003      	b.n	80069be <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80069c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3720      	adds	r7, #32
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af02      	add	r7, sp, #8
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	603b      	str	r3, [r7, #0]
 80069dc:	4613      	mov	r3, r2
 80069de:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d002      	beq.n	80069f6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80069f0:	2302      	movs	r3, #2
 80069f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069f4:	e11a      	b.n	8006c2c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069fe:	d112      	bne.n	8006a26 <HAL_SPI_Receive+0x56>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10e      	bne.n	8006a26 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2204      	movs	r2, #4
 8006a0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a10:	88fa      	ldrh	r2, [r7, #6]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	4613      	mov	r3, r2
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	68b9      	ldr	r1, [r7, #8]
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 f90e 	bl	8006c3e <HAL_SPI_TransmitReceive>
 8006a22:	4603      	mov	r3, r0
 8006a24:	e107      	b.n	8006c36 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_SPI_Receive+0x64>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e100      	b.n	8006c36 <HAL_SPI_Receive+0x266>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a3c:	f7fd ff64 	bl	8004908 <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <HAL_SPI_Receive+0x7e>
 8006a48:	88fb      	ldrh	r3, [r7, #6]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a52:	e0eb      	b.n	8006c2c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2204      	movs	r2, #4
 8006a58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	88fa      	ldrh	r2, [r7, #6]
 8006a6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	88fa      	ldrh	r2, [r7, #6]
 8006a74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a9e:	d908      	bls.n	8006ab2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006aae:	605a      	str	r2, [r3, #4]
 8006ab0:	e007      	b.n	8006ac2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ac0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aca:	d10f      	bne.n	8006aec <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ada:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006aea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af6:	2b40      	cmp	r3, #64	; 0x40
 8006af8:	d007      	beq.n	8006b0a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b08:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b12:	d86f      	bhi.n	8006bf4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006b14:	e034      	b.n	8006b80 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d117      	bne.n	8006b54 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f103 020c 	add.w	r2, r3, #12
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b30:	7812      	ldrb	r2, [r2, #0]
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	1c5a      	adds	r2, r3, #1
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006b52:	e015      	b.n	8006b80 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b54:	f7fd fed8 	bl	8004908 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d803      	bhi.n	8006b6c <HAL_SPI_Receive+0x19c>
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6a:	d102      	bne.n	8006b72 <HAL_SPI_Receive+0x1a2>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006b7e:	e055      	b.n	8006c2c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1c4      	bne.n	8006b16 <HAL_SPI_Receive+0x146>
 8006b8c:	e038      	b.n	8006c00 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d115      	bne.n	8006bc8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba6:	b292      	uxth	r2, r2
 8006ba8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	1c9a      	adds	r2, r3, #2
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006bc6:	e015      	b.n	8006bf4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bc8:	f7fd fe9e 	bl	8004908 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d803      	bhi.n	8006be0 <HAL_SPI_Receive+0x210>
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bde:	d102      	bne.n	8006be6 <HAL_SPI_Receive+0x216>
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d106      	bne.n	8006bf4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006bf2:	e01b      	b.n	8006c2c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1c6      	bne.n	8006b8e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 fb5b 	bl	80072c0 <SPI_EndRxTransaction>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2220      	movs	r2, #32
 8006c14:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	75fb      	strb	r3, [r7, #23]
 8006c22:	e003      	b.n	8006c2c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b08a      	sub	sp, #40	; 0x28
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	607a      	str	r2, [r7, #4]
 8006c4a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d101      	bne.n	8006c64 <HAL_SPI_TransmitReceive+0x26>
 8006c60:	2302      	movs	r3, #2
 8006c62:	e20a      	b.n	800707a <HAL_SPI_TransmitReceive+0x43c>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c6c:	f7fd fe4c 	bl	8004908 <HAL_GetTick>
 8006c70:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c78:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006c80:	887b      	ldrh	r3, [r7, #2]
 8006c82:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006c84:	887b      	ldrh	r3, [r7, #2]
 8006c86:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c88:	7efb      	ldrb	r3, [r7, #27]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d00e      	beq.n	8006cac <HAL_SPI_TransmitReceive+0x6e>
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c94:	d106      	bne.n	8006ca4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d102      	bne.n	8006ca4 <HAL_SPI_TransmitReceive+0x66>
 8006c9e:	7efb      	ldrb	r3, [r7, #27]
 8006ca0:	2b04      	cmp	r3, #4
 8006ca2:	d003      	beq.n	8006cac <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006caa:	e1e0      	b.n	800706e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <HAL_SPI_TransmitReceive+0x80>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <HAL_SPI_TransmitReceive+0x80>
 8006cb8:	887b      	ldrh	r3, [r7, #2]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d103      	bne.n	8006cc6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006cc4:	e1d3      	b.n	800706e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	d003      	beq.n	8006cda <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2205      	movs	r2, #5
 8006cd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	887a      	ldrh	r2, [r7, #2]
 8006cea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	887a      	ldrh	r2, [r7, #2]
 8006cf2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	887a      	ldrh	r2, [r7, #2]
 8006d00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	887a      	ldrh	r2, [r7, #2]
 8006d06:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d1c:	d802      	bhi.n	8006d24 <HAL_SPI_TransmitReceive+0xe6>
 8006d1e:	8a3b      	ldrh	r3, [r7, #16]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d908      	bls.n	8006d36 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d32:	605a      	str	r2, [r3, #4]
 8006d34:	e007      	b.n	8006d46 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d44:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d50:	2b40      	cmp	r3, #64	; 0x40
 8006d52:	d007      	beq.n	8006d64 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d6c:	f240 8081 	bls.w	8006e72 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <HAL_SPI_TransmitReceive+0x140>
 8006d78:	8a7b      	ldrh	r3, [r7, #18]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d16d      	bne.n	8006e5a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d82:	881a      	ldrh	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	1c9a      	adds	r2, r3, #2
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006da2:	e05a      	b.n	8006e5a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d11b      	bne.n	8006dea <HAL_SPI_TransmitReceive+0x1ac>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d016      	beq.n	8006dea <HAL_SPI_TransmitReceive+0x1ac>
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d113      	bne.n	8006dea <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc6:	881a      	ldrh	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd2:	1c9a      	adds	r2, r3, #2
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	3b01      	subs	r3, #1
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d11c      	bne.n	8006e32 <HAL_SPI_TransmitReceive+0x1f4>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d016      	beq.n	8006e32 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	b292      	uxth	r2, r2
 8006e10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	1c9a      	adds	r2, r3, #2
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	3b01      	subs	r3, #1
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e32:	f7fd fd69 	bl	8004908 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d80b      	bhi.n	8006e5a <HAL_SPI_TransmitReceive+0x21c>
 8006e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e48:	d007      	beq.n	8006e5a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006e58:	e109      	b.n	800706e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d19f      	bne.n	8006da4 <HAL_SPI_TransmitReceive+0x166>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d199      	bne.n	8006da4 <HAL_SPI_TransmitReceive+0x166>
 8006e70:	e0e3      	b.n	800703a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_SPI_TransmitReceive+0x244>
 8006e7a:	8a7b      	ldrh	r3, [r7, #18]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	f040 80cf 	bne.w	8007020 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d912      	bls.n	8006eb2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	881a      	ldrh	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9c:	1c9a      	adds	r2, r3, #2
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	3b02      	subs	r3, #2
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006eb0:	e0b6      	b.n	8007020 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	330c      	adds	r3, #12
 8006ebc:	7812      	ldrb	r2, [r2, #0]
 8006ebe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ed8:	e0a2      	b.n	8007020 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d134      	bne.n	8006f52 <HAL_SPI_TransmitReceive+0x314>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d02f      	beq.n	8006f52 <HAL_SPI_TransmitReceive+0x314>
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d12c      	bne.n	8006f52 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d912      	bls.n	8006f28 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f06:	881a      	ldrh	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f12:	1c9a      	adds	r2, r3, #2
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b02      	subs	r3, #2
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f26:	e012      	b.n	8006f4e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	330c      	adds	r3, #12
 8006f32:	7812      	ldrb	r2, [r2, #0]
 8006f34:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	3b01      	subs	r3, #1
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d148      	bne.n	8006ff2 <HAL_SPI_TransmitReceive+0x3b4>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d042      	beq.n	8006ff2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d923      	bls.n	8006fc0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	b292      	uxth	r2, r2
 8006f84:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	1c9a      	adds	r2, r3, #2
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	3b02      	subs	r3, #2
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d81f      	bhi.n	8006fee <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006fbc:	605a      	str	r2, [r3, #4]
 8006fbe:	e016      	b.n	8006fee <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f103 020c 	add.w	r2, r3, #12
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fcc:	7812      	ldrb	r2, [r2, #0]
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ff2:	f7fd fc89 	bl	8004908 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d803      	bhi.n	800700a <HAL_SPI_TransmitReceive+0x3cc>
 8007002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007008:	d102      	bne.n	8007010 <HAL_SPI_TransmitReceive+0x3d2>
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	2b00      	cmp	r3, #0
 800700e:	d107      	bne.n	8007020 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800701e:	e026      	b.n	800706e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007024:	b29b      	uxth	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	f47f af57 	bne.w	8006eda <HAL_SPI_TransmitReceive+0x29c>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007032:	b29b      	uxth	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	f47f af50 	bne.w	8006eda <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800703a:	69fa      	ldr	r2, [r7, #28]
 800703c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 f996 	bl	8007370 <SPI_EndRxTxTransaction>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d005      	beq.n	8007056 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007064:	e003      	b.n	800706e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007076:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800707a:	4618      	mov	r0, r3
 800707c:	3728      	adds	r7, #40	; 0x28
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
	...

08007084 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	603b      	str	r3, [r7, #0]
 8007090:	4613      	mov	r3, r2
 8007092:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007094:	f7fd fc38 	bl	8004908 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	1a9b      	subs	r3, r3, r2
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	4413      	add	r3, r2
 80070a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070a4:	f7fd fc30 	bl	8004908 <HAL_GetTick>
 80070a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80070aa:	4b39      	ldr	r3, [pc, #228]	; (8007190 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	015b      	lsls	r3, r3, #5
 80070b0:	0d1b      	lsrs	r3, r3, #20
 80070b2:	69fa      	ldr	r2, [r7, #28]
 80070b4:	fb02 f303 	mul.w	r3, r2, r3
 80070b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070ba:	e054      	b.n	8007166 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c2:	d050      	beq.n	8007166 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070c4:	f7fd fc20 	bl	8004908 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	69fa      	ldr	r2, [r7, #28]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d902      	bls.n	80070da <SPI_WaitFlagStateUntilTimeout+0x56>
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d13d      	bne.n	8007156 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070f2:	d111      	bne.n	8007118 <SPI_WaitFlagStateUntilTimeout+0x94>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070fc:	d004      	beq.n	8007108 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007106:	d107      	bne.n	8007118 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007116:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007120:	d10f      	bne.n	8007142 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007140:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e017      	b.n	8007186 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	3b01      	subs	r3, #1
 8007164:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	4013      	ands	r3, r2
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	429a      	cmp	r2, r3
 8007174:	bf0c      	ite	eq
 8007176:	2301      	moveq	r3, #1
 8007178:	2300      	movne	r3, #0
 800717a:	b2db      	uxtb	r3, r3
 800717c:	461a      	mov	r2, r3
 800717e:	79fb      	ldrb	r3, [r7, #7]
 8007180:	429a      	cmp	r2, r3
 8007182:	d19b      	bne.n	80070bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3720      	adds	r7, #32
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	20000344 	.word	0x20000344

08007194 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08a      	sub	sp, #40	; 0x28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
 80071a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80071a6:	f7fd fbaf 	bl	8004908 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ae:	1a9b      	subs	r3, r3, r2
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	4413      	add	r3, r2
 80071b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80071b6:	f7fd fba7 	bl	8004908 <HAL_GetTick>
 80071ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	330c      	adds	r3, #12
 80071c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80071c4:	4b3d      	ldr	r3, [pc, #244]	; (80072bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	4613      	mov	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	00da      	lsls	r2, r3, #3
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	0d1b      	lsrs	r3, r3, #20
 80071d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d6:	fb02 f303 	mul.w	r3, r2, r3
 80071da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80071dc:	e060      	b.n	80072a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80071e4:	d107      	bne.n	80071f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d104      	bne.n	80071f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fc:	d050      	beq.n	80072a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071fe:	f7fd fb83 	bl	8004908 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800720a:	429a      	cmp	r2, r3
 800720c:	d902      	bls.n	8007214 <SPI_WaitFifoStateUntilTimeout+0x80>
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	2b00      	cmp	r3, #0
 8007212:	d13d      	bne.n	8007290 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007222:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800722c:	d111      	bne.n	8007252 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007236:	d004      	beq.n	8007242 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007240:	d107      	bne.n	8007252 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007250:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800725a:	d10f      	bne.n	800727c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800727a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e010      	b.n	80072b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007296:	2300      	movs	r3, #0
 8007298:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	3b01      	subs	r3, #1
 800729e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689a      	ldr	r2, [r3, #8]
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	4013      	ands	r3, r2
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d196      	bne.n	80071de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3728      	adds	r7, #40	; 0x28
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20000344 	.word	0x20000344

080072c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af02      	add	r7, sp, #8
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072d4:	d111      	bne.n	80072fa <SPI_EndRxTransaction+0x3a>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072de:	d004      	beq.n	80072ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072e8:	d107      	bne.n	80072fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072f8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2200      	movs	r2, #0
 8007302:	2180      	movs	r1, #128	; 0x80
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f7ff febd 	bl	8007084 <SPI_WaitFlagStateUntilTimeout>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d007      	beq.n	8007320 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007314:	f043 0220 	orr.w	r2, r3, #32
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e023      	b.n	8007368 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007328:	d11d      	bne.n	8007366 <SPI_EndRxTransaction+0xa6>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007332:	d004      	beq.n	800733e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800733c:	d113      	bne.n	8007366 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2200      	movs	r2, #0
 8007346:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f7ff ff22 	bl	8007194 <SPI_WaitFifoStateUntilTimeout>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d007      	beq.n	8007366 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800735a:	f043 0220 	orr.w	r2, r3, #32
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e000      	b.n	8007368 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af02      	add	r7, sp, #8
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2200      	movs	r2, #0
 8007384:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f7ff ff03 	bl	8007194 <SPI_WaitFifoStateUntilTimeout>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d007      	beq.n	80073a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007398:	f043 0220 	orr.w	r2, r3, #32
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e027      	b.n	80073f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2200      	movs	r2, #0
 80073ac:	2180      	movs	r1, #128	; 0x80
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f7ff fe68 	bl	8007084 <SPI_WaitFlagStateUntilTimeout>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d007      	beq.n	80073ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073be:	f043 0220 	orr.w	r2, r3, #32
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e014      	b.n	80073f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f7ff fedc 	bl	8007194 <SPI_WaitFifoStateUntilTimeout>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d007      	beq.n	80073f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073e6:	f043 0220 	orr.w	r2, r3, #32
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e000      	b.n	80073f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e049      	b.n	80074a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d106      	bne.n	8007428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f841 	bl	80074aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2202      	movs	r2, #2
 800742c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3304      	adds	r3, #4
 8007438:	4619      	mov	r1, r3
 800743a:	4610      	mov	r0, r2
 800743c:	f000 f9da 	bl	80077f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b083      	sub	sp, #12
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80074b2:	bf00      	nop
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
	...

080074c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d001      	beq.n	80074d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e04f      	b.n	8007578 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68da      	ldr	r2, [r3, #12]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0201 	orr.w	r2, r2, #1
 80074ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a23      	ldr	r2, [pc, #140]	; (8007584 <HAL_TIM_Base_Start_IT+0xc4>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d01d      	beq.n	8007536 <HAL_TIM_Base_Start_IT+0x76>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007502:	d018      	beq.n	8007536 <HAL_TIM_Base_Start_IT+0x76>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a1f      	ldr	r2, [pc, #124]	; (8007588 <HAL_TIM_Base_Start_IT+0xc8>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d013      	beq.n	8007536 <HAL_TIM_Base_Start_IT+0x76>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a1e      	ldr	r2, [pc, #120]	; (800758c <HAL_TIM_Base_Start_IT+0xcc>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d00e      	beq.n	8007536 <HAL_TIM_Base_Start_IT+0x76>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a1c      	ldr	r2, [pc, #112]	; (8007590 <HAL_TIM_Base_Start_IT+0xd0>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d009      	beq.n	8007536 <HAL_TIM_Base_Start_IT+0x76>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a1b      	ldr	r2, [pc, #108]	; (8007594 <HAL_TIM_Base_Start_IT+0xd4>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d004      	beq.n	8007536 <HAL_TIM_Base_Start_IT+0x76>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a19      	ldr	r2, [pc, #100]	; (8007598 <HAL_TIM_Base_Start_IT+0xd8>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d115      	bne.n	8007562 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	689a      	ldr	r2, [r3, #8]
 800753c:	4b17      	ldr	r3, [pc, #92]	; (800759c <HAL_TIM_Base_Start_IT+0xdc>)
 800753e:	4013      	ands	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2b06      	cmp	r3, #6
 8007546:	d015      	beq.n	8007574 <HAL_TIM_Base_Start_IT+0xb4>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800754e:	d011      	beq.n	8007574 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0201 	orr.w	r2, r2, #1
 800755e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007560:	e008      	b.n	8007574 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f042 0201 	orr.w	r2, r2, #1
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	e000      	b.n	8007576 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007574:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	40012c00 	.word	0x40012c00
 8007588:	40000400 	.word	0x40000400
 800758c:	40000800 	.word	0x40000800
 8007590:	40000c00 	.word	0x40000c00
 8007594:	40013400 	.word	0x40013400
 8007598:	40014000 	.word	0x40014000
 800759c:	00010007 	.word	0x00010007

080075a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d020      	beq.n	8007604 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d01b      	beq.n	8007604 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f06f 0202 	mvn.w	r2, #2
 80075d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	f003 0303 	and.w	r3, r3, #3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d003      	beq.n	80075f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f8e4 	bl	80077b8 <HAL_TIM_IC_CaptureCallback>
 80075f0:	e005      	b.n	80075fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f8d6 	bl	80077a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 f8e7 	bl	80077cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f003 0304 	and.w	r3, r3, #4
 800760a:	2b00      	cmp	r3, #0
 800760c:	d020      	beq.n	8007650 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f003 0304 	and.w	r3, r3, #4
 8007614:	2b00      	cmp	r3, #0
 8007616:	d01b      	beq.n	8007650 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f06f 0204 	mvn.w	r2, #4
 8007620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2202      	movs	r2, #2
 8007626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007632:	2b00      	cmp	r3, #0
 8007634:	d003      	beq.n	800763e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f8be 	bl	80077b8 <HAL_TIM_IC_CaptureCallback>
 800763c:	e005      	b.n	800764a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f8b0 	bl	80077a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f8c1 	bl	80077cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f003 0308 	and.w	r3, r3, #8
 8007656:	2b00      	cmp	r3, #0
 8007658:	d020      	beq.n	800769c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01b      	beq.n	800769c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f06f 0208 	mvn.w	r2, #8
 800766c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2204      	movs	r2, #4
 8007672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	f003 0303 	and.w	r3, r3, #3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f898 	bl	80077b8 <HAL_TIM_IC_CaptureCallback>
 8007688:	e005      	b.n	8007696 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f88a 	bl	80077a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f89b 	bl	80077cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f003 0310 	and.w	r3, r3, #16
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d020      	beq.n	80076e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f003 0310 	and.w	r3, r3, #16
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d01b      	beq.n	80076e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f06f 0210 	mvn.w	r2, #16
 80076b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2208      	movs	r2, #8
 80076be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f872 	bl	80077b8 <HAL_TIM_IC_CaptureCallback>
 80076d4:	e005      	b.n	80076e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f864 	bl	80077a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f875 	bl	80077cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00c      	beq.n	800770c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d007      	beq.n	800770c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f06f 0201 	mvn.w	r2, #1
 8007704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7fa fa28 	bl	8001b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00c      	beq.n	8007730 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800771c:	2b00      	cmp	r3, #0
 800771e:	d007      	beq.n	8007730 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f906 	bl	800793c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00c      	beq.n	8007754 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007740:	2b00      	cmp	r3, #0
 8007742:	d007      	beq.n	8007754 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800774c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f8fe 	bl	8007950 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00c      	beq.n	8007778 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007764:	2b00      	cmp	r3, #0
 8007766:	d007      	beq.n	8007778 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f834 	bl	80077e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	f003 0320 	and.w	r3, r3, #32
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00c      	beq.n	800779c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f003 0320 	and.w	r3, r3, #32
 8007788:	2b00      	cmp	r3, #0
 800778a:	d007      	beq.n	800779c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f06f 0220 	mvn.w	r2, #32
 8007794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f8c6 	bl	8007928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800779c:	bf00      	nop
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a40      	ldr	r2, [pc, #256]	; (8007908 <TIM_Base_SetConfig+0x114>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d013      	beq.n	8007834 <TIM_Base_SetConfig+0x40>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007812:	d00f      	beq.n	8007834 <TIM_Base_SetConfig+0x40>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a3d      	ldr	r2, [pc, #244]	; (800790c <TIM_Base_SetConfig+0x118>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d00b      	beq.n	8007834 <TIM_Base_SetConfig+0x40>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a3c      	ldr	r2, [pc, #240]	; (8007910 <TIM_Base_SetConfig+0x11c>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d007      	beq.n	8007834 <TIM_Base_SetConfig+0x40>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a3b      	ldr	r2, [pc, #236]	; (8007914 <TIM_Base_SetConfig+0x120>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d003      	beq.n	8007834 <TIM_Base_SetConfig+0x40>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a3a      	ldr	r2, [pc, #232]	; (8007918 <TIM_Base_SetConfig+0x124>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d108      	bne.n	8007846 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	4313      	orrs	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a2f      	ldr	r2, [pc, #188]	; (8007908 <TIM_Base_SetConfig+0x114>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d01f      	beq.n	800788e <TIM_Base_SetConfig+0x9a>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007854:	d01b      	beq.n	800788e <TIM_Base_SetConfig+0x9a>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a2c      	ldr	r2, [pc, #176]	; (800790c <TIM_Base_SetConfig+0x118>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d017      	beq.n	800788e <TIM_Base_SetConfig+0x9a>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a2b      	ldr	r2, [pc, #172]	; (8007910 <TIM_Base_SetConfig+0x11c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d013      	beq.n	800788e <TIM_Base_SetConfig+0x9a>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a2a      	ldr	r2, [pc, #168]	; (8007914 <TIM_Base_SetConfig+0x120>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d00f      	beq.n	800788e <TIM_Base_SetConfig+0x9a>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a29      	ldr	r2, [pc, #164]	; (8007918 <TIM_Base_SetConfig+0x124>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d00b      	beq.n	800788e <TIM_Base_SetConfig+0x9a>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a28      	ldr	r2, [pc, #160]	; (800791c <TIM_Base_SetConfig+0x128>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d007      	beq.n	800788e <TIM_Base_SetConfig+0x9a>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a27      	ldr	r2, [pc, #156]	; (8007920 <TIM_Base_SetConfig+0x12c>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d003      	beq.n	800788e <TIM_Base_SetConfig+0x9a>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a26      	ldr	r2, [pc, #152]	; (8007924 <TIM_Base_SetConfig+0x130>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d108      	bne.n	80078a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	4313      	orrs	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a10      	ldr	r2, [pc, #64]	; (8007908 <TIM_Base_SetConfig+0x114>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d00f      	beq.n	80078ec <TIM_Base_SetConfig+0xf8>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a12      	ldr	r2, [pc, #72]	; (8007918 <TIM_Base_SetConfig+0x124>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d00b      	beq.n	80078ec <TIM_Base_SetConfig+0xf8>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a11      	ldr	r2, [pc, #68]	; (800791c <TIM_Base_SetConfig+0x128>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d007      	beq.n	80078ec <TIM_Base_SetConfig+0xf8>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a10      	ldr	r2, [pc, #64]	; (8007920 <TIM_Base_SetConfig+0x12c>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d003      	beq.n	80078ec <TIM_Base_SetConfig+0xf8>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a0f      	ldr	r2, [pc, #60]	; (8007924 <TIM_Base_SetConfig+0x130>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d103      	bne.n	80078f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	691a      	ldr	r2, [r3, #16]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	615a      	str	r2, [r3, #20]
}
 80078fa:	bf00      	nop
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	40012c00 	.word	0x40012c00
 800790c:	40000400 	.word	0x40000400
 8007910:	40000800 	.word	0x40000800
 8007914:	40000c00 	.word	0x40000c00
 8007918:	40013400 	.word	0x40013400
 800791c:	40014000 	.word	0x40014000
 8007920:	40014400 	.word	0x40014400
 8007924:	40014800 	.word	0x40014800

08007928 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e040      	b.n	80079f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800797a:	2b00      	cmp	r3, #0
 800797c:	d106      	bne.n	800798c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7fa fbd2 	bl	8002130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2224      	movs	r2, #36	; 0x24
 8007990:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f022 0201 	bic.w	r2, r2, #1
 80079a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fb6a 	bl	8008084 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f8af 	bl	8007b14 <UART_SetConfig>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d101      	bne.n	80079c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e01b      	b.n	80079f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	689a      	ldr	r2, [r3, #8]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f042 0201 	orr.w	r2, r2, #1
 80079ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fbe9 	bl	80081c8 <UART_CheckIdleState>
 80079f6:	4603      	mov	r3, r0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b08a      	sub	sp, #40	; 0x28
 8007a04:	af02      	add	r7, sp, #8
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	603b      	str	r3, [r7, #0]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a14:	2b20      	cmp	r3, #32
 8007a16:	d178      	bne.n	8007b0a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d002      	beq.n	8007a24 <HAL_UART_Transmit+0x24>
 8007a1e:	88fb      	ldrh	r3, [r7, #6]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e071      	b.n	8007b0c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2221      	movs	r2, #33	; 0x21
 8007a34:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a36:	f7fc ff67 	bl	8004908 <HAL_GetTick>
 8007a3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	88fa      	ldrh	r2, [r7, #6]
 8007a40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	88fa      	ldrh	r2, [r7, #6]
 8007a48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a54:	d108      	bne.n	8007a68 <HAL_UART_Transmit+0x68>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d104      	bne.n	8007a68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	61bb      	str	r3, [r7, #24]
 8007a66:	e003      	b.n	8007a70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a70:	e030      	b.n	8007ad4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2180      	movs	r1, #128	; 0x80
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 fc4b 	bl	8008318 <UART_WaitOnFlagUntilTimeout>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d004      	beq.n	8007a92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e03c      	b.n	8007b0c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10b      	bne.n	8007ab0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	881a      	ldrh	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aa4:	b292      	uxth	r2, r2
 8007aa6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	3302      	adds	r3, #2
 8007aac:	61bb      	str	r3, [r7, #24]
 8007aae:	e008      	b.n	8007ac2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	781a      	ldrb	r2, [r3, #0]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	b292      	uxth	r2, r2
 8007aba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	3b01      	subs	r3, #1
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1c8      	bne.n	8007a72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2140      	movs	r1, #64	; 0x40
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 fc14 	bl	8008318 <UART_WaitOnFlagUntilTimeout>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d004      	beq.n	8007b00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2220      	movs	r2, #32
 8007afa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e005      	b.n	8007b0c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2220      	movs	r2, #32
 8007b04:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	e000      	b.n	8007b0c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007b0a:	2302      	movs	r3, #2
  }
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3720      	adds	r7, #32
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b18:	b08a      	sub	sp, #40	; 0x28
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	689a      	ldr	r2, [r3, #8]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	431a      	orrs	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	431a      	orrs	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	4ba4      	ldr	r3, [pc, #656]	; (8007dd4 <UART_SetConfig+0x2c0>)
 8007b44:	4013      	ands	r3, r2
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	6812      	ldr	r2, [r2, #0]
 8007b4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a99      	ldr	r2, [pc, #612]	; (8007dd8 <UART_SetConfig+0x2c4>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d004      	beq.n	8007b80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b90:	430a      	orrs	r2, r1
 8007b92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a90      	ldr	r2, [pc, #576]	; (8007ddc <UART_SetConfig+0x2c8>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d126      	bne.n	8007bec <UART_SetConfig+0xd8>
 8007b9e:	4b90      	ldr	r3, [pc, #576]	; (8007de0 <UART_SetConfig+0x2cc>)
 8007ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba4:	f003 0303 	and.w	r3, r3, #3
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d81b      	bhi.n	8007be4 <UART_SetConfig+0xd0>
 8007bac:	a201      	add	r2, pc, #4	; (adr r2, 8007bb4 <UART_SetConfig+0xa0>)
 8007bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb2:	bf00      	nop
 8007bb4:	08007bc5 	.word	0x08007bc5
 8007bb8:	08007bd5 	.word	0x08007bd5
 8007bbc:	08007bcd 	.word	0x08007bcd
 8007bc0:	08007bdd 	.word	0x08007bdd
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bca:	e116      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bd2:	e112      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007bd4:	2304      	movs	r3, #4
 8007bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bda:	e10e      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007bdc:	2308      	movs	r3, #8
 8007bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007be2:	e10a      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007be4:	2310      	movs	r3, #16
 8007be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bea:	e106      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a7c      	ldr	r2, [pc, #496]	; (8007de4 <UART_SetConfig+0x2d0>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d138      	bne.n	8007c68 <UART_SetConfig+0x154>
 8007bf6:	4b7a      	ldr	r3, [pc, #488]	; (8007de0 <UART_SetConfig+0x2cc>)
 8007bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfc:	f003 030c 	and.w	r3, r3, #12
 8007c00:	2b0c      	cmp	r3, #12
 8007c02:	d82d      	bhi.n	8007c60 <UART_SetConfig+0x14c>
 8007c04:	a201      	add	r2, pc, #4	; (adr r2, 8007c0c <UART_SetConfig+0xf8>)
 8007c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0a:	bf00      	nop
 8007c0c:	08007c41 	.word	0x08007c41
 8007c10:	08007c61 	.word	0x08007c61
 8007c14:	08007c61 	.word	0x08007c61
 8007c18:	08007c61 	.word	0x08007c61
 8007c1c:	08007c51 	.word	0x08007c51
 8007c20:	08007c61 	.word	0x08007c61
 8007c24:	08007c61 	.word	0x08007c61
 8007c28:	08007c61 	.word	0x08007c61
 8007c2c:	08007c49 	.word	0x08007c49
 8007c30:	08007c61 	.word	0x08007c61
 8007c34:	08007c61 	.word	0x08007c61
 8007c38:	08007c61 	.word	0x08007c61
 8007c3c:	08007c59 	.word	0x08007c59
 8007c40:	2300      	movs	r3, #0
 8007c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c46:	e0d8      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007c48:	2302      	movs	r3, #2
 8007c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c4e:	e0d4      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007c50:	2304      	movs	r3, #4
 8007c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c56:	e0d0      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007c58:	2308      	movs	r3, #8
 8007c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c5e:	e0cc      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007c60:	2310      	movs	r3, #16
 8007c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c66:	e0c8      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a5e      	ldr	r2, [pc, #376]	; (8007de8 <UART_SetConfig+0x2d4>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d125      	bne.n	8007cbe <UART_SetConfig+0x1aa>
 8007c72:	4b5b      	ldr	r3, [pc, #364]	; (8007de0 <UART_SetConfig+0x2cc>)
 8007c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c7c:	2b30      	cmp	r3, #48	; 0x30
 8007c7e:	d016      	beq.n	8007cae <UART_SetConfig+0x19a>
 8007c80:	2b30      	cmp	r3, #48	; 0x30
 8007c82:	d818      	bhi.n	8007cb6 <UART_SetConfig+0x1a2>
 8007c84:	2b20      	cmp	r3, #32
 8007c86:	d00a      	beq.n	8007c9e <UART_SetConfig+0x18a>
 8007c88:	2b20      	cmp	r3, #32
 8007c8a:	d814      	bhi.n	8007cb6 <UART_SetConfig+0x1a2>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <UART_SetConfig+0x182>
 8007c90:	2b10      	cmp	r3, #16
 8007c92:	d008      	beq.n	8007ca6 <UART_SetConfig+0x192>
 8007c94:	e00f      	b.n	8007cb6 <UART_SetConfig+0x1a2>
 8007c96:	2300      	movs	r3, #0
 8007c98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c9c:	e0ad      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ca4:	e0a9      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007ca6:	2304      	movs	r3, #4
 8007ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cac:	e0a5      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007cae:	2308      	movs	r3, #8
 8007cb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cb4:	e0a1      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007cb6:	2310      	movs	r3, #16
 8007cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cbc:	e09d      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a4a      	ldr	r2, [pc, #296]	; (8007dec <UART_SetConfig+0x2d8>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d125      	bne.n	8007d14 <UART_SetConfig+0x200>
 8007cc8:	4b45      	ldr	r3, [pc, #276]	; (8007de0 <UART_SetConfig+0x2cc>)
 8007cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cd2:	2bc0      	cmp	r3, #192	; 0xc0
 8007cd4:	d016      	beq.n	8007d04 <UART_SetConfig+0x1f0>
 8007cd6:	2bc0      	cmp	r3, #192	; 0xc0
 8007cd8:	d818      	bhi.n	8007d0c <UART_SetConfig+0x1f8>
 8007cda:	2b80      	cmp	r3, #128	; 0x80
 8007cdc:	d00a      	beq.n	8007cf4 <UART_SetConfig+0x1e0>
 8007cde:	2b80      	cmp	r3, #128	; 0x80
 8007ce0:	d814      	bhi.n	8007d0c <UART_SetConfig+0x1f8>
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <UART_SetConfig+0x1d8>
 8007ce6:	2b40      	cmp	r3, #64	; 0x40
 8007ce8:	d008      	beq.n	8007cfc <UART_SetConfig+0x1e8>
 8007cea:	e00f      	b.n	8007d0c <UART_SetConfig+0x1f8>
 8007cec:	2300      	movs	r3, #0
 8007cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cf2:	e082      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cfa:	e07e      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d02:	e07a      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007d04:	2308      	movs	r3, #8
 8007d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d0a:	e076      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007d0c:	2310      	movs	r3, #16
 8007d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d12:	e072      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a35      	ldr	r2, [pc, #212]	; (8007df0 <UART_SetConfig+0x2dc>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d12a      	bne.n	8007d74 <UART_SetConfig+0x260>
 8007d1e:	4b30      	ldr	r3, [pc, #192]	; (8007de0 <UART_SetConfig+0x2cc>)
 8007d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d2c:	d01a      	beq.n	8007d64 <UART_SetConfig+0x250>
 8007d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d32:	d81b      	bhi.n	8007d6c <UART_SetConfig+0x258>
 8007d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d38:	d00c      	beq.n	8007d54 <UART_SetConfig+0x240>
 8007d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d3e:	d815      	bhi.n	8007d6c <UART_SetConfig+0x258>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <UART_SetConfig+0x238>
 8007d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d48:	d008      	beq.n	8007d5c <UART_SetConfig+0x248>
 8007d4a:	e00f      	b.n	8007d6c <UART_SetConfig+0x258>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d52:	e052      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007d54:	2302      	movs	r3, #2
 8007d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d5a:	e04e      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007d5c:	2304      	movs	r3, #4
 8007d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d62:	e04a      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007d64:	2308      	movs	r3, #8
 8007d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d6a:	e046      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007d6c:	2310      	movs	r3, #16
 8007d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d72:	e042      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a17      	ldr	r2, [pc, #92]	; (8007dd8 <UART_SetConfig+0x2c4>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d13a      	bne.n	8007df4 <UART_SetConfig+0x2e0>
 8007d7e:	4b18      	ldr	r3, [pc, #96]	; (8007de0 <UART_SetConfig+0x2cc>)
 8007d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d8c:	d01a      	beq.n	8007dc4 <UART_SetConfig+0x2b0>
 8007d8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d92:	d81b      	bhi.n	8007dcc <UART_SetConfig+0x2b8>
 8007d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d98:	d00c      	beq.n	8007db4 <UART_SetConfig+0x2a0>
 8007d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d9e:	d815      	bhi.n	8007dcc <UART_SetConfig+0x2b8>
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d003      	beq.n	8007dac <UART_SetConfig+0x298>
 8007da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007da8:	d008      	beq.n	8007dbc <UART_SetConfig+0x2a8>
 8007daa:	e00f      	b.n	8007dcc <UART_SetConfig+0x2b8>
 8007dac:	2300      	movs	r3, #0
 8007dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007db2:	e022      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007db4:	2302      	movs	r3, #2
 8007db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dba:	e01e      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007dbc:	2304      	movs	r3, #4
 8007dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dc2:	e01a      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007dc4:	2308      	movs	r3, #8
 8007dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dca:	e016      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007dcc:	2310      	movs	r3, #16
 8007dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dd2:	e012      	b.n	8007dfa <UART_SetConfig+0x2e6>
 8007dd4:	efff69f3 	.word	0xefff69f3
 8007dd8:	40008000 	.word	0x40008000
 8007ddc:	40013800 	.word	0x40013800
 8007de0:	40021000 	.word	0x40021000
 8007de4:	40004400 	.word	0x40004400
 8007de8:	40004800 	.word	0x40004800
 8007dec:	40004c00 	.word	0x40004c00
 8007df0:	40005000 	.word	0x40005000
 8007df4:	2310      	movs	r3, #16
 8007df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a9f      	ldr	r2, [pc, #636]	; (800807c <UART_SetConfig+0x568>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d17a      	bne.n	8007efa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	d824      	bhi.n	8007e56 <UART_SetConfig+0x342>
 8007e0c:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <UART_SetConfig+0x300>)
 8007e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e12:	bf00      	nop
 8007e14:	08007e39 	.word	0x08007e39
 8007e18:	08007e57 	.word	0x08007e57
 8007e1c:	08007e41 	.word	0x08007e41
 8007e20:	08007e57 	.word	0x08007e57
 8007e24:	08007e47 	.word	0x08007e47
 8007e28:	08007e57 	.word	0x08007e57
 8007e2c:	08007e57 	.word	0x08007e57
 8007e30:	08007e57 	.word	0x08007e57
 8007e34:	08007e4f 	.word	0x08007e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e38:	f7fd fe38 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 8007e3c:	61f8      	str	r0, [r7, #28]
        break;
 8007e3e:	e010      	b.n	8007e62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e40:	4b8f      	ldr	r3, [pc, #572]	; (8008080 <UART_SetConfig+0x56c>)
 8007e42:	61fb      	str	r3, [r7, #28]
        break;
 8007e44:	e00d      	b.n	8007e62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e46:	f7fd fd99 	bl	800597c <HAL_RCC_GetSysClockFreq>
 8007e4a:	61f8      	str	r0, [r7, #28]
        break;
 8007e4c:	e009      	b.n	8007e62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e52:	61fb      	str	r3, [r7, #28]
        break;
 8007e54:	e005      	b.n	8007e62 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007e60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 80fb 	beq.w	8008060 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	4413      	add	r3, r2
 8007e74:	69fa      	ldr	r2, [r7, #28]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d305      	bcc.n	8007e86 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d903      	bls.n	8007e8e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007e8c:	e0e8      	b.n	8008060 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	2200      	movs	r2, #0
 8007e92:	461c      	mov	r4, r3
 8007e94:	4615      	mov	r5, r2
 8007e96:	f04f 0200 	mov.w	r2, #0
 8007e9a:	f04f 0300 	mov.w	r3, #0
 8007e9e:	022b      	lsls	r3, r5, #8
 8007ea0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007ea4:	0222      	lsls	r2, r4, #8
 8007ea6:	68f9      	ldr	r1, [r7, #12]
 8007ea8:	6849      	ldr	r1, [r1, #4]
 8007eaa:	0849      	lsrs	r1, r1, #1
 8007eac:	2000      	movs	r0, #0
 8007eae:	4688      	mov	r8, r1
 8007eb0:	4681      	mov	r9, r0
 8007eb2:	eb12 0a08 	adds.w	sl, r2, r8
 8007eb6:	eb43 0b09 	adc.w	fp, r3, r9
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	603b      	str	r3, [r7, #0]
 8007ec2:	607a      	str	r2, [r7, #4]
 8007ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec8:	4650      	mov	r0, sl
 8007eca:	4659      	mov	r1, fp
 8007ecc:	f7f8 fdc6 	bl	8000a5c <__aeabi_uldivmod>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ede:	d308      	bcc.n	8007ef2 <UART_SetConfig+0x3de>
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ee6:	d204      	bcs.n	8007ef2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	60da      	str	r2, [r3, #12]
 8007ef0:	e0b6      	b.n	8008060 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ef8:	e0b2      	b.n	8008060 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f02:	d15e      	bne.n	8007fc2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007f04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f08:	2b08      	cmp	r3, #8
 8007f0a:	d828      	bhi.n	8007f5e <UART_SetConfig+0x44a>
 8007f0c:	a201      	add	r2, pc, #4	; (adr r2, 8007f14 <UART_SetConfig+0x400>)
 8007f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f12:	bf00      	nop
 8007f14:	08007f39 	.word	0x08007f39
 8007f18:	08007f41 	.word	0x08007f41
 8007f1c:	08007f49 	.word	0x08007f49
 8007f20:	08007f5f 	.word	0x08007f5f
 8007f24:	08007f4f 	.word	0x08007f4f
 8007f28:	08007f5f 	.word	0x08007f5f
 8007f2c:	08007f5f 	.word	0x08007f5f
 8007f30:	08007f5f 	.word	0x08007f5f
 8007f34:	08007f57 	.word	0x08007f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f38:	f7fd fdb8 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 8007f3c:	61f8      	str	r0, [r7, #28]
        break;
 8007f3e:	e014      	b.n	8007f6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f40:	f7fd fdca 	bl	8005ad8 <HAL_RCC_GetPCLK2Freq>
 8007f44:	61f8      	str	r0, [r7, #28]
        break;
 8007f46:	e010      	b.n	8007f6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f48:	4b4d      	ldr	r3, [pc, #308]	; (8008080 <UART_SetConfig+0x56c>)
 8007f4a:	61fb      	str	r3, [r7, #28]
        break;
 8007f4c:	e00d      	b.n	8007f6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f4e:	f7fd fd15 	bl	800597c <HAL_RCC_GetSysClockFreq>
 8007f52:	61f8      	str	r0, [r7, #28]
        break;
 8007f54:	e009      	b.n	8007f6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f5a:	61fb      	str	r3, [r7, #28]
        break;
 8007f5c:	e005      	b.n	8007f6a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007f68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d077      	beq.n	8008060 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	005a      	lsls	r2, r3, #1
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	085b      	lsrs	r3, r3, #1
 8007f7a:	441a      	add	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	2b0f      	cmp	r3, #15
 8007f8a:	d916      	bls.n	8007fba <UART_SetConfig+0x4a6>
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f92:	d212      	bcs.n	8007fba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	f023 030f 	bic.w	r3, r3, #15
 8007f9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	085b      	lsrs	r3, r3, #1
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	f003 0307 	and.w	r3, r3, #7
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	8afb      	ldrh	r3, [r7, #22]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	8afa      	ldrh	r2, [r7, #22]
 8007fb6:	60da      	str	r2, [r3, #12]
 8007fb8:	e052      	b.n	8008060 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007fc0:	e04e      	b.n	8008060 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fc6:	2b08      	cmp	r3, #8
 8007fc8:	d827      	bhi.n	800801a <UART_SetConfig+0x506>
 8007fca:	a201      	add	r2, pc, #4	; (adr r2, 8007fd0 <UART_SetConfig+0x4bc>)
 8007fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd0:	08007ff5 	.word	0x08007ff5
 8007fd4:	08007ffd 	.word	0x08007ffd
 8007fd8:	08008005 	.word	0x08008005
 8007fdc:	0800801b 	.word	0x0800801b
 8007fe0:	0800800b 	.word	0x0800800b
 8007fe4:	0800801b 	.word	0x0800801b
 8007fe8:	0800801b 	.word	0x0800801b
 8007fec:	0800801b 	.word	0x0800801b
 8007ff0:	08008013 	.word	0x08008013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ff4:	f7fd fd5a 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 8007ff8:	61f8      	str	r0, [r7, #28]
        break;
 8007ffa:	e014      	b.n	8008026 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ffc:	f7fd fd6c 	bl	8005ad8 <HAL_RCC_GetPCLK2Freq>
 8008000:	61f8      	str	r0, [r7, #28]
        break;
 8008002:	e010      	b.n	8008026 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008004:	4b1e      	ldr	r3, [pc, #120]	; (8008080 <UART_SetConfig+0x56c>)
 8008006:	61fb      	str	r3, [r7, #28]
        break;
 8008008:	e00d      	b.n	8008026 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800800a:	f7fd fcb7 	bl	800597c <HAL_RCC_GetSysClockFreq>
 800800e:	61f8      	str	r0, [r7, #28]
        break;
 8008010:	e009      	b.n	8008026 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008016:	61fb      	str	r3, [r7, #28]
        break;
 8008018:	e005      	b.n	8008026 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800801a:	2300      	movs	r3, #0
 800801c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008024:	bf00      	nop
    }

    if (pclk != 0U)
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d019      	beq.n	8008060 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	085a      	lsrs	r2, r3, #1
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	441a      	add	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	fbb2 f3f3 	udiv	r3, r2, r3
 800803e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	2b0f      	cmp	r3, #15
 8008044:	d909      	bls.n	800805a <UART_SetConfig+0x546>
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800804c:	d205      	bcs.n	800805a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	b29a      	uxth	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	60da      	str	r2, [r3, #12]
 8008058:	e002      	b.n	8008060 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800806c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008070:	4618      	mov	r0, r3
 8008072:	3728      	adds	r7, #40	; 0x28
 8008074:	46bd      	mov	sp, r7
 8008076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800807a:	bf00      	nop
 800807c:	40008000 	.word	0x40008000
 8008080:	00f42400 	.word	0x00f42400

08008084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	f003 0308 	and.w	r3, r3, #8
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00a      	beq.n	80080ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	f003 0302 	and.w	r3, r3, #2
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00a      	beq.n	80080f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f6:	f003 0304 	and.w	r3, r3, #4
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	430a      	orrs	r2, r1
 8008112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	f003 0310 	and.w	r3, r3, #16
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00a      	beq.n	8008136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	f003 0320 	and.w	r3, r3, #32
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00a      	beq.n	8008158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	430a      	orrs	r2, r1
 8008156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008160:	2b00      	cmp	r3, #0
 8008162:	d01a      	beq.n	800819a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008182:	d10a      	bne.n	800819a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00a      	beq.n	80081bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	605a      	str	r2, [r3, #4]
  }
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b098      	sub	sp, #96	; 0x60
 80081cc:	af02      	add	r7, sp, #8
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081d8:	f7fc fb96 	bl	8004908 <HAL_GetTick>
 80081dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0308 	and.w	r3, r3, #8
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d12e      	bne.n	800824a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081f4:	2200      	movs	r2, #0
 80081f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f88c 	bl	8008318 <UART_WaitOnFlagUntilTimeout>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d021      	beq.n	800824a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820e:	e853 3f00 	ldrex	r3, [r3]
 8008212:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800821a:	653b      	str	r3, [r7, #80]	; 0x50
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	461a      	mov	r2, r3
 8008222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008224:	647b      	str	r3, [r7, #68]	; 0x44
 8008226:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008228:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800822a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800822c:	e841 2300 	strex	r3, r2, [r1]
 8008230:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e6      	bne.n	8008206 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2220      	movs	r2, #32
 800823c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e062      	b.n	8008310 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0304 	and.w	r3, r3, #4
 8008254:	2b04      	cmp	r3, #4
 8008256:	d149      	bne.n	80082ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008258:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008260:	2200      	movs	r2, #0
 8008262:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f856 	bl	8008318 <UART_WaitOnFlagUntilTimeout>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d03c      	beq.n	80082ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	e853 3f00 	ldrex	r3, [r3]
 800827e:	623b      	str	r3, [r7, #32]
   return(result);
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008290:	633b      	str	r3, [r7, #48]	; 0x30
 8008292:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008294:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008298:	e841 2300 	strex	r3, r2, [r1]
 800829c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1e6      	bne.n	8008272 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3308      	adds	r3, #8
 80082aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	e853 3f00 	ldrex	r3, [r3]
 80082b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0301 	bic.w	r3, r3, #1
 80082ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3308      	adds	r3, #8
 80082c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082c4:	61fa      	str	r2, [r7, #28]
 80082c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c8:	69b9      	ldr	r1, [r7, #24]
 80082ca:	69fa      	ldr	r2, [r7, #28]
 80082cc:	e841 2300 	strex	r3, r2, [r1]
 80082d0:	617b      	str	r3, [r7, #20]
   return(result);
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1e5      	bne.n	80082a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2220      	movs	r2, #32
 80082dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e011      	b.n	8008310 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2220      	movs	r2, #32
 80082f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2220      	movs	r2, #32
 80082f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3758      	adds	r7, #88	; 0x58
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	603b      	str	r3, [r7, #0]
 8008324:	4613      	mov	r3, r2
 8008326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008328:	e049      	b.n	80083be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008330:	d045      	beq.n	80083be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008332:	f7fc fae9 	bl	8004908 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	429a      	cmp	r2, r3
 8008340:	d302      	bcc.n	8008348 <UART_WaitOnFlagUntilTimeout+0x30>
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e048      	b.n	80083de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0304 	and.w	r3, r3, #4
 8008356:	2b00      	cmp	r3, #0
 8008358:	d031      	beq.n	80083be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	f003 0308 	and.w	r3, r3, #8
 8008364:	2b08      	cmp	r3, #8
 8008366:	d110      	bne.n	800838a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2208      	movs	r2, #8
 800836e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 f838 	bl	80083e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2208      	movs	r2, #8
 800837a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e029      	b.n	80083de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	69db      	ldr	r3, [r3, #28]
 8008390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008398:	d111      	bne.n	80083be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 f81e 	bl	80083e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2220      	movs	r2, #32
 80083ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e00f      	b.n	80083de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	69da      	ldr	r2, [r3, #28]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	4013      	ands	r3, r2
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	bf0c      	ite	eq
 80083ce:	2301      	moveq	r3, #1
 80083d0:	2300      	movne	r3, #0
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	461a      	mov	r2, r3
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d0a6      	beq.n	800832a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b095      	sub	sp, #84	; 0x54
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f6:	e853 3f00 	ldrex	r3, [r3]
 80083fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800840c:	643b      	str	r3, [r7, #64]	; 0x40
 800840e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008414:	e841 2300 	strex	r3, r2, [r1]
 8008418:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800841a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1e6      	bne.n	80083ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3308      	adds	r3, #8
 8008426:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	e853 3f00 	ldrex	r3, [r3]
 800842e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	f023 0301 	bic.w	r3, r3, #1
 8008436:	64bb      	str	r3, [r7, #72]	; 0x48
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3308      	adds	r3, #8
 800843e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008440:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008448:	e841 2300 	strex	r3, r2, [r1]
 800844c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1e5      	bne.n	8008420 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008458:	2b01      	cmp	r3, #1
 800845a:	d118      	bne.n	800848e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	60bb      	str	r3, [r7, #8]
   return(result);
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	f023 0310 	bic.w	r3, r3, #16
 8008470:	647b      	str	r3, [r7, #68]	; 0x44
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800847a:	61bb      	str	r3, [r7, #24]
 800847c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	6979      	ldr	r1, [r7, #20]
 8008480:	69ba      	ldr	r2, [r7, #24]
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	613b      	str	r3, [r7, #16]
   return(result);
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e6      	bne.n	800845c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2220      	movs	r2, #32
 8008492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80084a2:	bf00      	nop
 80084a4:	3754      	adds	r7, #84	; 0x54
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
	...

080084b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80084b4:	4b05      	ldr	r3, [pc, #20]	; (80084cc <SysTick_Handler+0x1c>)
 80084b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80084b8:	f001 fe32 	bl	800a120 <xTaskGetSchedulerState>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d001      	beq.n	80084c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80084c2:	f002 fd19 	bl	800aef8 <xPortSysTickHandler>
  }
}
 80084c6:	bf00      	nop
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	e000e010 	.word	0xe000e010

080084d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4a07      	ldr	r2, [pc, #28]	; (80084fc <vApplicationGetIdleTaskMemory+0x2c>)
 80084e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	4a06      	ldr	r2, [pc, #24]	; (8008500 <vApplicationGetIdleTaskMemory+0x30>)
 80084e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2280      	movs	r2, #128	; 0x80
 80084ec:	601a      	str	r2, [r3, #0]
}
 80084ee:	bf00      	nop
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	200029d0 	.word	0x200029d0
 8008500:	20002a7c 	.word	0x20002a7c

08008504 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	4a07      	ldr	r2, [pc, #28]	; (8008530 <vApplicationGetTimerTaskMemory+0x2c>)
 8008514:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	4a06      	ldr	r2, [pc, #24]	; (8008534 <vApplicationGetTimerTaskMemory+0x30>)
 800851a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008522:	601a      	str	r2, [r3, #0]
}
 8008524:	bf00      	nop
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	20002c7c 	.word	0x20002c7c
 8008534:	20002d28 	.word	0x20002d28

08008538 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f103 0208 	add.w	r2, r3, #8
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f04f 32ff 	mov.w	r2, #4294967295
 8008550:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f103 0208 	add.w	r2, r3, #8
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f103 0208 	add.w	r2, r3, #8
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008586:	bf00      	nop
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008592:	b480      	push	{r7}
 8008594:	b085      	sub	sp, #20
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	689a      	ldr	r2, [r3, #8]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	1c5a      	adds	r2, r3, #1
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	601a      	str	r2, [r3, #0]
}
 80085ce:	bf00      	nop
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085da:	b480      	push	{r7}
 80085dc:	b085      	sub	sp, #20
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f0:	d103      	bne.n	80085fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	60fb      	str	r3, [r7, #12]
 80085f8:	e00c      	b.n	8008614 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	3308      	adds	r3, #8
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	e002      	b.n	8008608 <vListInsert+0x2e>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	429a      	cmp	r2, r3
 8008612:	d2f6      	bcs.n	8008602 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	685a      	ldr	r2, [r3, #4]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	1c5a      	adds	r2, r3, #1
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	601a      	str	r2, [r3, #0]
}
 8008640:	bf00      	nop
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	6892      	ldr	r2, [r2, #8]
 8008662:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	6852      	ldr	r2, [r2, #4]
 800866c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	429a      	cmp	r2, r3
 8008676:	d103      	bne.n	8008680 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689a      	ldr	r2, [r3, #8]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	1e5a      	subs	r2, r3, #1
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10a      	bne.n	80086ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80086c6:	bf00      	nop
 80086c8:	e7fe      	b.n	80086c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80086ca:	f002 fb83 	bl	800add4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d6:	68f9      	ldr	r1, [r7, #12]
 80086d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086da:	fb01 f303 	mul.w	r3, r1, r3
 80086de:	441a      	add	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fa:	3b01      	subs	r3, #1
 80086fc:	68f9      	ldr	r1, [r7, #12]
 80086fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008700:	fb01 f303 	mul.w	r3, r1, r3
 8008704:	441a      	add	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	22ff      	movs	r2, #255	; 0xff
 800870e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	22ff      	movs	r2, #255	; 0xff
 8008716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d114      	bne.n	800874a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d01a      	beq.n	800875e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	3310      	adds	r3, #16
 800872c:	4618      	mov	r0, r3
 800872e:	f001 fb35 	bl	8009d9c <xTaskRemoveFromEventList>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d012      	beq.n	800875e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008738:	4b0c      	ldr	r3, [pc, #48]	; (800876c <xQueueGenericReset+0xcc>)
 800873a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	e009      	b.n	800875e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3310      	adds	r3, #16
 800874e:	4618      	mov	r0, r3
 8008750:	f7ff fef2 	bl	8008538 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	3324      	adds	r3, #36	; 0x24
 8008758:	4618      	mov	r0, r3
 800875a:	f7ff feed 	bl	8008538 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800875e:	f002 fb69 	bl	800ae34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008762:	2301      	movs	r3, #1
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	e000ed04 	.word	0xe000ed04

08008770 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008770:	b580      	push	{r7, lr}
 8008772:	b08e      	sub	sp, #56	; 0x38
 8008774:	af02      	add	r7, sp, #8
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
 800877c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10a      	bne.n	800879a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008796:	bf00      	nop
 8008798:	e7fe      	b.n	8008798 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d002      	beq.n	80087c2 <xQueueGenericCreateStatic+0x52>
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <xQueueGenericCreateStatic+0x56>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e000      	b.n	80087c8 <xQueueGenericCreateStatic+0x58>
 80087c6:	2300      	movs	r3, #0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10a      	bne.n	80087e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	623b      	str	r3, [r7, #32]
}
 80087de:	bf00      	nop
 80087e0:	e7fe      	b.n	80087e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d102      	bne.n	80087ee <xQueueGenericCreateStatic+0x7e>
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <xQueueGenericCreateStatic+0x82>
 80087ee:	2301      	movs	r3, #1
 80087f0:	e000      	b.n	80087f4 <xQueueGenericCreateStatic+0x84>
 80087f2:	2300      	movs	r3, #0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10a      	bne.n	800880e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80087f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	61fb      	str	r3, [r7, #28]
}
 800880a:	bf00      	nop
 800880c:	e7fe      	b.n	800880c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800880e:	2350      	movs	r3, #80	; 0x50
 8008810:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2b50      	cmp	r3, #80	; 0x50
 8008816:	d00a      	beq.n	800882e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881c:	f383 8811 	msr	BASEPRI, r3
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	61bb      	str	r3, [r7, #24]
}
 800882a:	bf00      	nop
 800882c:	e7fe      	b.n	800882c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800882e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00d      	beq.n	8008856 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800883a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883c:	2201      	movs	r2, #1
 800883e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008842:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	4613      	mov	r3, r2
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	68b9      	ldr	r1, [r7, #8]
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 f83f 	bl	80088d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008858:	4618      	mov	r0, r3
 800885a:	3730      	adds	r7, #48	; 0x30
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008860:	b580      	push	{r7, lr}
 8008862:	b08a      	sub	sp, #40	; 0x28
 8008864:	af02      	add	r7, sp, #8
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	4613      	mov	r3, r2
 800886c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10a      	bne.n	800888a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	613b      	str	r3, [r7, #16]
}
 8008886:	bf00      	nop
 8008888:	e7fe      	b.n	8008888 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	fb02 f303 	mul.w	r3, r2, r3
 8008892:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	3350      	adds	r3, #80	; 0x50
 8008898:	4618      	mov	r0, r3
 800889a:	f002 fbbd 	bl	800b018 <pvPortMalloc>
 800889e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d011      	beq.n	80088ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	3350      	adds	r3, #80	; 0x50
 80088ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088b8:	79fa      	ldrb	r2, [r7, #7]
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	4613      	mov	r3, r2
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	68b9      	ldr	r1, [r7, #8]
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f000 f805 	bl	80088d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088ca:	69bb      	ldr	r3, [r7, #24]
	}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3720      	adds	r7, #32
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
 80088e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d103      	bne.n	80088f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	69ba      	ldr	r2, [r7, #24]
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	e002      	b.n	80088f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008902:	2101      	movs	r1, #1
 8008904:	69b8      	ldr	r0, [r7, #24]
 8008906:	f7ff fecb 	bl	80086a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	78fa      	ldrb	r2, [r7, #3]
 800890e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008912:	bf00      	nop
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08e      	sub	sp, #56	; 0x38
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
 8008928:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800892a:	2300      	movs	r3, #0
 800892c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10a      	bne.n	800894e <xQueueGenericSend+0x32>
	__asm volatile
 8008938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893c:	f383 8811 	msr	BASEPRI, r3
 8008940:	f3bf 8f6f 	isb	sy
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800894a:	bf00      	nop
 800894c:	e7fe      	b.n	800894c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d103      	bne.n	800895c <xQueueGenericSend+0x40>
 8008954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <xQueueGenericSend+0x44>
 800895c:	2301      	movs	r3, #1
 800895e:	e000      	b.n	8008962 <xQueueGenericSend+0x46>
 8008960:	2300      	movs	r3, #0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10a      	bne.n	800897c <xQueueGenericSend+0x60>
	__asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008978:	bf00      	nop
 800897a:	e7fe      	b.n	800897a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	2b02      	cmp	r3, #2
 8008980:	d103      	bne.n	800898a <xQueueGenericSend+0x6e>
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008986:	2b01      	cmp	r3, #1
 8008988:	d101      	bne.n	800898e <xQueueGenericSend+0x72>
 800898a:	2301      	movs	r3, #1
 800898c:	e000      	b.n	8008990 <xQueueGenericSend+0x74>
 800898e:	2300      	movs	r3, #0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10a      	bne.n	80089aa <xQueueGenericSend+0x8e>
	__asm volatile
 8008994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	623b      	str	r3, [r7, #32]
}
 80089a6:	bf00      	nop
 80089a8:	e7fe      	b.n	80089a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089aa:	f001 fbb9 	bl	800a120 <xTaskGetSchedulerState>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d102      	bne.n	80089ba <xQueueGenericSend+0x9e>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <xQueueGenericSend+0xa2>
 80089ba:	2301      	movs	r3, #1
 80089bc:	e000      	b.n	80089c0 <xQueueGenericSend+0xa4>
 80089be:	2300      	movs	r3, #0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10a      	bne.n	80089da <xQueueGenericSend+0xbe>
	__asm volatile
 80089c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	61fb      	str	r3, [r7, #28]
}
 80089d6:	bf00      	nop
 80089d8:	e7fe      	b.n	80089d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089da:	f002 f9fb 	bl	800add4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d302      	bcc.n	80089f0 <xQueueGenericSend+0xd4>
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d129      	bne.n	8008a44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	68b9      	ldr	r1, [r7, #8]
 80089f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089f6:	f000 fbbb 	bl	8009170 <prvCopyDataToQueue>
 80089fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d010      	beq.n	8008a26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a06:	3324      	adds	r3, #36	; 0x24
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f001 f9c7 	bl	8009d9c <xTaskRemoveFromEventList>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d013      	beq.n	8008a3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a14:	4b3f      	ldr	r3, [pc, #252]	; (8008b14 <xQueueGenericSend+0x1f8>)
 8008a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	e00a      	b.n	8008a3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d007      	beq.n	8008a3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a2c:	4b39      	ldr	r3, [pc, #228]	; (8008b14 <xQueueGenericSend+0x1f8>)
 8008a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a3c:	f002 f9fa 	bl	800ae34 <vPortExitCritical>
				return pdPASS;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e063      	b.n	8008b0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d103      	bne.n	8008a52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a4a:	f002 f9f3 	bl	800ae34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e05c      	b.n	8008b0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d106      	bne.n	8008a66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a58:	f107 0314 	add.w	r3, r7, #20
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f001 fa01 	bl	8009e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a62:	2301      	movs	r3, #1
 8008a64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a66:	f002 f9e5 	bl	800ae34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a6a:	f000 ff51 	bl	8009910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a6e:	f002 f9b1 	bl	800add4 <vPortEnterCritical>
 8008a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a78:	b25b      	sxtb	r3, r3
 8008a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a7e:	d103      	bne.n	8008a88 <xQueueGenericSend+0x16c>
 8008a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a8e:	b25b      	sxtb	r3, r3
 8008a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a94:	d103      	bne.n	8008a9e <xQueueGenericSend+0x182>
 8008a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a9e:	f002 f9c9 	bl	800ae34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008aa2:	1d3a      	adds	r2, r7, #4
 8008aa4:	f107 0314 	add.w	r3, r7, #20
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f001 f9f0 	bl	8009e90 <xTaskCheckForTimeOut>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d124      	bne.n	8008b00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ab6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ab8:	f000 fc52 	bl	8009360 <prvIsQueueFull>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d018      	beq.n	8008af4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac4:	3310      	adds	r3, #16
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f001 f916 	bl	8009cfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ad2:	f000 fbdd 	bl	8009290 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008ad6:	f000 ff29 	bl	800992c <xTaskResumeAll>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f47f af7c 	bne.w	80089da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008ae2:	4b0c      	ldr	r3, [pc, #48]	; (8008b14 <xQueueGenericSend+0x1f8>)
 8008ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	e772      	b.n	80089da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008af6:	f000 fbcb 	bl	8009290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008afa:	f000 ff17 	bl	800992c <xTaskResumeAll>
 8008afe:	e76c      	b.n	80089da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b02:	f000 fbc5 	bl	8009290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b06:	f000 ff11 	bl	800992c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3738      	adds	r7, #56	; 0x38
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	e000ed04 	.word	0xe000ed04

08008b18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b090      	sub	sp, #64	; 0x40
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
 8008b24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10a      	bne.n	8008b46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b42:	bf00      	nop
 8008b44:	e7fe      	b.n	8008b44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d103      	bne.n	8008b54 <xQueueGenericSendFromISR+0x3c>
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <xQueueGenericSendFromISR+0x40>
 8008b54:	2301      	movs	r3, #1
 8008b56:	e000      	b.n	8008b5a <xQueueGenericSendFromISR+0x42>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10a      	bne.n	8008b74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b70:	bf00      	nop
 8008b72:	e7fe      	b.n	8008b72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d103      	bne.n	8008b82 <xQueueGenericSendFromISR+0x6a>
 8008b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d101      	bne.n	8008b86 <xQueueGenericSendFromISR+0x6e>
 8008b82:	2301      	movs	r3, #1
 8008b84:	e000      	b.n	8008b88 <xQueueGenericSendFromISR+0x70>
 8008b86:	2300      	movs	r3, #0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10a      	bne.n	8008ba2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b90:	f383 8811 	msr	BASEPRI, r3
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	623b      	str	r3, [r7, #32]
}
 8008b9e:	bf00      	nop
 8008ba0:	e7fe      	b.n	8008ba0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ba2:	f002 f9f9 	bl	800af98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ba6:	f3ef 8211 	mrs	r2, BASEPRI
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	61fa      	str	r2, [r7, #28]
 8008bbc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008bbe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bc0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d302      	bcc.n	8008bd4 <xQueueGenericSendFromISR+0xbc>
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d12f      	bne.n	8008c34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	68b9      	ldr	r1, [r7, #8]
 8008be8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008bea:	f000 fac1 	bl	8009170 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008bee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf6:	d112      	bne.n	8008c1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d016      	beq.n	8008c2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c02:	3324      	adds	r3, #36	; 0x24
 8008c04:	4618      	mov	r0, r3
 8008c06:	f001 f8c9 	bl	8009d9c <xTaskRemoveFromEventList>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00e      	beq.n	8008c2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00b      	beq.n	8008c2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	601a      	str	r2, [r3, #0]
 8008c1c:	e007      	b.n	8008c2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c22:	3301      	adds	r3, #1
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	b25a      	sxtb	r2, r3
 8008c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008c32:	e001      	b.n	8008c38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c34:	2300      	movs	r3, #0
 8008c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3740      	adds	r7, #64	; 0x40
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b08e      	sub	sp, #56	; 0x38
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10a      	bne.n	8008c78 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	623b      	str	r3, [r7, #32]
}
 8008c74:	bf00      	nop
 8008c76:	e7fe      	b.n	8008c76 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00a      	beq.n	8008c96 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	61fb      	str	r3, [r7, #28]
}
 8008c92:	bf00      	nop
 8008c94:	e7fe      	b.n	8008c94 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d103      	bne.n	8008ca6 <xQueueGiveFromISR+0x58>
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <xQueueGiveFromISR+0x5c>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e000      	b.n	8008cac <xQueueGiveFromISR+0x5e>
 8008caa:	2300      	movs	r3, #0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10a      	bne.n	8008cc6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	61bb      	str	r3, [r7, #24]
}
 8008cc2:	bf00      	nop
 8008cc4:	e7fe      	b.n	8008cc4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cc6:	f002 f967 	bl	800af98 <vPortValidateInterruptPriority>
	__asm volatile
 8008cca:	f3ef 8211 	mrs	r2, BASEPRI
 8008cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	617a      	str	r2, [r7, #20]
 8008ce0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008ce2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d22b      	bcs.n	8008d4e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d02:	1c5a      	adds	r2, r3, #1
 8008d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d06:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d10:	d112      	bne.n	8008d38 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d016      	beq.n	8008d48 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1c:	3324      	adds	r3, #36	; 0x24
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f001 f83c 	bl	8009d9c <xTaskRemoveFromEventList>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00e      	beq.n	8008d48 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00b      	beq.n	8008d48 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	2201      	movs	r2, #1
 8008d34:	601a      	str	r2, [r3, #0]
 8008d36:	e007      	b.n	8008d48 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	b25a      	sxtb	r2, r3
 8008d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8008d4c:	e001      	b.n	8008d52 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	637b      	str	r3, [r7, #52]	; 0x34
 8008d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d54:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f383 8811 	msr	BASEPRI, r3
}
 8008d5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3738      	adds	r7, #56	; 0x38
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08c      	sub	sp, #48	; 0x30
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d74:	2300      	movs	r3, #0
 8008d76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10a      	bne.n	8008d98 <xQueueReceive+0x30>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	623b      	str	r3, [r7, #32]
}
 8008d94:	bf00      	nop
 8008d96:	e7fe      	b.n	8008d96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d103      	bne.n	8008da6 <xQueueReceive+0x3e>
 8008d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <xQueueReceive+0x42>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e000      	b.n	8008dac <xQueueReceive+0x44>
 8008daa:	2300      	movs	r3, #0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10a      	bne.n	8008dc6 <xQueueReceive+0x5e>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	61fb      	str	r3, [r7, #28]
}
 8008dc2:	bf00      	nop
 8008dc4:	e7fe      	b.n	8008dc4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dc6:	f001 f9ab 	bl	800a120 <xTaskGetSchedulerState>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d102      	bne.n	8008dd6 <xQueueReceive+0x6e>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <xQueueReceive+0x72>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e000      	b.n	8008ddc <xQueueReceive+0x74>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10a      	bne.n	8008df6 <xQueueReceive+0x8e>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	61bb      	str	r3, [r7, #24]
}
 8008df2:	bf00      	nop
 8008df4:	e7fe      	b.n	8008df4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008df6:	f001 ffed 	bl	800add4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d01f      	beq.n	8008e46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e06:	68b9      	ldr	r1, [r7, #8]
 8008e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e0a:	f000 fa1b 	bl	8009244 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	1e5a      	subs	r2, r3, #1
 8008e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00f      	beq.n	8008e3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e20:	3310      	adds	r3, #16
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 ffba 	bl	8009d9c <xTaskRemoveFromEventList>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d007      	beq.n	8008e3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e2e:	4b3d      	ldr	r3, [pc, #244]	; (8008f24 <xQueueReceive+0x1bc>)
 8008e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e34:	601a      	str	r2, [r3, #0]
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e3e:	f001 fff9 	bl	800ae34 <vPortExitCritical>
				return pdPASS;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e069      	b.n	8008f1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d103      	bne.n	8008e54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e4c:	f001 fff2 	bl	800ae34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e50:	2300      	movs	r3, #0
 8008e52:	e062      	b.n	8008f1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d106      	bne.n	8008e68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e5a:	f107 0310 	add.w	r3, r7, #16
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f001 f800 	bl	8009e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e64:	2301      	movs	r3, #1
 8008e66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e68:	f001 ffe4 	bl	800ae34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e6c:	f000 fd50 	bl	8009910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e70:	f001 ffb0 	bl	800add4 <vPortEnterCritical>
 8008e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e7a:	b25b      	sxtb	r3, r3
 8008e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e80:	d103      	bne.n	8008e8a <xQueueReceive+0x122>
 8008e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e90:	b25b      	sxtb	r3, r3
 8008e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e96:	d103      	bne.n	8008ea0 <xQueueReceive+0x138>
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ea0:	f001 ffc8 	bl	800ae34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ea4:	1d3a      	adds	r2, r7, #4
 8008ea6:	f107 0310 	add.w	r3, r7, #16
 8008eaa:	4611      	mov	r1, r2
 8008eac:	4618      	mov	r0, r3
 8008eae:	f000 ffef 	bl	8009e90 <xTaskCheckForTimeOut>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d123      	bne.n	8008f00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eba:	f000 fa3b 	bl	8009334 <prvIsQueueEmpty>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d017      	beq.n	8008ef4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec6:	3324      	adds	r3, #36	; 0x24
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	4611      	mov	r1, r2
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 ff15 	bl	8009cfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ed4:	f000 f9dc 	bl	8009290 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ed8:	f000 fd28 	bl	800992c <xTaskResumeAll>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d189      	bne.n	8008df6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008ee2:	4b10      	ldr	r3, [pc, #64]	; (8008f24 <xQueueReceive+0x1bc>)
 8008ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ee8:	601a      	str	r2, [r3, #0]
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	e780      	b.n	8008df6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ef6:	f000 f9cb 	bl	8009290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008efa:	f000 fd17 	bl	800992c <xTaskResumeAll>
 8008efe:	e77a      	b.n	8008df6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f02:	f000 f9c5 	bl	8009290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f06:	f000 fd11 	bl	800992c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f0c:	f000 fa12 	bl	8009334 <prvIsQueueEmpty>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f43f af6f 	beq.w	8008df6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3730      	adds	r7, #48	; 0x30
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	e000ed04 	.word	0xe000ed04

08008f28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b08e      	sub	sp, #56	; 0x38
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f32:	2300      	movs	r3, #0
 8008f34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10a      	bne.n	8008f5a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f48:	f383 8811 	msr	BASEPRI, r3
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	623b      	str	r3, [r7, #32]
}
 8008f56:	bf00      	nop
 8008f58:	e7fe      	b.n	8008f58 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00a      	beq.n	8008f78 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f66:	f383 8811 	msr	BASEPRI, r3
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	61fb      	str	r3, [r7, #28]
}
 8008f74:	bf00      	nop
 8008f76:	e7fe      	b.n	8008f76 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f78:	f001 f8d2 	bl	800a120 <xTaskGetSchedulerState>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d102      	bne.n	8008f88 <xQueueSemaphoreTake+0x60>
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <xQueueSemaphoreTake+0x64>
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e000      	b.n	8008f8e <xQueueSemaphoreTake+0x66>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10a      	bne.n	8008fa8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	61bb      	str	r3, [r7, #24]
}
 8008fa4:	bf00      	nop
 8008fa6:	e7fe      	b.n	8008fa6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fa8:	f001 ff14 	bl	800add4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d024      	beq.n	8009002 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fba:	1e5a      	subs	r2, r3, #1
 8008fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d104      	bne.n	8008fd2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008fc8:	f001 fa20 	bl	800a40c <pvTaskIncrementMutexHeldCount>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00f      	beq.n	8008ffa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fdc:	3310      	adds	r3, #16
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 fedc 	bl	8009d9c <xTaskRemoveFromEventList>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d007      	beq.n	8008ffa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008fea:	4b54      	ldr	r3, [pc, #336]	; (800913c <xQueueSemaphoreTake+0x214>)
 8008fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ff0:	601a      	str	r2, [r3, #0]
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ffa:	f001 ff1b 	bl	800ae34 <vPortExitCritical>
				return pdPASS;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e097      	b.n	8009132 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d111      	bne.n	800902c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00a      	beq.n	8009024 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800900e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	617b      	str	r3, [r7, #20]
}
 8009020:	bf00      	nop
 8009022:	e7fe      	b.n	8009022 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009024:	f001 ff06 	bl	800ae34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009028:	2300      	movs	r3, #0
 800902a:	e082      	b.n	8009132 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800902c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800902e:	2b00      	cmp	r3, #0
 8009030:	d106      	bne.n	8009040 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009032:	f107 030c 	add.w	r3, r7, #12
 8009036:	4618      	mov	r0, r3
 8009038:	f000 ff14 	bl	8009e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800903c:	2301      	movs	r3, #1
 800903e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009040:	f001 fef8 	bl	800ae34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009044:	f000 fc64 	bl	8009910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009048:	f001 fec4 	bl	800add4 <vPortEnterCritical>
 800904c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009052:	b25b      	sxtb	r3, r3
 8009054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009058:	d103      	bne.n	8009062 <xQueueSemaphoreTake+0x13a>
 800905a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009068:	b25b      	sxtb	r3, r3
 800906a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906e:	d103      	bne.n	8009078 <xQueueSemaphoreTake+0x150>
 8009070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009078:	f001 fedc 	bl	800ae34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800907c:	463a      	mov	r2, r7
 800907e:	f107 030c 	add.w	r3, r7, #12
 8009082:	4611      	mov	r1, r2
 8009084:	4618      	mov	r0, r3
 8009086:	f000 ff03 	bl	8009e90 <xTaskCheckForTimeOut>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d132      	bne.n	80090f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009092:	f000 f94f 	bl	8009334 <prvIsQueueEmpty>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d026      	beq.n	80090ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800909c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d109      	bne.n	80090b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80090a4:	f001 fe96 	bl	800add4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f001 f855 	bl	800a15c <xTaskPriorityInherit>
 80090b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80090b4:	f001 febe 	bl	800ae34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	3324      	adds	r3, #36	; 0x24
 80090bc:	683a      	ldr	r2, [r7, #0]
 80090be:	4611      	mov	r1, r2
 80090c0:	4618      	mov	r0, r3
 80090c2:	f000 fe1b 	bl	8009cfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80090c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090c8:	f000 f8e2 	bl	8009290 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090cc:	f000 fc2e 	bl	800992c <xTaskResumeAll>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f47f af68 	bne.w	8008fa8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80090d8:	4b18      	ldr	r3, [pc, #96]	; (800913c <xQueueSemaphoreTake+0x214>)
 80090da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090de:	601a      	str	r2, [r3, #0]
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	e75e      	b.n	8008fa8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80090ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090ec:	f000 f8d0 	bl	8009290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090f0:	f000 fc1c 	bl	800992c <xTaskResumeAll>
 80090f4:	e758      	b.n	8008fa8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80090f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090f8:	f000 f8ca 	bl	8009290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090fc:	f000 fc16 	bl	800992c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009102:	f000 f917 	bl	8009334 <prvIsQueueEmpty>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	f43f af4d 	beq.w	8008fa8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800910e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00d      	beq.n	8009130 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009114:	f001 fe5e 	bl	800add4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800911a:	f000 f811 	bl	8009140 <prvGetDisinheritPriorityAfterTimeout>
 800911e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009126:	4618      	mov	r0, r3
 8009128:	f001 f8ee 	bl	800a308 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800912c:	f001 fe82 	bl	800ae34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009130:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009132:	4618      	mov	r0, r3
 8009134:	3738      	adds	r7, #56	; 0x38
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	e000ed04 	.word	0xe000ed04

08009140 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	2b00      	cmp	r3, #0
 800914e:	d006      	beq.n	800915e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	e001      	b.n	8009162 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800915e:	2300      	movs	r3, #0
 8009160:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009162:	68fb      	ldr	r3, [r7, #12]
	}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800917c:	2300      	movs	r3, #0
 800917e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009184:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10d      	bne.n	80091aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d14d      	bne.n	8009232 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	4618      	mov	r0, r3
 800919c:	f001 f846 	bl	800a22c <xTaskPriorityDisinherit>
 80091a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	609a      	str	r2, [r3, #8]
 80091a8:	e043      	b.n	8009232 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d119      	bne.n	80091e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6858      	ldr	r0, [r3, #4]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b8:	461a      	mov	r2, r3
 80091ba:	68b9      	ldr	r1, [r7, #8]
 80091bc:	f002 fa6e 	bl	800b69c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	685a      	ldr	r2, [r3, #4]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c8:	441a      	add	r2, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	685a      	ldr	r2, [r3, #4]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d32b      	bcc.n	8009232 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	605a      	str	r2, [r3, #4]
 80091e2:	e026      	b.n	8009232 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	68d8      	ldr	r0, [r3, #12]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ec:	461a      	mov	r2, r3
 80091ee:	68b9      	ldr	r1, [r7, #8]
 80091f0:	f002 fa54 	bl	800b69c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	68da      	ldr	r2, [r3, #12]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fc:	425b      	negs	r3, r3
 80091fe:	441a      	add	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	68da      	ldr	r2, [r3, #12]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	429a      	cmp	r2, r3
 800920e:	d207      	bcs.n	8009220 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	689a      	ldr	r2, [r3, #8]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009218:	425b      	negs	r3, r3
 800921a:	441a      	add	r2, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2b02      	cmp	r3, #2
 8009224:	d105      	bne.n	8009232 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d002      	beq.n	8009232 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	3b01      	subs	r3, #1
 8009230:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	1c5a      	adds	r2, r3, #1
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800923a:	697b      	ldr	r3, [r7, #20]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3718      	adds	r7, #24
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009252:	2b00      	cmp	r3, #0
 8009254:	d018      	beq.n	8009288 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68da      	ldr	r2, [r3, #12]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925e:	441a      	add	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68da      	ldr	r2, [r3, #12]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	429a      	cmp	r2, r3
 800926e:	d303      	bcc.n	8009278 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	68d9      	ldr	r1, [r3, #12]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009280:	461a      	mov	r2, r3
 8009282:	6838      	ldr	r0, [r7, #0]
 8009284:	f002 fa0a 	bl	800b69c <memcpy>
	}
}
 8009288:	bf00      	nop
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009298:	f001 fd9c 	bl	800add4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092a4:	e011      	b.n	80092ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d012      	beq.n	80092d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	3324      	adds	r3, #36	; 0x24
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 fd72 	bl	8009d9c <xTaskRemoveFromEventList>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d001      	beq.n	80092c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80092be:	f000 fe49 	bl	8009f54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
 80092c4:	3b01      	subs	r3, #1
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	dce9      	bgt.n	80092a6 <prvUnlockQueue+0x16>
 80092d2:	e000      	b.n	80092d6 <prvUnlockQueue+0x46>
					break;
 80092d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	22ff      	movs	r2, #255	; 0xff
 80092da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80092de:	f001 fda9 	bl	800ae34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80092e2:	f001 fd77 	bl	800add4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092ee:	e011      	b.n	8009314 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d012      	beq.n	800931e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	3310      	adds	r3, #16
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 fd4d 	bl	8009d9c <xTaskRemoveFromEventList>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009308:	f000 fe24 	bl	8009f54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800930c:	7bbb      	ldrb	r3, [r7, #14]
 800930e:	3b01      	subs	r3, #1
 8009310:	b2db      	uxtb	r3, r3
 8009312:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009318:	2b00      	cmp	r3, #0
 800931a:	dce9      	bgt.n	80092f0 <prvUnlockQueue+0x60>
 800931c:	e000      	b.n	8009320 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800931e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	22ff      	movs	r2, #255	; 0xff
 8009324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009328:	f001 fd84 	bl	800ae34 <vPortExitCritical>
}
 800932c:	bf00      	nop
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800933c:	f001 fd4a 	bl	800add4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009344:	2b00      	cmp	r3, #0
 8009346:	d102      	bne.n	800934e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009348:	2301      	movs	r3, #1
 800934a:	60fb      	str	r3, [r7, #12]
 800934c:	e001      	b.n	8009352 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009352:	f001 fd6f 	bl	800ae34 <vPortExitCritical>

	return xReturn;
 8009356:	68fb      	ldr	r3, [r7, #12]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009368:	f001 fd34 	bl	800add4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009374:	429a      	cmp	r2, r3
 8009376:	d102      	bne.n	800937e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009378:	2301      	movs	r3, #1
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	e001      	b.n	8009382 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800937e:	2300      	movs	r3, #0
 8009380:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009382:	f001 fd57 	bl	800ae34 <vPortExitCritical>

	return xReturn;
 8009386:	68fb      	ldr	r3, [r7, #12]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800939a:	2300      	movs	r3, #0
 800939c:	60fb      	str	r3, [r7, #12]
 800939e:	e014      	b.n	80093ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80093a0:	4a0f      	ldr	r2, [pc, #60]	; (80093e0 <vQueueAddToRegistry+0x50>)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10b      	bne.n	80093c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80093ac:	490c      	ldr	r1, [pc, #48]	; (80093e0 <vQueueAddToRegistry+0x50>)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80093b6:	4a0a      	ldr	r2, [pc, #40]	; (80093e0 <vQueueAddToRegistry+0x50>)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	00db      	lsls	r3, r3, #3
 80093bc:	4413      	add	r3, r2
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80093c2:	e006      	b.n	80093d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	3301      	adds	r3, #1
 80093c8:	60fb      	str	r3, [r7, #12]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2b07      	cmp	r3, #7
 80093ce:	d9e7      	bls.n	80093a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80093d0:	bf00      	nop
 80093d2:	bf00      	nop
 80093d4:	3714      	adds	r7, #20
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	20003128 	.word	0x20003128

080093e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80093f4:	f001 fcee 	bl	800add4 <vPortEnterCritical>
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093fe:	b25b      	sxtb	r3, r3
 8009400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009404:	d103      	bne.n	800940e <vQueueWaitForMessageRestricted+0x2a>
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009414:	b25b      	sxtb	r3, r3
 8009416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800941a:	d103      	bne.n	8009424 <vQueueWaitForMessageRestricted+0x40>
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009424:	f001 fd06 	bl	800ae34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942c:	2b00      	cmp	r3, #0
 800942e:	d106      	bne.n	800943e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	3324      	adds	r3, #36	; 0x24
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	68b9      	ldr	r1, [r7, #8]
 8009438:	4618      	mov	r0, r3
 800943a:	f000 fc83 	bl	8009d44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800943e:	6978      	ldr	r0, [r7, #20]
 8009440:	f7ff ff26 	bl	8009290 <prvUnlockQueue>
	}
 8009444:	bf00      	nop
 8009446:	3718      	adds	r7, #24
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800944c:	b580      	push	{r7, lr}
 800944e:	b08e      	sub	sp, #56	; 0x38
 8009450:	af04      	add	r7, sp, #16
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
 8009458:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800945a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10a      	bne.n	8009476 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009464:	f383 8811 	msr	BASEPRI, r3
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	623b      	str	r3, [r7, #32]
}
 8009472:	bf00      	nop
 8009474:	e7fe      	b.n	8009474 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10a      	bne.n	8009492 <xTaskCreateStatic+0x46>
	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009480:	f383 8811 	msr	BASEPRI, r3
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	61fb      	str	r3, [r7, #28]
}
 800948e:	bf00      	nop
 8009490:	e7fe      	b.n	8009490 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009492:	23ac      	movs	r3, #172	; 0xac
 8009494:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	2bac      	cmp	r3, #172	; 0xac
 800949a:	d00a      	beq.n	80094b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800949c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a0:	f383 8811 	msr	BASEPRI, r3
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	61bb      	str	r3, [r7, #24]
}
 80094ae:	bf00      	nop
 80094b0:	e7fe      	b.n	80094b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80094b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80094b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d01e      	beq.n	80094f8 <xTaskCreateStatic+0xac>
 80094ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d01b      	beq.n	80094f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80094c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80094c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80094ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094cc:	2202      	movs	r2, #2
 80094ce:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80094d2:	2300      	movs	r3, #0
 80094d4:	9303      	str	r3, [sp, #12]
 80094d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d8:	9302      	str	r3, [sp, #8]
 80094da:	f107 0314 	add.w	r3, r7, #20
 80094de:	9301      	str	r3, [sp, #4]
 80094e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	68b9      	ldr	r1, [r7, #8]
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f000 f850 	bl	8009590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80094f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094f2:	f000 f8f7 	bl	80096e4 <prvAddNewTaskToReadyList>
 80094f6:	e001      	b.n	80094fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80094f8:	2300      	movs	r3, #0
 80094fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80094fc:	697b      	ldr	r3, [r7, #20]
	}
 80094fe:	4618      	mov	r0, r3
 8009500:	3728      	adds	r7, #40	; 0x28
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009506:	b580      	push	{r7, lr}
 8009508:	b08c      	sub	sp, #48	; 0x30
 800950a:	af04      	add	r7, sp, #16
 800950c:	60f8      	str	r0, [r7, #12]
 800950e:	60b9      	str	r1, [r7, #8]
 8009510:	603b      	str	r3, [r7, #0]
 8009512:	4613      	mov	r3, r2
 8009514:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009516:	88fb      	ldrh	r3, [r7, #6]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4618      	mov	r0, r3
 800951c:	f001 fd7c 	bl	800b018 <pvPortMalloc>
 8009520:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d00e      	beq.n	8009546 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009528:	20ac      	movs	r0, #172	; 0xac
 800952a:	f001 fd75 	bl	800b018 <pvPortMalloc>
 800952e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d003      	beq.n	800953e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	697a      	ldr	r2, [r7, #20]
 800953a:	631a      	str	r2, [r3, #48]	; 0x30
 800953c:	e005      	b.n	800954a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800953e:	6978      	ldr	r0, [r7, #20]
 8009540:	f001 fe36 	bl	800b1b0 <vPortFree>
 8009544:	e001      	b.n	800954a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009546:	2300      	movs	r3, #0
 8009548:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d017      	beq.n	8009580 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009558:	88fa      	ldrh	r2, [r7, #6]
 800955a:	2300      	movs	r3, #0
 800955c:	9303      	str	r3, [sp, #12]
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	9302      	str	r3, [sp, #8]
 8009562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009564:	9301      	str	r3, [sp, #4]
 8009566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	68b9      	ldr	r1, [r7, #8]
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f000 f80e 	bl	8009590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009574:	69f8      	ldr	r0, [r7, #28]
 8009576:	f000 f8b5 	bl	80096e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800957a:	2301      	movs	r3, #1
 800957c:	61bb      	str	r3, [r7, #24]
 800957e:	e002      	b.n	8009586 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009580:	f04f 33ff 	mov.w	r3, #4294967295
 8009584:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009586:	69bb      	ldr	r3, [r7, #24]
	}
 8009588:	4618      	mov	r0, r3
 800958a:	3720      	adds	r7, #32
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	607a      	str	r2, [r7, #4]
 800959c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	461a      	mov	r2, r3
 80095a8:	21a5      	movs	r1, #165	; 0xa5
 80095aa:	f001 ffe5 	bl	800b578 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80095ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80095b8:	3b01      	subs	r3, #1
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4413      	add	r3, r2
 80095be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	f023 0307 	bic.w	r3, r3, #7
 80095c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	f003 0307 	and.w	r3, r3, #7
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00a      	beq.n	80095e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	617b      	str	r3, [r7, #20]
}
 80095e4:	bf00      	nop
 80095e6:	e7fe      	b.n	80095e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d01f      	beq.n	800962e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095ee:	2300      	movs	r3, #0
 80095f0:	61fb      	str	r3, [r7, #28]
 80095f2:	e012      	b.n	800961a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80095f4:	68ba      	ldr	r2, [r7, #8]
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	4413      	add	r3, r2
 80095fa:	7819      	ldrb	r1, [r3, #0]
 80095fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	4413      	add	r3, r2
 8009602:	3334      	adds	r3, #52	; 0x34
 8009604:	460a      	mov	r2, r1
 8009606:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	4413      	add	r3, r2
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d006      	beq.n	8009622 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	3301      	adds	r3, #1
 8009618:	61fb      	str	r3, [r7, #28]
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	2b0f      	cmp	r3, #15
 800961e:	d9e9      	bls.n	80095f4 <prvInitialiseNewTask+0x64>
 8009620:	e000      	b.n	8009624 <prvInitialiseNewTask+0x94>
			{
				break;
 8009622:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009626:	2200      	movs	r2, #0
 8009628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800962c:	e003      	b.n	8009636 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	2b37      	cmp	r3, #55	; 0x37
 800963a:	d901      	bls.n	8009640 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800963c:	2337      	movs	r3, #55	; 0x37
 800963e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009644:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800964a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800964c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964e:	2200      	movs	r2, #0
 8009650:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009654:	3304      	adds	r3, #4
 8009656:	4618      	mov	r0, r3
 8009658:	f7fe ff8e 	bl	8008578 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800965c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965e:	3318      	adds	r3, #24
 8009660:	4618      	mov	r0, r3
 8009662:	f7fe ff89 	bl	8008578 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800966a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800966c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009674:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800967a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800967c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967e:	2200      	movs	r2, #0
 8009680:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009684:	2200      	movs	r2, #0
 8009686:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800968a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968c:	2200      	movs	r2, #0
 800968e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009694:	3358      	adds	r3, #88	; 0x58
 8009696:	224c      	movs	r2, #76	; 0x4c
 8009698:	2100      	movs	r1, #0
 800969a:	4618      	mov	r0, r3
 800969c:	f001 ff6c 	bl	800b578 <memset>
 80096a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a2:	4a0d      	ldr	r2, [pc, #52]	; (80096d8 <prvInitialiseNewTask+0x148>)
 80096a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80096a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a8:	4a0c      	ldr	r2, [pc, #48]	; (80096dc <prvInitialiseNewTask+0x14c>)
 80096aa:	661a      	str	r2, [r3, #96]	; 0x60
 80096ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ae:	4a0c      	ldr	r2, [pc, #48]	; (80096e0 <prvInitialiseNewTask+0x150>)
 80096b0:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	68f9      	ldr	r1, [r7, #12]
 80096b6:	69b8      	ldr	r0, [r7, #24]
 80096b8:	f001 fa5e 	bl	800ab78 <pxPortInitialiseStack>
 80096bc:	4602      	mov	r2, r0
 80096be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80096c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d002      	beq.n	80096ce <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80096c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096ce:	bf00      	nop
 80096d0:	3720      	adds	r7, #32
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	2000437c 	.word	0x2000437c
 80096dc:	200043e4 	.word	0x200043e4
 80096e0:	2000444c 	.word	0x2000444c

080096e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80096ec:	f001 fb72 	bl	800add4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80096f0:	4b2d      	ldr	r3, [pc, #180]	; (80097a8 <prvAddNewTaskToReadyList+0xc4>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3301      	adds	r3, #1
 80096f6:	4a2c      	ldr	r2, [pc, #176]	; (80097a8 <prvAddNewTaskToReadyList+0xc4>)
 80096f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80096fa:	4b2c      	ldr	r3, [pc, #176]	; (80097ac <prvAddNewTaskToReadyList+0xc8>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d109      	bne.n	8009716 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009702:	4a2a      	ldr	r2, [pc, #168]	; (80097ac <prvAddNewTaskToReadyList+0xc8>)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009708:	4b27      	ldr	r3, [pc, #156]	; (80097a8 <prvAddNewTaskToReadyList+0xc4>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d110      	bne.n	8009732 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009710:	f000 fc44 	bl	8009f9c <prvInitialiseTaskLists>
 8009714:	e00d      	b.n	8009732 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009716:	4b26      	ldr	r3, [pc, #152]	; (80097b0 <prvAddNewTaskToReadyList+0xcc>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d109      	bne.n	8009732 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800971e:	4b23      	ldr	r3, [pc, #140]	; (80097ac <prvAddNewTaskToReadyList+0xc8>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009728:	429a      	cmp	r2, r3
 800972a:	d802      	bhi.n	8009732 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800972c:	4a1f      	ldr	r2, [pc, #124]	; (80097ac <prvAddNewTaskToReadyList+0xc8>)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009732:	4b20      	ldr	r3, [pc, #128]	; (80097b4 <prvAddNewTaskToReadyList+0xd0>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	3301      	adds	r3, #1
 8009738:	4a1e      	ldr	r2, [pc, #120]	; (80097b4 <prvAddNewTaskToReadyList+0xd0>)
 800973a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800973c:	4b1d      	ldr	r3, [pc, #116]	; (80097b4 <prvAddNewTaskToReadyList+0xd0>)
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009748:	4b1b      	ldr	r3, [pc, #108]	; (80097b8 <prvAddNewTaskToReadyList+0xd4>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	429a      	cmp	r2, r3
 800974e:	d903      	bls.n	8009758 <prvAddNewTaskToReadyList+0x74>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009754:	4a18      	ldr	r2, [pc, #96]	; (80097b8 <prvAddNewTaskToReadyList+0xd4>)
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800975c:	4613      	mov	r3, r2
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	4413      	add	r3, r2
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4a15      	ldr	r2, [pc, #84]	; (80097bc <prvAddNewTaskToReadyList+0xd8>)
 8009766:	441a      	add	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	3304      	adds	r3, #4
 800976c:	4619      	mov	r1, r3
 800976e:	4610      	mov	r0, r2
 8009770:	f7fe ff0f 	bl	8008592 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009774:	f001 fb5e 	bl	800ae34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009778:	4b0d      	ldr	r3, [pc, #52]	; (80097b0 <prvAddNewTaskToReadyList+0xcc>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00e      	beq.n	800979e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009780:	4b0a      	ldr	r3, [pc, #40]	; (80097ac <prvAddNewTaskToReadyList+0xc8>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978a:	429a      	cmp	r2, r3
 800978c:	d207      	bcs.n	800979e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800978e:	4b0c      	ldr	r3, [pc, #48]	; (80097c0 <prvAddNewTaskToReadyList+0xdc>)
 8009790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800979e:	bf00      	nop
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	2000363c 	.word	0x2000363c
 80097ac:	20003168 	.word	0x20003168
 80097b0:	20003648 	.word	0x20003648
 80097b4:	20003658 	.word	0x20003658
 80097b8:	20003644 	.word	0x20003644
 80097bc:	2000316c 	.word	0x2000316c
 80097c0:	e000ed04 	.word	0xe000ed04

080097c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80097cc:	2300      	movs	r3, #0
 80097ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d017      	beq.n	8009806 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80097d6:	4b13      	ldr	r3, [pc, #76]	; (8009824 <vTaskDelay+0x60>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00a      	beq.n	80097f4 <vTaskDelay+0x30>
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	60bb      	str	r3, [r7, #8]
}
 80097f0:	bf00      	nop
 80097f2:	e7fe      	b.n	80097f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80097f4:	f000 f88c 	bl	8009910 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80097f8:	2100      	movs	r1, #0
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fe1a 	bl	800a434 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009800:	f000 f894 	bl	800992c <xTaskResumeAll>
 8009804:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d107      	bne.n	800981c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800980c:	4b06      	ldr	r3, [pc, #24]	; (8009828 <vTaskDelay+0x64>)
 800980e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009812:	601a      	str	r2, [r3, #0]
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800981c:	bf00      	nop
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	20003664 	.word	0x20003664
 8009828:	e000ed04 	.word	0xe000ed04

0800982c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b08a      	sub	sp, #40	; 0x28
 8009830:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009832:	2300      	movs	r3, #0
 8009834:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009836:	2300      	movs	r3, #0
 8009838:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800983a:	463a      	mov	r2, r7
 800983c:	1d39      	adds	r1, r7, #4
 800983e:	f107 0308 	add.w	r3, r7, #8
 8009842:	4618      	mov	r0, r3
 8009844:	f7fe fe44 	bl	80084d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	9202      	str	r2, [sp, #8]
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	2300      	movs	r3, #0
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	2300      	movs	r3, #0
 8009858:	460a      	mov	r2, r1
 800985a:	4925      	ldr	r1, [pc, #148]	; (80098f0 <vTaskStartScheduler+0xc4>)
 800985c:	4825      	ldr	r0, [pc, #148]	; (80098f4 <vTaskStartScheduler+0xc8>)
 800985e:	f7ff fdf5 	bl	800944c <xTaskCreateStatic>
 8009862:	4603      	mov	r3, r0
 8009864:	4a24      	ldr	r2, [pc, #144]	; (80098f8 <vTaskStartScheduler+0xcc>)
 8009866:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009868:	4b23      	ldr	r3, [pc, #140]	; (80098f8 <vTaskStartScheduler+0xcc>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d002      	beq.n	8009876 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009870:	2301      	movs	r3, #1
 8009872:	617b      	str	r3, [r7, #20]
 8009874:	e001      	b.n	800987a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009876:	2300      	movs	r3, #0
 8009878:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d102      	bne.n	8009886 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009880:	f000 fe2c 	bl	800a4dc <xTimerCreateTimerTask>
 8009884:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d11d      	bne.n	80098c8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	613b      	str	r3, [r7, #16]
}
 800989e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80098a0:	4b16      	ldr	r3, [pc, #88]	; (80098fc <vTaskStartScheduler+0xd0>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	3358      	adds	r3, #88	; 0x58
 80098a6:	4a16      	ldr	r2, [pc, #88]	; (8009900 <vTaskStartScheduler+0xd4>)
 80098a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80098aa:	4b16      	ldr	r3, [pc, #88]	; (8009904 <vTaskStartScheduler+0xd8>)
 80098ac:	f04f 32ff 	mov.w	r2, #4294967295
 80098b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80098b2:	4b15      	ldr	r3, [pc, #84]	; (8009908 <vTaskStartScheduler+0xdc>)
 80098b4:	2201      	movs	r2, #1
 80098b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80098b8:	4b14      	ldr	r3, [pc, #80]	; (800990c <vTaskStartScheduler+0xe0>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80098be:	f7f7 fa4b 	bl	8000d58 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80098c2:	f001 f9e5 	bl	800ac90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80098c6:	e00e      	b.n	80098e6 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ce:	d10a      	bne.n	80098e6 <vTaskStartScheduler+0xba>
	__asm volatile
 80098d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	60fb      	str	r3, [r7, #12]
}
 80098e2:	bf00      	nop
 80098e4:	e7fe      	b.n	80098e4 <vTaskStartScheduler+0xb8>
}
 80098e6:	bf00      	nop
 80098e8:	3718      	adds	r7, #24
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	0800c390 	.word	0x0800c390
 80098f4:	08009f6d 	.word	0x08009f6d
 80098f8:	20003660 	.word	0x20003660
 80098fc:	20003168 	.word	0x20003168
 8009900:	200003a8 	.word	0x200003a8
 8009904:	2000365c 	.word	0x2000365c
 8009908:	20003648 	.word	0x20003648
 800990c:	20003640 	.word	0x20003640

08009910 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009910:	b480      	push	{r7}
 8009912:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009914:	4b04      	ldr	r3, [pc, #16]	; (8009928 <vTaskSuspendAll+0x18>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3301      	adds	r3, #1
 800991a:	4a03      	ldr	r2, [pc, #12]	; (8009928 <vTaskSuspendAll+0x18>)
 800991c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800991e:	bf00      	nop
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	20003664 	.word	0x20003664

0800992c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009932:	2300      	movs	r3, #0
 8009934:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009936:	2300      	movs	r3, #0
 8009938:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800993a:	4b42      	ldr	r3, [pc, #264]	; (8009a44 <xTaskResumeAll+0x118>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10a      	bne.n	8009958 <xTaskResumeAll+0x2c>
	__asm volatile
 8009942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009946:	f383 8811 	msr	BASEPRI, r3
 800994a:	f3bf 8f6f 	isb	sy
 800994e:	f3bf 8f4f 	dsb	sy
 8009952:	603b      	str	r3, [r7, #0]
}
 8009954:	bf00      	nop
 8009956:	e7fe      	b.n	8009956 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009958:	f001 fa3c 	bl	800add4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800995c:	4b39      	ldr	r3, [pc, #228]	; (8009a44 <xTaskResumeAll+0x118>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3b01      	subs	r3, #1
 8009962:	4a38      	ldr	r2, [pc, #224]	; (8009a44 <xTaskResumeAll+0x118>)
 8009964:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009966:	4b37      	ldr	r3, [pc, #220]	; (8009a44 <xTaskResumeAll+0x118>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d162      	bne.n	8009a34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800996e:	4b36      	ldr	r3, [pc, #216]	; (8009a48 <xTaskResumeAll+0x11c>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d05e      	beq.n	8009a34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009976:	e02f      	b.n	80099d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009978:	4b34      	ldr	r3, [pc, #208]	; (8009a4c <xTaskResumeAll+0x120>)
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	3318      	adds	r3, #24
 8009984:	4618      	mov	r0, r3
 8009986:	f7fe fe61 	bl	800864c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	3304      	adds	r3, #4
 800998e:	4618      	mov	r0, r3
 8009990:	f7fe fe5c 	bl	800864c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009998:	4b2d      	ldr	r3, [pc, #180]	; (8009a50 <xTaskResumeAll+0x124>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	429a      	cmp	r2, r3
 800999e:	d903      	bls.n	80099a8 <xTaskResumeAll+0x7c>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a4:	4a2a      	ldr	r2, [pc, #168]	; (8009a50 <xTaskResumeAll+0x124>)
 80099a6:	6013      	str	r3, [r2, #0]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ac:	4613      	mov	r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4413      	add	r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4a27      	ldr	r2, [pc, #156]	; (8009a54 <xTaskResumeAll+0x128>)
 80099b6:	441a      	add	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	3304      	adds	r3, #4
 80099bc:	4619      	mov	r1, r3
 80099be:	4610      	mov	r0, r2
 80099c0:	f7fe fde7 	bl	8008592 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c8:	4b23      	ldr	r3, [pc, #140]	; (8009a58 <xTaskResumeAll+0x12c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d302      	bcc.n	80099d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80099d2:	4b22      	ldr	r3, [pc, #136]	; (8009a5c <xTaskResumeAll+0x130>)
 80099d4:	2201      	movs	r2, #1
 80099d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099d8:	4b1c      	ldr	r3, [pc, #112]	; (8009a4c <xTaskResumeAll+0x120>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1cb      	bne.n	8009978 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d001      	beq.n	80099ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80099e6:	f000 fb7b 	bl	800a0e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80099ea:	4b1d      	ldr	r3, [pc, #116]	; (8009a60 <xTaskResumeAll+0x134>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d010      	beq.n	8009a18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80099f6:	f000 f847 	bl	8009a88 <xTaskIncrementTick>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009a00:	4b16      	ldr	r3, [pc, #88]	; (8009a5c <xTaskResumeAll+0x130>)
 8009a02:	2201      	movs	r2, #1
 8009a04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1f1      	bne.n	80099f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009a12:	4b13      	ldr	r3, [pc, #76]	; (8009a60 <xTaskResumeAll+0x134>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a18:	4b10      	ldr	r3, [pc, #64]	; (8009a5c <xTaskResumeAll+0x130>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d009      	beq.n	8009a34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a20:	2301      	movs	r3, #1
 8009a22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a24:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <xTaskResumeAll+0x138>)
 8009a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a2a:	601a      	str	r2, [r3, #0]
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a34:	f001 f9fe 	bl	800ae34 <vPortExitCritical>

	return xAlreadyYielded;
 8009a38:	68bb      	ldr	r3, [r7, #8]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	20003664 	.word	0x20003664
 8009a48:	2000363c 	.word	0x2000363c
 8009a4c:	200035fc 	.word	0x200035fc
 8009a50:	20003644 	.word	0x20003644
 8009a54:	2000316c 	.word	0x2000316c
 8009a58:	20003168 	.word	0x20003168
 8009a5c:	20003650 	.word	0x20003650
 8009a60:	2000364c 	.word	0x2000364c
 8009a64:	e000ed04 	.word	0xe000ed04

08009a68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009a6e:	4b05      	ldr	r3, [pc, #20]	; (8009a84 <xTaskGetTickCount+0x1c>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009a74:	687b      	ldr	r3, [r7, #4]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	20003640 	.word	0x20003640

08009a88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a92:	4b4f      	ldr	r3, [pc, #316]	; (8009bd0 <xTaskIncrementTick+0x148>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f040 808f 	bne.w	8009bba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a9c:	4b4d      	ldr	r3, [pc, #308]	; (8009bd4 <xTaskIncrementTick+0x14c>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009aa4:	4a4b      	ldr	r2, [pc, #300]	; (8009bd4 <xTaskIncrementTick+0x14c>)
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d120      	bne.n	8009af2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ab0:	4b49      	ldr	r3, [pc, #292]	; (8009bd8 <xTaskIncrementTick+0x150>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00a      	beq.n	8009ad0 <xTaskIncrementTick+0x48>
	__asm volatile
 8009aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	603b      	str	r3, [r7, #0]
}
 8009acc:	bf00      	nop
 8009ace:	e7fe      	b.n	8009ace <xTaskIncrementTick+0x46>
 8009ad0:	4b41      	ldr	r3, [pc, #260]	; (8009bd8 <xTaskIncrementTick+0x150>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	60fb      	str	r3, [r7, #12]
 8009ad6:	4b41      	ldr	r3, [pc, #260]	; (8009bdc <xTaskIncrementTick+0x154>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a3f      	ldr	r2, [pc, #252]	; (8009bd8 <xTaskIncrementTick+0x150>)
 8009adc:	6013      	str	r3, [r2, #0]
 8009ade:	4a3f      	ldr	r2, [pc, #252]	; (8009bdc <xTaskIncrementTick+0x154>)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6013      	str	r3, [r2, #0]
 8009ae4:	4b3e      	ldr	r3, [pc, #248]	; (8009be0 <xTaskIncrementTick+0x158>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	4a3d      	ldr	r2, [pc, #244]	; (8009be0 <xTaskIncrementTick+0x158>)
 8009aec:	6013      	str	r3, [r2, #0]
 8009aee:	f000 faf7 	bl	800a0e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009af2:	4b3c      	ldr	r3, [pc, #240]	; (8009be4 <xTaskIncrementTick+0x15c>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d349      	bcc.n	8009b90 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009afc:	4b36      	ldr	r3, [pc, #216]	; (8009bd8 <xTaskIncrementTick+0x150>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d104      	bne.n	8009b10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b06:	4b37      	ldr	r3, [pc, #220]	; (8009be4 <xTaskIncrementTick+0x15c>)
 8009b08:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0c:	601a      	str	r2, [r3, #0]
					break;
 8009b0e:	e03f      	b.n	8009b90 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b10:	4b31      	ldr	r3, [pc, #196]	; (8009bd8 <xTaskIncrementTick+0x150>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b20:	693a      	ldr	r2, [r7, #16]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d203      	bcs.n	8009b30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b28:	4a2e      	ldr	r2, [pc, #184]	; (8009be4 <xTaskIncrementTick+0x15c>)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b2e:	e02f      	b.n	8009b90 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	3304      	adds	r3, #4
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7fe fd89 	bl	800864c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d004      	beq.n	8009b4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	3318      	adds	r3, #24
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fe fd80 	bl	800864c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b50:	4b25      	ldr	r3, [pc, #148]	; (8009be8 <xTaskIncrementTick+0x160>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d903      	bls.n	8009b60 <xTaskIncrementTick+0xd8>
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5c:	4a22      	ldr	r2, [pc, #136]	; (8009be8 <xTaskIncrementTick+0x160>)
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b64:	4613      	mov	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	4a1f      	ldr	r2, [pc, #124]	; (8009bec <xTaskIncrementTick+0x164>)
 8009b6e:	441a      	add	r2, r3
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	3304      	adds	r3, #4
 8009b74:	4619      	mov	r1, r3
 8009b76:	4610      	mov	r0, r2
 8009b78:	f7fe fd0b 	bl	8008592 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b80:	4b1b      	ldr	r3, [pc, #108]	; (8009bf0 <xTaskIncrementTick+0x168>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d3b8      	bcc.n	8009afc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b8e:	e7b5      	b.n	8009afc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b90:	4b17      	ldr	r3, [pc, #92]	; (8009bf0 <xTaskIncrementTick+0x168>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b96:	4915      	ldr	r1, [pc, #84]	; (8009bec <xTaskIncrementTick+0x164>)
 8009b98:	4613      	mov	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4413      	add	r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	440b      	add	r3, r1
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d901      	bls.n	8009bac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009bac:	4b11      	ldr	r3, [pc, #68]	; (8009bf4 <xTaskIncrementTick+0x16c>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d007      	beq.n	8009bc4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	617b      	str	r3, [r7, #20]
 8009bb8:	e004      	b.n	8009bc4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009bba:	4b0f      	ldr	r3, [pc, #60]	; (8009bf8 <xTaskIncrementTick+0x170>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	4a0d      	ldr	r2, [pc, #52]	; (8009bf8 <xTaskIncrementTick+0x170>)
 8009bc2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009bc4:	697b      	ldr	r3, [r7, #20]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3718      	adds	r7, #24
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	20003664 	.word	0x20003664
 8009bd4:	20003640 	.word	0x20003640
 8009bd8:	200035f4 	.word	0x200035f4
 8009bdc:	200035f8 	.word	0x200035f8
 8009be0:	20003654 	.word	0x20003654
 8009be4:	2000365c 	.word	0x2000365c
 8009be8:	20003644 	.word	0x20003644
 8009bec:	2000316c 	.word	0x2000316c
 8009bf0:	20003168 	.word	0x20003168
 8009bf4:	20003650 	.word	0x20003650
 8009bf8:	2000364c 	.word	0x2000364c

08009bfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c02:	4b36      	ldr	r3, [pc, #216]	; (8009cdc <vTaskSwitchContext+0xe0>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d003      	beq.n	8009c12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c0a:	4b35      	ldr	r3, [pc, #212]	; (8009ce0 <vTaskSwitchContext+0xe4>)
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c10:	e05f      	b.n	8009cd2 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8009c12:	4b33      	ldr	r3, [pc, #204]	; (8009ce0 <vTaskSwitchContext+0xe4>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009c18:	f7f7 f8a5 	bl	8000d66 <getRunTimeCounterValue>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	4a31      	ldr	r2, [pc, #196]	; (8009ce4 <vTaskSwitchContext+0xe8>)
 8009c20:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009c22:	4b30      	ldr	r3, [pc, #192]	; (8009ce4 <vTaskSwitchContext+0xe8>)
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	4b30      	ldr	r3, [pc, #192]	; (8009ce8 <vTaskSwitchContext+0xec>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d909      	bls.n	8009c42 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009c2e:	4b2f      	ldr	r3, [pc, #188]	; (8009cec <vTaskSwitchContext+0xf0>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009c34:	4a2b      	ldr	r2, [pc, #172]	; (8009ce4 <vTaskSwitchContext+0xe8>)
 8009c36:	6810      	ldr	r0, [r2, #0]
 8009c38:	4a2b      	ldr	r2, [pc, #172]	; (8009ce8 <vTaskSwitchContext+0xec>)
 8009c3a:	6812      	ldr	r2, [r2, #0]
 8009c3c:	1a82      	subs	r2, r0, r2
 8009c3e:	440a      	add	r2, r1
 8009c40:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009c42:	4b28      	ldr	r3, [pc, #160]	; (8009ce4 <vTaskSwitchContext+0xe8>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a28      	ldr	r2, [pc, #160]	; (8009ce8 <vTaskSwitchContext+0xec>)
 8009c48:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c4a:	4b29      	ldr	r3, [pc, #164]	; (8009cf0 <vTaskSwitchContext+0xf4>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	60fb      	str	r3, [r7, #12]
 8009c50:	e010      	b.n	8009c74 <vTaskSwitchContext+0x78>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10a      	bne.n	8009c6e <vTaskSwitchContext+0x72>
	__asm volatile
 8009c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5c:	f383 8811 	msr	BASEPRI, r3
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	607b      	str	r3, [r7, #4]
}
 8009c6a:	bf00      	nop
 8009c6c:	e7fe      	b.n	8009c6c <vTaskSwitchContext+0x70>
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	3b01      	subs	r3, #1
 8009c72:	60fb      	str	r3, [r7, #12]
 8009c74:	491f      	ldr	r1, [pc, #124]	; (8009cf4 <vTaskSwitchContext+0xf8>)
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4413      	add	r3, r2
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	440b      	add	r3, r1
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0e4      	beq.n	8009c52 <vTaskSwitchContext+0x56>
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	4413      	add	r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4a18      	ldr	r2, [pc, #96]	; (8009cf4 <vTaskSwitchContext+0xf8>)
 8009c94:	4413      	add	r3, r2
 8009c96:	60bb      	str	r3, [r7, #8]
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	605a      	str	r2, [r3, #4]
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	685a      	ldr	r2, [r3, #4]
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	3308      	adds	r3, #8
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d104      	bne.n	8009cb8 <vTaskSwitchContext+0xbc>
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	685a      	ldr	r2, [r3, #4]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	605a      	str	r2, [r3, #4]
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	4a0b      	ldr	r2, [pc, #44]	; (8009cec <vTaskSwitchContext+0xf0>)
 8009cc0:	6013      	str	r3, [r2, #0]
 8009cc2:	4a0b      	ldr	r2, [pc, #44]	; (8009cf0 <vTaskSwitchContext+0xf4>)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009cc8:	4b08      	ldr	r3, [pc, #32]	; (8009cec <vTaskSwitchContext+0xf0>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	3358      	adds	r3, #88	; 0x58
 8009cce:	4a0a      	ldr	r2, [pc, #40]	; (8009cf8 <vTaskSwitchContext+0xfc>)
 8009cd0:	6013      	str	r3, [r2, #0]
}
 8009cd2:	bf00      	nop
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	20003664 	.word	0x20003664
 8009ce0:	20003650 	.word	0x20003650
 8009ce4:	2000366c 	.word	0x2000366c
 8009ce8:	20003668 	.word	0x20003668
 8009cec:	20003168 	.word	0x20003168
 8009cf0:	20003644 	.word	0x20003644
 8009cf4:	2000316c 	.word	0x2000316c
 8009cf8:	200003a8 	.word	0x200003a8

08009cfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10a      	bne.n	8009d22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d10:	f383 8811 	msr	BASEPRI, r3
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	60fb      	str	r3, [r7, #12]
}
 8009d1e:	bf00      	nop
 8009d20:	e7fe      	b.n	8009d20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d22:	4b07      	ldr	r3, [pc, #28]	; (8009d40 <vTaskPlaceOnEventList+0x44>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	3318      	adds	r3, #24
 8009d28:	4619      	mov	r1, r3
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f7fe fc55 	bl	80085da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d30:	2101      	movs	r1, #1
 8009d32:	6838      	ldr	r0, [r7, #0]
 8009d34:	f000 fb7e 	bl	800a434 <prvAddCurrentTaskToDelayedList>
}
 8009d38:	bf00      	nop
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	20003168 	.word	0x20003168

08009d44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d10a      	bne.n	8009d6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5a:	f383 8811 	msr	BASEPRI, r3
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	617b      	str	r3, [r7, #20]
}
 8009d68:	bf00      	nop
 8009d6a:	e7fe      	b.n	8009d6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d6c:	4b0a      	ldr	r3, [pc, #40]	; (8009d98 <vTaskPlaceOnEventListRestricted+0x54>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	3318      	adds	r3, #24
 8009d72:	4619      	mov	r1, r3
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f7fe fc0c 	bl	8008592 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009d80:	f04f 33ff 	mov.w	r3, #4294967295
 8009d84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009d86:	6879      	ldr	r1, [r7, #4]
 8009d88:	68b8      	ldr	r0, [r7, #8]
 8009d8a:	f000 fb53 	bl	800a434 <prvAddCurrentTaskToDelayedList>
	}
 8009d8e:	bf00      	nop
 8009d90:	3718      	adds	r7, #24
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20003168 	.word	0x20003168

08009d9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b086      	sub	sp, #24
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10a      	bne.n	8009dc8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db6:	f383 8811 	msr	BASEPRI, r3
 8009dba:	f3bf 8f6f 	isb	sy
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	60fb      	str	r3, [r7, #12]
}
 8009dc4:	bf00      	nop
 8009dc6:	e7fe      	b.n	8009dc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	3318      	adds	r3, #24
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fe fc3d 	bl	800864c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dd2:	4b1e      	ldr	r3, [pc, #120]	; (8009e4c <xTaskRemoveFromEventList+0xb0>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d11d      	bne.n	8009e16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	3304      	adds	r3, #4
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fe fc34 	bl	800864c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de8:	4b19      	ldr	r3, [pc, #100]	; (8009e50 <xTaskRemoveFromEventList+0xb4>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d903      	bls.n	8009df8 <xTaskRemoveFromEventList+0x5c>
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df4:	4a16      	ldr	r2, [pc, #88]	; (8009e50 <xTaskRemoveFromEventList+0xb4>)
 8009df6:	6013      	str	r3, [r2, #0]
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dfc:	4613      	mov	r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4413      	add	r3, r2
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4a13      	ldr	r2, [pc, #76]	; (8009e54 <xTaskRemoveFromEventList+0xb8>)
 8009e06:	441a      	add	r2, r3
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	3304      	adds	r3, #4
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4610      	mov	r0, r2
 8009e10:	f7fe fbbf 	bl	8008592 <vListInsertEnd>
 8009e14:	e005      	b.n	8009e22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	3318      	adds	r3, #24
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	480e      	ldr	r0, [pc, #56]	; (8009e58 <xTaskRemoveFromEventList+0xbc>)
 8009e1e:	f7fe fbb8 	bl	8008592 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e26:	4b0d      	ldr	r3, [pc, #52]	; (8009e5c <xTaskRemoveFromEventList+0xc0>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d905      	bls.n	8009e3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e30:	2301      	movs	r3, #1
 8009e32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e34:	4b0a      	ldr	r3, [pc, #40]	; (8009e60 <xTaskRemoveFromEventList+0xc4>)
 8009e36:	2201      	movs	r2, #1
 8009e38:	601a      	str	r2, [r3, #0]
 8009e3a:	e001      	b.n	8009e40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e40:	697b      	ldr	r3, [r7, #20]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3718      	adds	r7, #24
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	20003664 	.word	0x20003664
 8009e50:	20003644 	.word	0x20003644
 8009e54:	2000316c 	.word	0x2000316c
 8009e58:	200035fc 	.word	0x200035fc
 8009e5c:	20003168 	.word	0x20003168
 8009e60:	20003650 	.word	0x20003650

08009e64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e6c:	4b06      	ldr	r3, [pc, #24]	; (8009e88 <vTaskInternalSetTimeOutState+0x24>)
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e74:	4b05      	ldr	r3, [pc, #20]	; (8009e8c <vTaskInternalSetTimeOutState+0x28>)
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	605a      	str	r2, [r3, #4]
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr
 8009e88:	20003654 	.word	0x20003654
 8009e8c:	20003640 	.word	0x20003640

08009e90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b088      	sub	sp, #32
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d10a      	bne.n	8009eb6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	613b      	str	r3, [r7, #16]
}
 8009eb2:	bf00      	nop
 8009eb4:	e7fe      	b.n	8009eb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10a      	bne.n	8009ed2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec0:	f383 8811 	msr	BASEPRI, r3
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	60fb      	str	r3, [r7, #12]
}
 8009ece:	bf00      	nop
 8009ed0:	e7fe      	b.n	8009ed0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009ed2:	f000 ff7f 	bl	800add4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ed6:	4b1d      	ldr	r3, [pc, #116]	; (8009f4c <xTaskCheckForTimeOut+0xbc>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	69ba      	ldr	r2, [r7, #24]
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eee:	d102      	bne.n	8009ef6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	61fb      	str	r3, [r7, #28]
 8009ef4:	e023      	b.n	8009f3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	4b15      	ldr	r3, [pc, #84]	; (8009f50 <xTaskCheckForTimeOut+0xc0>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d007      	beq.n	8009f12 <xTaskCheckForTimeOut+0x82>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	69ba      	ldr	r2, [r7, #24]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d302      	bcc.n	8009f12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	61fb      	str	r3, [r7, #28]
 8009f10:	e015      	b.n	8009f3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	697a      	ldr	r2, [r7, #20]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d20b      	bcs.n	8009f34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	1ad2      	subs	r2, r2, r3
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f7ff ff9b 	bl	8009e64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	61fb      	str	r3, [r7, #28]
 8009f32:	e004      	b.n	8009f3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	2200      	movs	r2, #0
 8009f38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f3e:	f000 ff79 	bl	800ae34 <vPortExitCritical>

	return xReturn;
 8009f42:	69fb      	ldr	r3, [r7, #28]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3720      	adds	r7, #32
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	20003640 	.word	0x20003640
 8009f50:	20003654 	.word	0x20003654

08009f54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f54:	b480      	push	{r7}
 8009f56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f58:	4b03      	ldr	r3, [pc, #12]	; (8009f68 <vTaskMissedYield+0x14>)
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	601a      	str	r2, [r3, #0]
}
 8009f5e:	bf00      	nop
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	20003650 	.word	0x20003650

08009f6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f74:	f000 f852 	bl	800a01c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f78:	4b06      	ldr	r3, [pc, #24]	; (8009f94 <prvIdleTask+0x28>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d9f9      	bls.n	8009f74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009f80:	4b05      	ldr	r3, [pc, #20]	; (8009f98 <prvIdleTask+0x2c>)
 8009f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009f90:	e7f0      	b.n	8009f74 <prvIdleTask+0x8>
 8009f92:	bf00      	nop
 8009f94:	2000316c 	.word	0x2000316c
 8009f98:	e000ed04 	.word	0xe000ed04

08009f9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	607b      	str	r3, [r7, #4]
 8009fa6:	e00c      	b.n	8009fc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	4613      	mov	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4a12      	ldr	r2, [pc, #72]	; (8009ffc <prvInitialiseTaskLists+0x60>)
 8009fb4:	4413      	add	r3, r2
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fe fabe 	bl	8008538 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	607b      	str	r3, [r7, #4]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2b37      	cmp	r3, #55	; 0x37
 8009fc6:	d9ef      	bls.n	8009fa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009fc8:	480d      	ldr	r0, [pc, #52]	; (800a000 <prvInitialiseTaskLists+0x64>)
 8009fca:	f7fe fab5 	bl	8008538 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009fce:	480d      	ldr	r0, [pc, #52]	; (800a004 <prvInitialiseTaskLists+0x68>)
 8009fd0:	f7fe fab2 	bl	8008538 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009fd4:	480c      	ldr	r0, [pc, #48]	; (800a008 <prvInitialiseTaskLists+0x6c>)
 8009fd6:	f7fe faaf 	bl	8008538 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009fda:	480c      	ldr	r0, [pc, #48]	; (800a00c <prvInitialiseTaskLists+0x70>)
 8009fdc:	f7fe faac 	bl	8008538 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009fe0:	480b      	ldr	r0, [pc, #44]	; (800a010 <prvInitialiseTaskLists+0x74>)
 8009fe2:	f7fe faa9 	bl	8008538 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009fe6:	4b0b      	ldr	r3, [pc, #44]	; (800a014 <prvInitialiseTaskLists+0x78>)
 8009fe8:	4a05      	ldr	r2, [pc, #20]	; (800a000 <prvInitialiseTaskLists+0x64>)
 8009fea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009fec:	4b0a      	ldr	r3, [pc, #40]	; (800a018 <prvInitialiseTaskLists+0x7c>)
 8009fee:	4a05      	ldr	r2, [pc, #20]	; (800a004 <prvInitialiseTaskLists+0x68>)
 8009ff0:	601a      	str	r2, [r3, #0]
}
 8009ff2:	bf00      	nop
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	2000316c 	.word	0x2000316c
 800a000:	200035cc 	.word	0x200035cc
 800a004:	200035e0 	.word	0x200035e0
 800a008:	200035fc 	.word	0x200035fc
 800a00c:	20003610 	.word	0x20003610
 800a010:	20003628 	.word	0x20003628
 800a014:	200035f4 	.word	0x200035f4
 800a018:	200035f8 	.word	0x200035f8

0800a01c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a022:	e019      	b.n	800a058 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a024:	f000 fed6 	bl	800add4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a028:	4b10      	ldr	r3, [pc, #64]	; (800a06c <prvCheckTasksWaitingTermination+0x50>)
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	3304      	adds	r3, #4
 800a034:	4618      	mov	r0, r3
 800a036:	f7fe fb09 	bl	800864c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a03a:	4b0d      	ldr	r3, [pc, #52]	; (800a070 <prvCheckTasksWaitingTermination+0x54>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	3b01      	subs	r3, #1
 800a040:	4a0b      	ldr	r2, [pc, #44]	; (800a070 <prvCheckTasksWaitingTermination+0x54>)
 800a042:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a044:	4b0b      	ldr	r3, [pc, #44]	; (800a074 <prvCheckTasksWaitingTermination+0x58>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	3b01      	subs	r3, #1
 800a04a:	4a0a      	ldr	r2, [pc, #40]	; (800a074 <prvCheckTasksWaitingTermination+0x58>)
 800a04c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a04e:	f000 fef1 	bl	800ae34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f810 	bl	800a078 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a058:	4b06      	ldr	r3, [pc, #24]	; (800a074 <prvCheckTasksWaitingTermination+0x58>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1e1      	bne.n	800a024 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a060:	bf00      	nop
 800a062:	bf00      	nop
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20003610 	.word	0x20003610
 800a070:	2000363c 	.word	0x2000363c
 800a074:	20003624 	.word	0x20003624

0800a078 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	3358      	adds	r3, #88	; 0x58
 800a084:	4618      	mov	r0, r3
 800a086:	f001 fa7f 	bl	800b588 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800a090:	2b00      	cmp	r3, #0
 800a092:	d108      	bne.n	800a0a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a098:	4618      	mov	r0, r3
 800a09a:	f001 f889 	bl	800b1b0 <vPortFree>
				vPortFree( pxTCB );
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f001 f886 	bl	800b1b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a0a4:	e018      	b.n	800a0d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d103      	bne.n	800a0b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f001 f87d 	bl	800b1b0 <vPortFree>
	}
 800a0b6:	e00f      	b.n	800a0d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	d00a      	beq.n	800a0d8 <prvDeleteTCB+0x60>
	__asm volatile
 800a0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	60fb      	str	r3, [r7, #12]
}
 800a0d4:	bf00      	nop
 800a0d6:	e7fe      	b.n	800a0d6 <prvDeleteTCB+0x5e>
	}
 800a0d8:	bf00      	nop
 800a0da:	3710      	adds	r7, #16
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0e6:	4b0c      	ldr	r3, [pc, #48]	; (800a118 <prvResetNextTaskUnblockTime+0x38>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d104      	bne.n	800a0fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a0f0:	4b0a      	ldr	r3, [pc, #40]	; (800a11c <prvResetNextTaskUnblockTime+0x3c>)
 800a0f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a0f8:	e008      	b.n	800a10c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0fa:	4b07      	ldr	r3, [pc, #28]	; (800a118 <prvResetNextTaskUnblockTime+0x38>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	4a04      	ldr	r2, [pc, #16]	; (800a11c <prvResetNextTaskUnblockTime+0x3c>)
 800a10a:	6013      	str	r3, [r2, #0]
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	200035f4 	.word	0x200035f4
 800a11c:	2000365c 	.word	0x2000365c

0800a120 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a126:	4b0b      	ldr	r3, [pc, #44]	; (800a154 <xTaskGetSchedulerState+0x34>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d102      	bne.n	800a134 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a12e:	2301      	movs	r3, #1
 800a130:	607b      	str	r3, [r7, #4]
 800a132:	e008      	b.n	800a146 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a134:	4b08      	ldr	r3, [pc, #32]	; (800a158 <xTaskGetSchedulerState+0x38>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d102      	bne.n	800a142 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a13c:	2302      	movs	r3, #2
 800a13e:	607b      	str	r3, [r7, #4]
 800a140:	e001      	b.n	800a146 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a142:	2300      	movs	r3, #0
 800a144:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a146:	687b      	ldr	r3, [r7, #4]
	}
 800a148:	4618      	mov	r0, r3
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr
 800a154:	20003648 	.word	0x20003648
 800a158:	20003664 	.word	0x20003664

0800a15c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a168:	2300      	movs	r3, #0
 800a16a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d051      	beq.n	800a216 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a176:	4b2a      	ldr	r3, [pc, #168]	; (800a220 <xTaskPriorityInherit+0xc4>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d241      	bcs.n	800a204 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	2b00      	cmp	r3, #0
 800a186:	db06      	blt.n	800a196 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a188:	4b25      	ldr	r3, [pc, #148]	; (800a220 <xTaskPriorityInherit+0xc4>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	6959      	ldr	r1, [r3, #20]
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a19e:	4613      	mov	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4a1f      	ldr	r2, [pc, #124]	; (800a224 <xTaskPriorityInherit+0xc8>)
 800a1a8:	4413      	add	r3, r2
 800a1aa:	4299      	cmp	r1, r3
 800a1ac:	d122      	bne.n	800a1f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fe fa4a 	bl	800864c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a1b8:	4b19      	ldr	r3, [pc, #100]	; (800a220 <xTaskPriorityInherit+0xc4>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c6:	4b18      	ldr	r3, [pc, #96]	; (800a228 <xTaskPriorityInherit+0xcc>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d903      	bls.n	800a1d6 <xTaskPriorityInherit+0x7a>
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d2:	4a15      	ldr	r2, [pc, #84]	; (800a228 <xTaskPriorityInherit+0xcc>)
 800a1d4:	6013      	str	r3, [r2, #0]
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1da:	4613      	mov	r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	4a10      	ldr	r2, [pc, #64]	; (800a224 <xTaskPriorityInherit+0xc8>)
 800a1e4:	441a      	add	r2, r3
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	3304      	adds	r3, #4
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	f7fe f9d0 	bl	8008592 <vListInsertEnd>
 800a1f2:	e004      	b.n	800a1fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a1f4:	4b0a      	ldr	r3, [pc, #40]	; (800a220 <xTaskPriorityInherit+0xc4>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a1fe:	2301      	movs	r3, #1
 800a200:	60fb      	str	r3, [r7, #12]
 800a202:	e008      	b.n	800a216 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a208:	4b05      	ldr	r3, [pc, #20]	; (800a220 <xTaskPriorityInherit+0xc4>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20e:	429a      	cmp	r2, r3
 800a210:	d201      	bcs.n	800a216 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a212:	2301      	movs	r3, #1
 800a214:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a216:	68fb      	ldr	r3, [r7, #12]
	}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	20003168 	.word	0x20003168
 800a224:	2000316c 	.word	0x2000316c
 800a228:	20003644 	.word	0x20003644

0800a22c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a238:	2300      	movs	r3, #0
 800a23a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d056      	beq.n	800a2f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a242:	4b2e      	ldr	r3, [pc, #184]	; (800a2fc <xTaskPriorityDisinherit+0xd0>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d00a      	beq.n	800a262 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a250:	f383 8811 	msr	BASEPRI, r3
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	60fb      	str	r3, [r7, #12]
}
 800a25e:	bf00      	nop
 800a260:	e7fe      	b.n	800a260 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10a      	bne.n	800a280 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	60bb      	str	r3, [r7, #8]
}
 800a27c:	bf00      	nop
 800a27e:	e7fe      	b.n	800a27e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a284:	1e5a      	subs	r2, r3, #1
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a292:	429a      	cmp	r2, r3
 800a294:	d02c      	beq.n	800a2f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d128      	bne.n	800a2f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	3304      	adds	r3, #4
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fe f9d2 	bl	800864c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c0:	4b0f      	ldr	r3, [pc, #60]	; (800a300 <xTaskPriorityDisinherit+0xd4>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d903      	bls.n	800a2d0 <xTaskPriorityDisinherit+0xa4>
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2cc:	4a0c      	ldr	r2, [pc, #48]	; (800a300 <xTaskPriorityDisinherit+0xd4>)
 800a2ce:	6013      	str	r3, [r2, #0]
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	4413      	add	r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4a09      	ldr	r2, [pc, #36]	; (800a304 <xTaskPriorityDisinherit+0xd8>)
 800a2de:	441a      	add	r2, r3
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	3304      	adds	r3, #4
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	4610      	mov	r0, r2
 800a2e8:	f7fe f953 	bl	8008592 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a2f0:	697b      	ldr	r3, [r7, #20]
	}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3718      	adds	r7, #24
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20003168 	.word	0x20003168
 800a300:	20003644 	.word	0x20003644
 800a304:	2000316c 	.word	0x2000316c

0800a308 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b088      	sub	sp, #32
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a316:	2301      	movs	r3, #1
 800a318:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d06a      	beq.n	800a3f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10a      	bne.n	800a33e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	60fb      	str	r3, [r7, #12]
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	429a      	cmp	r2, r3
 800a346:	d902      	bls.n	800a34e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	61fb      	str	r3, [r7, #28]
 800a34c:	e002      	b.n	800a354 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a352:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a358:	69fa      	ldr	r2, [r7, #28]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d04b      	beq.n	800a3f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	429a      	cmp	r2, r3
 800a366:	d146      	bne.n	800a3f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a368:	4b25      	ldr	r3, [pc, #148]	; (800a400 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	69ba      	ldr	r2, [r7, #24]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d10a      	bne.n	800a388 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	60bb      	str	r3, [r7, #8]
}
 800a384:	bf00      	nop
 800a386:	e7fe      	b.n	800a386 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	69fa      	ldr	r2, [r7, #28]
 800a392:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	699b      	ldr	r3, [r3, #24]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	db04      	blt.n	800a3a6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	6959      	ldr	r1, [r3, #20]
 800a3aa:	693a      	ldr	r2, [r7, #16]
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4a13      	ldr	r2, [pc, #76]	; (800a404 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a3b6:	4413      	add	r3, r2
 800a3b8:	4299      	cmp	r1, r3
 800a3ba:	d11c      	bne.n	800a3f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	3304      	adds	r3, #4
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7fe f943 	bl	800864c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ca:	4b0f      	ldr	r3, [pc, #60]	; (800a408 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d903      	bls.n	800a3da <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d6:	4a0c      	ldr	r2, [pc, #48]	; (800a408 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a3d8:	6013      	str	r3, [r2, #0]
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3de:	4613      	mov	r3, r2
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	4413      	add	r3, r2
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	4a07      	ldr	r2, [pc, #28]	; (800a404 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a3e8:	441a      	add	r2, r3
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	4610      	mov	r0, r2
 800a3f2:	f7fe f8ce 	bl	8008592 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a3f6:	bf00      	nop
 800a3f8:	3720      	adds	r7, #32
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	20003168 	.word	0x20003168
 800a404:	2000316c 	.word	0x2000316c
 800a408:	20003644 	.word	0x20003644

0800a40c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a40c:	b480      	push	{r7}
 800a40e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a410:	4b07      	ldr	r3, [pc, #28]	; (800a430 <pvTaskIncrementMutexHeldCount+0x24>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d004      	beq.n	800a422 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a418:	4b05      	ldr	r3, [pc, #20]	; (800a430 <pvTaskIncrementMutexHeldCount+0x24>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a41e:	3201      	adds	r2, #1
 800a420:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a422:	4b03      	ldr	r3, [pc, #12]	; (800a430 <pvTaskIncrementMutexHeldCount+0x24>)
 800a424:	681b      	ldr	r3, [r3, #0]
	}
 800a426:	4618      	mov	r0, r3
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	20003168 	.word	0x20003168

0800a434 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a43e:	4b21      	ldr	r3, [pc, #132]	; (800a4c4 <prvAddCurrentTaskToDelayedList+0x90>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a444:	4b20      	ldr	r3, [pc, #128]	; (800a4c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3304      	adds	r3, #4
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe f8fe 	bl	800864c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a456:	d10a      	bne.n	800a46e <prvAddCurrentTaskToDelayedList+0x3a>
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d007      	beq.n	800a46e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a45e:	4b1a      	ldr	r3, [pc, #104]	; (800a4c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	3304      	adds	r3, #4
 800a464:	4619      	mov	r1, r3
 800a466:	4819      	ldr	r0, [pc, #100]	; (800a4cc <prvAddCurrentTaskToDelayedList+0x98>)
 800a468:	f7fe f893 	bl	8008592 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a46c:	e026      	b.n	800a4bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4413      	add	r3, r2
 800a474:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a476:	4b14      	ldr	r3, [pc, #80]	; (800a4c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	429a      	cmp	r2, r3
 800a484:	d209      	bcs.n	800a49a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a486:	4b12      	ldr	r3, [pc, #72]	; (800a4d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	4b0f      	ldr	r3, [pc, #60]	; (800a4c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	3304      	adds	r3, #4
 800a490:	4619      	mov	r1, r3
 800a492:	4610      	mov	r0, r2
 800a494:	f7fe f8a1 	bl	80085da <vListInsert>
}
 800a498:	e010      	b.n	800a4bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a49a:	4b0e      	ldr	r3, [pc, #56]	; (800a4d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	4b0a      	ldr	r3, [pc, #40]	; (800a4c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	f7fe f897 	bl	80085da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a4ac:	4b0a      	ldr	r3, [pc, #40]	; (800a4d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68ba      	ldr	r2, [r7, #8]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d202      	bcs.n	800a4bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a4b6:	4a08      	ldr	r2, [pc, #32]	; (800a4d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	6013      	str	r3, [r2, #0]
}
 800a4bc:	bf00      	nop
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	20003640 	.word	0x20003640
 800a4c8:	20003168 	.word	0x20003168
 800a4cc:	20003628 	.word	0x20003628
 800a4d0:	200035f8 	.word	0x200035f8
 800a4d4:	200035f4 	.word	0x200035f4
 800a4d8:	2000365c 	.word	0x2000365c

0800a4dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b08a      	sub	sp, #40	; 0x28
 800a4e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a4e6:	f000 fb07 	bl	800aaf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a4ea:	4b1c      	ldr	r3, [pc, #112]	; (800a55c <xTimerCreateTimerTask+0x80>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d021      	beq.n	800a536 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a4fa:	1d3a      	adds	r2, r7, #4
 800a4fc:	f107 0108 	add.w	r1, r7, #8
 800a500:	f107 030c 	add.w	r3, r7, #12
 800a504:	4618      	mov	r0, r3
 800a506:	f7fd fffd 	bl	8008504 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a50a:	6879      	ldr	r1, [r7, #4]
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	9202      	str	r2, [sp, #8]
 800a512:	9301      	str	r3, [sp, #4]
 800a514:	2302      	movs	r3, #2
 800a516:	9300      	str	r3, [sp, #0]
 800a518:	2300      	movs	r3, #0
 800a51a:	460a      	mov	r2, r1
 800a51c:	4910      	ldr	r1, [pc, #64]	; (800a560 <xTimerCreateTimerTask+0x84>)
 800a51e:	4811      	ldr	r0, [pc, #68]	; (800a564 <xTimerCreateTimerTask+0x88>)
 800a520:	f7fe ff94 	bl	800944c <xTaskCreateStatic>
 800a524:	4603      	mov	r3, r0
 800a526:	4a10      	ldr	r2, [pc, #64]	; (800a568 <xTimerCreateTimerTask+0x8c>)
 800a528:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a52a:	4b0f      	ldr	r3, [pc, #60]	; (800a568 <xTimerCreateTimerTask+0x8c>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d001      	beq.n	800a536 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a532:	2301      	movs	r3, #1
 800a534:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10a      	bne.n	800a552 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	613b      	str	r3, [r7, #16]
}
 800a54e:	bf00      	nop
 800a550:	e7fe      	b.n	800a550 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a552:	697b      	ldr	r3, [r7, #20]
}
 800a554:	4618      	mov	r0, r3
 800a556:	3718      	adds	r7, #24
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	200036a0 	.word	0x200036a0
 800a560:	0800c398 	.word	0x0800c398
 800a564:	0800a6a1 	.word	0x0800a6a1
 800a568:	200036a4 	.word	0x200036a4

0800a56c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b08a      	sub	sp, #40	; 0x28
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	607a      	str	r2, [r7, #4]
 800a578:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a57a:	2300      	movs	r3, #0
 800a57c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10a      	bne.n	800a59a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	623b      	str	r3, [r7, #32]
}
 800a596:	bf00      	nop
 800a598:	e7fe      	b.n	800a598 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a59a:	4b1a      	ldr	r3, [pc, #104]	; (800a604 <xTimerGenericCommand+0x98>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d02a      	beq.n	800a5f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	2b05      	cmp	r3, #5
 800a5b2:	dc18      	bgt.n	800a5e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a5b4:	f7ff fdb4 	bl	800a120 <xTaskGetSchedulerState>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d109      	bne.n	800a5d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a5be:	4b11      	ldr	r3, [pc, #68]	; (800a604 <xTimerGenericCommand+0x98>)
 800a5c0:	6818      	ldr	r0, [r3, #0]
 800a5c2:	f107 0110 	add.w	r1, r7, #16
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ca:	f7fe f9a7 	bl	800891c <xQueueGenericSend>
 800a5ce:	6278      	str	r0, [r7, #36]	; 0x24
 800a5d0:	e012      	b.n	800a5f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a5d2:	4b0c      	ldr	r3, [pc, #48]	; (800a604 <xTimerGenericCommand+0x98>)
 800a5d4:	6818      	ldr	r0, [r3, #0]
 800a5d6:	f107 0110 	add.w	r1, r7, #16
 800a5da:	2300      	movs	r3, #0
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f7fe f99d 	bl	800891c <xQueueGenericSend>
 800a5e2:	6278      	str	r0, [r7, #36]	; 0x24
 800a5e4:	e008      	b.n	800a5f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a5e6:	4b07      	ldr	r3, [pc, #28]	; (800a604 <xTimerGenericCommand+0x98>)
 800a5e8:	6818      	ldr	r0, [r3, #0]
 800a5ea:	f107 0110 	add.w	r1, r7, #16
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	683a      	ldr	r2, [r7, #0]
 800a5f2:	f7fe fa91 	bl	8008b18 <xQueueGenericSendFromISR>
 800a5f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3728      	adds	r7, #40	; 0x28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	200036a0 	.word	0x200036a0

0800a608 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b088      	sub	sp, #32
 800a60c:	af02      	add	r7, sp, #8
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a612:	4b22      	ldr	r3, [pc, #136]	; (800a69c <prvProcessExpiredTimer+0x94>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	3304      	adds	r3, #4
 800a620:	4618      	mov	r0, r3
 800a622:	f7fe f813 	bl	800864c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a62c:	f003 0304 	and.w	r3, r3, #4
 800a630:	2b00      	cmp	r3, #0
 800a632:	d022      	beq.n	800a67a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	699a      	ldr	r2, [r3, #24]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	18d1      	adds	r1, r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	6978      	ldr	r0, [r7, #20]
 800a642:	f000 f8d1 	bl	800a7e8 <prvInsertTimerInActiveList>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d01f      	beq.n	800a68c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a64c:	2300      	movs	r3, #0
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	2300      	movs	r3, #0
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	2100      	movs	r1, #0
 800a656:	6978      	ldr	r0, [r7, #20]
 800a658:	f7ff ff88 	bl	800a56c <xTimerGenericCommand>
 800a65c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d113      	bne.n	800a68c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a668:	f383 8811 	msr	BASEPRI, r3
 800a66c:	f3bf 8f6f 	isb	sy
 800a670:	f3bf 8f4f 	dsb	sy
 800a674:	60fb      	str	r3, [r7, #12]
}
 800a676:	bf00      	nop
 800a678:	e7fe      	b.n	800a678 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a680:	f023 0301 	bic.w	r3, r3, #1
 800a684:	b2da      	uxtb	r2, r3
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	6a1b      	ldr	r3, [r3, #32]
 800a690:	6978      	ldr	r0, [r7, #20]
 800a692:	4798      	blx	r3
}
 800a694:	bf00      	nop
 800a696:	3718      	adds	r7, #24
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	20003698 	.word	0x20003698

0800a6a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6a8:	f107 0308 	add.w	r3, r7, #8
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f000 f857 	bl	800a760 <prvGetNextExpireTime>
 800a6b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f000 f803 	bl	800a6c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a6be:	f000 f8d5 	bl	800a86c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6c2:	e7f1      	b.n	800a6a8 <prvTimerTask+0x8>

0800a6c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a6ce:	f7ff f91f 	bl	8009910 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6d2:	f107 0308 	add.w	r3, r7, #8
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 f866 	bl	800a7a8 <prvSampleTimeNow>
 800a6dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d130      	bne.n	800a746 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10a      	bne.n	800a700 <prvProcessTimerOrBlockTask+0x3c>
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d806      	bhi.n	800a700 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a6f2:	f7ff f91b 	bl	800992c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a6f6:	68f9      	ldr	r1, [r7, #12]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f7ff ff85 	bl	800a608 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a6fe:	e024      	b.n	800a74a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d008      	beq.n	800a718 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a706:	4b13      	ldr	r3, [pc, #76]	; (800a754 <prvProcessTimerOrBlockTask+0x90>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d101      	bne.n	800a714 <prvProcessTimerOrBlockTask+0x50>
 800a710:	2301      	movs	r3, #1
 800a712:	e000      	b.n	800a716 <prvProcessTimerOrBlockTask+0x52>
 800a714:	2300      	movs	r3, #0
 800a716:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a718:	4b0f      	ldr	r3, [pc, #60]	; (800a758 <prvProcessTimerOrBlockTask+0x94>)
 800a71a:	6818      	ldr	r0, [r3, #0]
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	4619      	mov	r1, r3
 800a726:	f7fe fe5d 	bl	80093e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a72a:	f7ff f8ff 	bl	800992c <xTaskResumeAll>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10a      	bne.n	800a74a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a734:	4b09      	ldr	r3, [pc, #36]	; (800a75c <prvProcessTimerOrBlockTask+0x98>)
 800a736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a73a:	601a      	str	r2, [r3, #0]
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	f3bf 8f6f 	isb	sy
}
 800a744:	e001      	b.n	800a74a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a746:	f7ff f8f1 	bl	800992c <xTaskResumeAll>
}
 800a74a:	bf00      	nop
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	2000369c 	.word	0x2000369c
 800a758:	200036a0 	.word	0x200036a0
 800a75c:	e000ed04 	.word	0xe000ed04

0800a760 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a760:	b480      	push	{r7}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a768:	4b0e      	ldr	r3, [pc, #56]	; (800a7a4 <prvGetNextExpireTime+0x44>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d101      	bne.n	800a776 <prvGetNextExpireTime+0x16>
 800a772:	2201      	movs	r2, #1
 800a774:	e000      	b.n	800a778 <prvGetNextExpireTime+0x18>
 800a776:	2200      	movs	r2, #0
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d105      	bne.n	800a790 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a784:	4b07      	ldr	r3, [pc, #28]	; (800a7a4 <prvGetNextExpireTime+0x44>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	60fb      	str	r3, [r7, #12]
 800a78e:	e001      	b.n	800a794 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a790:	2300      	movs	r3, #0
 800a792:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a794:	68fb      	ldr	r3, [r7, #12]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3714      	adds	r7, #20
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	20003698 	.word	0x20003698

0800a7a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a7b0:	f7ff f95a 	bl	8009a68 <xTaskGetTickCount>
 800a7b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a7b6:	4b0b      	ldr	r3, [pc, #44]	; (800a7e4 <prvSampleTimeNow+0x3c>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d205      	bcs.n	800a7cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a7c0:	f000 f936 	bl	800aa30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	601a      	str	r2, [r3, #0]
 800a7ca:	e002      	b.n	800a7d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a7d2:	4a04      	ldr	r2, [pc, #16]	; (800a7e4 <prvSampleTimeNow+0x3c>)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3710      	adds	r7, #16
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	200036a8 	.word	0x200036a8

0800a7e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b086      	sub	sp, #24
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	607a      	str	r2, [r7, #4]
 800a7f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d812      	bhi.n	800a834 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	1ad2      	subs	r2, r2, r3
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d302      	bcc.n	800a822 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a81c:	2301      	movs	r3, #1
 800a81e:	617b      	str	r3, [r7, #20]
 800a820:	e01b      	b.n	800a85a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a822:	4b10      	ldr	r3, [pc, #64]	; (800a864 <prvInsertTimerInActiveList+0x7c>)
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	3304      	adds	r3, #4
 800a82a:	4619      	mov	r1, r3
 800a82c:	4610      	mov	r0, r2
 800a82e:	f7fd fed4 	bl	80085da <vListInsert>
 800a832:	e012      	b.n	800a85a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d206      	bcs.n	800a84a <prvInsertTimerInActiveList+0x62>
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	429a      	cmp	r2, r3
 800a842:	d302      	bcc.n	800a84a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a844:	2301      	movs	r3, #1
 800a846:	617b      	str	r3, [r7, #20]
 800a848:	e007      	b.n	800a85a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a84a:	4b07      	ldr	r3, [pc, #28]	; (800a868 <prvInsertTimerInActiveList+0x80>)
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	3304      	adds	r3, #4
 800a852:	4619      	mov	r1, r3
 800a854:	4610      	mov	r0, r2
 800a856:	f7fd fec0 	bl	80085da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a85a:	697b      	ldr	r3, [r7, #20]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3718      	adds	r7, #24
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	2000369c 	.word	0x2000369c
 800a868:	20003698 	.word	0x20003698

0800a86c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b08e      	sub	sp, #56	; 0x38
 800a870:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a872:	e0ca      	b.n	800aa0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2b00      	cmp	r3, #0
 800a878:	da18      	bge.n	800a8ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a87a:	1d3b      	adds	r3, r7, #4
 800a87c:	3304      	adds	r3, #4
 800a87e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a882:	2b00      	cmp	r3, #0
 800a884:	d10a      	bne.n	800a89c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	61fb      	str	r3, [r7, #28]
}
 800a898:	bf00      	nop
 800a89a:	e7fe      	b.n	800a89a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8a2:	6850      	ldr	r0, [r2, #4]
 800a8a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8a6:	6892      	ldr	r2, [r2, #8]
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f2c0 80ab 	blt.w	800aa0a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ba:	695b      	ldr	r3, [r3, #20]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d004      	beq.n	800a8ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c2:	3304      	adds	r3, #4
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7fd fec1 	bl	800864c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8ca:	463b      	mov	r3, r7
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7ff ff6b 	bl	800a7a8 <prvSampleTimeNow>
 800a8d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2b09      	cmp	r3, #9
 800a8d8:	f200 8096 	bhi.w	800aa08 <prvProcessReceivedCommands+0x19c>
 800a8dc:	a201      	add	r2, pc, #4	; (adr r2, 800a8e4 <prvProcessReceivedCommands+0x78>)
 800a8de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e2:	bf00      	nop
 800a8e4:	0800a90d 	.word	0x0800a90d
 800a8e8:	0800a90d 	.word	0x0800a90d
 800a8ec:	0800a90d 	.word	0x0800a90d
 800a8f0:	0800a981 	.word	0x0800a981
 800a8f4:	0800a995 	.word	0x0800a995
 800a8f8:	0800a9df 	.word	0x0800a9df
 800a8fc:	0800a90d 	.word	0x0800a90d
 800a900:	0800a90d 	.word	0x0800a90d
 800a904:	0800a981 	.word	0x0800a981
 800a908:	0800a995 	.word	0x0800a995
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a912:	f043 0301 	orr.w	r3, r3, #1
 800a916:	b2da      	uxtb	r2, r3
 800a918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a922:	699b      	ldr	r3, [r3, #24]
 800a924:	18d1      	adds	r1, r2, r3
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a92a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a92c:	f7ff ff5c 	bl	800a7e8 <prvInsertTimerInActiveList>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d069      	beq.n	800aa0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a938:	6a1b      	ldr	r3, [r3, #32]
 800a93a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a93c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a944:	f003 0304 	and.w	r3, r3, #4
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d05e      	beq.n	800aa0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a950:	699b      	ldr	r3, [r3, #24]
 800a952:	441a      	add	r2, r3
 800a954:	2300      	movs	r3, #0
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	2300      	movs	r3, #0
 800a95a:	2100      	movs	r1, #0
 800a95c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a95e:	f7ff fe05 	bl	800a56c <xTimerGenericCommand>
 800a962:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a964:	6a3b      	ldr	r3, [r7, #32]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d14f      	bne.n	800aa0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96e:	f383 8811 	msr	BASEPRI, r3
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	61bb      	str	r3, [r7, #24]
}
 800a97c:	bf00      	nop
 800a97e:	e7fe      	b.n	800a97e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a986:	f023 0301 	bic.w	r3, r3, #1
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a992:	e03a      	b.n	800aa0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a996:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a99a:	f043 0301 	orr.w	r3, r3, #1
 800a99e:	b2da      	uxtb	r2, r3
 800a9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d10a      	bne.n	800a9ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b8:	f383 8811 	msr	BASEPRI, r3
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	617b      	str	r3, [r7, #20]
}
 800a9c6:	bf00      	nop
 800a9c8:	e7fe      	b.n	800a9c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9cc:	699a      	ldr	r2, [r3, #24]
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d0:	18d1      	adds	r1, r2, r3
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9d8:	f7ff ff06 	bl	800a7e8 <prvInsertTimerInActiveList>
					break;
 800a9dc:	e015      	b.n	800aa0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9e4:	f003 0302 	and.w	r3, r3, #2
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d103      	bne.n	800a9f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a9ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9ee:	f000 fbdf 	bl	800b1b0 <vPortFree>
 800a9f2:	e00a      	b.n	800aa0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9fa:	f023 0301 	bic.w	r3, r3, #1
 800a9fe:	b2da      	uxtb	r2, r3
 800aa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa06:	e000      	b.n	800aa0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800aa08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa0a:	4b08      	ldr	r3, [pc, #32]	; (800aa2c <prvProcessReceivedCommands+0x1c0>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	1d39      	adds	r1, r7, #4
 800aa10:	2200      	movs	r2, #0
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7fe f9a8 	bl	8008d68 <xQueueReceive>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	f47f af2a 	bne.w	800a874 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800aa20:	bf00      	nop
 800aa22:	bf00      	nop
 800aa24:	3730      	adds	r7, #48	; 0x30
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	200036a0 	.word	0x200036a0

0800aa30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b088      	sub	sp, #32
 800aa34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa36:	e048      	b.n	800aaca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa38:	4b2d      	ldr	r3, [pc, #180]	; (800aaf0 <prvSwitchTimerLists+0xc0>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa42:	4b2b      	ldr	r3, [pc, #172]	; (800aaf0 <prvSwitchTimerLists+0xc0>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	3304      	adds	r3, #4
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7fd fdfb 	bl	800864c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6a1b      	ldr	r3, [r3, #32]
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d02e      	beq.n	800aaca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	4413      	add	r3, r2
 800aa74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aa76:	68ba      	ldr	r2, [r7, #8]
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d90e      	bls.n	800aa9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	68ba      	ldr	r2, [r7, #8]
 800aa82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	68fa      	ldr	r2, [r7, #12]
 800aa88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa8a:	4b19      	ldr	r3, [pc, #100]	; (800aaf0 <prvSwitchTimerLists+0xc0>)
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	3304      	adds	r3, #4
 800aa92:	4619      	mov	r1, r3
 800aa94:	4610      	mov	r0, r2
 800aa96:	f7fd fda0 	bl	80085da <vListInsert>
 800aa9a:	e016      	b.n	800aaca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	693a      	ldr	r2, [r7, #16]
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f7ff fd60 	bl	800a56c <xTimerGenericCommand>
 800aaac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10a      	bne.n	800aaca <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	603b      	str	r3, [r7, #0]
}
 800aac6:	bf00      	nop
 800aac8:	e7fe      	b.n	800aac8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aaca:	4b09      	ldr	r3, [pc, #36]	; (800aaf0 <prvSwitchTimerLists+0xc0>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d1b1      	bne.n	800aa38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aad4:	4b06      	ldr	r3, [pc, #24]	; (800aaf0 <prvSwitchTimerLists+0xc0>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aada:	4b06      	ldr	r3, [pc, #24]	; (800aaf4 <prvSwitchTimerLists+0xc4>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a04      	ldr	r2, [pc, #16]	; (800aaf0 <prvSwitchTimerLists+0xc0>)
 800aae0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aae2:	4a04      	ldr	r2, [pc, #16]	; (800aaf4 <prvSwitchTimerLists+0xc4>)
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	6013      	str	r3, [r2, #0]
}
 800aae8:	bf00      	nop
 800aaea:	3718      	adds	r7, #24
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	20003698 	.word	0x20003698
 800aaf4:	2000369c 	.word	0x2000369c

0800aaf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aafe:	f000 f969 	bl	800add4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab02:	4b15      	ldr	r3, [pc, #84]	; (800ab58 <prvCheckForValidListAndQueue+0x60>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d120      	bne.n	800ab4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab0a:	4814      	ldr	r0, [pc, #80]	; (800ab5c <prvCheckForValidListAndQueue+0x64>)
 800ab0c:	f7fd fd14 	bl	8008538 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab10:	4813      	ldr	r0, [pc, #76]	; (800ab60 <prvCheckForValidListAndQueue+0x68>)
 800ab12:	f7fd fd11 	bl	8008538 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab16:	4b13      	ldr	r3, [pc, #76]	; (800ab64 <prvCheckForValidListAndQueue+0x6c>)
 800ab18:	4a10      	ldr	r2, [pc, #64]	; (800ab5c <prvCheckForValidListAndQueue+0x64>)
 800ab1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab1c:	4b12      	ldr	r3, [pc, #72]	; (800ab68 <prvCheckForValidListAndQueue+0x70>)
 800ab1e:	4a10      	ldr	r2, [pc, #64]	; (800ab60 <prvCheckForValidListAndQueue+0x68>)
 800ab20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab22:	2300      	movs	r3, #0
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	4b11      	ldr	r3, [pc, #68]	; (800ab6c <prvCheckForValidListAndQueue+0x74>)
 800ab28:	4a11      	ldr	r2, [pc, #68]	; (800ab70 <prvCheckForValidListAndQueue+0x78>)
 800ab2a:	2110      	movs	r1, #16
 800ab2c:	200a      	movs	r0, #10
 800ab2e:	f7fd fe1f 	bl	8008770 <xQueueGenericCreateStatic>
 800ab32:	4603      	mov	r3, r0
 800ab34:	4a08      	ldr	r2, [pc, #32]	; (800ab58 <prvCheckForValidListAndQueue+0x60>)
 800ab36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab38:	4b07      	ldr	r3, [pc, #28]	; (800ab58 <prvCheckForValidListAndQueue+0x60>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d005      	beq.n	800ab4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab40:	4b05      	ldr	r3, [pc, #20]	; (800ab58 <prvCheckForValidListAndQueue+0x60>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	490b      	ldr	r1, [pc, #44]	; (800ab74 <prvCheckForValidListAndQueue+0x7c>)
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fe fc22 	bl	8009390 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab4c:	f000 f972 	bl	800ae34 <vPortExitCritical>
}
 800ab50:	bf00      	nop
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	200036a0 	.word	0x200036a0
 800ab5c:	20003670 	.word	0x20003670
 800ab60:	20003684 	.word	0x20003684
 800ab64:	20003698 	.word	0x20003698
 800ab68:	2000369c 	.word	0x2000369c
 800ab6c:	2000374c 	.word	0x2000374c
 800ab70:	200036ac 	.word	0x200036ac
 800ab74:	0800c3a0 	.word	0x0800c3a0

0800ab78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	3b04      	subs	r3, #4
 800ab88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ab90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	3b04      	subs	r3, #4
 800ab96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	f023 0201 	bic.w	r2, r3, #1
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3b04      	subs	r3, #4
 800aba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aba8:	4a0c      	ldr	r2, [pc, #48]	; (800abdc <pxPortInitialiseStack+0x64>)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	3b14      	subs	r3, #20
 800abb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	3b04      	subs	r3, #4
 800abbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f06f 0202 	mvn.w	r2, #2
 800abc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	3b20      	subs	r3, #32
 800abcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800abce:	68fb      	ldr	r3, [r7, #12]
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3714      	adds	r7, #20
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr
 800abdc:	0800abe1 	.word	0x0800abe1

0800abe0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800abe6:	2300      	movs	r3, #0
 800abe8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800abea:	4b12      	ldr	r3, [pc, #72]	; (800ac34 <prvTaskExitError+0x54>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf2:	d00a      	beq.n	800ac0a <prvTaskExitError+0x2a>
	__asm volatile
 800abf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	60fb      	str	r3, [r7, #12]
}
 800ac06:	bf00      	nop
 800ac08:	e7fe      	b.n	800ac08 <prvTaskExitError+0x28>
	__asm volatile
 800ac0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0e:	f383 8811 	msr	BASEPRI, r3
 800ac12:	f3bf 8f6f 	isb	sy
 800ac16:	f3bf 8f4f 	dsb	sy
 800ac1a:	60bb      	str	r3, [r7, #8]
}
 800ac1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac1e:	bf00      	nop
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d0fc      	beq.n	800ac20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac26:	bf00      	nop
 800ac28:	bf00      	nop
 800ac2a:	3714      	adds	r7, #20
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr
 800ac34:	20000358 	.word	0x20000358
	...

0800ac40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac40:	4b07      	ldr	r3, [pc, #28]	; (800ac60 <pxCurrentTCBConst2>)
 800ac42:	6819      	ldr	r1, [r3, #0]
 800ac44:	6808      	ldr	r0, [r1, #0]
 800ac46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac4a:	f380 8809 	msr	PSP, r0
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	f04f 0000 	mov.w	r0, #0
 800ac56:	f380 8811 	msr	BASEPRI, r0
 800ac5a:	4770      	bx	lr
 800ac5c:	f3af 8000 	nop.w

0800ac60 <pxCurrentTCBConst2>:
 800ac60:	20003168 	.word	0x20003168
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac64:	bf00      	nop
 800ac66:	bf00      	nop

0800ac68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac68:	4808      	ldr	r0, [pc, #32]	; (800ac8c <prvPortStartFirstTask+0x24>)
 800ac6a:	6800      	ldr	r0, [r0, #0]
 800ac6c:	6800      	ldr	r0, [r0, #0]
 800ac6e:	f380 8808 	msr	MSP, r0
 800ac72:	f04f 0000 	mov.w	r0, #0
 800ac76:	f380 8814 	msr	CONTROL, r0
 800ac7a:	b662      	cpsie	i
 800ac7c:	b661      	cpsie	f
 800ac7e:	f3bf 8f4f 	dsb	sy
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	df00      	svc	0
 800ac88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ac8a:	bf00      	nop
 800ac8c:	e000ed08 	.word	0xe000ed08

0800ac90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b086      	sub	sp, #24
 800ac94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ac96:	4b46      	ldr	r3, [pc, #280]	; (800adb0 <xPortStartScheduler+0x120>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a46      	ldr	r2, [pc, #280]	; (800adb4 <xPortStartScheduler+0x124>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d10a      	bne.n	800acb6 <xPortStartScheduler+0x26>
	__asm volatile
 800aca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	613b      	str	r3, [r7, #16]
}
 800acb2:	bf00      	nop
 800acb4:	e7fe      	b.n	800acb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800acb6:	4b3e      	ldr	r3, [pc, #248]	; (800adb0 <xPortStartScheduler+0x120>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a3f      	ldr	r2, [pc, #252]	; (800adb8 <xPortStartScheduler+0x128>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d10a      	bne.n	800acd6 <xPortStartScheduler+0x46>
	__asm volatile
 800acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	60fb      	str	r3, [r7, #12]
}
 800acd2:	bf00      	nop
 800acd4:	e7fe      	b.n	800acd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800acd6:	4b39      	ldr	r3, [pc, #228]	; (800adbc <xPortStartScheduler+0x12c>)
 800acd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	22ff      	movs	r2, #255	; 0xff
 800ace6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	b2db      	uxtb	r3, r3
 800acee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800acf0:	78fb      	ldrb	r3, [r7, #3]
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800acf8:	b2da      	uxtb	r2, r3
 800acfa:	4b31      	ldr	r3, [pc, #196]	; (800adc0 <xPortStartScheduler+0x130>)
 800acfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800acfe:	4b31      	ldr	r3, [pc, #196]	; (800adc4 <xPortStartScheduler+0x134>)
 800ad00:	2207      	movs	r2, #7
 800ad02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad04:	e009      	b.n	800ad1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ad06:	4b2f      	ldr	r3, [pc, #188]	; (800adc4 <xPortStartScheduler+0x134>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	4a2d      	ldr	r2, [pc, #180]	; (800adc4 <xPortStartScheduler+0x134>)
 800ad0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad10:	78fb      	ldrb	r3, [r7, #3]
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	005b      	lsls	r3, r3, #1
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad1a:	78fb      	ldrb	r3, [r7, #3]
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad22:	2b80      	cmp	r3, #128	; 0x80
 800ad24:	d0ef      	beq.n	800ad06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad26:	4b27      	ldr	r3, [pc, #156]	; (800adc4 <xPortStartScheduler+0x134>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f1c3 0307 	rsb	r3, r3, #7
 800ad2e:	2b04      	cmp	r3, #4
 800ad30:	d00a      	beq.n	800ad48 <xPortStartScheduler+0xb8>
	__asm volatile
 800ad32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad36:	f383 8811 	msr	BASEPRI, r3
 800ad3a:	f3bf 8f6f 	isb	sy
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	60bb      	str	r3, [r7, #8]
}
 800ad44:	bf00      	nop
 800ad46:	e7fe      	b.n	800ad46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad48:	4b1e      	ldr	r3, [pc, #120]	; (800adc4 <xPortStartScheduler+0x134>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	021b      	lsls	r3, r3, #8
 800ad4e:	4a1d      	ldr	r2, [pc, #116]	; (800adc4 <xPortStartScheduler+0x134>)
 800ad50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad52:	4b1c      	ldr	r3, [pc, #112]	; (800adc4 <xPortStartScheduler+0x134>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad5a:	4a1a      	ldr	r2, [pc, #104]	; (800adc4 <xPortStartScheduler+0x134>)
 800ad5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad66:	4b18      	ldr	r3, [pc, #96]	; (800adc8 <xPortStartScheduler+0x138>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a17      	ldr	r2, [pc, #92]	; (800adc8 <xPortStartScheduler+0x138>)
 800ad6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad72:	4b15      	ldr	r3, [pc, #84]	; (800adc8 <xPortStartScheduler+0x138>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a14      	ldr	r2, [pc, #80]	; (800adc8 <xPortStartScheduler+0x138>)
 800ad78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ad7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad7e:	f000 f8dd 	bl	800af3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad82:	4b12      	ldr	r3, [pc, #72]	; (800adcc <xPortStartScheduler+0x13c>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ad88:	f000 f8fc 	bl	800af84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ad8c:	4b10      	ldr	r3, [pc, #64]	; (800add0 <xPortStartScheduler+0x140>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a0f      	ldr	r2, [pc, #60]	; (800add0 <xPortStartScheduler+0x140>)
 800ad92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ad96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ad98:	f7ff ff66 	bl	800ac68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ad9c:	f7fe ff2e 	bl	8009bfc <vTaskSwitchContext>
	prvTaskExitError();
 800ada0:	f7ff ff1e 	bl	800abe0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3718      	adds	r7, #24
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	e000ed00 	.word	0xe000ed00
 800adb4:	410fc271 	.word	0x410fc271
 800adb8:	410fc270 	.word	0x410fc270
 800adbc:	e000e400 	.word	0xe000e400
 800adc0:	2000379c 	.word	0x2000379c
 800adc4:	200037a0 	.word	0x200037a0
 800adc8:	e000ed20 	.word	0xe000ed20
 800adcc:	20000358 	.word	0x20000358
 800add0:	e000ef34 	.word	0xe000ef34

0800add4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
	__asm volatile
 800adda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adde:	f383 8811 	msr	BASEPRI, r3
 800ade2:	f3bf 8f6f 	isb	sy
 800ade6:	f3bf 8f4f 	dsb	sy
 800adea:	607b      	str	r3, [r7, #4]
}
 800adec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800adee:	4b0f      	ldr	r3, [pc, #60]	; (800ae2c <vPortEnterCritical+0x58>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	3301      	adds	r3, #1
 800adf4:	4a0d      	ldr	r2, [pc, #52]	; (800ae2c <vPortEnterCritical+0x58>)
 800adf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800adf8:	4b0c      	ldr	r3, [pc, #48]	; (800ae2c <vPortEnterCritical+0x58>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d10f      	bne.n	800ae20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae00:	4b0b      	ldr	r3, [pc, #44]	; (800ae30 <vPortEnterCritical+0x5c>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00a      	beq.n	800ae20 <vPortEnterCritical+0x4c>
	__asm volatile
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	603b      	str	r3, [r7, #0]
}
 800ae1c:	bf00      	nop
 800ae1e:	e7fe      	b.n	800ae1e <vPortEnterCritical+0x4a>
	}
}
 800ae20:	bf00      	nop
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr
 800ae2c:	20000358 	.word	0x20000358
 800ae30:	e000ed04 	.word	0xe000ed04

0800ae34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae3a:	4b12      	ldr	r3, [pc, #72]	; (800ae84 <vPortExitCritical+0x50>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d10a      	bne.n	800ae58 <vPortExitCritical+0x24>
	__asm volatile
 800ae42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae46:	f383 8811 	msr	BASEPRI, r3
 800ae4a:	f3bf 8f6f 	isb	sy
 800ae4e:	f3bf 8f4f 	dsb	sy
 800ae52:	607b      	str	r3, [r7, #4]
}
 800ae54:	bf00      	nop
 800ae56:	e7fe      	b.n	800ae56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae58:	4b0a      	ldr	r3, [pc, #40]	; (800ae84 <vPortExitCritical+0x50>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	4a09      	ldr	r2, [pc, #36]	; (800ae84 <vPortExitCritical+0x50>)
 800ae60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae62:	4b08      	ldr	r3, [pc, #32]	; (800ae84 <vPortExitCritical+0x50>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d105      	bne.n	800ae76 <vPortExitCritical+0x42>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	f383 8811 	msr	BASEPRI, r3
}
 800ae74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae76:	bf00      	nop
 800ae78:	370c      	adds	r7, #12
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	20000358 	.word	0x20000358
	...

0800ae90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae90:	f3ef 8009 	mrs	r0, PSP
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	4b15      	ldr	r3, [pc, #84]	; (800aef0 <pxCurrentTCBConst>)
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	f01e 0f10 	tst.w	lr, #16
 800aea0:	bf08      	it	eq
 800aea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeaa:	6010      	str	r0, [r2, #0]
 800aeac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aeb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aeb4:	f380 8811 	msr	BASEPRI, r0
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	f3bf 8f6f 	isb	sy
 800aec0:	f7fe fe9c 	bl	8009bfc <vTaskSwitchContext>
 800aec4:	f04f 0000 	mov.w	r0, #0
 800aec8:	f380 8811 	msr	BASEPRI, r0
 800aecc:	bc09      	pop	{r0, r3}
 800aece:	6819      	ldr	r1, [r3, #0]
 800aed0:	6808      	ldr	r0, [r1, #0]
 800aed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed6:	f01e 0f10 	tst.w	lr, #16
 800aeda:	bf08      	it	eq
 800aedc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aee0:	f380 8809 	msr	PSP, r0
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	f3af 8000 	nop.w

0800aef0 <pxCurrentTCBConst>:
 800aef0:	20003168 	.word	0x20003168
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aef4:	bf00      	nop
 800aef6:	bf00      	nop

0800aef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
	__asm volatile
 800aefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af02:	f383 8811 	msr	BASEPRI, r3
 800af06:	f3bf 8f6f 	isb	sy
 800af0a:	f3bf 8f4f 	dsb	sy
 800af0e:	607b      	str	r3, [r7, #4]
}
 800af10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af12:	f7fe fdb9 	bl	8009a88 <xTaskIncrementTick>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d003      	beq.n	800af24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af1c:	4b06      	ldr	r3, [pc, #24]	; (800af38 <xPortSysTickHandler+0x40>)
 800af1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	2300      	movs	r3, #0
 800af26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	f383 8811 	msr	BASEPRI, r3
}
 800af2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af30:	bf00      	nop
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	e000ed04 	.word	0xe000ed04

0800af3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af3c:	b480      	push	{r7}
 800af3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af40:	4b0b      	ldr	r3, [pc, #44]	; (800af70 <vPortSetupTimerInterrupt+0x34>)
 800af42:	2200      	movs	r2, #0
 800af44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af46:	4b0b      	ldr	r3, [pc, #44]	; (800af74 <vPortSetupTimerInterrupt+0x38>)
 800af48:	2200      	movs	r2, #0
 800af4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af4c:	4b0a      	ldr	r3, [pc, #40]	; (800af78 <vPortSetupTimerInterrupt+0x3c>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a0a      	ldr	r2, [pc, #40]	; (800af7c <vPortSetupTimerInterrupt+0x40>)
 800af52:	fba2 2303 	umull	r2, r3, r2, r3
 800af56:	099b      	lsrs	r3, r3, #6
 800af58:	4a09      	ldr	r2, [pc, #36]	; (800af80 <vPortSetupTimerInterrupt+0x44>)
 800af5a:	3b01      	subs	r3, #1
 800af5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af5e:	4b04      	ldr	r3, [pc, #16]	; (800af70 <vPortSetupTimerInterrupt+0x34>)
 800af60:	2207      	movs	r2, #7
 800af62:	601a      	str	r2, [r3, #0]
}
 800af64:	bf00      	nop
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	e000e010 	.word	0xe000e010
 800af74:	e000e018 	.word	0xe000e018
 800af78:	20000344 	.word	0x20000344
 800af7c:	10624dd3 	.word	0x10624dd3
 800af80:	e000e014 	.word	0xe000e014

0800af84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800af84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800af94 <vPortEnableVFP+0x10>
 800af88:	6801      	ldr	r1, [r0, #0]
 800af8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800af8e:	6001      	str	r1, [r0, #0]
 800af90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800af92:	bf00      	nop
 800af94:	e000ed88 	.word	0xe000ed88

0800af98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800af9e:	f3ef 8305 	mrs	r3, IPSR
 800afa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2b0f      	cmp	r3, #15
 800afa8:	d914      	bls.n	800afd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800afaa:	4a17      	ldr	r2, [pc, #92]	; (800b008 <vPortValidateInterruptPriority+0x70>)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	4413      	add	r3, r2
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800afb4:	4b15      	ldr	r3, [pc, #84]	; (800b00c <vPortValidateInterruptPriority+0x74>)
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	7afa      	ldrb	r2, [r7, #11]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d20a      	bcs.n	800afd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	607b      	str	r3, [r7, #4]
}
 800afd0:	bf00      	nop
 800afd2:	e7fe      	b.n	800afd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800afd4:	4b0e      	ldr	r3, [pc, #56]	; (800b010 <vPortValidateInterruptPriority+0x78>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800afdc:	4b0d      	ldr	r3, [pc, #52]	; (800b014 <vPortValidateInterruptPriority+0x7c>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d90a      	bls.n	800affa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800afe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe8:	f383 8811 	msr	BASEPRI, r3
 800afec:	f3bf 8f6f 	isb	sy
 800aff0:	f3bf 8f4f 	dsb	sy
 800aff4:	603b      	str	r3, [r7, #0]
}
 800aff6:	bf00      	nop
 800aff8:	e7fe      	b.n	800aff8 <vPortValidateInterruptPriority+0x60>
	}
 800affa:	bf00      	nop
 800affc:	3714      	adds	r7, #20
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	e000e3f0 	.word	0xe000e3f0
 800b00c:	2000379c 	.word	0x2000379c
 800b010:	e000ed0c 	.word	0xe000ed0c
 800b014:	200037a0 	.word	0x200037a0

0800b018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b08a      	sub	sp, #40	; 0x28
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b020:	2300      	movs	r3, #0
 800b022:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b024:	f7fe fc74 	bl	8009910 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b028:	4b5b      	ldr	r3, [pc, #364]	; (800b198 <pvPortMalloc+0x180>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d101      	bne.n	800b034 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b030:	f000 f920 	bl	800b274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b034:	4b59      	ldr	r3, [pc, #356]	; (800b19c <pvPortMalloc+0x184>)
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4013      	ands	r3, r2
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	f040 8093 	bne.w	800b168 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d01d      	beq.n	800b084 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b048:	2208      	movs	r2, #8
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4413      	add	r3, r2
 800b04e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f003 0307 	and.w	r3, r3, #7
 800b056:	2b00      	cmp	r3, #0
 800b058:	d014      	beq.n	800b084 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f023 0307 	bic.w	r3, r3, #7
 800b060:	3308      	adds	r3, #8
 800b062:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f003 0307 	and.w	r3, r3, #7
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00a      	beq.n	800b084 <pvPortMalloc+0x6c>
	__asm volatile
 800b06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b072:	f383 8811 	msr	BASEPRI, r3
 800b076:	f3bf 8f6f 	isb	sy
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	617b      	str	r3, [r7, #20]
}
 800b080:	bf00      	nop
 800b082:	e7fe      	b.n	800b082 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d06e      	beq.n	800b168 <pvPortMalloc+0x150>
 800b08a:	4b45      	ldr	r3, [pc, #276]	; (800b1a0 <pvPortMalloc+0x188>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	429a      	cmp	r2, r3
 800b092:	d869      	bhi.n	800b168 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b094:	4b43      	ldr	r3, [pc, #268]	; (800b1a4 <pvPortMalloc+0x18c>)
 800b096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b098:	4b42      	ldr	r3, [pc, #264]	; (800b1a4 <pvPortMalloc+0x18c>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b09e:	e004      	b.n	800b0aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d903      	bls.n	800b0bc <pvPortMalloc+0xa4>
 800b0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1f1      	bne.n	800b0a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b0bc:	4b36      	ldr	r3, [pc, #216]	; (800b198 <pvPortMalloc+0x180>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d050      	beq.n	800b168 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b0c6:	6a3b      	ldr	r3, [r7, #32]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2208      	movs	r2, #8
 800b0cc:	4413      	add	r3, r2
 800b0ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	6a3b      	ldr	r3, [r7, #32]
 800b0d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0da:	685a      	ldr	r2, [r3, #4]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	1ad2      	subs	r2, r2, r3
 800b0e0:	2308      	movs	r3, #8
 800b0e2:	005b      	lsls	r3, r3, #1
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d91f      	bls.n	800b128 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b0e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	f003 0307 	and.w	r3, r3, #7
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00a      	beq.n	800b110 <pvPortMalloc+0xf8>
	__asm volatile
 800b0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fe:	f383 8811 	msr	BASEPRI, r3
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	f3bf 8f4f 	dsb	sy
 800b10a:	613b      	str	r3, [r7, #16]
}
 800b10c:	bf00      	nop
 800b10e:	e7fe      	b.n	800b10e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	1ad2      	subs	r2, r2, r3
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b122:	69b8      	ldr	r0, [r7, #24]
 800b124:	f000 f908 	bl	800b338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b128:	4b1d      	ldr	r3, [pc, #116]	; (800b1a0 <pvPortMalloc+0x188>)
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	4a1b      	ldr	r2, [pc, #108]	; (800b1a0 <pvPortMalloc+0x188>)
 800b134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b136:	4b1a      	ldr	r3, [pc, #104]	; (800b1a0 <pvPortMalloc+0x188>)
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	4b1b      	ldr	r3, [pc, #108]	; (800b1a8 <pvPortMalloc+0x190>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d203      	bcs.n	800b14a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b142:	4b17      	ldr	r3, [pc, #92]	; (800b1a0 <pvPortMalloc+0x188>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a18      	ldr	r2, [pc, #96]	; (800b1a8 <pvPortMalloc+0x190>)
 800b148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14c:	685a      	ldr	r2, [r3, #4]
 800b14e:	4b13      	ldr	r3, [pc, #76]	; (800b19c <pvPortMalloc+0x184>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	431a      	orrs	r2, r3
 800b154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15a:	2200      	movs	r2, #0
 800b15c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b15e:	4b13      	ldr	r3, [pc, #76]	; (800b1ac <pvPortMalloc+0x194>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	3301      	adds	r3, #1
 800b164:	4a11      	ldr	r2, [pc, #68]	; (800b1ac <pvPortMalloc+0x194>)
 800b166:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b168:	f7fe fbe0 	bl	800992c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	f003 0307 	and.w	r3, r3, #7
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00a      	beq.n	800b18c <pvPortMalloc+0x174>
	__asm volatile
 800b176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17a:	f383 8811 	msr	BASEPRI, r3
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	60fb      	str	r3, [r7, #12]
}
 800b188:	bf00      	nop
 800b18a:	e7fe      	b.n	800b18a <pvPortMalloc+0x172>
	return pvReturn;
 800b18c:	69fb      	ldr	r3, [r7, #28]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3728      	adds	r7, #40	; 0x28
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	20004364 	.word	0x20004364
 800b19c:	20004378 	.word	0x20004378
 800b1a0:	20004368 	.word	0x20004368
 800b1a4:	2000435c 	.word	0x2000435c
 800b1a8:	2000436c 	.word	0x2000436c
 800b1ac:	20004370 	.word	0x20004370

0800b1b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d04d      	beq.n	800b25e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b1c2:	2308      	movs	r3, #8
 800b1c4:	425b      	negs	r3, r3
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	685a      	ldr	r2, [r3, #4]
 800b1d4:	4b24      	ldr	r3, [pc, #144]	; (800b268 <vPortFree+0xb8>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4013      	ands	r3, r2
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10a      	bne.n	800b1f4 <vPortFree+0x44>
	__asm volatile
 800b1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	60fb      	str	r3, [r7, #12]
}
 800b1f0:	bf00      	nop
 800b1f2:	e7fe      	b.n	800b1f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00a      	beq.n	800b212 <vPortFree+0x62>
	__asm volatile
 800b1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b200:	f383 8811 	msr	BASEPRI, r3
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	60bb      	str	r3, [r7, #8]
}
 800b20e:	bf00      	nop
 800b210:	e7fe      	b.n	800b210 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	685a      	ldr	r2, [r3, #4]
 800b216:	4b14      	ldr	r3, [pc, #80]	; (800b268 <vPortFree+0xb8>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4013      	ands	r3, r2
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d01e      	beq.n	800b25e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d11a      	bne.n	800b25e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	4b0e      	ldr	r3, [pc, #56]	; (800b268 <vPortFree+0xb8>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	43db      	mvns	r3, r3
 800b232:	401a      	ands	r2, r3
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b238:	f7fe fb6a 	bl	8009910 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	685a      	ldr	r2, [r3, #4]
 800b240:	4b0a      	ldr	r3, [pc, #40]	; (800b26c <vPortFree+0xbc>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4413      	add	r3, r2
 800b246:	4a09      	ldr	r2, [pc, #36]	; (800b26c <vPortFree+0xbc>)
 800b248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b24a:	6938      	ldr	r0, [r7, #16]
 800b24c:	f000 f874 	bl	800b338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b250:	4b07      	ldr	r3, [pc, #28]	; (800b270 <vPortFree+0xc0>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	3301      	adds	r3, #1
 800b256:	4a06      	ldr	r2, [pc, #24]	; (800b270 <vPortFree+0xc0>)
 800b258:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b25a:	f7fe fb67 	bl	800992c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b25e:	bf00      	nop
 800b260:	3718      	adds	r7, #24
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	20004378 	.word	0x20004378
 800b26c:	20004368 	.word	0x20004368
 800b270:	20004374 	.word	0x20004374

0800b274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b27a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800b27e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b280:	4b27      	ldr	r3, [pc, #156]	; (800b320 <prvHeapInit+0xac>)
 800b282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f003 0307 	and.w	r3, r3, #7
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00c      	beq.n	800b2a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	3307      	adds	r3, #7
 800b292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f023 0307 	bic.w	r3, r3, #7
 800b29a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b29c:	68ba      	ldr	r2, [r7, #8]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	4a1f      	ldr	r2, [pc, #124]	; (800b320 <prvHeapInit+0xac>)
 800b2a4:	4413      	add	r3, r2
 800b2a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b2ac:	4a1d      	ldr	r2, [pc, #116]	; (800b324 <prvHeapInit+0xb0>)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b2b2:	4b1c      	ldr	r3, [pc, #112]	; (800b324 <prvHeapInit+0xb0>)
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	4413      	add	r3, r2
 800b2be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b2c0:	2208      	movs	r2, #8
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	1a9b      	subs	r3, r3, r2
 800b2c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f023 0307 	bic.w	r3, r3, #7
 800b2ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	4a15      	ldr	r2, [pc, #84]	; (800b328 <prvHeapInit+0xb4>)
 800b2d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b2d6:	4b14      	ldr	r3, [pc, #80]	; (800b328 <prvHeapInit+0xb4>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b2de:	4b12      	ldr	r3, [pc, #72]	; (800b328 <prvHeapInit+0xb4>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	1ad2      	subs	r2, r2, r3
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b2f4:	4b0c      	ldr	r3, [pc, #48]	; (800b328 <prvHeapInit+0xb4>)
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	4a0a      	ldr	r2, [pc, #40]	; (800b32c <prvHeapInit+0xb8>)
 800b302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	4a09      	ldr	r2, [pc, #36]	; (800b330 <prvHeapInit+0xbc>)
 800b30a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b30c:	4b09      	ldr	r3, [pc, #36]	; (800b334 <prvHeapInit+0xc0>)
 800b30e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b312:	601a      	str	r2, [r3, #0]
}
 800b314:	bf00      	nop
 800b316:	3714      	adds	r7, #20
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr
 800b320:	200037a4 	.word	0x200037a4
 800b324:	2000435c 	.word	0x2000435c
 800b328:	20004364 	.word	0x20004364
 800b32c:	2000436c 	.word	0x2000436c
 800b330:	20004368 	.word	0x20004368
 800b334:	20004378 	.word	0x20004378

0800b338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b340:	4b28      	ldr	r3, [pc, #160]	; (800b3e4 <prvInsertBlockIntoFreeList+0xac>)
 800b342:	60fb      	str	r3, [r7, #12]
 800b344:	e002      	b.n	800b34c <prvInsertBlockIntoFreeList+0x14>
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	60fb      	str	r3, [r7, #12]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	429a      	cmp	r2, r3
 800b354:	d8f7      	bhi.n	800b346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	68ba      	ldr	r2, [r7, #8]
 800b360:	4413      	add	r3, r2
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	429a      	cmp	r2, r3
 800b366:	d108      	bne.n	800b37a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	685a      	ldr	r2, [r3, #4]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	441a      	add	r2, r3
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	68ba      	ldr	r2, [r7, #8]
 800b384:	441a      	add	r2, r3
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d118      	bne.n	800b3c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	4b15      	ldr	r3, [pc, #84]	; (800b3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	429a      	cmp	r2, r3
 800b398:	d00d      	beq.n	800b3b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	685a      	ldr	r2, [r3, #4]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	441a      	add	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	601a      	str	r2, [r3, #0]
 800b3b4:	e008      	b.n	800b3c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b3b6:	4b0c      	ldr	r3, [pc, #48]	; (800b3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	601a      	str	r2, [r3, #0]
 800b3be:	e003      	b.n	800b3c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d002      	beq.n	800b3d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3d6:	bf00      	nop
 800b3d8:	3714      	adds	r7, #20
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	2000435c 	.word	0x2000435c
 800b3e8:	20004364 	.word	0x20004364

0800b3ec <_strtol_l.constprop.0>:
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3f2:	d001      	beq.n	800b3f8 <_strtol_l.constprop.0+0xc>
 800b3f4:	2b24      	cmp	r3, #36	; 0x24
 800b3f6:	d906      	bls.n	800b406 <_strtol_l.constprop.0+0x1a>
 800b3f8:	f000 f91c 	bl	800b634 <__errno>
 800b3fc:	2316      	movs	r3, #22
 800b3fe:	6003      	str	r3, [r0, #0]
 800b400:	2000      	movs	r0, #0
 800b402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b406:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b4ec <_strtol_l.constprop.0+0x100>
 800b40a:	460d      	mov	r5, r1
 800b40c:	462e      	mov	r6, r5
 800b40e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b412:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b416:	f017 0708 	ands.w	r7, r7, #8
 800b41a:	d1f7      	bne.n	800b40c <_strtol_l.constprop.0+0x20>
 800b41c:	2c2d      	cmp	r4, #45	; 0x2d
 800b41e:	d132      	bne.n	800b486 <_strtol_l.constprop.0+0x9a>
 800b420:	782c      	ldrb	r4, [r5, #0]
 800b422:	2701      	movs	r7, #1
 800b424:	1cb5      	adds	r5, r6, #2
 800b426:	2b00      	cmp	r3, #0
 800b428:	d05b      	beq.n	800b4e2 <_strtol_l.constprop.0+0xf6>
 800b42a:	2b10      	cmp	r3, #16
 800b42c:	d109      	bne.n	800b442 <_strtol_l.constprop.0+0x56>
 800b42e:	2c30      	cmp	r4, #48	; 0x30
 800b430:	d107      	bne.n	800b442 <_strtol_l.constprop.0+0x56>
 800b432:	782c      	ldrb	r4, [r5, #0]
 800b434:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b438:	2c58      	cmp	r4, #88	; 0x58
 800b43a:	d14d      	bne.n	800b4d8 <_strtol_l.constprop.0+0xec>
 800b43c:	786c      	ldrb	r4, [r5, #1]
 800b43e:	2310      	movs	r3, #16
 800b440:	3502      	adds	r5, #2
 800b442:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b446:	f108 38ff 	add.w	r8, r8, #4294967295
 800b44a:	f04f 0e00 	mov.w	lr, #0
 800b44e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b452:	4676      	mov	r6, lr
 800b454:	fb03 8a19 	mls	sl, r3, r9, r8
 800b458:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b45c:	f1bc 0f09 	cmp.w	ip, #9
 800b460:	d816      	bhi.n	800b490 <_strtol_l.constprop.0+0xa4>
 800b462:	4664      	mov	r4, ip
 800b464:	42a3      	cmp	r3, r4
 800b466:	dd24      	ble.n	800b4b2 <_strtol_l.constprop.0+0xc6>
 800b468:	f1be 3fff 	cmp.w	lr, #4294967295
 800b46c:	d008      	beq.n	800b480 <_strtol_l.constprop.0+0x94>
 800b46e:	45b1      	cmp	r9, r6
 800b470:	d31c      	bcc.n	800b4ac <_strtol_l.constprop.0+0xc0>
 800b472:	d101      	bne.n	800b478 <_strtol_l.constprop.0+0x8c>
 800b474:	45a2      	cmp	sl, r4
 800b476:	db19      	blt.n	800b4ac <_strtol_l.constprop.0+0xc0>
 800b478:	fb06 4603 	mla	r6, r6, r3, r4
 800b47c:	f04f 0e01 	mov.w	lr, #1
 800b480:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b484:	e7e8      	b.n	800b458 <_strtol_l.constprop.0+0x6c>
 800b486:	2c2b      	cmp	r4, #43	; 0x2b
 800b488:	bf04      	itt	eq
 800b48a:	782c      	ldrbeq	r4, [r5, #0]
 800b48c:	1cb5      	addeq	r5, r6, #2
 800b48e:	e7ca      	b.n	800b426 <_strtol_l.constprop.0+0x3a>
 800b490:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b494:	f1bc 0f19 	cmp.w	ip, #25
 800b498:	d801      	bhi.n	800b49e <_strtol_l.constprop.0+0xb2>
 800b49a:	3c37      	subs	r4, #55	; 0x37
 800b49c:	e7e2      	b.n	800b464 <_strtol_l.constprop.0+0x78>
 800b49e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b4a2:	f1bc 0f19 	cmp.w	ip, #25
 800b4a6:	d804      	bhi.n	800b4b2 <_strtol_l.constprop.0+0xc6>
 800b4a8:	3c57      	subs	r4, #87	; 0x57
 800b4aa:	e7db      	b.n	800b464 <_strtol_l.constprop.0+0x78>
 800b4ac:	f04f 3eff 	mov.w	lr, #4294967295
 800b4b0:	e7e6      	b.n	800b480 <_strtol_l.constprop.0+0x94>
 800b4b2:	f1be 3fff 	cmp.w	lr, #4294967295
 800b4b6:	d105      	bne.n	800b4c4 <_strtol_l.constprop.0+0xd8>
 800b4b8:	2322      	movs	r3, #34	; 0x22
 800b4ba:	6003      	str	r3, [r0, #0]
 800b4bc:	4646      	mov	r6, r8
 800b4be:	b942      	cbnz	r2, 800b4d2 <_strtol_l.constprop.0+0xe6>
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	e79e      	b.n	800b402 <_strtol_l.constprop.0+0x16>
 800b4c4:	b107      	cbz	r7, 800b4c8 <_strtol_l.constprop.0+0xdc>
 800b4c6:	4276      	negs	r6, r6
 800b4c8:	2a00      	cmp	r2, #0
 800b4ca:	d0f9      	beq.n	800b4c0 <_strtol_l.constprop.0+0xd4>
 800b4cc:	f1be 0f00 	cmp.w	lr, #0
 800b4d0:	d000      	beq.n	800b4d4 <_strtol_l.constprop.0+0xe8>
 800b4d2:	1e69      	subs	r1, r5, #1
 800b4d4:	6011      	str	r1, [r2, #0]
 800b4d6:	e7f3      	b.n	800b4c0 <_strtol_l.constprop.0+0xd4>
 800b4d8:	2430      	movs	r4, #48	; 0x30
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1b1      	bne.n	800b442 <_strtol_l.constprop.0+0x56>
 800b4de:	2308      	movs	r3, #8
 800b4e0:	e7af      	b.n	800b442 <_strtol_l.constprop.0+0x56>
 800b4e2:	2c30      	cmp	r4, #48	; 0x30
 800b4e4:	d0a5      	beq.n	800b432 <_strtol_l.constprop.0+0x46>
 800b4e6:	230a      	movs	r3, #10
 800b4e8:	e7ab      	b.n	800b442 <_strtol_l.constprop.0+0x56>
 800b4ea:	bf00      	nop
 800b4ec:	0800c54d 	.word	0x0800c54d

0800b4f0 <strtol>:
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	460a      	mov	r2, r1
 800b4f4:	4601      	mov	r1, r0
 800b4f6:	4802      	ldr	r0, [pc, #8]	; (800b500 <strtol+0x10>)
 800b4f8:	6800      	ldr	r0, [r0, #0]
 800b4fa:	f7ff bf77 	b.w	800b3ec <_strtol_l.constprop.0>
 800b4fe:	bf00      	nop
 800b500:	200003a8 	.word	0x200003a8

0800b504 <_vsniprintf_r>:
 800b504:	b530      	push	{r4, r5, lr}
 800b506:	4614      	mov	r4, r2
 800b508:	2c00      	cmp	r4, #0
 800b50a:	b09b      	sub	sp, #108	; 0x6c
 800b50c:	4605      	mov	r5, r0
 800b50e:	461a      	mov	r2, r3
 800b510:	da05      	bge.n	800b51e <_vsniprintf_r+0x1a>
 800b512:	238b      	movs	r3, #139	; 0x8b
 800b514:	6003      	str	r3, [r0, #0]
 800b516:	f04f 30ff 	mov.w	r0, #4294967295
 800b51a:	b01b      	add	sp, #108	; 0x6c
 800b51c:	bd30      	pop	{r4, r5, pc}
 800b51e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b522:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b526:	bf14      	ite	ne
 800b528:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b52c:	4623      	moveq	r3, r4
 800b52e:	9302      	str	r3, [sp, #8]
 800b530:	9305      	str	r3, [sp, #20]
 800b532:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b536:	9100      	str	r1, [sp, #0]
 800b538:	9104      	str	r1, [sp, #16]
 800b53a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b53e:	4669      	mov	r1, sp
 800b540:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b542:	f000 fa0b 	bl	800b95c <_svfiprintf_r>
 800b546:	1c43      	adds	r3, r0, #1
 800b548:	bfbc      	itt	lt
 800b54a:	238b      	movlt	r3, #139	; 0x8b
 800b54c:	602b      	strlt	r3, [r5, #0]
 800b54e:	2c00      	cmp	r4, #0
 800b550:	d0e3      	beq.n	800b51a <_vsniprintf_r+0x16>
 800b552:	9b00      	ldr	r3, [sp, #0]
 800b554:	2200      	movs	r2, #0
 800b556:	701a      	strb	r2, [r3, #0]
 800b558:	e7df      	b.n	800b51a <_vsniprintf_r+0x16>
	...

0800b55c <vsniprintf>:
 800b55c:	b507      	push	{r0, r1, r2, lr}
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	4613      	mov	r3, r2
 800b562:	460a      	mov	r2, r1
 800b564:	4601      	mov	r1, r0
 800b566:	4803      	ldr	r0, [pc, #12]	; (800b574 <vsniprintf+0x18>)
 800b568:	6800      	ldr	r0, [r0, #0]
 800b56a:	f7ff ffcb 	bl	800b504 <_vsniprintf_r>
 800b56e:	b003      	add	sp, #12
 800b570:	f85d fb04 	ldr.w	pc, [sp], #4
 800b574:	200003a8 	.word	0x200003a8

0800b578 <memset>:
 800b578:	4402      	add	r2, r0
 800b57a:	4603      	mov	r3, r0
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d100      	bne.n	800b582 <memset+0xa>
 800b580:	4770      	bx	lr
 800b582:	f803 1b01 	strb.w	r1, [r3], #1
 800b586:	e7f9      	b.n	800b57c <memset+0x4>

0800b588 <_reclaim_reent>:
 800b588:	4b29      	ldr	r3, [pc, #164]	; (800b630 <_reclaim_reent+0xa8>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4283      	cmp	r3, r0
 800b58e:	b570      	push	{r4, r5, r6, lr}
 800b590:	4604      	mov	r4, r0
 800b592:	d04b      	beq.n	800b62c <_reclaim_reent+0xa4>
 800b594:	69c3      	ldr	r3, [r0, #28]
 800b596:	b143      	cbz	r3, 800b5aa <_reclaim_reent+0x22>
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d144      	bne.n	800b628 <_reclaim_reent+0xa0>
 800b59e:	69e3      	ldr	r3, [r4, #28]
 800b5a0:	6819      	ldr	r1, [r3, #0]
 800b5a2:	b111      	cbz	r1, 800b5aa <_reclaim_reent+0x22>
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	f000 f887 	bl	800b6b8 <_free_r>
 800b5aa:	6961      	ldr	r1, [r4, #20]
 800b5ac:	b111      	cbz	r1, 800b5b4 <_reclaim_reent+0x2c>
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f000 f882 	bl	800b6b8 <_free_r>
 800b5b4:	69e1      	ldr	r1, [r4, #28]
 800b5b6:	b111      	cbz	r1, 800b5be <_reclaim_reent+0x36>
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f000 f87d 	bl	800b6b8 <_free_r>
 800b5be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b5c0:	b111      	cbz	r1, 800b5c8 <_reclaim_reent+0x40>
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f000 f878 	bl	800b6b8 <_free_r>
 800b5c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5ca:	b111      	cbz	r1, 800b5d2 <_reclaim_reent+0x4a>
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f000 f873 	bl	800b6b8 <_free_r>
 800b5d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b5d4:	b111      	cbz	r1, 800b5dc <_reclaim_reent+0x54>
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	f000 f86e 	bl	800b6b8 <_free_r>
 800b5dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b5de:	b111      	cbz	r1, 800b5e6 <_reclaim_reent+0x5e>
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f000 f869 	bl	800b6b8 <_free_r>
 800b5e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b5e8:	b111      	cbz	r1, 800b5f0 <_reclaim_reent+0x68>
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f000 f864 	bl	800b6b8 <_free_r>
 800b5f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b5f2:	b111      	cbz	r1, 800b5fa <_reclaim_reent+0x72>
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	f000 f85f 	bl	800b6b8 <_free_r>
 800b5fa:	6a23      	ldr	r3, [r4, #32]
 800b5fc:	b1b3      	cbz	r3, 800b62c <_reclaim_reent+0xa4>
 800b5fe:	4620      	mov	r0, r4
 800b600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b604:	4718      	bx	r3
 800b606:	5949      	ldr	r1, [r1, r5]
 800b608:	b941      	cbnz	r1, 800b61c <_reclaim_reent+0x94>
 800b60a:	3504      	adds	r5, #4
 800b60c:	69e3      	ldr	r3, [r4, #28]
 800b60e:	2d80      	cmp	r5, #128	; 0x80
 800b610:	68d9      	ldr	r1, [r3, #12]
 800b612:	d1f8      	bne.n	800b606 <_reclaim_reent+0x7e>
 800b614:	4620      	mov	r0, r4
 800b616:	f000 f84f 	bl	800b6b8 <_free_r>
 800b61a:	e7c0      	b.n	800b59e <_reclaim_reent+0x16>
 800b61c:	680e      	ldr	r6, [r1, #0]
 800b61e:	4620      	mov	r0, r4
 800b620:	f000 f84a 	bl	800b6b8 <_free_r>
 800b624:	4631      	mov	r1, r6
 800b626:	e7ef      	b.n	800b608 <_reclaim_reent+0x80>
 800b628:	2500      	movs	r5, #0
 800b62a:	e7ef      	b.n	800b60c <_reclaim_reent+0x84>
 800b62c:	bd70      	pop	{r4, r5, r6, pc}
 800b62e:	bf00      	nop
 800b630:	200003a8 	.word	0x200003a8

0800b634 <__errno>:
 800b634:	4b01      	ldr	r3, [pc, #4]	; (800b63c <__errno+0x8>)
 800b636:	6818      	ldr	r0, [r3, #0]
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	200003a8 	.word	0x200003a8

0800b640 <__libc_init_array>:
 800b640:	b570      	push	{r4, r5, r6, lr}
 800b642:	4d0d      	ldr	r5, [pc, #52]	; (800b678 <__libc_init_array+0x38>)
 800b644:	4c0d      	ldr	r4, [pc, #52]	; (800b67c <__libc_init_array+0x3c>)
 800b646:	1b64      	subs	r4, r4, r5
 800b648:	10a4      	asrs	r4, r4, #2
 800b64a:	2600      	movs	r6, #0
 800b64c:	42a6      	cmp	r6, r4
 800b64e:	d109      	bne.n	800b664 <__libc_init_array+0x24>
 800b650:	4d0b      	ldr	r5, [pc, #44]	; (800b680 <__libc_init_array+0x40>)
 800b652:	4c0c      	ldr	r4, [pc, #48]	; (800b684 <__libc_init_array+0x44>)
 800b654:	f000 fcba 	bl	800bfcc <_init>
 800b658:	1b64      	subs	r4, r4, r5
 800b65a:	10a4      	asrs	r4, r4, #2
 800b65c:	2600      	movs	r6, #0
 800b65e:	42a6      	cmp	r6, r4
 800b660:	d105      	bne.n	800b66e <__libc_init_array+0x2e>
 800b662:	bd70      	pop	{r4, r5, r6, pc}
 800b664:	f855 3b04 	ldr.w	r3, [r5], #4
 800b668:	4798      	blx	r3
 800b66a:	3601      	adds	r6, #1
 800b66c:	e7ee      	b.n	800b64c <__libc_init_array+0xc>
 800b66e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b672:	4798      	blx	r3
 800b674:	3601      	adds	r6, #1
 800b676:	e7f2      	b.n	800b65e <__libc_init_array+0x1e>
 800b678:	0800c688 	.word	0x0800c688
 800b67c:	0800c688 	.word	0x0800c688
 800b680:	0800c688 	.word	0x0800c688
 800b684:	0800c68c 	.word	0x0800c68c

0800b688 <__retarget_lock_acquire_recursive>:
 800b688:	4770      	bx	lr

0800b68a <__retarget_lock_release_recursive>:
 800b68a:	4770      	bx	lr

0800b68c <strcpy>:
 800b68c:	4603      	mov	r3, r0
 800b68e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b692:	f803 2b01 	strb.w	r2, [r3], #1
 800b696:	2a00      	cmp	r2, #0
 800b698:	d1f9      	bne.n	800b68e <strcpy+0x2>
 800b69a:	4770      	bx	lr

0800b69c <memcpy>:
 800b69c:	440a      	add	r2, r1
 800b69e:	4291      	cmp	r1, r2
 800b6a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6a4:	d100      	bne.n	800b6a8 <memcpy+0xc>
 800b6a6:	4770      	bx	lr
 800b6a8:	b510      	push	{r4, lr}
 800b6aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6b2:	4291      	cmp	r1, r2
 800b6b4:	d1f9      	bne.n	800b6aa <memcpy+0xe>
 800b6b6:	bd10      	pop	{r4, pc}

0800b6b8 <_free_r>:
 800b6b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6ba:	2900      	cmp	r1, #0
 800b6bc:	d044      	beq.n	800b748 <_free_r+0x90>
 800b6be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6c2:	9001      	str	r0, [sp, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f1a1 0404 	sub.w	r4, r1, #4
 800b6ca:	bfb8      	it	lt
 800b6cc:	18e4      	addlt	r4, r4, r3
 800b6ce:	f000 f8df 	bl	800b890 <__malloc_lock>
 800b6d2:	4a1e      	ldr	r2, [pc, #120]	; (800b74c <_free_r+0x94>)
 800b6d4:	9801      	ldr	r0, [sp, #4]
 800b6d6:	6813      	ldr	r3, [r2, #0]
 800b6d8:	b933      	cbnz	r3, 800b6e8 <_free_r+0x30>
 800b6da:	6063      	str	r3, [r4, #4]
 800b6dc:	6014      	str	r4, [r2, #0]
 800b6de:	b003      	add	sp, #12
 800b6e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6e4:	f000 b8da 	b.w	800b89c <__malloc_unlock>
 800b6e8:	42a3      	cmp	r3, r4
 800b6ea:	d908      	bls.n	800b6fe <_free_r+0x46>
 800b6ec:	6825      	ldr	r5, [r4, #0]
 800b6ee:	1961      	adds	r1, r4, r5
 800b6f0:	428b      	cmp	r3, r1
 800b6f2:	bf01      	itttt	eq
 800b6f4:	6819      	ldreq	r1, [r3, #0]
 800b6f6:	685b      	ldreq	r3, [r3, #4]
 800b6f8:	1949      	addeq	r1, r1, r5
 800b6fa:	6021      	streq	r1, [r4, #0]
 800b6fc:	e7ed      	b.n	800b6da <_free_r+0x22>
 800b6fe:	461a      	mov	r2, r3
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	b10b      	cbz	r3, 800b708 <_free_r+0x50>
 800b704:	42a3      	cmp	r3, r4
 800b706:	d9fa      	bls.n	800b6fe <_free_r+0x46>
 800b708:	6811      	ldr	r1, [r2, #0]
 800b70a:	1855      	adds	r5, r2, r1
 800b70c:	42a5      	cmp	r5, r4
 800b70e:	d10b      	bne.n	800b728 <_free_r+0x70>
 800b710:	6824      	ldr	r4, [r4, #0]
 800b712:	4421      	add	r1, r4
 800b714:	1854      	adds	r4, r2, r1
 800b716:	42a3      	cmp	r3, r4
 800b718:	6011      	str	r1, [r2, #0]
 800b71a:	d1e0      	bne.n	800b6de <_free_r+0x26>
 800b71c:	681c      	ldr	r4, [r3, #0]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	6053      	str	r3, [r2, #4]
 800b722:	440c      	add	r4, r1
 800b724:	6014      	str	r4, [r2, #0]
 800b726:	e7da      	b.n	800b6de <_free_r+0x26>
 800b728:	d902      	bls.n	800b730 <_free_r+0x78>
 800b72a:	230c      	movs	r3, #12
 800b72c:	6003      	str	r3, [r0, #0]
 800b72e:	e7d6      	b.n	800b6de <_free_r+0x26>
 800b730:	6825      	ldr	r5, [r4, #0]
 800b732:	1961      	adds	r1, r4, r5
 800b734:	428b      	cmp	r3, r1
 800b736:	bf04      	itt	eq
 800b738:	6819      	ldreq	r1, [r3, #0]
 800b73a:	685b      	ldreq	r3, [r3, #4]
 800b73c:	6063      	str	r3, [r4, #4]
 800b73e:	bf04      	itt	eq
 800b740:	1949      	addeq	r1, r1, r5
 800b742:	6021      	streq	r1, [r4, #0]
 800b744:	6054      	str	r4, [r2, #4]
 800b746:	e7ca      	b.n	800b6de <_free_r+0x26>
 800b748:	b003      	add	sp, #12
 800b74a:	bd30      	pop	{r4, r5, pc}
 800b74c:	200044bc 	.word	0x200044bc

0800b750 <sbrk_aligned>:
 800b750:	b570      	push	{r4, r5, r6, lr}
 800b752:	4e0e      	ldr	r6, [pc, #56]	; (800b78c <sbrk_aligned+0x3c>)
 800b754:	460c      	mov	r4, r1
 800b756:	6831      	ldr	r1, [r6, #0]
 800b758:	4605      	mov	r5, r0
 800b75a:	b911      	cbnz	r1, 800b762 <sbrk_aligned+0x12>
 800b75c:	f000 fba6 	bl	800beac <_sbrk_r>
 800b760:	6030      	str	r0, [r6, #0]
 800b762:	4621      	mov	r1, r4
 800b764:	4628      	mov	r0, r5
 800b766:	f000 fba1 	bl	800beac <_sbrk_r>
 800b76a:	1c43      	adds	r3, r0, #1
 800b76c:	d00a      	beq.n	800b784 <sbrk_aligned+0x34>
 800b76e:	1cc4      	adds	r4, r0, #3
 800b770:	f024 0403 	bic.w	r4, r4, #3
 800b774:	42a0      	cmp	r0, r4
 800b776:	d007      	beq.n	800b788 <sbrk_aligned+0x38>
 800b778:	1a21      	subs	r1, r4, r0
 800b77a:	4628      	mov	r0, r5
 800b77c:	f000 fb96 	bl	800beac <_sbrk_r>
 800b780:	3001      	adds	r0, #1
 800b782:	d101      	bne.n	800b788 <sbrk_aligned+0x38>
 800b784:	f04f 34ff 	mov.w	r4, #4294967295
 800b788:	4620      	mov	r0, r4
 800b78a:	bd70      	pop	{r4, r5, r6, pc}
 800b78c:	200044c0 	.word	0x200044c0

0800b790 <_malloc_r>:
 800b790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b794:	1ccd      	adds	r5, r1, #3
 800b796:	f025 0503 	bic.w	r5, r5, #3
 800b79a:	3508      	adds	r5, #8
 800b79c:	2d0c      	cmp	r5, #12
 800b79e:	bf38      	it	cc
 800b7a0:	250c      	movcc	r5, #12
 800b7a2:	2d00      	cmp	r5, #0
 800b7a4:	4607      	mov	r7, r0
 800b7a6:	db01      	blt.n	800b7ac <_malloc_r+0x1c>
 800b7a8:	42a9      	cmp	r1, r5
 800b7aa:	d905      	bls.n	800b7b8 <_malloc_r+0x28>
 800b7ac:	230c      	movs	r3, #12
 800b7ae:	603b      	str	r3, [r7, #0]
 800b7b0:	2600      	movs	r6, #0
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b88c <_malloc_r+0xfc>
 800b7bc:	f000 f868 	bl	800b890 <__malloc_lock>
 800b7c0:	f8d8 3000 	ldr.w	r3, [r8]
 800b7c4:	461c      	mov	r4, r3
 800b7c6:	bb5c      	cbnz	r4, 800b820 <_malloc_r+0x90>
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	4638      	mov	r0, r7
 800b7cc:	f7ff ffc0 	bl	800b750 <sbrk_aligned>
 800b7d0:	1c43      	adds	r3, r0, #1
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	d155      	bne.n	800b882 <_malloc_r+0xf2>
 800b7d6:	f8d8 4000 	ldr.w	r4, [r8]
 800b7da:	4626      	mov	r6, r4
 800b7dc:	2e00      	cmp	r6, #0
 800b7de:	d145      	bne.n	800b86c <_malloc_r+0xdc>
 800b7e0:	2c00      	cmp	r4, #0
 800b7e2:	d048      	beq.n	800b876 <_malloc_r+0xe6>
 800b7e4:	6823      	ldr	r3, [r4, #0]
 800b7e6:	4631      	mov	r1, r6
 800b7e8:	4638      	mov	r0, r7
 800b7ea:	eb04 0903 	add.w	r9, r4, r3
 800b7ee:	f000 fb5d 	bl	800beac <_sbrk_r>
 800b7f2:	4581      	cmp	r9, r0
 800b7f4:	d13f      	bne.n	800b876 <_malloc_r+0xe6>
 800b7f6:	6821      	ldr	r1, [r4, #0]
 800b7f8:	1a6d      	subs	r5, r5, r1
 800b7fa:	4629      	mov	r1, r5
 800b7fc:	4638      	mov	r0, r7
 800b7fe:	f7ff ffa7 	bl	800b750 <sbrk_aligned>
 800b802:	3001      	adds	r0, #1
 800b804:	d037      	beq.n	800b876 <_malloc_r+0xe6>
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	442b      	add	r3, r5
 800b80a:	6023      	str	r3, [r4, #0]
 800b80c:	f8d8 3000 	ldr.w	r3, [r8]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d038      	beq.n	800b886 <_malloc_r+0xf6>
 800b814:	685a      	ldr	r2, [r3, #4]
 800b816:	42a2      	cmp	r2, r4
 800b818:	d12b      	bne.n	800b872 <_malloc_r+0xe2>
 800b81a:	2200      	movs	r2, #0
 800b81c:	605a      	str	r2, [r3, #4]
 800b81e:	e00f      	b.n	800b840 <_malloc_r+0xb0>
 800b820:	6822      	ldr	r2, [r4, #0]
 800b822:	1b52      	subs	r2, r2, r5
 800b824:	d41f      	bmi.n	800b866 <_malloc_r+0xd6>
 800b826:	2a0b      	cmp	r2, #11
 800b828:	d917      	bls.n	800b85a <_malloc_r+0xca>
 800b82a:	1961      	adds	r1, r4, r5
 800b82c:	42a3      	cmp	r3, r4
 800b82e:	6025      	str	r5, [r4, #0]
 800b830:	bf18      	it	ne
 800b832:	6059      	strne	r1, [r3, #4]
 800b834:	6863      	ldr	r3, [r4, #4]
 800b836:	bf08      	it	eq
 800b838:	f8c8 1000 	streq.w	r1, [r8]
 800b83c:	5162      	str	r2, [r4, r5]
 800b83e:	604b      	str	r3, [r1, #4]
 800b840:	4638      	mov	r0, r7
 800b842:	f104 060b 	add.w	r6, r4, #11
 800b846:	f000 f829 	bl	800b89c <__malloc_unlock>
 800b84a:	f026 0607 	bic.w	r6, r6, #7
 800b84e:	1d23      	adds	r3, r4, #4
 800b850:	1af2      	subs	r2, r6, r3
 800b852:	d0ae      	beq.n	800b7b2 <_malloc_r+0x22>
 800b854:	1b9b      	subs	r3, r3, r6
 800b856:	50a3      	str	r3, [r4, r2]
 800b858:	e7ab      	b.n	800b7b2 <_malloc_r+0x22>
 800b85a:	42a3      	cmp	r3, r4
 800b85c:	6862      	ldr	r2, [r4, #4]
 800b85e:	d1dd      	bne.n	800b81c <_malloc_r+0x8c>
 800b860:	f8c8 2000 	str.w	r2, [r8]
 800b864:	e7ec      	b.n	800b840 <_malloc_r+0xb0>
 800b866:	4623      	mov	r3, r4
 800b868:	6864      	ldr	r4, [r4, #4]
 800b86a:	e7ac      	b.n	800b7c6 <_malloc_r+0x36>
 800b86c:	4634      	mov	r4, r6
 800b86e:	6876      	ldr	r6, [r6, #4]
 800b870:	e7b4      	b.n	800b7dc <_malloc_r+0x4c>
 800b872:	4613      	mov	r3, r2
 800b874:	e7cc      	b.n	800b810 <_malloc_r+0x80>
 800b876:	230c      	movs	r3, #12
 800b878:	603b      	str	r3, [r7, #0]
 800b87a:	4638      	mov	r0, r7
 800b87c:	f000 f80e 	bl	800b89c <__malloc_unlock>
 800b880:	e797      	b.n	800b7b2 <_malloc_r+0x22>
 800b882:	6025      	str	r5, [r4, #0]
 800b884:	e7dc      	b.n	800b840 <_malloc_r+0xb0>
 800b886:	605b      	str	r3, [r3, #4]
 800b888:	deff      	udf	#255	; 0xff
 800b88a:	bf00      	nop
 800b88c:	200044bc 	.word	0x200044bc

0800b890 <__malloc_lock>:
 800b890:	4801      	ldr	r0, [pc, #4]	; (800b898 <__malloc_lock+0x8>)
 800b892:	f7ff bef9 	b.w	800b688 <__retarget_lock_acquire_recursive>
 800b896:	bf00      	nop
 800b898:	200044b8 	.word	0x200044b8

0800b89c <__malloc_unlock>:
 800b89c:	4801      	ldr	r0, [pc, #4]	; (800b8a4 <__malloc_unlock+0x8>)
 800b89e:	f7ff bef4 	b.w	800b68a <__retarget_lock_release_recursive>
 800b8a2:	bf00      	nop
 800b8a4:	200044b8 	.word	0x200044b8

0800b8a8 <__ssputs_r>:
 800b8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8ac:	688e      	ldr	r6, [r1, #8]
 800b8ae:	461f      	mov	r7, r3
 800b8b0:	42be      	cmp	r6, r7
 800b8b2:	680b      	ldr	r3, [r1, #0]
 800b8b4:	4682      	mov	sl, r0
 800b8b6:	460c      	mov	r4, r1
 800b8b8:	4690      	mov	r8, r2
 800b8ba:	d82c      	bhi.n	800b916 <__ssputs_r+0x6e>
 800b8bc:	898a      	ldrh	r2, [r1, #12]
 800b8be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8c2:	d026      	beq.n	800b912 <__ssputs_r+0x6a>
 800b8c4:	6965      	ldr	r5, [r4, #20]
 800b8c6:	6909      	ldr	r1, [r1, #16]
 800b8c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8cc:	eba3 0901 	sub.w	r9, r3, r1
 800b8d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8d4:	1c7b      	adds	r3, r7, #1
 800b8d6:	444b      	add	r3, r9
 800b8d8:	106d      	asrs	r5, r5, #1
 800b8da:	429d      	cmp	r5, r3
 800b8dc:	bf38      	it	cc
 800b8de:	461d      	movcc	r5, r3
 800b8e0:	0553      	lsls	r3, r2, #21
 800b8e2:	d527      	bpl.n	800b934 <__ssputs_r+0x8c>
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	f7ff ff53 	bl	800b790 <_malloc_r>
 800b8ea:	4606      	mov	r6, r0
 800b8ec:	b360      	cbz	r0, 800b948 <__ssputs_r+0xa0>
 800b8ee:	6921      	ldr	r1, [r4, #16]
 800b8f0:	464a      	mov	r2, r9
 800b8f2:	f7ff fed3 	bl	800b69c <memcpy>
 800b8f6:	89a3      	ldrh	r3, [r4, #12]
 800b8f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b900:	81a3      	strh	r3, [r4, #12]
 800b902:	6126      	str	r6, [r4, #16]
 800b904:	6165      	str	r5, [r4, #20]
 800b906:	444e      	add	r6, r9
 800b908:	eba5 0509 	sub.w	r5, r5, r9
 800b90c:	6026      	str	r6, [r4, #0]
 800b90e:	60a5      	str	r5, [r4, #8]
 800b910:	463e      	mov	r6, r7
 800b912:	42be      	cmp	r6, r7
 800b914:	d900      	bls.n	800b918 <__ssputs_r+0x70>
 800b916:	463e      	mov	r6, r7
 800b918:	6820      	ldr	r0, [r4, #0]
 800b91a:	4632      	mov	r2, r6
 800b91c:	4641      	mov	r1, r8
 800b91e:	f000 faab 	bl	800be78 <memmove>
 800b922:	68a3      	ldr	r3, [r4, #8]
 800b924:	1b9b      	subs	r3, r3, r6
 800b926:	60a3      	str	r3, [r4, #8]
 800b928:	6823      	ldr	r3, [r4, #0]
 800b92a:	4433      	add	r3, r6
 800b92c:	6023      	str	r3, [r4, #0]
 800b92e:	2000      	movs	r0, #0
 800b930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b934:	462a      	mov	r2, r5
 800b936:	f000 fac9 	bl	800becc <_realloc_r>
 800b93a:	4606      	mov	r6, r0
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d1e0      	bne.n	800b902 <__ssputs_r+0x5a>
 800b940:	6921      	ldr	r1, [r4, #16]
 800b942:	4650      	mov	r0, sl
 800b944:	f7ff feb8 	bl	800b6b8 <_free_r>
 800b948:	230c      	movs	r3, #12
 800b94a:	f8ca 3000 	str.w	r3, [sl]
 800b94e:	89a3      	ldrh	r3, [r4, #12]
 800b950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b954:	81a3      	strh	r3, [r4, #12]
 800b956:	f04f 30ff 	mov.w	r0, #4294967295
 800b95a:	e7e9      	b.n	800b930 <__ssputs_r+0x88>

0800b95c <_svfiprintf_r>:
 800b95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b960:	4698      	mov	r8, r3
 800b962:	898b      	ldrh	r3, [r1, #12]
 800b964:	061b      	lsls	r3, r3, #24
 800b966:	b09d      	sub	sp, #116	; 0x74
 800b968:	4607      	mov	r7, r0
 800b96a:	460d      	mov	r5, r1
 800b96c:	4614      	mov	r4, r2
 800b96e:	d50e      	bpl.n	800b98e <_svfiprintf_r+0x32>
 800b970:	690b      	ldr	r3, [r1, #16]
 800b972:	b963      	cbnz	r3, 800b98e <_svfiprintf_r+0x32>
 800b974:	2140      	movs	r1, #64	; 0x40
 800b976:	f7ff ff0b 	bl	800b790 <_malloc_r>
 800b97a:	6028      	str	r0, [r5, #0]
 800b97c:	6128      	str	r0, [r5, #16]
 800b97e:	b920      	cbnz	r0, 800b98a <_svfiprintf_r+0x2e>
 800b980:	230c      	movs	r3, #12
 800b982:	603b      	str	r3, [r7, #0]
 800b984:	f04f 30ff 	mov.w	r0, #4294967295
 800b988:	e0d0      	b.n	800bb2c <_svfiprintf_r+0x1d0>
 800b98a:	2340      	movs	r3, #64	; 0x40
 800b98c:	616b      	str	r3, [r5, #20]
 800b98e:	2300      	movs	r3, #0
 800b990:	9309      	str	r3, [sp, #36]	; 0x24
 800b992:	2320      	movs	r3, #32
 800b994:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b998:	f8cd 800c 	str.w	r8, [sp, #12]
 800b99c:	2330      	movs	r3, #48	; 0x30
 800b99e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bb44 <_svfiprintf_r+0x1e8>
 800b9a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9a6:	f04f 0901 	mov.w	r9, #1
 800b9aa:	4623      	mov	r3, r4
 800b9ac:	469a      	mov	sl, r3
 800b9ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9b2:	b10a      	cbz	r2, 800b9b8 <_svfiprintf_r+0x5c>
 800b9b4:	2a25      	cmp	r2, #37	; 0x25
 800b9b6:	d1f9      	bne.n	800b9ac <_svfiprintf_r+0x50>
 800b9b8:	ebba 0b04 	subs.w	fp, sl, r4
 800b9bc:	d00b      	beq.n	800b9d6 <_svfiprintf_r+0x7a>
 800b9be:	465b      	mov	r3, fp
 800b9c0:	4622      	mov	r2, r4
 800b9c2:	4629      	mov	r1, r5
 800b9c4:	4638      	mov	r0, r7
 800b9c6:	f7ff ff6f 	bl	800b8a8 <__ssputs_r>
 800b9ca:	3001      	adds	r0, #1
 800b9cc:	f000 80a9 	beq.w	800bb22 <_svfiprintf_r+0x1c6>
 800b9d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9d2:	445a      	add	r2, fp
 800b9d4:	9209      	str	r2, [sp, #36]	; 0x24
 800b9d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f000 80a1 	beq.w	800bb22 <_svfiprintf_r+0x1c6>
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b9e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9ea:	f10a 0a01 	add.w	sl, sl, #1
 800b9ee:	9304      	str	r3, [sp, #16]
 800b9f0:	9307      	str	r3, [sp, #28]
 800b9f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9f6:	931a      	str	r3, [sp, #104]	; 0x68
 800b9f8:	4654      	mov	r4, sl
 800b9fa:	2205      	movs	r2, #5
 800b9fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba00:	4850      	ldr	r0, [pc, #320]	; (800bb44 <_svfiprintf_r+0x1e8>)
 800ba02:	f7f4 fbed 	bl	80001e0 <memchr>
 800ba06:	9a04      	ldr	r2, [sp, #16]
 800ba08:	b9d8      	cbnz	r0, 800ba42 <_svfiprintf_r+0xe6>
 800ba0a:	06d0      	lsls	r0, r2, #27
 800ba0c:	bf44      	itt	mi
 800ba0e:	2320      	movmi	r3, #32
 800ba10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba14:	0711      	lsls	r1, r2, #28
 800ba16:	bf44      	itt	mi
 800ba18:	232b      	movmi	r3, #43	; 0x2b
 800ba1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba1e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba22:	2b2a      	cmp	r3, #42	; 0x2a
 800ba24:	d015      	beq.n	800ba52 <_svfiprintf_r+0xf6>
 800ba26:	9a07      	ldr	r2, [sp, #28]
 800ba28:	4654      	mov	r4, sl
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	f04f 0c0a 	mov.w	ip, #10
 800ba30:	4621      	mov	r1, r4
 800ba32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba36:	3b30      	subs	r3, #48	; 0x30
 800ba38:	2b09      	cmp	r3, #9
 800ba3a:	d94d      	bls.n	800bad8 <_svfiprintf_r+0x17c>
 800ba3c:	b1b0      	cbz	r0, 800ba6c <_svfiprintf_r+0x110>
 800ba3e:	9207      	str	r2, [sp, #28]
 800ba40:	e014      	b.n	800ba6c <_svfiprintf_r+0x110>
 800ba42:	eba0 0308 	sub.w	r3, r0, r8
 800ba46:	fa09 f303 	lsl.w	r3, r9, r3
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	9304      	str	r3, [sp, #16]
 800ba4e:	46a2      	mov	sl, r4
 800ba50:	e7d2      	b.n	800b9f8 <_svfiprintf_r+0x9c>
 800ba52:	9b03      	ldr	r3, [sp, #12]
 800ba54:	1d19      	adds	r1, r3, #4
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	9103      	str	r1, [sp, #12]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	bfbb      	ittet	lt
 800ba5e:	425b      	neglt	r3, r3
 800ba60:	f042 0202 	orrlt.w	r2, r2, #2
 800ba64:	9307      	strge	r3, [sp, #28]
 800ba66:	9307      	strlt	r3, [sp, #28]
 800ba68:	bfb8      	it	lt
 800ba6a:	9204      	strlt	r2, [sp, #16]
 800ba6c:	7823      	ldrb	r3, [r4, #0]
 800ba6e:	2b2e      	cmp	r3, #46	; 0x2e
 800ba70:	d10c      	bne.n	800ba8c <_svfiprintf_r+0x130>
 800ba72:	7863      	ldrb	r3, [r4, #1]
 800ba74:	2b2a      	cmp	r3, #42	; 0x2a
 800ba76:	d134      	bne.n	800bae2 <_svfiprintf_r+0x186>
 800ba78:	9b03      	ldr	r3, [sp, #12]
 800ba7a:	1d1a      	adds	r2, r3, #4
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	9203      	str	r2, [sp, #12]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	bfb8      	it	lt
 800ba84:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba88:	3402      	adds	r4, #2
 800ba8a:	9305      	str	r3, [sp, #20]
 800ba8c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bb54 <_svfiprintf_r+0x1f8>
 800ba90:	7821      	ldrb	r1, [r4, #0]
 800ba92:	2203      	movs	r2, #3
 800ba94:	4650      	mov	r0, sl
 800ba96:	f7f4 fba3 	bl	80001e0 <memchr>
 800ba9a:	b138      	cbz	r0, 800baac <_svfiprintf_r+0x150>
 800ba9c:	9b04      	ldr	r3, [sp, #16]
 800ba9e:	eba0 000a 	sub.w	r0, r0, sl
 800baa2:	2240      	movs	r2, #64	; 0x40
 800baa4:	4082      	lsls	r2, r0
 800baa6:	4313      	orrs	r3, r2
 800baa8:	3401      	adds	r4, #1
 800baaa:	9304      	str	r3, [sp, #16]
 800baac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bab0:	4825      	ldr	r0, [pc, #148]	; (800bb48 <_svfiprintf_r+0x1ec>)
 800bab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bab6:	2206      	movs	r2, #6
 800bab8:	f7f4 fb92 	bl	80001e0 <memchr>
 800babc:	2800      	cmp	r0, #0
 800babe:	d038      	beq.n	800bb32 <_svfiprintf_r+0x1d6>
 800bac0:	4b22      	ldr	r3, [pc, #136]	; (800bb4c <_svfiprintf_r+0x1f0>)
 800bac2:	bb1b      	cbnz	r3, 800bb0c <_svfiprintf_r+0x1b0>
 800bac4:	9b03      	ldr	r3, [sp, #12]
 800bac6:	3307      	adds	r3, #7
 800bac8:	f023 0307 	bic.w	r3, r3, #7
 800bacc:	3308      	adds	r3, #8
 800bace:	9303      	str	r3, [sp, #12]
 800bad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bad2:	4433      	add	r3, r6
 800bad4:	9309      	str	r3, [sp, #36]	; 0x24
 800bad6:	e768      	b.n	800b9aa <_svfiprintf_r+0x4e>
 800bad8:	fb0c 3202 	mla	r2, ip, r2, r3
 800badc:	460c      	mov	r4, r1
 800bade:	2001      	movs	r0, #1
 800bae0:	e7a6      	b.n	800ba30 <_svfiprintf_r+0xd4>
 800bae2:	2300      	movs	r3, #0
 800bae4:	3401      	adds	r4, #1
 800bae6:	9305      	str	r3, [sp, #20]
 800bae8:	4619      	mov	r1, r3
 800baea:	f04f 0c0a 	mov.w	ip, #10
 800baee:	4620      	mov	r0, r4
 800baf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baf4:	3a30      	subs	r2, #48	; 0x30
 800baf6:	2a09      	cmp	r2, #9
 800baf8:	d903      	bls.n	800bb02 <_svfiprintf_r+0x1a6>
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d0c6      	beq.n	800ba8c <_svfiprintf_r+0x130>
 800bafe:	9105      	str	r1, [sp, #20]
 800bb00:	e7c4      	b.n	800ba8c <_svfiprintf_r+0x130>
 800bb02:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb06:	4604      	mov	r4, r0
 800bb08:	2301      	movs	r3, #1
 800bb0a:	e7f0      	b.n	800baee <_svfiprintf_r+0x192>
 800bb0c:	ab03      	add	r3, sp, #12
 800bb0e:	9300      	str	r3, [sp, #0]
 800bb10:	462a      	mov	r2, r5
 800bb12:	4b0f      	ldr	r3, [pc, #60]	; (800bb50 <_svfiprintf_r+0x1f4>)
 800bb14:	a904      	add	r1, sp, #16
 800bb16:	4638      	mov	r0, r7
 800bb18:	f3af 8000 	nop.w
 800bb1c:	1c42      	adds	r2, r0, #1
 800bb1e:	4606      	mov	r6, r0
 800bb20:	d1d6      	bne.n	800bad0 <_svfiprintf_r+0x174>
 800bb22:	89ab      	ldrh	r3, [r5, #12]
 800bb24:	065b      	lsls	r3, r3, #25
 800bb26:	f53f af2d 	bmi.w	800b984 <_svfiprintf_r+0x28>
 800bb2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb2c:	b01d      	add	sp, #116	; 0x74
 800bb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb32:	ab03      	add	r3, sp, #12
 800bb34:	9300      	str	r3, [sp, #0]
 800bb36:	462a      	mov	r2, r5
 800bb38:	4b05      	ldr	r3, [pc, #20]	; (800bb50 <_svfiprintf_r+0x1f4>)
 800bb3a:	a904      	add	r1, sp, #16
 800bb3c:	4638      	mov	r0, r7
 800bb3e:	f000 f879 	bl	800bc34 <_printf_i>
 800bb42:	e7eb      	b.n	800bb1c <_svfiprintf_r+0x1c0>
 800bb44:	0800c64d 	.word	0x0800c64d
 800bb48:	0800c657 	.word	0x0800c657
 800bb4c:	00000000 	.word	0x00000000
 800bb50:	0800b8a9 	.word	0x0800b8a9
 800bb54:	0800c653 	.word	0x0800c653

0800bb58 <_printf_common>:
 800bb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb5c:	4616      	mov	r6, r2
 800bb5e:	4699      	mov	r9, r3
 800bb60:	688a      	ldr	r2, [r1, #8]
 800bb62:	690b      	ldr	r3, [r1, #16]
 800bb64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	bfb8      	it	lt
 800bb6c:	4613      	movlt	r3, r2
 800bb6e:	6033      	str	r3, [r6, #0]
 800bb70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb74:	4607      	mov	r7, r0
 800bb76:	460c      	mov	r4, r1
 800bb78:	b10a      	cbz	r2, 800bb7e <_printf_common+0x26>
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	6033      	str	r3, [r6, #0]
 800bb7e:	6823      	ldr	r3, [r4, #0]
 800bb80:	0699      	lsls	r1, r3, #26
 800bb82:	bf42      	ittt	mi
 800bb84:	6833      	ldrmi	r3, [r6, #0]
 800bb86:	3302      	addmi	r3, #2
 800bb88:	6033      	strmi	r3, [r6, #0]
 800bb8a:	6825      	ldr	r5, [r4, #0]
 800bb8c:	f015 0506 	ands.w	r5, r5, #6
 800bb90:	d106      	bne.n	800bba0 <_printf_common+0x48>
 800bb92:	f104 0a19 	add.w	sl, r4, #25
 800bb96:	68e3      	ldr	r3, [r4, #12]
 800bb98:	6832      	ldr	r2, [r6, #0]
 800bb9a:	1a9b      	subs	r3, r3, r2
 800bb9c:	42ab      	cmp	r3, r5
 800bb9e:	dc26      	bgt.n	800bbee <_printf_common+0x96>
 800bba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bba4:	1e13      	subs	r3, r2, #0
 800bba6:	6822      	ldr	r2, [r4, #0]
 800bba8:	bf18      	it	ne
 800bbaa:	2301      	movne	r3, #1
 800bbac:	0692      	lsls	r2, r2, #26
 800bbae:	d42b      	bmi.n	800bc08 <_printf_common+0xb0>
 800bbb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbb4:	4649      	mov	r1, r9
 800bbb6:	4638      	mov	r0, r7
 800bbb8:	47c0      	blx	r8
 800bbba:	3001      	adds	r0, #1
 800bbbc:	d01e      	beq.n	800bbfc <_printf_common+0xa4>
 800bbbe:	6823      	ldr	r3, [r4, #0]
 800bbc0:	6922      	ldr	r2, [r4, #16]
 800bbc2:	f003 0306 	and.w	r3, r3, #6
 800bbc6:	2b04      	cmp	r3, #4
 800bbc8:	bf02      	ittt	eq
 800bbca:	68e5      	ldreq	r5, [r4, #12]
 800bbcc:	6833      	ldreq	r3, [r6, #0]
 800bbce:	1aed      	subeq	r5, r5, r3
 800bbd0:	68a3      	ldr	r3, [r4, #8]
 800bbd2:	bf0c      	ite	eq
 800bbd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbd8:	2500      	movne	r5, #0
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	bfc4      	itt	gt
 800bbde:	1a9b      	subgt	r3, r3, r2
 800bbe0:	18ed      	addgt	r5, r5, r3
 800bbe2:	2600      	movs	r6, #0
 800bbe4:	341a      	adds	r4, #26
 800bbe6:	42b5      	cmp	r5, r6
 800bbe8:	d11a      	bne.n	800bc20 <_printf_common+0xc8>
 800bbea:	2000      	movs	r0, #0
 800bbec:	e008      	b.n	800bc00 <_printf_common+0xa8>
 800bbee:	2301      	movs	r3, #1
 800bbf0:	4652      	mov	r2, sl
 800bbf2:	4649      	mov	r1, r9
 800bbf4:	4638      	mov	r0, r7
 800bbf6:	47c0      	blx	r8
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	d103      	bne.n	800bc04 <_printf_common+0xac>
 800bbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800bc00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc04:	3501      	adds	r5, #1
 800bc06:	e7c6      	b.n	800bb96 <_printf_common+0x3e>
 800bc08:	18e1      	adds	r1, r4, r3
 800bc0a:	1c5a      	adds	r2, r3, #1
 800bc0c:	2030      	movs	r0, #48	; 0x30
 800bc0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc12:	4422      	add	r2, r4
 800bc14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc1c:	3302      	adds	r3, #2
 800bc1e:	e7c7      	b.n	800bbb0 <_printf_common+0x58>
 800bc20:	2301      	movs	r3, #1
 800bc22:	4622      	mov	r2, r4
 800bc24:	4649      	mov	r1, r9
 800bc26:	4638      	mov	r0, r7
 800bc28:	47c0      	blx	r8
 800bc2a:	3001      	adds	r0, #1
 800bc2c:	d0e6      	beq.n	800bbfc <_printf_common+0xa4>
 800bc2e:	3601      	adds	r6, #1
 800bc30:	e7d9      	b.n	800bbe6 <_printf_common+0x8e>
	...

0800bc34 <_printf_i>:
 800bc34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc38:	7e0f      	ldrb	r7, [r1, #24]
 800bc3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc3c:	2f78      	cmp	r7, #120	; 0x78
 800bc3e:	4691      	mov	r9, r2
 800bc40:	4680      	mov	r8, r0
 800bc42:	460c      	mov	r4, r1
 800bc44:	469a      	mov	sl, r3
 800bc46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc4a:	d807      	bhi.n	800bc5c <_printf_i+0x28>
 800bc4c:	2f62      	cmp	r7, #98	; 0x62
 800bc4e:	d80a      	bhi.n	800bc66 <_printf_i+0x32>
 800bc50:	2f00      	cmp	r7, #0
 800bc52:	f000 80d4 	beq.w	800bdfe <_printf_i+0x1ca>
 800bc56:	2f58      	cmp	r7, #88	; 0x58
 800bc58:	f000 80c0 	beq.w	800bddc <_printf_i+0x1a8>
 800bc5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc64:	e03a      	b.n	800bcdc <_printf_i+0xa8>
 800bc66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc6a:	2b15      	cmp	r3, #21
 800bc6c:	d8f6      	bhi.n	800bc5c <_printf_i+0x28>
 800bc6e:	a101      	add	r1, pc, #4	; (adr r1, 800bc74 <_printf_i+0x40>)
 800bc70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc74:	0800bccd 	.word	0x0800bccd
 800bc78:	0800bce1 	.word	0x0800bce1
 800bc7c:	0800bc5d 	.word	0x0800bc5d
 800bc80:	0800bc5d 	.word	0x0800bc5d
 800bc84:	0800bc5d 	.word	0x0800bc5d
 800bc88:	0800bc5d 	.word	0x0800bc5d
 800bc8c:	0800bce1 	.word	0x0800bce1
 800bc90:	0800bc5d 	.word	0x0800bc5d
 800bc94:	0800bc5d 	.word	0x0800bc5d
 800bc98:	0800bc5d 	.word	0x0800bc5d
 800bc9c:	0800bc5d 	.word	0x0800bc5d
 800bca0:	0800bde5 	.word	0x0800bde5
 800bca4:	0800bd0d 	.word	0x0800bd0d
 800bca8:	0800bd9f 	.word	0x0800bd9f
 800bcac:	0800bc5d 	.word	0x0800bc5d
 800bcb0:	0800bc5d 	.word	0x0800bc5d
 800bcb4:	0800be07 	.word	0x0800be07
 800bcb8:	0800bc5d 	.word	0x0800bc5d
 800bcbc:	0800bd0d 	.word	0x0800bd0d
 800bcc0:	0800bc5d 	.word	0x0800bc5d
 800bcc4:	0800bc5d 	.word	0x0800bc5d
 800bcc8:	0800bda7 	.word	0x0800bda7
 800bccc:	682b      	ldr	r3, [r5, #0]
 800bcce:	1d1a      	adds	r2, r3, #4
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	602a      	str	r2, [r5, #0]
 800bcd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e09f      	b.n	800be20 <_printf_i+0x1ec>
 800bce0:	6820      	ldr	r0, [r4, #0]
 800bce2:	682b      	ldr	r3, [r5, #0]
 800bce4:	0607      	lsls	r7, r0, #24
 800bce6:	f103 0104 	add.w	r1, r3, #4
 800bcea:	6029      	str	r1, [r5, #0]
 800bcec:	d501      	bpl.n	800bcf2 <_printf_i+0xbe>
 800bcee:	681e      	ldr	r6, [r3, #0]
 800bcf0:	e003      	b.n	800bcfa <_printf_i+0xc6>
 800bcf2:	0646      	lsls	r6, r0, #25
 800bcf4:	d5fb      	bpl.n	800bcee <_printf_i+0xba>
 800bcf6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bcfa:	2e00      	cmp	r6, #0
 800bcfc:	da03      	bge.n	800bd06 <_printf_i+0xd2>
 800bcfe:	232d      	movs	r3, #45	; 0x2d
 800bd00:	4276      	negs	r6, r6
 800bd02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd06:	485a      	ldr	r0, [pc, #360]	; (800be70 <_printf_i+0x23c>)
 800bd08:	230a      	movs	r3, #10
 800bd0a:	e012      	b.n	800bd32 <_printf_i+0xfe>
 800bd0c:	682b      	ldr	r3, [r5, #0]
 800bd0e:	6820      	ldr	r0, [r4, #0]
 800bd10:	1d19      	adds	r1, r3, #4
 800bd12:	6029      	str	r1, [r5, #0]
 800bd14:	0605      	lsls	r5, r0, #24
 800bd16:	d501      	bpl.n	800bd1c <_printf_i+0xe8>
 800bd18:	681e      	ldr	r6, [r3, #0]
 800bd1a:	e002      	b.n	800bd22 <_printf_i+0xee>
 800bd1c:	0641      	lsls	r1, r0, #25
 800bd1e:	d5fb      	bpl.n	800bd18 <_printf_i+0xe4>
 800bd20:	881e      	ldrh	r6, [r3, #0]
 800bd22:	4853      	ldr	r0, [pc, #332]	; (800be70 <_printf_i+0x23c>)
 800bd24:	2f6f      	cmp	r7, #111	; 0x6f
 800bd26:	bf0c      	ite	eq
 800bd28:	2308      	moveq	r3, #8
 800bd2a:	230a      	movne	r3, #10
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd32:	6865      	ldr	r5, [r4, #4]
 800bd34:	60a5      	str	r5, [r4, #8]
 800bd36:	2d00      	cmp	r5, #0
 800bd38:	bfa2      	ittt	ge
 800bd3a:	6821      	ldrge	r1, [r4, #0]
 800bd3c:	f021 0104 	bicge.w	r1, r1, #4
 800bd40:	6021      	strge	r1, [r4, #0]
 800bd42:	b90e      	cbnz	r6, 800bd48 <_printf_i+0x114>
 800bd44:	2d00      	cmp	r5, #0
 800bd46:	d04b      	beq.n	800bde0 <_printf_i+0x1ac>
 800bd48:	4615      	mov	r5, r2
 800bd4a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd4e:	fb03 6711 	mls	r7, r3, r1, r6
 800bd52:	5dc7      	ldrb	r7, [r0, r7]
 800bd54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd58:	4637      	mov	r7, r6
 800bd5a:	42bb      	cmp	r3, r7
 800bd5c:	460e      	mov	r6, r1
 800bd5e:	d9f4      	bls.n	800bd4a <_printf_i+0x116>
 800bd60:	2b08      	cmp	r3, #8
 800bd62:	d10b      	bne.n	800bd7c <_printf_i+0x148>
 800bd64:	6823      	ldr	r3, [r4, #0]
 800bd66:	07de      	lsls	r6, r3, #31
 800bd68:	d508      	bpl.n	800bd7c <_printf_i+0x148>
 800bd6a:	6923      	ldr	r3, [r4, #16]
 800bd6c:	6861      	ldr	r1, [r4, #4]
 800bd6e:	4299      	cmp	r1, r3
 800bd70:	bfde      	ittt	le
 800bd72:	2330      	movle	r3, #48	; 0x30
 800bd74:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd78:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd7c:	1b52      	subs	r2, r2, r5
 800bd7e:	6122      	str	r2, [r4, #16]
 800bd80:	f8cd a000 	str.w	sl, [sp]
 800bd84:	464b      	mov	r3, r9
 800bd86:	aa03      	add	r2, sp, #12
 800bd88:	4621      	mov	r1, r4
 800bd8a:	4640      	mov	r0, r8
 800bd8c:	f7ff fee4 	bl	800bb58 <_printf_common>
 800bd90:	3001      	adds	r0, #1
 800bd92:	d14a      	bne.n	800be2a <_printf_i+0x1f6>
 800bd94:	f04f 30ff 	mov.w	r0, #4294967295
 800bd98:	b004      	add	sp, #16
 800bd9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd9e:	6823      	ldr	r3, [r4, #0]
 800bda0:	f043 0320 	orr.w	r3, r3, #32
 800bda4:	6023      	str	r3, [r4, #0]
 800bda6:	4833      	ldr	r0, [pc, #204]	; (800be74 <_printf_i+0x240>)
 800bda8:	2778      	movs	r7, #120	; 0x78
 800bdaa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bdae:	6823      	ldr	r3, [r4, #0]
 800bdb0:	6829      	ldr	r1, [r5, #0]
 800bdb2:	061f      	lsls	r7, r3, #24
 800bdb4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bdb8:	d402      	bmi.n	800bdc0 <_printf_i+0x18c>
 800bdba:	065f      	lsls	r7, r3, #25
 800bdbc:	bf48      	it	mi
 800bdbe:	b2b6      	uxthmi	r6, r6
 800bdc0:	07df      	lsls	r7, r3, #31
 800bdc2:	bf48      	it	mi
 800bdc4:	f043 0320 	orrmi.w	r3, r3, #32
 800bdc8:	6029      	str	r1, [r5, #0]
 800bdca:	bf48      	it	mi
 800bdcc:	6023      	strmi	r3, [r4, #0]
 800bdce:	b91e      	cbnz	r6, 800bdd8 <_printf_i+0x1a4>
 800bdd0:	6823      	ldr	r3, [r4, #0]
 800bdd2:	f023 0320 	bic.w	r3, r3, #32
 800bdd6:	6023      	str	r3, [r4, #0]
 800bdd8:	2310      	movs	r3, #16
 800bdda:	e7a7      	b.n	800bd2c <_printf_i+0xf8>
 800bddc:	4824      	ldr	r0, [pc, #144]	; (800be70 <_printf_i+0x23c>)
 800bdde:	e7e4      	b.n	800bdaa <_printf_i+0x176>
 800bde0:	4615      	mov	r5, r2
 800bde2:	e7bd      	b.n	800bd60 <_printf_i+0x12c>
 800bde4:	682b      	ldr	r3, [r5, #0]
 800bde6:	6826      	ldr	r6, [r4, #0]
 800bde8:	6961      	ldr	r1, [r4, #20]
 800bdea:	1d18      	adds	r0, r3, #4
 800bdec:	6028      	str	r0, [r5, #0]
 800bdee:	0635      	lsls	r5, r6, #24
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	d501      	bpl.n	800bdf8 <_printf_i+0x1c4>
 800bdf4:	6019      	str	r1, [r3, #0]
 800bdf6:	e002      	b.n	800bdfe <_printf_i+0x1ca>
 800bdf8:	0670      	lsls	r0, r6, #25
 800bdfa:	d5fb      	bpl.n	800bdf4 <_printf_i+0x1c0>
 800bdfc:	8019      	strh	r1, [r3, #0]
 800bdfe:	2300      	movs	r3, #0
 800be00:	6123      	str	r3, [r4, #16]
 800be02:	4615      	mov	r5, r2
 800be04:	e7bc      	b.n	800bd80 <_printf_i+0x14c>
 800be06:	682b      	ldr	r3, [r5, #0]
 800be08:	1d1a      	adds	r2, r3, #4
 800be0a:	602a      	str	r2, [r5, #0]
 800be0c:	681d      	ldr	r5, [r3, #0]
 800be0e:	6862      	ldr	r2, [r4, #4]
 800be10:	2100      	movs	r1, #0
 800be12:	4628      	mov	r0, r5
 800be14:	f7f4 f9e4 	bl	80001e0 <memchr>
 800be18:	b108      	cbz	r0, 800be1e <_printf_i+0x1ea>
 800be1a:	1b40      	subs	r0, r0, r5
 800be1c:	6060      	str	r0, [r4, #4]
 800be1e:	6863      	ldr	r3, [r4, #4]
 800be20:	6123      	str	r3, [r4, #16]
 800be22:	2300      	movs	r3, #0
 800be24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be28:	e7aa      	b.n	800bd80 <_printf_i+0x14c>
 800be2a:	6923      	ldr	r3, [r4, #16]
 800be2c:	462a      	mov	r2, r5
 800be2e:	4649      	mov	r1, r9
 800be30:	4640      	mov	r0, r8
 800be32:	47d0      	blx	sl
 800be34:	3001      	adds	r0, #1
 800be36:	d0ad      	beq.n	800bd94 <_printf_i+0x160>
 800be38:	6823      	ldr	r3, [r4, #0]
 800be3a:	079b      	lsls	r3, r3, #30
 800be3c:	d413      	bmi.n	800be66 <_printf_i+0x232>
 800be3e:	68e0      	ldr	r0, [r4, #12]
 800be40:	9b03      	ldr	r3, [sp, #12]
 800be42:	4298      	cmp	r0, r3
 800be44:	bfb8      	it	lt
 800be46:	4618      	movlt	r0, r3
 800be48:	e7a6      	b.n	800bd98 <_printf_i+0x164>
 800be4a:	2301      	movs	r3, #1
 800be4c:	4632      	mov	r2, r6
 800be4e:	4649      	mov	r1, r9
 800be50:	4640      	mov	r0, r8
 800be52:	47d0      	blx	sl
 800be54:	3001      	adds	r0, #1
 800be56:	d09d      	beq.n	800bd94 <_printf_i+0x160>
 800be58:	3501      	adds	r5, #1
 800be5a:	68e3      	ldr	r3, [r4, #12]
 800be5c:	9903      	ldr	r1, [sp, #12]
 800be5e:	1a5b      	subs	r3, r3, r1
 800be60:	42ab      	cmp	r3, r5
 800be62:	dcf2      	bgt.n	800be4a <_printf_i+0x216>
 800be64:	e7eb      	b.n	800be3e <_printf_i+0x20a>
 800be66:	2500      	movs	r5, #0
 800be68:	f104 0619 	add.w	r6, r4, #25
 800be6c:	e7f5      	b.n	800be5a <_printf_i+0x226>
 800be6e:	bf00      	nop
 800be70:	0800c65e 	.word	0x0800c65e
 800be74:	0800c66f 	.word	0x0800c66f

0800be78 <memmove>:
 800be78:	4288      	cmp	r0, r1
 800be7a:	b510      	push	{r4, lr}
 800be7c:	eb01 0402 	add.w	r4, r1, r2
 800be80:	d902      	bls.n	800be88 <memmove+0x10>
 800be82:	4284      	cmp	r4, r0
 800be84:	4623      	mov	r3, r4
 800be86:	d807      	bhi.n	800be98 <memmove+0x20>
 800be88:	1e43      	subs	r3, r0, #1
 800be8a:	42a1      	cmp	r1, r4
 800be8c:	d008      	beq.n	800bea0 <memmove+0x28>
 800be8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be96:	e7f8      	b.n	800be8a <memmove+0x12>
 800be98:	4402      	add	r2, r0
 800be9a:	4601      	mov	r1, r0
 800be9c:	428a      	cmp	r2, r1
 800be9e:	d100      	bne.n	800bea2 <memmove+0x2a>
 800bea0:	bd10      	pop	{r4, pc}
 800bea2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bea6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800beaa:	e7f7      	b.n	800be9c <memmove+0x24>

0800beac <_sbrk_r>:
 800beac:	b538      	push	{r3, r4, r5, lr}
 800beae:	4d06      	ldr	r5, [pc, #24]	; (800bec8 <_sbrk_r+0x1c>)
 800beb0:	2300      	movs	r3, #0
 800beb2:	4604      	mov	r4, r0
 800beb4:	4608      	mov	r0, r1
 800beb6:	602b      	str	r3, [r5, #0]
 800beb8:	f7f6 f8c2 	bl	8002040 <_sbrk>
 800bebc:	1c43      	adds	r3, r0, #1
 800bebe:	d102      	bne.n	800bec6 <_sbrk_r+0x1a>
 800bec0:	682b      	ldr	r3, [r5, #0]
 800bec2:	b103      	cbz	r3, 800bec6 <_sbrk_r+0x1a>
 800bec4:	6023      	str	r3, [r4, #0]
 800bec6:	bd38      	pop	{r3, r4, r5, pc}
 800bec8:	200044b4 	.word	0x200044b4

0800becc <_realloc_r>:
 800becc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bed0:	4680      	mov	r8, r0
 800bed2:	4614      	mov	r4, r2
 800bed4:	460e      	mov	r6, r1
 800bed6:	b921      	cbnz	r1, 800bee2 <_realloc_r+0x16>
 800bed8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bedc:	4611      	mov	r1, r2
 800bede:	f7ff bc57 	b.w	800b790 <_malloc_r>
 800bee2:	b92a      	cbnz	r2, 800bef0 <_realloc_r+0x24>
 800bee4:	f7ff fbe8 	bl	800b6b8 <_free_r>
 800bee8:	4625      	mov	r5, r4
 800beea:	4628      	mov	r0, r5
 800beec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef0:	f000 f81b 	bl	800bf2a <_malloc_usable_size_r>
 800bef4:	4284      	cmp	r4, r0
 800bef6:	4607      	mov	r7, r0
 800bef8:	d802      	bhi.n	800bf00 <_realloc_r+0x34>
 800befa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800befe:	d812      	bhi.n	800bf26 <_realloc_r+0x5a>
 800bf00:	4621      	mov	r1, r4
 800bf02:	4640      	mov	r0, r8
 800bf04:	f7ff fc44 	bl	800b790 <_malloc_r>
 800bf08:	4605      	mov	r5, r0
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d0ed      	beq.n	800beea <_realloc_r+0x1e>
 800bf0e:	42bc      	cmp	r4, r7
 800bf10:	4622      	mov	r2, r4
 800bf12:	4631      	mov	r1, r6
 800bf14:	bf28      	it	cs
 800bf16:	463a      	movcs	r2, r7
 800bf18:	f7ff fbc0 	bl	800b69c <memcpy>
 800bf1c:	4631      	mov	r1, r6
 800bf1e:	4640      	mov	r0, r8
 800bf20:	f7ff fbca 	bl	800b6b8 <_free_r>
 800bf24:	e7e1      	b.n	800beea <_realloc_r+0x1e>
 800bf26:	4635      	mov	r5, r6
 800bf28:	e7df      	b.n	800beea <_realloc_r+0x1e>

0800bf2a <_malloc_usable_size_r>:
 800bf2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf2e:	1f18      	subs	r0, r3, #4
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	bfbc      	itt	lt
 800bf34:	580b      	ldrlt	r3, [r1, r0]
 800bf36:	18c0      	addlt	r0, r0, r3
 800bf38:	4770      	bx	lr
	...

0800bf3c <round>:
 800bf3c:	ec53 2b10 	vmov	r2, r3, d0
 800bf40:	b570      	push	{r4, r5, r6, lr}
 800bf42:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800bf46:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800bf4a:	2813      	cmp	r0, #19
 800bf4c:	ee10 5a10 	vmov	r5, s0
 800bf50:	4619      	mov	r1, r3
 800bf52:	dc18      	bgt.n	800bf86 <round+0x4a>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	da09      	bge.n	800bf6c <round+0x30>
 800bf58:	3001      	adds	r0, #1
 800bf5a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800bf5e:	d103      	bne.n	800bf68 <round+0x2c>
 800bf60:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800bf64:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bf68:	2300      	movs	r3, #0
 800bf6a:	e02a      	b.n	800bfc2 <round+0x86>
 800bf6c:	4c16      	ldr	r4, [pc, #88]	; (800bfc8 <round+0x8c>)
 800bf6e:	4104      	asrs	r4, r0
 800bf70:	ea03 0604 	and.w	r6, r3, r4
 800bf74:	4316      	orrs	r6, r2
 800bf76:	d011      	beq.n	800bf9c <round+0x60>
 800bf78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bf7c:	4103      	asrs	r3, r0
 800bf7e:	440b      	add	r3, r1
 800bf80:	ea23 0104 	bic.w	r1, r3, r4
 800bf84:	e7f0      	b.n	800bf68 <round+0x2c>
 800bf86:	2833      	cmp	r0, #51	; 0x33
 800bf88:	dd0b      	ble.n	800bfa2 <round+0x66>
 800bf8a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800bf8e:	d105      	bne.n	800bf9c <round+0x60>
 800bf90:	ee10 0a10 	vmov	r0, s0
 800bf94:	f7f4 f97a 	bl	800028c <__adddf3>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	ec43 2b10 	vmov	d0, r2, r3
 800bfa0:	bd70      	pop	{r4, r5, r6, pc}
 800bfa2:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800bfa6:	f04f 34ff 	mov.w	r4, #4294967295
 800bfaa:	40f4      	lsrs	r4, r6
 800bfac:	4214      	tst	r4, r2
 800bfae:	d0f5      	beq.n	800bf9c <round+0x60>
 800bfb0:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	4083      	lsls	r3, r0
 800bfb8:	195b      	adds	r3, r3, r5
 800bfba:	bf28      	it	cs
 800bfbc:	3101      	addcs	r1, #1
 800bfbe:	ea23 0304 	bic.w	r3, r3, r4
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	e7e9      	b.n	800bf9c <round+0x60>
 800bfc8:	000fffff 	.word	0x000fffff

0800bfcc <_init>:
 800bfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfce:	bf00      	nop
 800bfd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfd2:	bc08      	pop	{r3}
 800bfd4:	469e      	mov	lr, r3
 800bfd6:	4770      	bx	lr

0800bfd8 <_fini>:
 800bfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfda:	bf00      	nop
 800bfdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfde:	bc08      	pop	{r3}
 800bfe0:	469e      	mov	lr, r3
 800bfe2:	4770      	bx	lr
