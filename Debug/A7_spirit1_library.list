
A7_spirit1_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bca4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  0800be34  0800be34  0001be34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c450  0800c450  000203b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c450  0800c450  0001c450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c458  0800c458  000203b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c458  0800c458  0001c458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c45c  0800c45c  0001c45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b0  20000000  0800c460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d14  200003b0  0800c810  000203b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040c4  0800c810  000240c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026814  00000000  00000000  00020423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a06  00000000  00000000  00046c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002310  00000000  00000000  0004c640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ade  00000000  00000000  0004e950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d75d  00000000  00000000  0005042e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000277f6  00000000  00000000  0007db8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f970  00000000  00000000  000a5381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009804  00000000  00000000  001b4cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001be4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003b0 	.word	0x200003b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be1c 	.word	0x0800be1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003b4 	.word	0x200003b4
 80001cc:	0800be1c 	.word	0x0800be1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
return 0;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4b3e      	ldr	r3, [pc, #248]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a3d      	ldr	r2, [pc, #244]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b38      	ldr	r3, [pc, #224]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a37      	ldr	r2, [pc, #220]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b32      	ldr	r3, [pc, #200]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a31      	ldr	r2, [pc, #196]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_onboard_Pin|SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de0:	f003 ff88 	bl	8004cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SPI_CSn_GPIO_Port, SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2140      	movs	r1, #64	; 0x40
 8000de8:	4828      	ldr	r0, [pc, #160]	; (8000e8c <MX_GPIO_Init+0x114>)
 8000dea:	f003 ff83 	bl	8004cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4619      	mov	r1, r3
 8000e04:	4822      	ldr	r0, [pc, #136]	; (8000e90 <MX_GPIO_Init+0x118>)
 8000e06:	f003 fdcb 	bl	80049a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Green_LED_onboard_Pin|SPIRIT1_SDN_Pin;
 8000e0a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4619      	mov	r1, r3
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e26:	f003 fdbb 	bl	80049a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e2e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4814      	ldr	r0, [pc, #80]	; (8000e90 <MX_GPIO_Init+0x118>)
 8000e40:	f003 fdae 	bl	80049a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SPI_CSn_Pin;
 8000e44:	2340      	movs	r3, #64	; 0x40
 8000e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT1_SPI_CSn_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480c      	ldr	r0, [pc, #48]	; (8000e8c <MX_GPIO_Init+0x114>)
 8000e5c:	f003 fda0 	bl	80049a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2106      	movs	r1, #6
 8000e64:	2017      	movs	r0, #23
 8000e66:	f003 fd63 	bl	8004930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e6a:	2017      	movs	r0, #23
 8000e6c:	f003 fd7c 	bl	8004968 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2107      	movs	r1, #7
 8000e74:	2028      	movs	r0, #40	; 0x28
 8000e76:	f003 fd5b 	bl	8004930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e7a:	2028      	movs	r0, #40	; 0x28
 8000e7c:	f003 fd74 	bl	8004968 <HAL_NVIC_EnableIRQ>

}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	48000400 	.word	0x48000400
 8000e90:	48000800 	.word	0x48000800

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	; (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <RTOS_ISR_setPriority>:


TaskHandle_t Task_TXHandler, Task_printUsersHandler, Task_RXHandler, Task_HBHandler;
SemaphoreHandle_t FLAG_SPIRIT;

void RTOS_ISR_setPriority(uint32_t IRQn){
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	HAL_NVIC_SetPriorityGrouping(0);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f003 fcdf 	bl	800491a <HAL_NVIC_SetPriorityGrouping>
	uint32_t lowPriority = NVIC_EncodePriority(0, 10, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	210a      	movs	r1, #10
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff ffc1 	bl	8000ee8 <NVIC_EncodePriority>
 8000f66:	60f8      	str	r0, [r7, #12]
	//DMA1_Channel3_IRQn
	NVIC_SetPriority(IRQn, lowPriority);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	68f9      	ldr	r1, [r7, #12]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff90 	bl	8000e94 <__NVIC_SetPriority>
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <myHAL_UART_printf>:
//    } else {
//        return NULL;  // Indicating the hex is not found
//    }
//}

void myHAL_UART_printf(const char* format, ...) {
 8000f7c:	b40f      	push	{r0, r1, r2, r3}
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, format);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	603b      	str	r3, [r7, #0]

	// Allocate temporary buffer for formatted string
	static char buffer[1024]; // Adjust buffer size as needed
	int formatted_length = vsnprintf(buffer, sizeof(buffer), format, args);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <myHAL_UART_printf+0x48>)
 8000f94:	f00a fab6 	bl	800b504 <vsniprintf>
 8000f98:	6078      	str	r0, [r7, #4]

	// Check for potential buffer overflow (optional)
	if (formatted_length >= sizeof(buffer)) {
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fa0:	d300      	bcc.n	8000fa4 <myHAL_UART_printf+0x28>
		// Handle buffer overflow (e.g., print error message)
		while(1);
 8000fa2:	e7fe      	b.n	8000fa2 <myHAL_UART_printf+0x26>
	} else {
		// Print the formatted string
		HAL_UART_Transmit(&huart2, buffer, formatted_length, HAL_MAX_DELAY);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fac:	4905      	ldr	r1, [pc, #20]	; (8000fc4 <myHAL_UART_printf+0x48>)
 8000fae:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <myHAL_UART_printf+0x4c>)
 8000fb0:	f006 fc52 	bl	8007858 <HAL_UART_Transmit>
	}

	va_end(args);
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fbe:	b004      	add	sp, #16
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20002080 	.word	0x20002080
 8000fc8:	20002538 	.word	0x20002538

08000fcc <myHAL_UART_clear>:

void myHAL_UART_clear(){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
	char clear[] = "\x1B[2J\x1B[0m\x1B[H"; // clear
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <myHAL_UART_clear+0x30>)
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart2, clear, strlen(clear), 100);
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff f8f6 	bl	80001d0 <strlen>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	1d39      	adds	r1, r7, #4
 8000fea:	2364      	movs	r3, #100	; 0x64
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <myHAL_UART_clear+0x34>)
 8000fee:	f006 fc33 	bl	8007858 <HAL_UART_Transmit>

}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	0800bfbc 	.word	0x0800bfbc
 8001000:	20002538 	.word	0x20002538

08001004 <SpiritGotoReadyState>:

void SpiritGotoReadyState(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  static unsigned int i;
  /* Wait for the radio to enter the ready state */
  do {
    /* Go to the ready state */
    if (g_xStatus.MC_STATE == MC_STATE_LOCK) {
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <SpiritGotoReadyState+0x60>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b0f      	cmp	r3, #15
 8001014:	d103      	bne.n	800101e <SpiritGotoReadyState+0x1a>
      SpiritCmdStrobeReady();
 8001016:	2062      	movs	r0, #98	; 0x62
 8001018:	f001 f952 	bl	80022c0 <SpiritCmdStrobeCommand>
 800101c:	e002      	b.n	8001024 <SpiritGotoReadyState+0x20>
    } else {
      SpiritCmdStrobeSabort();
 800101e:	2067      	movs	r0, #103	; 0x67
 8001020:	f001 f94e 	bl	80022c0 <SpiritCmdStrobeCommand>
    }
    /* Delay for state transition */
    for (i = 0; i != 0xFF; i++)
 8001024:	4b10      	ldr	r3, [pc, #64]	; (8001068 <SpiritGotoReadyState+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	e004      	b.n	8001036 <SpiritGotoReadyState+0x32>
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <SpiritGotoReadyState+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <SpiritGotoReadyState+0x64>)
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <SpiritGotoReadyState+0x64>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2bff      	cmp	r3, #255	; 0xff
 800103c:	d1f6      	bne.n	800102c <SpiritGotoReadyState+0x28>
      ;
    /* Update the global status register variable */
    SpiritRefreshStatus();
 800103e:	f003 f9b3 	bl	80043a8 <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <SpiritGotoReadyState+0x60>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b03      	cmp	r3, #3
 800104e:	d1db      	bne.n	8001008 <SpiritGotoReadyState+0x4>

  xSemaphoreGive(FLAG_SPIRIT);
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <SpiritGotoReadyState+0x68>)
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	2300      	movs	r3, #0
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	f007 fb8b 	bl	8008774 <xQueueGenericSend>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200025c8 	.word	0x200025c8
 8001068:	20002480 	.word	0x20002480
 800106c:	200003d8 	.word	0x200003d8

08001070 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
  SpiritIrqs xIrqStatus;
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]

  if (GPIO_Pin != SPIRIT1_GPIO3_Pin){return;}
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	2b80      	cmp	r3, #128	; 0x80
 8001082:	d13b      	bne.n	80010fc <HAL_GPIO_EXTI_Callback+0x8c>

  SpiritIrqGetStatus(&xIrqStatus);
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	4618      	mov	r0, r3
 800108a:	f001 f9e7 	bl	800245c <SpiritIrqGetStatus>


  if (xIrqStatus.IRQ_TX_DATA_SENT)
 800108e:	7b3b      	ldrb	r3, [r7, #12]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d009      	beq.n	80010ae <HAL_GPIO_EXTI_Callback+0x3e>
  {
	  confirm_TX();
 800109a:	f000 f839 	bl	8001110 <confirm_TX>
	  xSemaphoreGiveFromISR(FLAG_SPIRIT, &xHigherPriorityTaskWoken);
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <HAL_GPIO_EXTI_Callback+0x94>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f107 0208 	add.w	r2, r7, #8
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f007 fcfc 	bl	8008aa6 <xQueueGiveFromISR>
  }

  if (xIrqStatus.IRQ_RX_DATA_READY)
 80010ae:	7b3b      	ldrb	r3, [r7, #12]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d009      	beq.n	80010ce <HAL_GPIO_EXTI_Callback+0x5e>
  {
	  get_RX();
 80010ba:	f000 f9b9 	bl	8001430 <get_RX>
	  xSemaphoreGiveFromISR(FLAG_SPIRIT, &xHigherPriorityTaskWoken);
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_GPIO_EXTI_Callback+0x94>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f107 0208 	add.w	r2, r7, #8
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f007 fcec 	bl	8008aa6 <xQueueGiveFromISR>
  if (xIrqStatus.IRQ_RX_DATA_DISC)
  {
//	myHAL_UART_printf("  | || || |_\r\n");
  }

  if (xIrqStatus.IRQ_RX_TIMEOUT){
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <HAL_GPIO_EXTI_Callback+0x70>
	myHAL_UART_printf("timeout\r\n");
 80010da:	480b      	ldr	r0, [pc, #44]	; (8001108 <HAL_GPIO_EXTI_Callback+0x98>)
 80010dc:	f7ff ff4e 	bl	8000f7c <myHAL_UART_printf>
  }

  SpiritIrqClearStatus();
 80010e0:	f001 f9ee 	bl	80024c0 <SpiritIrqClearStatus>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d009      	beq.n	80010fe <HAL_GPIO_EXTI_Callback+0x8e>
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_GPIO_EXTI_Callback+0x9c>)
 80010ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	f3bf 8f4f 	dsb	sy
 80010f6:	f3bf 8f6f 	isb	sy
 80010fa:	e000      	b.n	80010fe <HAL_GPIO_EXTI_Callback+0x8e>
  if (GPIO_Pin != SPIRIT1_GPIO3_Pin){return;}
 80010fc:	bf00      	nop
}
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200003d8 	.word	0x200003d8
 8001108:	0800bfc8 	.word	0x0800bfc8
 800110c:	e000ed04 	.word	0xe000ed04

08001110 <confirm_TX>:

Payload TXq[TX_Q_SIZE];
int currentReadTX;
int currentWriteTX;

void confirm_TX(){
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0

	if(TXq[currentReadTX].type == 4){
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <confirm_TX+0x7c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a1d      	ldr	r2, [pc, #116]	; (8001190 <confirm_TX+0x80>)
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	4413      	add	r3, r2
 800111e:	3301      	adds	r3, #1
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b04      	cmp	r3, #4
 8001124:	d10b      	bne.n	800113e <confirm_TX+0x2e>
	    myHAL_UART_printf("message sent: %s \r\n", TXq[currentReadTX].message);
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <confirm_TX+0x7c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a19      	ldr	r2, [pc, #100]	; (8001190 <confirm_TX+0x80>)
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	4413      	add	r3, r2
 8001130:	3308      	adds	r3, #8
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	4817      	ldr	r0, [pc, #92]	; (8001194 <confirm_TX+0x84>)
 8001138:	f7ff ff20 	bl	8000f7c <myHAL_UART_printf>
 800113c:	e012      	b.n	8001164 <confirm_TX+0x54>
	} else {
	    myHAL_UART_printf("payload sent: type(%d) %s \r\n", TXq[currentReadTX].type, TXq[currentReadTX].user);
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <confirm_TX+0x7c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a13      	ldr	r2, [pc, #76]	; (8001190 <confirm_TX+0x80>)
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	4413      	add	r3, r2
 8001148:	3301      	adds	r3, #1
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <confirm_TX+0x7c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <confirm_TX+0x80>)
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	4413      	add	r3, r2
 8001158:	3304      	adds	r3, #4
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	480e      	ldr	r0, [pc, #56]	; (8001198 <confirm_TX+0x88>)
 8001160:	f7ff ff0c 	bl	8000f7c <myHAL_UART_printf>
	}

	currentReadTX = (++currentReadTX) %TX_Q_SIZE;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <confirm_TX+0x7c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <confirm_TX+0x7c>)
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <confirm_TX+0x7c>)
 8001170:	6819      	ldr	r1, [r3, #0]
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <confirm_TX+0x8c>)
 8001174:	fb83 3201 	smull	r3, r2, r3, r1
 8001178:	17cb      	asrs	r3, r1, #31
 800117a:	1ad2      	subs	r2, r2, r3
 800117c:	4613      	mov	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	1aca      	subs	r2, r1, r3
 8001184:	4b01      	ldr	r3, [pc, #4]	; (800118c <confirm_TX+0x7c>)
 8001186:	601a      	str	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20002010 	.word	0x20002010
 8001190:	20001fe0 	.word	0x20001fe0
 8001194:	0800bfd4 	.word	0x0800bfd4
 8001198:	0800bfe8 	.word	0x0800bfe8
 800119c:	55555556 	.word	0x55555556

080011a0 <Task_TX>:





void Task_TX(void *argument){
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b09d      	sub	sp, #116	; 0x74
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	char loadString[100]; //NOT a string
	while (1)
	{


		  if(TXq[currentReadTX].valid){
 80011a8:	4b3c      	ldr	r3, [pc, #240]	; (800129c <Task_TX+0xfc>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a3c      	ldr	r2, [pc, #240]	; (80012a0 <Task_TX+0x100>)
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	4413      	add	r3, r2
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d06c      	beq.n	8001292 <Task_TX+0xf2>

			  SpiritGotoReadyState(); //interrupt any other thang going down
 80011b8:	f7ff ff24 	bl	8001004 <SpiritGotoReadyState>
			  if(xSemaphoreTake(FLAG_SPIRIT, 10) == 1){
 80011bc:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <Task_TX+0x104>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	210a      	movs	r1, #10
 80011c2:	4618      	mov	r0, r3
 80011c4:	f007 fddc 	bl	8008d80 <xQueueSemaphoreTake>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d161      	bne.n	8001292 <Task_TX+0xf2>

				SpiritPktStackSetDestinationAddress(TXq[currentReadTX].dest);
 80011ce:	4b33      	ldr	r3, [pc, #204]	; (800129c <Task_TX+0xfc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a33      	ldr	r2, [pc, #204]	; (80012a0 <Task_TX+0x100>)
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	4413      	add	r3, r2
 80011d8:	330c      	adds	r3, #12
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 fc47 	bl	8002a70 <SpiritPktCommonSetDestinationAddress>


				uint8_t type = TXq[currentReadTX].type;
 80011e2:	4b2e      	ldr	r3, [pc, #184]	; (800129c <Task_TX+0xfc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a2e      	ldr	r2, [pc, #184]	; (80012a0 <Task_TX+0x100>)
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	4413      	add	r3, r2
 80011ec:	3301      	adds	r3, #1
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				uint16_t len = 1+strlen(myUsername)+1;
 80011f4:	482c      	ldr	r0, [pc, #176]	; (80012a8 <Task_TX+0x108>)
 80011f6:	f7fe ffeb 	bl	80001d0 <strlen>
 80011fa:	4603      	mov	r3, r0
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	3302      	adds	r3, #2
 8001200:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
				loadString[0] = type;
 8001204:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001208:	723b      	strb	r3, [r7, #8]
				strcpy(&loadString[1], myUsername);
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	3301      	adds	r3, #1
 8001210:	4925      	ldr	r1, [pc, #148]	; (80012a8 <Task_TX+0x108>)
 8001212:	4618      	mov	r0, r3
 8001214:	f00a fa1e 	bl	800b654 <strcpy>
				if (type == 4){
 8001218:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800121c:	2b04      	cmp	r3, #4
 800121e:	d128      	bne.n	8001272 <Task_TX+0xd2>
					strcpy(&loadString[strlen(myUsername)+1+1], TXq[currentReadTX].message);
 8001220:	4821      	ldr	r0, [pc, #132]	; (80012a8 <Task_TX+0x108>)
 8001222:	f7fe ffd5 	bl	80001d0 <strlen>
 8001226:	4603      	mov	r3, r0
 8001228:	3302      	adds	r3, #2
 800122a:	f107 0208 	add.w	r2, r7, #8
 800122e:	441a      	add	r2, r3
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <Task_TX+0xfc>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	491a      	ldr	r1, [pc, #104]	; (80012a0 <Task_TX+0x100>)
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	440b      	add	r3, r1
 800123a:	3308      	adds	r3, #8
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4619      	mov	r1, r3
 8001240:	4610      	mov	r0, r2
 8001242:	f00a fa07 	bl	800b654 <strcpy>
					len = 1+ strlen(myUsername)+1+1+strlen(TXq[currentReadTX].message);
 8001246:	4818      	ldr	r0, [pc, #96]	; (80012a8 <Task_TX+0x108>)
 8001248:	f7fe ffc2 	bl	80001d0 <strlen>
 800124c:	4603      	mov	r3, r0
 800124e:	b29c      	uxth	r4, r3
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <Task_TX+0xfc>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <Task_TX+0x100>)
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	4413      	add	r3, r2
 800125a:	3308      	adds	r3, #8
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7fe ffb6 	bl	80001d0 <strlen>
 8001264:	4603      	mov	r3, r0
 8001266:	b29b      	uxth	r3, r3
 8001268:	4423      	add	r3, r4
 800126a:	b29b      	uxth	r3, r3
 800126c:	3303      	adds	r3, #3
 800126e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
				}
				TXq[currentReadTX].valid = 0;
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <Task_TX+0xfc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <Task_TX+0x100>)
 8001278:	011b      	lsls	r3, r3, #4
 800127a:	4413      	add	r3, r2
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
				SPSGRF_StartTx(loadString, len);
 8001280:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001284:	b2da      	uxtb	r2, r3
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fd31 	bl	8001cf4 <SPSGRF_StartTx>
			  }
		//			  vTaskDelay(1000);
		  }

		  vTaskDelay(50);
 8001292:	2032      	movs	r0, #50	; 0x32
 8001294:	f008 f9c2 	bl	800961c <vTaskDelay>
		  if(TXq[currentReadTX].valid){
 8001298:	e786      	b.n	80011a8 <Task_TX+0x8>
 800129a:	bf00      	nop
 800129c:	20002010 	.word	0x20002010
 80012a0:	20001fe0 	.word	0x20001fe0
 80012a4:	200003d8 	.word	0x200003d8
 80012a8:	20000000 	.word	0x20000000

080012ac <printUsersOnline>:
}


//USERS//////////////

void printUsersOnline(){
 80012ac:	b5b0      	push	{r4, r5, r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af02      	add	r7, sp, #8
	TickType_t currentTime = xTaskGetTickCount();
 80012b2:	f008 fb05 	bl	80098c0 <xTaskGetTickCount>
 80012b6:	6038      	str	r0, [r7, #0]
	myHAL_UART_printf("--- Users Online @t=%d:\r\n", (currentTime-startTime)/1000);
 80012b8:	4b2c      	ldr	r3, [pc, #176]	; (800136c <printUsersOnline+0xc0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	4a2b      	ldr	r2, [pc, #172]	; (8001370 <printUsersOnline+0xc4>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	099b      	lsrs	r3, r3, #6
 80012c8:	4619      	mov	r1, r3
 80012ca:	482a      	ldr	r0, [pc, #168]	; (8001374 <printUsersOnline+0xc8>)
 80012cc:	f7ff fe56 	bl	8000f7c <myHAL_UART_printf>
	for (int i = 0; i < 256; i++){
 80012d0:	2300      	movs	r3, #0
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	e041      	b.n	800135a <printUsersOnline+0xae>
		if (usersOnline[i].address != 0){
 80012d6:	4928      	ldr	r1, [pc, #160]	; (8001378 <printUsersOnline+0xcc>)
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	1a9b      	subs	r3, r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	3314      	adds	r3, #20
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d033      	beq.n	8001354 <printUsersOnline+0xa8>
			myHAL_UART_printf("- 0x%x(%d)(%s) seen %d s ago\r\n", usersOnline[i].address, usersOnline[i].address, names[usersOnline[i].address], (currentTime - usersOnline[i].timeLastSeen)/1000);
 80012ec:	4922      	ldr	r1, [pc, #136]	; (8001378 <printUsersOnline+0xcc>)
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	4613      	mov	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	3314      	adds	r3, #20
 80012fc:	6819      	ldr	r1, [r3, #0]
 80012fe:	481e      	ldr	r0, [pc, #120]	; (8001378 <printUsersOnline+0xcc>)
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	1a9b      	subs	r3, r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4403      	add	r3, r0
 800130c:	3314      	adds	r3, #20
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	4c19      	ldr	r4, [pc, #100]	; (8001378 <printUsersOnline+0xcc>)
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	1a9b      	subs	r3, r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4423      	add	r3, r4
 800131e:	3314      	adds	r3, #20
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a16      	ldr	r2, [pc, #88]	; (800137c <printUsersOnline+0xd0>)
 8001324:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001328:	4d13      	ldr	r5, [pc, #76]	; (8001378 <printUsersOnline+0xcc>)
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	1a9b      	subs	r3, r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	442b      	add	r3, r5
 8001336:	3318      	adds	r3, #24
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	1a9b      	subs	r3, r3, r2
 8001340:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <printUsersOnline+0xc4>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	099b      	lsrs	r3, r3, #6
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	4623      	mov	r3, r4
 800134c:	4602      	mov	r2, r0
 800134e:	480c      	ldr	r0, [pc, #48]	; (8001380 <printUsersOnline+0xd4>)
 8001350:	f7ff fe14 	bl	8000f7c <myHAL_UART_printf>
	for (int i = 0; i < 256; i++){
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3301      	adds	r3, #1
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2bff      	cmp	r3, #255	; 0xff
 800135e:	ddba      	ble.n	80012d6 <printUsersOnline+0x2a>
		}
	}
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bdb0      	pop	{r4, r5, r7, pc}
 800136a:	bf00      	nop
 800136c:	200003dc 	.word	0x200003dc
 8001370:	10624dd3 	.word	0x10624dd3
 8001374:	0800c008 	.word	0x0800c008
 8001378:	200003e0 	.word	0x200003e0
 800137c:	20000020 	.word	0x20000020
 8001380:	0800c024 	.word	0x0800c024

08001384 <reapUsers>:

#define USER_DEAD_TIME 110

void reapUsers(){
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
	TickType_t currentTime = xTaskGetTickCount();
 800138a:	f008 fa99 	bl	80098c0 <xTaskGetTickCount>
 800138e:	6038      	str	r0, [r7, #0]
	for (int i = 0; i < 256; i++){
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	e03d      	b.n	8001412 <reapUsers+0x8e>
		if ((usersOnline[i].address != 0)){
 8001396:	4923      	ldr	r1, [pc, #140]	; (8001424 <reapUsers+0xa0>)
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	1a9b      	subs	r3, r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	440b      	add	r3, r1
 80013a4:	3314      	adds	r3, #20
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d02f      	beq.n	800140c <reapUsers+0x88>
			if((currentTime-usersOnline[i].timeLastSeen)/1000 > USER_DEAD_TIME){
 80013ac:	491d      	ldr	r1, [pc, #116]	; (8001424 <reapUsers+0xa0>)
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	1a9b      	subs	r3, r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	3318      	adds	r3, #24
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	1a9b      	subs	r3, r3, r2
 80013c4:	4a18      	ldr	r2, [pc, #96]	; (8001428 <reapUsers+0xa4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d920      	bls.n	800140c <reapUsers+0x88>
				myHAL_UART_printf("reaping user 0x%x\r\n", usersOnline[i].address);
 80013ca:	4916      	ldr	r1, [pc, #88]	; (8001424 <reapUsers+0xa0>)
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	1a9b      	subs	r3, r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	440b      	add	r3, r1
 80013d8:	3314      	adds	r3, #20
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	4813      	ldr	r0, [pc, #76]	; (800142c <reapUsers+0xa8>)
 80013e0:	f7ff fdcc 	bl	8000f7c <myHAL_UART_printf>
				usersOnline[i].address = 0;
 80013e4:	490f      	ldr	r1, [pc, #60]	; (8001424 <reapUsers+0xa0>)
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	1a9b      	subs	r3, r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	3314      	adds	r3, #20
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
				usersOnline[i].timeLastSeen = 0;
 80013f8:	490a      	ldr	r1, [pc, #40]	; (8001424 <reapUsers+0xa0>)
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	1a9b      	subs	r3, r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	3318      	adds	r3, #24
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 256; i++){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3301      	adds	r3, #1
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2bff      	cmp	r3, #255	; 0xff
 8001416:	ddbe      	ble.n	8001396 <reapUsers+0x12>
//				usersOnline[i].username = 0;
			}
		}
	}
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200003e0 	.word	0x200003e0
 8001428:	0001b197 	.word	0x0001b197
 800142c:	0800c044 	.word	0x0800c044

08001430 <get_RX>:
}

//RX//////////////
// This should: determine type of recieved packet, add node to onlinelist, send ACKS, print if message

void get_RX(){
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	b0a1      	sub	sp, #132	; 0x84
 8001434:	af04      	add	r7, sp, #16


	uint8_t sadd = SpiritPktStackGetReceivedSourceAddress();
 8001436:	f001 fb35 	bl	8002aa4 <SpiritPktCommonGetReceivedSourceAddress>
 800143a:	4603      	mov	r3, r0
 800143c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	uint8_t RXpayload[100];

	//for all cases, update node info
	usersOnline[sadd].timeLastSeen = xTaskGetTickCount();
 8001440:	f008 fa3e 	bl	80098c0 <xTaskGetTickCount>
 8001444:	4603      	mov	r3, r0
 8001446:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 800144a:	4618      	mov	r0, r3
 800144c:	4943      	ldr	r1, [pc, #268]	; (800155c <get_RX+0x12c>)
 800144e:	4613      	mov	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	1a9b      	subs	r3, r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	440b      	add	r3, r1
 8001458:	3318      	adds	r3, #24
 800145a:	6018      	str	r0, [r3, #0]
	usersOnline[sadd].address = sadd;
 800145c:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8001460:	f897 106b 	ldrb.w	r1, [r7, #107]	; 0x6b
 8001464:	483d      	ldr	r0, [pc, #244]	; (800155c <get_RX+0x12c>)
 8001466:	4613      	mov	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	1a9b      	subs	r3, r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4403      	add	r3, r0
 8001470:	3314      	adds	r3, #20
 8001472:	6019      	str	r1, [r3, #0]


	//get payload info and sanitize payloads
	int rxLen = SPSGRF_GetRxData(&RXpayload);
 8001474:	463b      	mov	r3, r7
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fc66 	bl	8001d48 <SPSGRF_GetRxData>
 800147c:	4603      	mov	r3, r0
 800147e:	667b      	str	r3, [r7, #100]	; 0x64
	RXpayload[rxLen+1] = '\0'; //ensure null termination for bad little nodes
 8001480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001482:	3301      	adds	r3, #1
 8001484:	3370      	adds	r3, #112	; 0x70
 8001486:	443b      	add	r3, r7
 8001488:	2200      	movs	r2, #0
 800148a:	f803 2c70 	strb.w	r2, [r3, #-112]
	//if ack, do nothing
	//if heartbeat, do nothing
	//if message, print message
	//and check for bad payloads

	if(RXpayload[0] == PACKET_ANNOUNCEMENT){
 800148e:	783b      	ldrb	r3, [r7, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d107      	bne.n	80014a4 <get_RX+0x74>
		// send ack
		createPayload(PACKET_ANNOUNCEMENT_RESP, myUsername, NULL, sadd);
 8001494:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001498:	2200      	movs	r2, #0
 800149a:	4931      	ldr	r1, [pc, #196]	; (8001560 <get_RX+0x130>)
 800149c:	2002      	movs	r0, #2
 800149e:	f000 f897 	bl	80015d0 <createPayload>
	}


//	HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);

}
 80014a2:	e057      	b.n	8001554 <get_RX+0x124>
	} else if (RXpayload[0] == PACKET_MESSAGE) {
 80014a4:	783b      	ldrb	r3, [r7, #0]
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	d118      	bne.n	80014dc <get_RX+0xac>
		char* i = (char*)RXpayload;
 80014aa:	463b      	mov	r3, r7
 80014ac:	66fb      	str	r3, [r7, #108]	; 0x6c
		while(*i != '\0'){i++;}
 80014ae:	e002      	b.n	80014b6 <get_RX+0x86>
 80014b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014b2:	3301      	adds	r3, #1
 80014b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80014b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f8      	bne.n	80014b0 <get_RX+0x80>
		i++;
 80014be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014c0:	3301      	adds	r3, #1
 80014c2:	66fb      	str	r3, [r7, #108]	; 0x6c
		myHAL_UART_printf("Message from 0x%x(%s): %s", sadd, names[sadd], i);
 80014c4:	f897 106b 	ldrb.w	r1, [r7, #107]	; 0x6b
 80014c8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80014cc:	4a25      	ldr	r2, [pc, #148]	; (8001564 <get_RX+0x134>)
 80014ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014d4:	4824      	ldr	r0, [pc, #144]	; (8001568 <get_RX+0x138>)
 80014d6:	f7ff fd51 	bl	8000f7c <myHAL_UART_printf>
}
 80014da:	e03b      	b.n	8001554 <get_RX+0x124>
	} else if ((RXpayload[0] == PACKET_ANNOUNCEMENT_RESP) | (RXpayload[0] == PACKET_HEARTBEAT)){
 80014dc:	783b      	ldrb	r3, [r7, #0]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	bf0c      	ite	eq
 80014e2:	2301      	moveq	r3, #1
 80014e4:	2300      	movne	r3, #0
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	783b      	ldrb	r3, [r7, #0]
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	bf0c      	ite	eq
 80014ee:	2301      	moveq	r3, #1
 80014f0:	2300      	movne	r3, #0
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d010      	beq.n	800151e <get_RX+0xee>
		if(RXpayload[0] == PACKET_HEARTBEAT){
 80014fc:	783b      	ldrb	r3, [r7, #0]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d106      	bne.n	8001510 <get_RX+0xe0>
			myHAL_UART_printf("<3beat from 0x%x\r\n", sadd);
 8001502:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001506:	4619      	mov	r1, r3
 8001508:	4818      	ldr	r0, [pc, #96]	; (800156c <get_RX+0x13c>)
 800150a:	f7ff fd37 	bl	8000f7c <myHAL_UART_printf>
}
 800150e:	e021      	b.n	8001554 <get_RX+0x124>
			myHAL_UART_printf("ACK by 0x%x\r\n", sadd);
 8001510:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001514:	4619      	mov	r1, r3
 8001516:	4816      	ldr	r0, [pc, #88]	; (8001570 <get_RX+0x140>)
 8001518:	f7ff fd30 	bl	8000f7c <myHAL_UART_printf>
}
 800151c:	e01a      	b.n	8001554 <get_RX+0x124>
				RXpayload[0], RXpayload[1], RXpayload[2], RXpayload[3],
 800151e:	783b      	ldrb	r3, [r7, #0]
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%x(%d)(%s)\r\n",
 8001520:	461d      	mov	r5, r3
				RXpayload[0], RXpayload[1], RXpayload[2], RXpayload[3],
 8001522:	787b      	ldrb	r3, [r7, #1]
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%x(%d)(%s)\r\n",
 8001524:	461e      	mov	r6, r3
				RXpayload[0], RXpayload[1], RXpayload[2], RXpayload[3],
 8001526:	78bb      	ldrb	r3, [r7, #2]
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%x(%d)(%s)\r\n",
 8001528:	469c      	mov	ip, r3
				RXpayload[0], RXpayload[1], RXpayload[2], RXpayload[3],
 800152a:	78fb      	ldrb	r3, [r7, #3]
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%x(%d)(%s)\r\n",
 800152c:	461c      	mov	r4, r3
 800152e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001532:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8001536:	f897 106b 	ldrb.w	r1, [r7, #107]	; 0x6b
 800153a:	480a      	ldr	r0, [pc, #40]	; (8001564 <get_RX+0x134>)
 800153c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8001540:	9103      	str	r1, [sp, #12]
 8001542:	9202      	str	r2, [sp, #8]
 8001544:	9301      	str	r3, [sp, #4]
 8001546:	9400      	str	r4, [sp, #0]
 8001548:	4663      	mov	r3, ip
 800154a:	4632      	mov	r2, r6
 800154c:	4629      	mov	r1, r5
 800154e:	4809      	ldr	r0, [pc, #36]	; (8001574 <get_RX+0x144>)
 8001550:	f7ff fd14 	bl	8000f7c <myHAL_UART_printf>
}
 8001554:	bf00      	nop
 8001556:	3774      	adds	r7, #116	; 0x74
 8001558:	46bd      	mov	sp, r7
 800155a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800155c:	200003e0 	.word	0x200003e0
 8001560:	20000000 	.word	0x20000000
 8001564:	20000020 	.word	0x20000020
 8001568:	0800c058 	.word	0x0800c058
 800156c:	0800c074 	.word	0x0800c074
 8001570:	0800c088 	.word	0x0800c088
 8001574:	0800c098 	.word	0x0800c098

08001578 <Task_RX>:


void Task_RX(void *argument){
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	while(1){
		if(xSemaphoreTake(FLAG_SPIRIT, 10) == 1){
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <Task_RX+0x28>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	210a      	movs	r1, #10
 8001586:	4618      	mov	r0, r3
 8001588:	f007 fbfa 	bl	8008d80 <xQueueSemaphoreTake>
 800158c:	4603      	mov	r3, r0
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <Task_RX+0x1e>
		  SPSGRF_StartRx();
 8001592:	f000 fbd0 	bl	8001d36 <SPSGRF_StartRx>
		}
		vTaskDelay(10);
 8001596:	200a      	movs	r0, #10
 8001598:	f008 f840 	bl	800961c <vTaskDelay>
		if(xSemaphoreTake(FLAG_SPIRIT, 10) == 1){
 800159c:	e7f0      	b.n	8001580 <Task_RX+0x8>
 800159e:	bf00      	nop
 80015a0:	200003d8 	.word	0x200003d8

080015a4 <Task_BeatHeart>:
	}
}
/* USER CODE END 0 */


void Task_BeatHeart(void *argument){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	vTaskDelay(5000);
 80015ac:	f241 3088 	movw	r0, #5000	; 0x1388
 80015b0:	f008 f834 	bl	800961c <vTaskDelay>
	while(1){
		createPayload(PACKET_HEARTBEAT, myUsername, NULL, 0xFF);
 80015b4:	23ff      	movs	r3, #255	; 0xff
 80015b6:	2200      	movs	r2, #0
 80015b8:	4904      	ldr	r1, [pc, #16]	; (80015cc <Task_BeatHeart+0x28>)
 80015ba:	2003      	movs	r0, #3
 80015bc:	f000 f808 	bl	80015d0 <createPayload>
		vTaskDelay(5000);
 80015c0:	f241 3088 	movw	r0, #5000	; 0x1388
 80015c4:	f008 f82a 	bl	800961c <vTaskDelay>
	while(1){
 80015c8:	e7f4      	b.n	80015b4 <Task_BeatHeart+0x10>
 80015ca:	bf00      	nop
 80015cc:	20000000 	.word	0x20000000

080015d0 <createPayload>:
	}
}

void createPayload(int type, char* username, char* message, uint8_t dest){
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	70fb      	strb	r3, [r7, #3]

	int myWriteTX = currentWriteTX;
 80015de:	4b21      	ldr	r3, [pc, #132]	; (8001664 <createPayload+0x94>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	617b      	str	r3, [r7, #20]
	currentWriteTX = (++currentWriteTX) %TX_Q_SIZE;
 80015e4:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <createPayload+0x94>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <createPayload+0x94>)
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <createPayload+0x94>)
 80015f0:	6819      	ldr	r1, [r3, #0]
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <createPayload+0x98>)
 80015f4:	fb83 3201 	smull	r3, r2, r3, r1
 80015f8:	17cb      	asrs	r3, r1, #31
 80015fa:	1ad2      	subs	r2, r2, r3
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	1aca      	subs	r2, r1, r3
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <createPayload+0x94>)
 8001606:	601a      	str	r2, [r3, #0]

	TXq[myWriteTX].type = type;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	b2d9      	uxtb	r1, r3
 800160c:	4a17      	ldr	r2, [pc, #92]	; (800166c <createPayload+0x9c>)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	4413      	add	r3, r2
 8001614:	3301      	adds	r3, #1
 8001616:	460a      	mov	r2, r1
 8001618:	701a      	strb	r2, [r3, #0]
	TXq[myWriteTX].user = username;
 800161a:	4a14      	ldr	r2, [pc, #80]	; (800166c <createPayload+0x9c>)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	4413      	add	r3, r2
 8001622:	3304      	adds	r3, #4
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	601a      	str	r2, [r3, #0]

	if(type == 4){
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b04      	cmp	r3, #4
 800162c:	d106      	bne.n	800163c <createPayload+0x6c>
		TXq[myWriteTX].message = message;
 800162e:	4a0f      	ldr	r2, [pc, #60]	; (800166c <createPayload+0x9c>)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	4413      	add	r3, r2
 8001636:	3308      	adds	r3, #8
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	601a      	str	r2, [r3, #0]
	}

	TXq[myWriteTX].dest = dest;
 800163c:	4a0b      	ldr	r2, [pc, #44]	; (800166c <createPayload+0x9c>)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	4413      	add	r3, r2
 8001644:	330c      	adds	r3, #12
 8001646:	78fa      	ldrb	r2, [r7, #3]
 8001648:	701a      	strb	r2, [r3, #0]
	TXq[myWriteTX].valid = 1;
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <createPayload+0x9c>)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	4413      	add	r3, r2
 8001652:	2201      	movs	r2, #1
 8001654:	701a      	strb	r2, [r3, #0]
}
 8001656:	bf00      	nop
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20002014 	.word	0x20002014
 8001668:	55555556 	.word	0x55555556
 800166c:	20001fe0 	.word	0x20001fe0

08001670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001676:	f003 f847 	bl	8004708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800167a:	f000 f979 	bl	8001970 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */



  RTOS_ISR_setPriority(EXTI9_5_IRQn);
 800167e:	2017      	movs	r0, #23
 8001680:	f7ff fc65 	bl	8000f4e <RTOS_ISR_setPriority>


  /* Create the tasks */
  BaseType_t retVal = xTaskCreate(Task_TX, "Task_TX", configMINIMAL_STACK_SIZE,
 8001684:	4b39      	ldr	r3, [pc, #228]	; (800176c <main+0xfc>)
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	2304      	movs	r3, #4
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2300      	movs	r3, #0
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	4937      	ldr	r1, [pc, #220]	; (8001770 <main+0x100>)
 8001692:	4838      	ldr	r0, [pc, #224]	; (8001774 <main+0x104>)
 8001694:	f007 fe63 	bl	800935e <xTaskCreate>
 8001698:	6078      	str	r0, [r7, #4]
  		NULL, tskIDLE_PRIORITY + 4, &Task_TXHandler);
  if (retVal != 1) { while(1);}	// check if task creation failed
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d000      	beq.n	80016a2 <main+0x32>
 80016a0:	e7fe      	b.n	80016a0 <main+0x30>

//  retVal = xTaskCreate(Task_printUsers, "Task_printUsers", configMINIMAL_STACK_SIZE,
//  		NULL, tskIDLE_PRIORITY + 2, &Task_printUsersHandler);
//  if (retVal != 1) { while(1);}	// check if task creation failed

  retVal = xTaskCreate(Task_RX, "Task_RX", configMINIMAL_STACK_SIZE,
 80016a2:	4b35      	ldr	r3, [pc, #212]	; (8001778 <main+0x108>)
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	2303      	movs	r3, #3
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2300      	movs	r3, #0
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	4933      	ldr	r1, [pc, #204]	; (800177c <main+0x10c>)
 80016b0:	4833      	ldr	r0, [pc, #204]	; (8001780 <main+0x110>)
 80016b2:	f007 fe54 	bl	800935e <xTaskCreate>
 80016b6:	6078      	str	r0, [r7, #4]
  		NULL, tskIDLE_PRIORITY + 3, &Task_RXHandler);
  if (retVal != 1) { while(1);}	// check if task creation failed
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d000      	beq.n	80016c0 <main+0x50>
 80016be:	e7fe      	b.n	80016be <main+0x4e>

  retVal = xTaskCreate(Task_BeatHeart, "Task_BeatHeart", configMINIMAL_STACK_SIZE,
 80016c0:	4b30      	ldr	r3, [pc, #192]	; (8001784 <main+0x114>)
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	2303      	movs	r3, #3
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2300      	movs	r3, #0
 80016ca:	2280      	movs	r2, #128	; 0x80
 80016cc:	492e      	ldr	r1, [pc, #184]	; (8001788 <main+0x118>)
 80016ce:	482f      	ldr	r0, [pc, #188]	; (800178c <main+0x11c>)
 80016d0:	f007 fe45 	bl	800935e <xTaskCreate>
 80016d4:	6078      	str	r0, [r7, #4]
  		NULL, tskIDLE_PRIORITY + 3, &Task_HBHandler);
  if (retVal != 1) { while(1);}	// check if task creation failed
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d000      	beq.n	80016de <main+0x6e>
 80016dc:	e7fe      	b.n	80016dc <main+0x6c>


  // Create Semaphores for task2 and task3
  FLAG_SPIRIT = xSemaphoreCreateBinary();
 80016de:	2203      	movs	r2, #3
 80016e0:	2100      	movs	r1, #0
 80016e2:	2001      	movs	r0, #1
 80016e4:	f006 ffe8 	bl	80086b8 <xQueueGenericCreate>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a29      	ldr	r2, [pc, #164]	; (8001790 <main+0x120>)
 80016ec:	6013      	str	r3, [r2, #0]
  if (FLAG_SPIRIT == NULL) { while(1); }
 80016ee:	4b28      	ldr	r3, [pc, #160]	; (8001790 <main+0x120>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d100      	bne.n	80016f8 <main+0x88>
 80016f6:	e7fe      	b.n	80016f6 <main+0x86>



//  //Initialization transmissisons

  createPayload(PACKET_ANNOUNCEMENT, myUsername, NULL, 0xFF);
 80016f8:	23ff      	movs	r3, #255	; 0xff
 80016fa:	2200      	movs	r2, #0
 80016fc:	4925      	ldr	r1, [pc, #148]	; (8001794 <main+0x124>)
 80016fe:	2001      	movs	r0, #1
 8001700:	f7ff ff66 	bl	80015d0 <createPayload>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001704:	f7ff fb38 	bl	8000d78 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001708:	f000 f99c 	bl	8001a44 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800170c:	f000 fc3c 	bl	8001f88 <MX_USART2_UART_Init>

	//	enable interrupts for USART2 receive
	USART2->CR1 |= USART_CR1_RXNEIE;					// enable RXNE interrupt on USART2
 8001710:	4b21      	ldr	r3, [pc, #132]	; (8001798 <main+0x128>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a20      	ldr	r2, [pc, #128]	; (8001798 <main+0x128>)
 8001716:	f043 0320 	orr.w	r3, r3, #32
 800171a:	6013      	str	r3, [r2, #0]
	USART2->ISR &= ~(USART_ISR_RXNE);					// clear interrupt flagwhile (message[i] != 0)
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <main+0x128>)
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <main+0x128>)
 8001722:	f023 0320 	bic.w	r3, r3, #32
 8001726:	61d3      	str	r3, [r2, #28]

	NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));		// enable USART2 ISR
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <main+0x12c>)
 800172a:	2240      	movs	r2, #64	; 0x40
 800172c:	605a      	str	r2, [r3, #4]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800172e:	b662      	cpsie	i
}
 8001730:	bf00      	nop
	__enable_irq();

  /* USER CODE BEGIN 2 */
  startTime = xTaskGetTickCount();
 8001732:	f008 f8c5 	bl	80098c0 <xTaskGetTickCount>
 8001736:	4603      	mov	r3, r0
 8001738:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <main+0x130>)
 800173a:	6013      	str	r3, [r2, #0]

  myHAL_UART_clear();
 800173c:	f7ff fc46 	bl	8000fcc <myHAL_UART_clear>
  myHAL_UART_printf("let's goooo \r\n");
 8001740:	4818      	ldr	r0, [pc, #96]	; (80017a4 <main+0x134>)
 8001742:	f7ff fc1b 	bl	8000f7c <myHAL_UART_printf>

  SPSGRF_Init();
 8001746:	f000 fa1b 	bl	8001b80 <SPSGRF_Init>

  SpiritPktStackSetDestinationAddress(0xFF);
 800174a:	20ff      	movs	r0, #255	; 0xff
 800174c:	f001 f990 	bl	8002a70 <SpiritPktCommonSetDestinationAddress>

  xSemaphoreGive(FLAG_SPIRIT);
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <main+0x120>)
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	2300      	movs	r3, #0
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	f007 f80b 	bl	8008774 <xQueueGenericSend>

  vTaskStartScheduler();
 800175e:	f007 ff91 	bl	8009684 <vTaskStartScheduler>
 8001762:	2300      	movs	r3, #0

  /* USER CODE END 2 */
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200003cc 	.word	0x200003cc
 8001770:	0800c0cc 	.word	0x0800c0cc
 8001774:	080011a1 	.word	0x080011a1
 8001778:	200003d0 	.word	0x200003d0
 800177c:	0800c0d4 	.word	0x0800c0d4
 8001780:	08001579 	.word	0x08001579
 8001784:	200003d4 	.word	0x200003d4
 8001788:	0800c0dc 	.word	0x0800c0dc
 800178c:	080015a5 	.word	0x080015a5
 8001790:	200003d8 	.word	0x200003d8
 8001794:	20000000 	.word	0x20000000
 8001798:	40004400 	.word	0x40004400
 800179c:	e000e100 	.word	0xe000e100
 80017a0:	200003dc 	.word	0x200003dc
 80017a4:	0800c0ec 	.word	0x0800c0ec

080017a8 <USART2_IRQHandler>:


char userInput[100];
int userInputPos = 0;
void USART2_IRQHandler(void){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
	char r;

	if (USART2->ISR & USART_ISR_RXNE){
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <USART2_IRQHandler+0x7c>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f003 0320 	and.w	r3, r3, #32
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d02f      	beq.n	800181a <USART2_IRQHandler+0x72>

		r = USART2->RDR; // copy received char
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <USART2_IRQHandler+0x7c>)
 80017bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017be:	b29b      	uxth	r3, r3
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	71fb      	strb	r3, [r7, #7]

		if (r != 13){
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	2b0d      	cmp	r3, #13
 80017c8:	d00f      	beq.n	80017ea <USART2_IRQHandler+0x42>
			//NOT enter
			userInput[userInputPos++] = r;
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <USART2_IRQHandler+0x80>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	4915      	ldr	r1, [pc, #84]	; (8001828 <USART2_IRQHandler+0x80>)
 80017d2:	600a      	str	r2, [r1, #0]
 80017d4:	79f9      	ldrb	r1, [r7, #7]
 80017d6:	4a15      	ldr	r2, [pc, #84]	; (800182c <USART2_IRQHandler+0x84>)
 80017d8:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, &r, 1, HAL_MAX_DELAY);
 80017da:	1df9      	adds	r1, r7, #7
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295
 80017e0:	2201      	movs	r2, #1
 80017e2:	4813      	ldr	r0, [pc, #76]	; (8001830 <USART2_IRQHandler+0x88>)
 80017e4:	f006 f838 	bl	8007858 <HAL_UART_Transmit>
 80017e8:	e011      	b.n	800180e <USART2_IRQHandler+0x66>

		} else {
			//enter
			userInput[userInputPos] = '\0';
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <USART2_IRQHandler+0x80>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a0f      	ldr	r2, [pc, #60]	; (800182c <USART2_IRQHandler+0x84>)
 80017f0:	2100      	movs	r1, #0
 80017f2:	54d1      	strb	r1, [r2, r3]
			userInputPos = 0;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <USART2_IRQHandler+0x80>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, &r, 1, HAL_MAX_DELAY);
 80017fa:	1df9      	adds	r1, r7, #7
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001800:	2201      	movs	r2, #1
 8001802:	480b      	ldr	r0, [pc, #44]	; (8001830 <USART2_IRQHandler+0x88>)
 8001804:	f006 f828 	bl	8007858 <HAL_UART_Transmit>

			handleCommand(userInput);
 8001808:	4808      	ldr	r0, [pc, #32]	; (800182c <USART2_IRQHandler+0x84>)
 800180a:	f000 f835 	bl	8001878 <handleCommand>

		}

		USART2->ISR &= ~(USART_ISR_RXNE); // clear the flag
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <USART2_IRQHandler+0x7c>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <USART2_IRQHandler+0x7c>)
 8001814:	f023 0320 	bic.w	r3, r3, #32
 8001818:	61d3      	str	r3, [r2, #28]
	}
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40004400 	.word	0x40004400
 8001828:	2000207c 	.word	0x2000207c
 800182c:	20002018 	.word	0x20002018
 8001830:	20002538 	.word	0x20002538

08001834 <impersonate>:

void impersonate(uint8_t skin){
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
	//change username and address to a desired person's

	SpiritGotoReadyState();
 800183e:	f7ff fbe1 	bl	8001004 <SpiritGotoReadyState>
//
//	  /* Writes value on the register */
//	  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);

	  /* Fills array with the addresses passed in the structure */
	  tempRegValue[0] = BROADCAST_ADDRESS;
 8001842:	23ff      	movs	r3, #255	; 0xff
 8001844:	733b      	strb	r3, [r7, #12]
	  tempRegValue[1] = MULTICAST_ADDRESS;
 8001846:	23ee      	movs	r3, #238	; 0xee
 8001848:	737b      	strb	r3, [r7, #13]
	  tempRegValue[2] = skin;
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	73bb      	strb	r3, [r7, #14]

	  /* Writes them on the addresses registers */
	  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	461a      	mov	r2, r3
 8001854:	2103      	movs	r1, #3
 8001856:	204c      	movs	r0, #76	; 0x4c
 8001858:	f002 fdd8 	bl	800440c <RadioSpiWriteRegisters>
 800185c:	4602      	mov	r2, r0
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <impersonate+0x40>)
 8001860:	b212      	sxth	r2, r2
 8001862:	4611      	mov	r1, r2
 8001864:	7019      	strb	r1, [r3, #0]
 8001866:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800186a:	705a      	strb	r2, [r3, #1]

}
 800186c:	bf00      	nop
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200025c8 	.word	0x200025c8

08001878 <handleCommand>:

void handleCommand(char* input){
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	//this is after the string has been entered and the user hits enter
	myHAL_UART_printf("                              entered: (%s) \r\n", userInput);
 8001880:	4937      	ldr	r1, [pc, #220]	; (8001960 <handleCommand+0xe8>)
 8001882:	4838      	ldr	r0, [pc, #224]	; (8001964 <handleCommand+0xec>)
 8001884:	f7ff fb7a 	bl	8000f7c <myHAL_UART_printf>


	if (userInput[0] == '/'){
 8001888:	4b35      	ldr	r3, [pc, #212]	; (8001960 <handleCommand+0xe8>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b2f      	cmp	r3, #47	; 0x2f
 800188e:	d15c      	bne.n	800194a <handleCommand+0xd2>

		switch (userInput[1]) {
 8001890:	4b33      	ldr	r3, [pc, #204]	; (8001960 <handleCommand+0xe8>)
 8001892:	785b      	ldrb	r3, [r3, #1]
 8001894:	3b62      	subs	r3, #98	; 0x62
 8001896:	2b13      	cmp	r3, #19
 8001898:	d852      	bhi.n	8001940 <handleCommand+0xc8>
 800189a:	a201      	add	r2, pc, #4	; (adr r2, 80018a0 <handleCommand+0x28>)
 800189c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a0:	080018fb 	.word	0x080018fb
 80018a4:	08001941 	.word	0x08001941
 80018a8:	08001941 	.word	0x08001941
 80018ac:	08001941 	.word	0x08001941
 80018b0:	08001941 	.word	0x08001941
 80018b4:	08001941 	.word	0x08001941
 80018b8:	08001941 	.word	0x08001941
 80018bc:	08001917 	.word	0x08001917
 80018c0:	08001941 	.word	0x08001941
 80018c4:	08001941 	.word	0x08001941
 80018c8:	08001941 	.word	0x08001941
 80018cc:	08001941 	.word	0x08001941
 80018d0:	08001941 	.word	0x08001941
 80018d4:	08001941 	.word	0x08001941
 80018d8:	08001909 	.word	0x08001909
 80018dc:	08001941 	.word	0x08001941
 80018e0:	08001941 	.word	0x08001941
 80018e4:	08001941 	.word	0x08001941
 80018e8:	08001941 	.word	0x08001941
 80018ec:	080018f1 	.word	0x080018f1

			case 'u': 	//list online users
				printUsersOnline();
 80018f0:	f7ff fcdc 	bl	80012ac <printUsersOnline>
				reapUsers();
 80018f4:	f7ff fd46 	bl	8001384 <reapUsers>
				break;
 80018f8:	e02e      	b.n	8001958 <handleCommand+0xe0>

			case 'b':	//broadcast message
				createPayload(PACKET_MESSAGE, myUsername, userInput, 0xFF);
 80018fa:	23ff      	movs	r3, #255	; 0xff
 80018fc:	4a18      	ldr	r2, [pc, #96]	; (8001960 <handleCommand+0xe8>)
 80018fe:	491a      	ldr	r1, [pc, #104]	; (8001968 <handleCommand+0xf0>)
 8001900:	2004      	movs	r0, #4
 8001902:	f7ff fe65 	bl	80015d0 <createPayload>
				break;
 8001906:	e027      	b.n	8001958 <handleCommand+0xe0>

			case 'p':	//private message
				//TODO:get address from command and pass it here
				createPayload(PACKET_MESSAGE, myUsername, userInput, 0xFF);
 8001908:	23ff      	movs	r3, #255	; 0xff
 800190a:	4a15      	ldr	r2, [pc, #84]	; (8001960 <handleCommand+0xe8>)
 800190c:	4916      	ldr	r1, [pc, #88]	; (8001968 <handleCommand+0xf0>)
 800190e:	2004      	movs	r0, #4
 8001910:	f7ff fe5e 	bl	80015d0 <createPayload>
				break;
 8001914:	e020      	b.n	8001958 <handleCommand+0xe0>

			case 'i':	//impersonate
				char hexStr[3];
				hexStr[0] = userInput[2]; hexStr[1] = userInput[3]; hexStr[2] = '\0';
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <handleCommand+0xe8>)
 8001918:	789b      	ldrb	r3, [r3, #2]
 800191a:	733b      	strb	r3, [r7, #12]
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <handleCommand+0xe8>)
 800191e:	78db      	ldrb	r3, [r3, #3]
 8001920:	737b      	strb	r3, [r7, #13]
 8001922:	2300      	movs	r3, #0
 8001924:	73bb      	strb	r3, [r7, #14]
				impersonate((uint8_t)strtol(hexStr, NULL, 16));
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	2210      	movs	r2, #16
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f009 fdb2 	bl	800b498 <strtol>
 8001934:	4603      	mov	r3, r0
 8001936:	b2db      	uxtb	r3, r3
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff7b 	bl	8001834 <impersonate>
				break;
 800193e:	e00b      	b.n	8001958 <handleCommand+0xe0>

			default: 	//Bad command
				myHAL_UART_printf("                              Bad command: (%s) \r\n", userInput);
 8001940:	4907      	ldr	r1, [pc, #28]	; (8001960 <handleCommand+0xe8>)
 8001942:	480a      	ldr	r0, [pc, #40]	; (800196c <handleCommand+0xf4>)
 8001944:	f7ff fb1a 	bl	8000f7c <myHAL_UART_printf>
				break;
 8001948:	e006      	b.n	8001958 <handleCommand+0xe0>
		}

	} else {
		//else just assume it's a broadcast message
		createPayload(PACKET_MESSAGE, myUsername, userInput, 0xFF);
 800194a:	23ff      	movs	r3, #255	; 0xff
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <handleCommand+0xe8>)
 800194e:	4906      	ldr	r1, [pc, #24]	; (8001968 <handleCommand+0xf0>)
 8001950:	2004      	movs	r0, #4
 8001952:	f7ff fe3d 	bl	80015d0 <createPayload>
	}

}
 8001956:	bf00      	nop
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20002018 	.word	0x20002018
 8001964:	0800c0fc 	.word	0x0800c0fc
 8001968:	20000000 	.word	0x20000000
 800196c:	0800c12c 	.word	0x0800c12c

08001970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b096      	sub	sp, #88	; 0x58
 8001974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	2244      	movs	r2, #68	; 0x44
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f009 fdce 	bl	800b520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001984:	463b      	mov	r3, r7
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
 8001990:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001992:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001996:	f003 f9eb 	bl	8004d70 <HAL_PWREx_ControlVoltageScaling>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019a0:	f000 f84a 	bl	8001a38 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80019a4:	2310      	movs	r3, #16
 80019a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019a8:	2301      	movs	r3, #1
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019b0:	2360      	movs	r3, #96	; 0x60
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b4:	2302      	movs	r3, #2
 80019b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80019b8:	2301      	movs	r3, #1
 80019ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019bc:	2301      	movs	r3, #1
 80019be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80019c0:	2328      	movs	r3, #40	; 0x28
 80019c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019c4:	2307      	movs	r3, #7
 80019c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019c8:	2302      	movs	r3, #2
 80019ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019cc:	2302      	movs	r3, #2
 80019ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4618      	mov	r0, r3
 80019d6:	f003 fa21 	bl	8004e1c <HAL_RCC_OscConfig>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80019e0:	f000 f82a 	bl	8001a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e4:	230f      	movs	r3, #15
 80019e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e8:	2303      	movs	r3, #3
 80019ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019f8:	463b      	mov	r3, r7
 80019fa:	2104      	movs	r1, #4
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 fde9 	bl	80055d4 <HAL_RCC_ClockConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a08:	f000 f816 	bl	8001a38 <Error_Handler>
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	3758      	adds	r7, #88	; 0x58
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d101      	bne.n	8001a2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a26:	f002 fe87 	bl	8004738 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40014400 	.word	0x40014400

08001a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <Error_Handler+0x8>
	...

08001a44 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <MX_SPI1_Init+0x78>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a5e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a7a:	2210      	movs	r2, #16
 8001a7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a92:	2207      	movs	r2, #7
 8001a94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001aa4:	f004 fca8 	bl	80063f8 <HAL_SPI_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001aae:	f7ff ffc3 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20002484 	.word	0x20002484
 8001abc:	40013000 	.word	0x40013000

08001ac0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a25      	ldr	r2, [pc, #148]	; (8001b74 <HAL_SPI_MspInit+0xb4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d144      	bne.n	8001b6c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ae2:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <HAL_SPI_MspInit+0xb8>)
 8001ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae6:	4a24      	ldr	r2, [pc, #144]	; (8001b78 <HAL_SPI_MspInit+0xb8>)
 8001ae8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aec:	6613      	str	r3, [r2, #96]	; 0x60
 8001aee:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <HAL_SPI_MspInit+0xb8>)
 8001af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <HAL_SPI_MspInit+0xb8>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <HAL_SPI_MspInit+0xb8>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b06:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <HAL_SPI_MspInit+0xb8>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_SPI_MspInit+0xb8>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	4a18      	ldr	r2, [pc, #96]	; (8001b78 <HAL_SPI_MspInit+0xb8>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <HAL_SPI_MspInit+0xb8>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b2a:	23c0      	movs	r3, #192	; 0xc0
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b48:	f002 ff2a 	bl	80049a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b5c:	2305      	movs	r3, #5
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <HAL_SPI_MspInit+0xbc>)
 8001b68:	f002 ff1a 	bl	80049a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	3728      	adds	r7, #40	; 0x28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40013000 	.word	0x40013000
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	48000400 	.word	0x48000400

08001b80 <SPSGRF_Init>:
* @brief  Initialize the SPIRIT1 transceiver in the SPSGRF module.
* @param  None
* @retval None
*/
void SPSGRF_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b096      	sub	sp, #88	; 0x58
 8001b84:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktBasicInit xBasicInit;
  PktBasicAddressesInit xBasicAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 8001b86:	f002 fc31 	bl	80043ec <RadioSpiInit>

  // restart the radio
  SpiritEnterShutdown();
 8001b8a:	f002 fda7 	bl	80046dc <RadioEnterShutdown>
  SpiritExitShutdown();
 8001b8e:	f002 fdb0 	bl	80046f2 <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 8001b92:	f000 fef3 	bl	800297c <SpiritManagementWaExtraCurrent>

  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 8001b96:	2300      	movs	r3, #0
 8001b98:	70fb      	strb	r3, [r7, #3]
 8001b9a:	e004      	b.n	8001ba6 <SPSGRF_Init+0x26>
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	70fb      	strb	r3, [r7, #3]
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2bff      	cmp	r3, #255	; 0xff
 8001bac:	d1f6      	bne.n	8001b9c <SPSGRF_Init+0x1c>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 8001bae:	f002 fbfb 	bl	80043a8 <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 8001bb2:	4b4b      	ldr	r3, [pc, #300]	; (8001ce0 <SPSGRF_Init+0x160>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d1ea      	bne.n	8001b96 <SPSGRF_Init+0x16>

  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 8001bc4:	4b47      	ldr	r3, [pc, #284]	; (8001ce4 <SPSGRF_Init+0x164>)
 8001bc6:	643b      	str	r3, [r7, #64]	; 0x40
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 8001bc8:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <SPSGRF_Init+0x168>)
 8001bca:	647b      	str	r3, [r7, #68]	; 0x44
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  xRadioInit.lDatarate = DATARATE;
 8001bd8:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 8001bde:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001be2:	653b      	str	r3, [r7, #80]	; 0x50
  xRadioInit.lBandwidth = BANDWIDTH;
 8001be4:	4b40      	ldr	r3, [pc, #256]	; (8001ce8 <SPSGRF_Init+0x168>)
 8001be6:	657b      	str	r3, [r7, #84]	; 0x54
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 8001be8:	4840      	ldr	r0, [pc, #256]	; (8001cec <SPSGRF_Init+0x16c>)
 8001bea:	f002 fb6b 	bl	80042c4 <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 8001bee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f001 f9b8 	bl	8002f68 <SpiritRadioInit>

  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 8001bf8:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8001cf0 <SPSGRF_Init+0x170>
 8001bfc:	2007      	movs	r0, #7
 8001bfe:	f002 f9fd 	bl	8003ffc <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 8001c02:	2007      	movs	r0, #7
 8001c04:	f002 fa50 	bl	80040a8 <SpiritRadioSetPALevelMaxIndex>
	PktStackInit xSTackInit;
	PktStackAddressesInit xSTackAddress;
	PktStackLlpInit xSTackLlp;

//	xSTackInit.xPreambleLength = PREAMBLE_LENGTH;
	xSTackInit.xPreambleLength = PKT_PREAMBLE_LENGTH_04BYTES;
 8001c08:	2318      	movs	r3, #24
 8001c0a:	743b      	strb	r3, [r7, #16]
	xSTackInit.xSyncLength = SYNC_LENGTH;
 8001c0c:	2306      	movs	r3, #6
 8001c0e:	747b      	strb	r3, [r7, #17]
	xSTackInit.lSyncWords = SYNC_WORD; //double check this one?
 8001c10:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 8001c14:	617b      	str	r3, [r7, #20]
	xSTackInit.xFixVarLength = LENGTH_TYPE;
 8001c16:	2301      	movs	r3, #1
 8001c18:	763b      	strb	r3, [r7, #24]
	xSTackInit.cPktLengthWidth = LENGTH_WIDTH;
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	767b      	strb	r3, [r7, #25]
	xSTackInit.xCrcMode = CRC_MODE; //todo:set to 8 bit CRC? is this right?
 8001c1e:	2320      	movs	r3, #32
 8001c20:	76bb      	strb	r3, [r7, #26]
	xSTackInit.xControlLength = CONTROL_LENGTH;
 8001c22:	2300      	movs	r3, #0
 8001c24:	76fb      	strb	r3, [r7, #27]
	xSTackInit.xFec = S_DISABLE; //todo: what is FEN?
 8001c26:	2300      	movs	r3, #0
 8001c28:	773b      	strb	r3, [r7, #28]
	xSTackInit.xDataWhitening = EN_WHITENING;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	777b      	strb	r3, [r7, #29]
	SpiritPktStackInit(&xSTackInit);
 8001c2e:	f107 0310 	add.w	r3, r7, #16
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 ff4e 	bl	8002ad4 <SpiritPktStackInit>

	xSTackAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	723b      	strb	r3, [r7, #8]
	xSTackAddress.cMyAddress = MY_ADDRESS;
 8001c3c:	23b0      	movs	r3, #176	; 0xb0
 8001c3e:	727b      	strb	r3, [r7, #9]
	xSTackAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 8001c40:	2301      	movs	r3, #1
 8001c42:	72bb      	strb	r3, [r7, #10]
	xSTackAddress.cMulticastAddress = MULTICAST_ADDRESS;
 8001c44:	23ee      	movs	r3, #238	; 0xee
 8001c46:	72fb      	strb	r3, [r7, #11]
	xSTackAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	733b      	strb	r3, [r7, #12]
	xSTackAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 8001c4c:	23ff      	movs	r3, #255	; 0xff
 8001c4e:	737b      	strb	r3, [r7, #13]
	SpiritPktStackAddressesInit(&xSTackAddress);
 8001c50:	f107 0308 	add.w	r3, r7, #8
 8001c54:	4618      	mov	r0, r3
 8001c56:	f001 f80d 	bl	8002c74 <SpiritPktStackAddressesInit>

	xSTackLlp.xAutoAck = S_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	713b      	strb	r3, [r7, #4]
	xSTackLlp.xPiggybacking = S_ENABLE;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	717b      	strb	r3, [r7, #5]
	xSTackLlp.xNMaxRetx = PKT_DISABLE_RETX; //todo?
 8001c62:	2300      	movs	r3, #0
 8001c64:	71bb      	strb	r3, [r7, #6]

	SpiritPktStackLlpInit(&xSTackLlp);
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f001 f871 	bl	8002d50 <SpiritPktStackLlpInit>




  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	f887 3020 	strb.w	r3, [r7, #32]
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  SpiritGpioInit(&xGpioInit);
 8001c80:	f107 0320 	add.w	r3, r7, #32
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 fb33 	bl	80022f0 <SpiritGpioInit>

  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f000 fb54 	bl	8002338 <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 8001c90:	2101      	movs	r1, #1
 8001c92:	2004      	movs	r0, #4
 8001c94:	f000 fb7c 	bl	8002390 <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 8001c98:	2101      	movs	r1, #1
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f000 fb78 	bl	8002390 <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	2002      	movs	r0, #2
 8001ca4:	f000 fb74 	bl	8002390 <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 8001ca8:	2101      	movs	r1, #1
 8001caa:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001cae:	f000 fb6f 	bl	8002390 <SpiritIrq>
  SpiritIrqClearStatus();
 8001cb2:	f000 fc05 	bl	80024c0 <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f001 f902 	bl	8002ec0 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f001 f8c7 	bl	8002e50 <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8001cc2:	f06f 0077 	mvn.w	r0, #119	; 0x77
 8001cc6:	f001 f92f 	bl	8002f28 <SpiritQiSetRssiThresholddBm>

  // Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
  SpiritTimerSetRxTimeoutMs(RECEIVE_TIMEOUT);
#else
  SET_INFINITE_RX_TIMEOUT();
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f002 fb0a 	bl	80042e4 <SpiritTimerSetRxTimeoutCounter>
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 8001cd0:	2002      	movs	r0, #2
 8001cd2:	f002 fb21 	bl	8004318 <SpiritTimerSetRxTimeoutStopCondition>
}
 8001cd6:	bf00      	nop
 8001cd8:	3758      	adds	r7, #88	; 0x58
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200025c8 	.word	0x200025c8
 8001ce4:	3689cac0 	.word	0x3689cac0
 8001ce8:	000186a0 	.word	0x000186a0
 8001cec:	02faf080 	.word	0x02faf080
 8001cf0:	4139999a 	.word	0x4139999a

08001cf4 <SPSGRF_StartTx>:
* @param  txBuff: pointer to the data to transmit
* @param  txLen: number of bytes to transmit
* @retval None
*/
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
  // flush the TX FIFO
  SpiritCmdStrobeFlushTxFifo();
 8001d00:	2072      	movs	r0, #114	; 0x72
 8001d02:	f000 fadd 	bl	80022c0 <SpiritCmdStrobeCommand>

  // Avoid TX FIFO overflow
  txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	2b60      	cmp	r3, #96	; 0x60
 8001d0a:	bf28      	it	cs
 8001d0c:	2360      	movcs	r3, #96	; 0x60
 8001d0e:	70fb      	strb	r3, [r7, #3]

  // start TX operation
  SpiritSpiWriteLinearFifo(txLen, txBuff);
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f002 fc51 	bl	80045bc <RadioSpiWriteFifo>
  SpiritPktStackSetPayloadLength(txLen);
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f001 f868 	bl	8002df4 <SpiritPktStackSetPayloadLength>
  SpiritCmdStrobeTx();
 8001d24:	f000 fdc2 	bl	80028ac <SpiritManagementWaCmdStrobeTx>
 8001d28:	2060      	movs	r0, #96	; 0x60
 8001d2a:	f000 fac9 	bl	80022c0 <SpiritCmdStrobeCommand>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <SPSGRF_StartRx>:
* @brief  Enter the receive state.
* @param  None
* @retval None
*/
void SPSGRF_StartRx(void)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	af00      	add	r7, sp, #0
  SpiritCmdStrobeRx();
 8001d3a:	f000 fdef 	bl	800291c <SpiritManagementWaCmdStrobeRx>
 8001d3e:	2061      	movs	r0, #97	; 0x61
 8001d40:	f000 fabe 	bl	80022c0 <SpiritCmdStrobeCommand>
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <SPSGRF_GetRxData>:
* @brief  To be called after a reception is complete
* @param  rxBuff: pointer to a buffer to hold the received data
* @retval Number of bytes received
*/
uint8_t SPSGRF_GetRxData(uint8_t *rxBuff)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint8_t len;

  len = SpiritLinearFifoReadNumElementsRxFifo();
 8001d50:	f000 fbce 	bl	80024f0 <SpiritLinearFifoReadNumElementsRxFifo>
 8001d54:	4603      	mov	r3, r0
 8001d56:	73fb      	strb	r3, [r7, #15]
  SpiritSpiReadLinearFifo(len, rxBuff);
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f002 fc75 	bl	800464c <RadioSpiReadFifo>

  return len;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d76:	4a10      	ldr	r2, [pc, #64]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d94:	6593      	str	r3, [r2, #88]	; 0x58
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	210f      	movs	r1, #15
 8001da6:	f06f 0001 	mvn.w	r0, #1
 8001daa:	f002 fdc1 	bl	8004930 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000

08001dbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001dca:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <HAL_InitTick+0xc8>)
 8001dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dce:	4a2d      	ldr	r2, [pc, #180]	; (8001e84 <HAL_InitTick+0xc8>)
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd4:	6613      	str	r3, [r2, #96]	; 0x60
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_InitTick+0xc8>)
 8001dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001de2:	f107 020c 	add.w	r2, r7, #12
 8001de6:	f107 0310 	add.w	r3, r7, #16
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 fdb5 	bl	800595c <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001df2:	f003 fd9d 	bl	8005930 <HAL_RCC_GetPCLK2Freq>
 8001df6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfa:	4a23      	ldr	r2, [pc, #140]	; (8001e88 <HAL_InitTick+0xcc>)
 8001dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001e00:	0c9b      	lsrs	r3, r3, #18
 8001e02:	3b01      	subs	r3, #1
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001e06:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <HAL_InitTick+0xd0>)
 8001e08:	4a21      	ldr	r2, [pc, #132]	; (8001e90 <HAL_InitTick+0xd4>)
 8001e0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <HAL_InitTick+0xd0>)
 8001e0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e12:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001e14:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <HAL_InitTick+0xd0>)
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <HAL_InitTick+0xd0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_InitTick+0xd0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e26:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_InitTick+0xd0>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8001e2c:	4817      	ldr	r0, [pc, #92]	; (8001e8c <HAL_InitTick+0xd0>)
 8001e2e:	f005 fa11 	bl	8007254 <HAL_TIM_Base_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001e38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d11b      	bne.n	8001e78 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8001e40:	4812      	ldr	r0, [pc, #72]	; (8001e8c <HAL_InitTick+0xd0>)
 8001e42:	f005 fa69 	bl	8007318 <HAL_TIM_Base_Start_IT>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001e4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d111      	bne.n	8001e78 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e54:	2019      	movs	r0, #25
 8001e56:	f002 fd87 	bl	8004968 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b0f      	cmp	r3, #15
 8001e5e:	d808      	bhi.n	8001e72 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001e60:	2200      	movs	r2, #0
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	2019      	movs	r0, #25
 8001e66:	f002 fd63 	bl	8004930 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <HAL_InitTick+0xd8>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	e002      	b.n	8001e78 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3730      	adds	r7, #48	; 0x30
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	431bde83 	.word	0x431bde83
 8001e8c:	200024e8 	.word	0x200024e8
 8001e90:	40014400 	.word	0x40014400
 8001e94:	20000354 	.word	0x20000354

08001e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e9c:	e7fe      	b.n	8001e9c <NMI_Handler+0x4>

08001e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea2:	e7fe      	b.n	8001ea2 <HardFault_Handler+0x4>

08001ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <MemManage_Handler+0x4>

08001eaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <BusFault_Handler+0x4>

08001eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <UsageFault_Handler+0x4>

08001eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 8001ec8:	2080      	movs	r0, #128	; 0x80
 8001eca:	f002 ff2b 	bl	8004d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001eda:	f005 fa8d 	bl	80073f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200024e8 	.word	0x200024e8

08001ee8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001eec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ef0:	f002 ff18 	bl	8004d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f00:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <_sbrk+0x5c>)
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <_sbrk+0x60>)
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <_sbrk+0x64>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d102      	bne.n	8001f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <_sbrk+0x64>)
 8001f16:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <_sbrk+0x68>)
 8001f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <_sbrk+0x64>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d207      	bcs.n	8001f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f28:	f009 fb68 	bl	800b5fc <__errno>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	220c      	movs	r2, #12
 8001f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
 8001f36:	e009      	b.n	8001f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <_sbrk+0x64>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <_sbrk+0x64>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <_sbrk+0x64>)
 8001f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20018000 	.word	0x20018000
 8001f58:	00000400 	.word	0x00000400
 8001f5c:	20002534 	.word	0x20002534
 8001f60:	200040c8 	.word	0x200040c8

08001f64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <SystemInit+0x20>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <SystemInit+0x20>)
 8001f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001f8e:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <MX_USART2_UART_Init+0x5c>)
 8001f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f92:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fae:	220c      	movs	r2, #12
 8001fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fca:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fcc:	f005 fbf6 	bl	80077bc <HAL_UART_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fd6:	f7ff fd2f 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20002538 	.word	0x20002538
 8001fe4:	40004400 	.word	0x40004400

08001fe8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b0ac      	sub	sp, #176	; 0xb0
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	2288      	movs	r2, #136	; 0x88
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f009 fa89 	bl	800b520 <memset>
  if(uartHandle->Instance==USART2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a21      	ldr	r2, [pc, #132]	; (8002098 <HAL_UART_MspInit+0xb0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d13b      	bne.n	8002090 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002018:	2302      	movs	r3, #2
 800201a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800201c:	2300      	movs	r3, #0
 800201e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	4618      	mov	r0, r3
 8002026:	f003 fd2b 	bl	8005a80 <HAL_RCCEx_PeriphCLKConfig>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002030:	f7ff fd02 	bl	8001a38 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002034:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_UART_MspInit+0xb4>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	4a18      	ldr	r2, [pc, #96]	; (800209c <HAL_UART_MspInit+0xb4>)
 800203a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800203e:	6593      	str	r3, [r2, #88]	; 0x58
 8002040:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_UART_MspInit+0xb4>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <HAL_UART_MspInit+0xb4>)
 800204e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002050:	4a12      	ldr	r2, [pc, #72]	; (800209c <HAL_UART_MspInit+0xb4>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <HAL_UART_MspInit+0xb4>)
 800205a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002064:	230c      	movs	r3, #12
 8002066:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800207c:	2307      	movs	r3, #7
 800207e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002082:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002086:	4619      	mov	r1, r3
 8002088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208c:	f002 fc88 	bl	80049a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002090:	bf00      	nop
 8002092:	37b0      	adds	r7, #176	; 0xb0
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40004400 	.word	0x40004400
 800209c:	40021000 	.word	0x40021000

080020a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020a4:	f7ff ff5e 	bl	8001f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020a8:	480c      	ldr	r0, [pc, #48]	; (80020dc <LoopForever+0x6>)
  ldr r1, =_edata
 80020aa:	490d      	ldr	r1, [pc, #52]	; (80020e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020ac:	4a0d      	ldr	r2, [pc, #52]	; (80020e4 <LoopForever+0xe>)
  movs r3, #0
 80020ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b0:	e002      	b.n	80020b8 <LoopCopyDataInit>

080020b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b6:	3304      	adds	r3, #4

080020b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020bc:	d3f9      	bcc.n	80020b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020c0:	4c0a      	ldr	r4, [pc, #40]	; (80020ec <LoopForever+0x16>)
  movs r3, #0
 80020c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c4:	e001      	b.n	80020ca <LoopFillZerobss>

080020c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c8:	3204      	adds	r2, #4

080020ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020cc:	d3fb      	bcc.n	80020c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ce:	f009 fa9b 	bl	800b608 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020d2:	f7ff facd 	bl	8001670 <main>

080020d6 <LoopForever>:

LoopForever:
    b LoopForever
 80020d6:	e7fe      	b.n	80020d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e0:	200003b0 	.word	0x200003b0
  ldr r2, =_sidata
 80020e4:	0800c460 	.word	0x0800c460
  ldr r2, =_sbss
 80020e8:	200003b0 	.word	0x200003b0
  ldr r4, =_ebss
 80020ec:	200040c4 	.word	0x200040c4

080020f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020f0:	e7fe      	b.n	80020f0 <ADC1_2_IRQHandler>
	...

080020f4 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 80020fe:	f107 030f 	add.w	r3, r7, #15
 8002102:	461a      	mov	r2, r3
 8002104:	2101      	movs	r1, #1
 8002106:	2050      	movs	r0, #80	; 0x50
 8002108:	f002 f9cc 	bl	80044a4 <RadioSpiReadRegisters>
 800210c:	4602      	mov	r2, r0
 800210e:	4b14      	ldr	r3, [pc, #80]	; (8002160 <SpiritCalibrationVco+0x6c>)
 8002110:	b212      	sxth	r2, r2
 8002112:	4611      	mov	r1, r2
 8002114:	7019      	strb	r1, [r3, #0]
 8002116:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800211a:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d105      	bne.n	800212e <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	f043 0302 	orr.w	r3, r3, #2
 8002128:	b2db      	uxtb	r3, r3
 800212a:	73fb      	strb	r3, [r7, #15]
 800212c:	e004      	b.n	8002138 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	f023 0302 	bic.w	r3, r3, #2
 8002134:	b2db      	uxtb	r3, r3
 8002136:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8002138:	f107 030f 	add.w	r3, r7, #15
 800213c:	461a      	mov	r2, r3
 800213e:	2101      	movs	r1, #1
 8002140:	2050      	movs	r0, #80	; 0x50
 8002142:	f002 f963 	bl	800440c <RadioSpiWriteRegisters>
 8002146:	4602      	mov	r2, r0
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <SpiritCalibrationVco+0x6c>)
 800214a:	b212      	sxth	r2, r2
 800214c:	4611      	mov	r1, r2
 800214e:	7019      	strb	r1, [r3, #0]
 8002150:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002154:	705a      	strb	r2, [r3, #1]

}
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200025c8 	.word	0x200025c8

08002164 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 800216a:	1dfb      	adds	r3, r7, #7
 800216c:	461a      	mov	r2, r3
 800216e:	2101      	movs	r1, #1
 8002170:	20e5      	movs	r0, #229	; 0xe5
 8002172:	f002 f997 	bl	80044a4 <RadioSpiReadRegisters>
 8002176:	4602      	mov	r2, r0
 8002178:	4b07      	ldr	r3, [pc, #28]	; (8002198 <SpiritCalibrationGetVcoCalData+0x34>)
 800217a:	b212      	sxth	r2, r2
 800217c:	4611      	mov	r1, r2
 800217e:	7019      	strb	r1, [r3, #0]
 8002180:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002184:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800218c:	b2db      	uxtb	r3, r3

}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200025c8 	.word	0x200025c8

0800219c <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 80021a6:	f107 030f 	add.w	r3, r7, #15
 80021aa:	461a      	mov	r2, r3
 80021ac:	2101      	movs	r1, #1
 80021ae:	206e      	movs	r0, #110	; 0x6e
 80021b0:	f002 f978 	bl	80044a4 <RadioSpiReadRegisters>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 80021b8:	b212      	sxth	r2, r2
 80021ba:	4611      	mov	r1, r2
 80021bc:	7019      	strb	r1, [r3, #0]
 80021be:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80021c2:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 80021d8:	f107 030f 	add.w	r3, r7, #15
 80021dc:	461a      	mov	r2, r3
 80021de:	2101      	movs	r1, #1
 80021e0:	206e      	movs	r0, #110	; 0x6e
 80021e2:	f002 f913 	bl	800440c <RadioSpiWriteRegisters>
 80021e6:	4602      	mov	r2, r0
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 80021ea:	b212      	sxth	r2, r2
 80021ec:	4611      	mov	r1, r2
 80021ee:	7019      	strb	r1, [r3, #0]
 80021f0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80021f4:	705a      	strb	r2, [r3, #1]

}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200025c8 	.word	0x200025c8

08002204 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 800220e:	f107 030f 	add.w	r3, r7, #15
 8002212:	461a      	mov	r2, r3
 8002214:	2101      	movs	r1, #1
 8002216:	206f      	movs	r0, #111	; 0x6f
 8002218:	f002 f944 	bl	80044a4 <RadioSpiReadRegisters>
 800221c:	4602      	mov	r2, r0
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8002220:	b212      	sxth	r2, r2
 8002222:	4611      	mov	r1, r2
 8002224:	7019      	strb	r1, [r3, #0]
 8002226:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800222a:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002232:	b2db      	uxtb	r3, r3
 8002234:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	4313      	orrs	r3, r2
 800223c:	b2db      	uxtb	r3, r3
 800223e:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8002240:	f107 030f 	add.w	r3, r7, #15
 8002244:	461a      	mov	r2, r3
 8002246:	2101      	movs	r1, #1
 8002248:	206f      	movs	r0, #111	; 0x6f
 800224a:	f002 f8df 	bl	800440c <RadioSpiWriteRegisters>
 800224e:	4602      	mov	r2, r0
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8002252:	b212      	sxth	r2, r2
 8002254:	4611      	mov	r1, r2
 8002256:	7019      	strb	r1, [r3, #0]
 8002258:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800225c:	705a      	strb	r2, [r3, #1]

}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200025c8 	.word	0x200025c8

0800226c <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8002276:	f107 030f 	add.w	r3, r7, #15
 800227a:	461a      	mov	r2, r3
 800227c:	2101      	movs	r1, #1
 800227e:	209e      	movs	r0, #158	; 0x9e
 8002280:	f002 f910 	bl	80044a4 <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	f023 0306 	bic.w	r3, r3, #6
 800228a:	b2db      	uxtb	r3, r3
 800228c:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d105      	bne.n	80022a0 <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	f043 0302 	orr.w	r3, r3, #2
 800229a:	b2db      	uxtb	r3, r3
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	e004      	b.n	80022aa <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	f043 0304 	orr.w	r3, r3, #4
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 80022aa:	f107 030f 	add.w	r3, r7, #15
 80022ae:	461a      	mov	r2, r3
 80022b0:	2101      	movs	r1, #1
 80022b2:	209e      	movs	r0, #158	; 0x9e
 80022b4:	f002 f8aa 	bl	800440c <RadioSpiWriteRegisters>
  
}
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f002 f935 	bl	800453c <RadioSpiCommandStrobes>
 80022d2:	4602      	mov	r2, r0
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <SpiritCmdStrobeCommand+0x2c>)
 80022d6:	b212      	sxth	r2, r2
 80022d8:	4611      	mov	r1, r2
 80022da:	7019      	strb	r1, [r3, #0]
 80022dc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022e0:	705a      	strb	r2, [r3, #1]
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200025c8 	.word	0x200025c8

080022f0 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	785a      	ldrb	r2, [r3, #1]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	789b      	ldrb	r3, [r3, #2]
 8002304:	4313      	orrs	r3, r2
 8002306:	b2db      	uxtb	r3, r3
 8002308:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	f107 020f 	add.w	r2, r7, #15
 8002312:	2101      	movs	r1, #1
 8002314:	4618      	mov	r0, r3
 8002316:	f002 f879 	bl	800440c <RadioSpiWriteRegisters>
 800231a:	4602      	mov	r2, r0
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <SpiritGpioInit+0x44>)
 800231e:	b212      	sxth	r2, r2
 8002320:	4611      	mov	r1, r2
 8002322:	7019      	strb	r1, [r3, #0]
 8002324:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002328:	705a      	strb	r2, [r3, #1]

}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200025c8 	.word	0x200025c8

08002338 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00c      	beq.n	8002364 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 800234a:	f107 0308 	add.w	r3, r7, #8
 800234e:	2204      	movs	r2, #4
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f009 f8e4 	bl	800b520 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	461a      	mov	r2, r3
 800235c:	f107 0308 	add.w	r3, r7, #8
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002364:	f107 030c 	add.w	r3, r7, #12
 8002368:	461a      	mov	r2, r3
 800236a:	2104      	movs	r1, #4
 800236c:	2090      	movs	r0, #144	; 0x90
 800236e:	f002 f84d 	bl	800440c <RadioSpiWriteRegisters>
 8002372:	4602      	mov	r2, r0
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <SpiritIrqDeInit+0x54>)
 8002376:	b212      	sxth	r2, r2
 8002378:	4611      	mov	r1, r2
 800237a:	7019      	strb	r1, [r3, #0]
 800237c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002380:	705a      	strb	r2, [r3, #1]
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200025c8 	.word	0x200025c8

08002390 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 80023a0:	f107 030c 	add.w	r3, r7, #12
 80023a4:	461a      	mov	r2, r3
 80023a6:	2104      	movs	r1, #4
 80023a8:	2090      	movs	r0, #144	; 0x90
 80023aa:	f002 f87b 	bl	80044a4 <RadioSpiReadRegisters>
 80023ae:	4602      	mov	r2, r0
 80023b0:	4b29      	ldr	r3, [pc, #164]	; (8002458 <SpiritIrq+0xc8>)
 80023b2:	b212      	sxth	r2, r2
 80023b4:	4611      	mov	r1, r2
 80023b6:	7019      	strb	r1, [r3, #0]
 80023b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023bc:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 80023be:	2300      	movs	r3, #0
 80023c0:	74fb      	strb	r3, [r7, #19]
 80023c2:	e011      	b.n	80023e8 <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 80023c4:	7cfb      	ldrb	r3, [r7, #19]
 80023c6:	3318      	adds	r3, #24
 80023c8:	443b      	add	r3, r7
 80023ca:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80023ce:	461a      	mov	r2, r3
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	f1c3 0303 	rsb	r3, r3, #3
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	4413      	add	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 80023e2:	7cfb      	ldrb	r3, [r7, #19]
 80023e4:	3301      	adds	r3, #1
 80023e6:	74fb      	strb	r3, [r7, #19]
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d9ea      	bls.n	80023c4 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d105      	bne.n	8002400 <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	4013      	ands	r3, r2
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	e003      	b.n	8002408 <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4313      	orrs	r3, r2
 8002406:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8002408:	2300      	movs	r3, #0
 800240a:	74bb      	strb	r3, [r7, #18]
 800240c:	e00e      	b.n	800242c <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 800240e:	7cbb      	ldrb	r3, [r7, #18]
 8002410:	f1c3 0303 	rsb	r3, r3, #3
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	40da      	lsrs	r2, r3
 800241a:	7cbb      	ldrb	r3, [r7, #18]
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	3318      	adds	r3, #24
 8002420:	443b      	add	r3, r7
 8002422:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8002426:	7cbb      	ldrb	r3, [r7, #18]
 8002428:	3301      	adds	r3, #1
 800242a:	74bb      	strb	r3, [r7, #18]
 800242c:	7cbb      	ldrb	r3, [r7, #18]
 800242e:	2b03      	cmp	r3, #3
 8002430:	d9ed      	bls.n	800240e <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002432:	f107 030c 	add.w	r3, r7, #12
 8002436:	461a      	mov	r2, r3
 8002438:	2104      	movs	r1, #4
 800243a:	2090      	movs	r0, #144	; 0x90
 800243c:	f001 ffe6 	bl	800440c <RadioSpiWriteRegisters>
 8002440:	4602      	mov	r2, r0
 8002442:	4b05      	ldr	r3, [pc, #20]	; (8002458 <SpiritIrq+0xc8>)
 8002444:	b212      	sxth	r2, r2
 8002446:	4611      	mov	r1, r2
 8002448:	7019      	strb	r1, [r3, #0]
 800244a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800244e:	705a      	strb	r2, [r3, #1]

}
 8002450:	bf00      	nop
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	200025c8 	.word	0x200025c8

0800245c <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8002468:	f107 030c 	add.w	r3, r7, #12
 800246c:	461a      	mov	r2, r3
 800246e:	2104      	movs	r1, #4
 8002470:	20fa      	movs	r0, #250	; 0xfa
 8002472:	f002 f817 	bl	80044a4 <RadioSpiReadRegisters>
 8002476:	4602      	mov	r2, r0
 8002478:	4b10      	ldr	r3, [pc, #64]	; (80024bc <SpiritIrqGetStatus+0x60>)
 800247a:	b212      	sxth	r2, r2
 800247c:	4611      	mov	r1, r2
 800247e:	7019      	strb	r1, [r3, #0]
 8002480:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002484:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8002486:	2300      	movs	r3, #0
 8002488:	74fb      	strb	r3, [r7, #19]
 800248a:	e00e      	b.n	80024aa <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 800248c:	7cfb      	ldrb	r3, [r7, #19]
 800248e:	f1c3 0303 	rsb	r3, r3, #3
 8002492:	3318      	adds	r3, #24
 8002494:	443b      	add	r3, r7
 8002496:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3301      	adds	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	3301      	adds	r3, #1
 80024a8:	74fb      	strb	r3, [r7, #19]
 80024aa:	7cfb      	ldrb	r3, [r7, #19]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d9ed      	bls.n	800248c <SpiritIrqGetStatus+0x30>
  }
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200025c8 	.word	0x200025c8

080024c0 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	461a      	mov	r2, r3
 80024ca:	2104      	movs	r1, #4
 80024cc:	20fa      	movs	r0, #250	; 0xfa
 80024ce:	f001 ffe9 	bl	80044a4 <RadioSpiReadRegisters>
 80024d2:	4602      	mov	r2, r0
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <SpiritIrqClearStatus+0x2c>)
 80024d6:	b212      	sxth	r2, r2
 80024d8:	4611      	mov	r1, r2
 80024da:	7019      	strb	r1, [r3, #0]
 80024dc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80024e0:	705a      	strb	r2, [r3, #1]

}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200025c8 	.word	0x200025c8

080024f0 <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 80024f6:	1dfb      	adds	r3, r7, #7
 80024f8:	461a      	mov	r2, r3
 80024fa:	2101      	movs	r1, #1
 80024fc:	20e7      	movs	r0, #231	; 0xe7
 80024fe:	f001 ffd1 	bl	80044a4 <RadioSpiReadRegisters>
 8002502:	4602      	mov	r2, r0
 8002504:	4b07      	ldr	r3, [pc, #28]	; (8002524 <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 8002506:	b212      	sxth	r2, r2
 8002508:	4611      	mov	r1, r2
 800250a:	7019      	strb	r1, [r3, #0]
 800250c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002510:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002518:	b2db      	uxtb	r3, r3

}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200025c8 	.word	0x200025c8

08002528 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8002528:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800252c:	b08a      	sub	sp, #40	; 0x28
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a70      	ldr	r2, [pc, #448]	; (80026f8 <SpiritManagementSetFrequencyBase+0x1d0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d307      	bcc.n	800254a <SpiritManagementSetFrequencyBase+0x22>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a6f      	ldr	r2, [pc, #444]	; (80026fc <SpiritManagementSetFrequencyBase+0x1d4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d803      	bhi.n	800254a <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 8002542:	2300      	movs	r3, #0
 8002544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002548:	e01a      	b.n	8002580 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a6c      	ldr	r2, [pc, #432]	; (8002700 <SpiritManagementSetFrequencyBase+0x1d8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d907      	bls.n	8002562 <SpiritManagementSetFrequencyBase+0x3a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a6b      	ldr	r2, [pc, #428]	; (8002704 <SpiritManagementSetFrequencyBase+0x1dc>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d803      	bhi.n	8002562 <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 800255a:	2301      	movs	r3, #1
 800255c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002560:	e00e      	b.n	8002580 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a68      	ldr	r2, [pc, #416]	; (8002708 <SpiritManagementSetFrequencyBase+0x1e0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d907      	bls.n	800257a <SpiritManagementSetFrequencyBase+0x52>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a67      	ldr	r2, [pc, #412]	; (800270c <SpiritManagementSetFrequencyBase+0x1e4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d803      	bhi.n	800257a <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 8002572:	2302      	movs	r3, #2
 8002574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002578:	e002      	b.n	8002580 <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 800257a:	2303      	movs	r3, #3
 800257c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8002580:	f001 f830 	bl	80035e4 <SpiritRadioGetFrequencyOffset>
 8002584:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8002586:	f001 f80d 	bl	80035a4 <SpiritRadioGetChannelSpace>
 800258a:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 800258c:	f000 fff2 	bl	8003574 <SpiritRadioGetChannel>
 8002590:	4603      	mov	r3, r0
 8002592:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8002594:	6a3a      	ldr	r2, [r7, #32]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	441a      	add	r2, r3
 800259a:	7efb      	ldrb	r3, [r7, #27]
 800259c:	69f9      	ldr	r1, [r7, #28]
 800259e:	fb01 f303 	mul.w	r3, r1, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80025a6:	f001 fe0d 	bl	80041c4 <SpiritRadioGetRefDiv>
 80025aa:	4603      	mov	r3, r0
 80025ac:	3301      	adds	r3, #1
 80025ae:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 80025b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d83a      	bhi.n	800262e <SpiritManagementSetFrequencyBase+0x106>
 80025b8:	a201      	add	r2, pc, #4	; (adr r2, 80025c0 <SpiritManagementSetFrequencyBase+0x98>)
 80025ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025be:	bf00      	nop
 80025c0:	08002619 	.word	0x08002619
 80025c4:	08002601 	.word	0x08002601
 80025c8:	080025e9 	.word	0x080025e9
 80025cc:	080025d1 	.word	0x080025d1
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	4a4f      	ldr	r2, [pc, #316]	; (8002710 <SpiritManagementSetFrequencyBase+0x1e8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d803      	bhi.n	80025e0 <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80025d8:	2000      	movs	r0, #0
 80025da:	f7ff fe47 	bl	800226c <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80025de:	e026      	b.n	800262e <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80025e0:	2001      	movs	r0, #1
 80025e2:	f7ff fe43 	bl	800226c <SpiritCalibrationSelectVco>
    break;
 80025e6:	e022      	b.n	800262e <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	4a4a      	ldr	r2, [pc, #296]	; (8002714 <SpiritManagementSetFrequencyBase+0x1ec>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d803      	bhi.n	80025f8 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80025f0:	2000      	movs	r0, #0
 80025f2:	f7ff fe3b 	bl	800226c <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80025f6:	e01a      	b.n	800262e <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80025f8:	2001      	movs	r0, #1
 80025fa:	f7ff fe37 	bl	800226c <SpiritCalibrationSelectVco>
    break;
 80025fe:	e016      	b.n	800262e <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	4a45      	ldr	r2, [pc, #276]	; (8002718 <SpiritManagementSetFrequencyBase+0x1f0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d803      	bhi.n	8002610 <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002608:	2000      	movs	r0, #0
 800260a:	f7ff fe2f 	bl	800226c <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800260e:	e00e      	b.n	800262e <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002610:	2001      	movs	r0, #1
 8002612:	f7ff fe2b 	bl	800226c <SpiritCalibrationSelectVco>
    break;
 8002616:	e00a      	b.n	800262e <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	4a40      	ldr	r2, [pc, #256]	; (800271c <SpiritManagementSetFrequencyBase+0x1f4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d803      	bhi.n	8002628 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff fe23 	bl	800226c <SpiritCalibrationSelectVco>
 8002626:	e002      	b.n	800262e <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8002628:	2001      	movs	r0, #1
 800262a:	f7ff fe1f 	bl	800226c <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800262e:	6978      	ldr	r0, [r7, #20]
 8002630:	f000 feb8 	bl	80033a4 <SpiritRadioSearchWCP>
 8002634:	4603      	mov	r3, r0
 8002636:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7fd ff63 	bl	8000504 <__aeabi_ui2d>
 800263e:	4604      	mov	r4, r0
 8002640:	460d      	mov	r5, r1
 8002642:	7cfb      	ldrb	r3, [r7, #19]
 8002644:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002648:	4935      	ldr	r1, [pc, #212]	; (8002720 <SpiritManagementSetFrequencyBase+0x1f8>)
 800264a:	5c8a      	ldrb	r2, [r1, r2]
 800264c:	fb02 f303 	mul.w	r3, r2, r3
 8002650:	049b      	lsls	r3, r3, #18
 8002652:	4618      	mov	r0, r3
 8002654:	f7fd ff66 	bl	8000524 <__aeabi_i2d>
 8002658:	4680      	mov	r8, r0
 800265a:	4689      	mov	r9, r1
 800265c:	f001 fe26 	bl	80042ac <SpiritRadioGetXtalFrequency>
 8002660:	4603      	mov	r3, r0
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd ff4e 	bl	8000504 <__aeabi_ui2d>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4640      	mov	r0, r8
 800266e:	4649      	mov	r1, r9
 8002670:	f7fe f8ec 	bl	800084c <__aeabi_ddiv>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4620      	mov	r0, r4
 800267a:	4629      	mov	r1, r5
 800267c:	f7fd ffbc 	bl	80005f8 <__aeabi_dmul>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4610      	mov	r0, r2
 8002686:	4619      	mov	r1, r3
 8002688:	f7fe f9c8 	bl	8000a1c <__aeabi_d2uiz>
 800268c:	4603      	mov	r3, r0
 800268e:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	b2db      	uxtb	r3, r3
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	b2da      	uxtb	r2, r3
 800269c:	7cbb      	ldrb	r3, [r7, #18]
 800269e:	015b      	lsls	r3, r3, #5
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	4313      	orrs	r3, r2
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	0b5b      	lsrs	r3, r3, #13
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026c4:	4917      	ldr	r1, [pc, #92]	; (8002724 <SpiritManagementSetFrequencyBase+0x1fc>)
 80026c6:	5ccb      	ldrb	r3, [r1, r3]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	461a      	mov	r2, r3
 80026d4:	2104      	movs	r1, #4
 80026d6:	2008      	movs	r0, #8
 80026d8:	f001 fe98 	bl	800440c <RadioSpiWriteRegisters>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b12      	ldr	r3, [pc, #72]	; (8002728 <SpiritManagementSetFrequencyBase+0x200>)
 80026e0:	b212      	sxth	r2, r2
 80026e2:	4611      	mov	r1, r2
 80026e4:	7019      	strb	r1, [r3, #0]
 80026e6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026ea:	705a      	strb	r2, [r3, #1]
}
 80026ec:	bf00      	nop
 80026ee:	3728      	adds	r7, #40	; 0x28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026f6:	bf00      	nop
 80026f8:	2e5f5680 	.word	0x2e5f5680
 80026fc:	390c2fe0 	.word	0x390c2fe0
 8002700:	1701e47f 	.word	0x1701e47f
 8002704:	1c146a60 	.word	0x1c146a60
 8002708:	11d260bf 	.word	0x11d260bf
 800270c:	14ced7e0 	.word	0x14ced7e0
 8002710:	099cf4e1 	.word	0x099cf4e1
 8002714:	1339e9c3 	.word	0x1339e9c3
 8002718:	19a28d05 	.word	0x19a28d05
 800271c:	33451a0a 	.word	0x33451a0a
 8002720:	0800c1c4 	.word	0x0800c1c4
 8002724:	0800c1c0 	.word	0x0800c1c0
 8002728:	200025c8 	.word	0x200025c8

0800272c <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 800273a:	f001 fdb7 	bl	80042ac <SpiritRadioGetXtalFrequency>
 800273e:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 8002740:	2300      	movs	r3, #0
 8002742:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4a57      	ldr	r2, [pc, #348]	; (80028a4 <SpiritManagementWaVcoCalibration+0x178>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d90f      	bls.n	800276c <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 800274c:	f001 fd3a 	bl	80041c4 <SpiritRadioGetRefDiv>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10a      	bne.n	800276c <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 800275a:	f001 f8a5 	bl	80038a8 <SpiritRadioGetFrequencyBase>
 800275e:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 8002760:	2001      	movs	r0, #1
 8002762:	f001 fcff 	bl	8004164 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff fede 	bl	8002528 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 800276c:	f001 f89c 	bl	80038a8 <SpiritRadioGetFrequencyBase>
 8002770:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 8002772:	2325      	movs	r3, #37	; 0x25
 8002774:	707b      	strb	r3, [r7, #1]
 8002776:	1c7b      	adds	r3, r7, #1
 8002778:	461a      	mov	r2, r3
 800277a:	2101      	movs	r1, #1
 800277c:	20a1      	movs	r0, #161	; 0xa1
 800277e:	f001 fe45 	bl	800440c <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 8002782:	2001      	movs	r0, #1
 8002784:	f7ff fcb6 	bl	80020f4 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 8002788:	f001 fe0e 	bl	80043a8 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 800278c:	4b46      	ldr	r3, [pc, #280]	; (80028a8 <SpiritManagementWaVcoCalibration+0x17c>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b40      	cmp	r3, #64	; 0x40
 8002798:	d10d      	bne.n	80027b6 <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 800279a:	2301      	movs	r3, #1
 800279c:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 800279e:	2062      	movs	r0, #98	; 0x62
 80027a0:	f7ff fd8e 	bl	80022c0 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 80027a4:	f001 fe00 	bl	80043a8 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80027a8:	4b3f      	ldr	r3, [pc, #252]	; (80028a8 <SpiritManagementWaVcoCalibration+0x17c>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d1f6      	bne.n	80027a4 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 80027b6:	2066      	movs	r0, #102	; 0x66
 80027b8:	f7ff fd82 	bl	80022c0 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80027bc:	2300      	movs	r3, #0
 80027be:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80027c0:	f001 fdf2 	bl	80043a8 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80027c4:	4b38      	ldr	r3, [pc, #224]	; (80028a8 <SpiritManagementWaVcoCalibration+0x17c>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b13      	cmp	r3, #19
 80027d0:	d106      	bne.n	80027e0 <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 80027d2:	7b7b      	ldrb	r3, [r7, #13]
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	737a      	strb	r2, [r7, #13]
 80027d8:	2b05      	cmp	r3, #5
 80027da:	d101      	bne.n	80027e0 <SpiritManagementWaVcoCalibration+0xb4>
 80027dc:	2301      	movs	r3, #1
 80027de:	e05d      	b.n	800289c <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80027e0:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <SpiritManagementWaVcoCalibration+0x17c>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b0f      	cmp	r3, #15
 80027ec:	d1e8      	bne.n	80027c0 <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 80027ee:	f7ff fcb9 	bl	8002164 <SpiritCalibrationGetVcoCalData>
 80027f2:	4603      	mov	r3, r0
 80027f4:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 80027f6:	2062      	movs	r0, #98	; 0x62
 80027f8:	f7ff fd62 	bl	80022c0 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 80027fc:	f001 fdd4 	bl	80043a8 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8002800:	4b29      	ldr	r3, [pc, #164]	; (80028a8 <SpiritManagementWaVcoCalibration+0x17c>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b03      	cmp	r3, #3
 800280c:	d1f6      	bne.n	80027fc <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 800280e:	2065      	movs	r0, #101	; 0x65
 8002810:	f7ff fd56 	bl	80022c0 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002814:	2300      	movs	r3, #0
 8002816:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002818:	f001 fdc6 	bl	80043a8 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 800281c:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <SpiritManagementWaVcoCalibration+0x17c>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b13      	cmp	r3, #19
 8002828:	d106      	bne.n	8002838 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 800282a:	7b7b      	ldrb	r3, [r7, #13]
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	737a      	strb	r2, [r7, #13]
 8002830:	2b05      	cmp	r3, #5
 8002832:	d101      	bne.n	8002838 <SpiritManagementWaVcoCalibration+0x10c>
 8002834:	2301      	movs	r3, #1
 8002836:	e031      	b.n	800289c <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <SpiritManagementWaVcoCalibration+0x17c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b0f      	cmp	r3, #15
 8002844:	d1e8      	bne.n	8002818 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 8002846:	f7ff fc8d 	bl	8002164 <SpiritCalibrationGetVcoCalData>
 800284a:	4603      	mov	r3, r0
 800284c:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 800284e:	2062      	movs	r0, #98	; 0x62
 8002850:	f7ff fd36 	bl	80022c0 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002854:	f001 fda8 	bl	80043a8 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8002858:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <SpiritManagementWaVcoCalibration+0x17c>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b03      	cmp	r3, #3
 8002864:	d1f6      	bne.n	8002854 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 8002866:	7bbb      	ldrb	r3, [r7, #14]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d102      	bne.n	8002872 <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 800286c:	2063      	movs	r0, #99	; 0x63
 800286e:	f7ff fd27 	bl	80022c0 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 8002872:	2000      	movs	r0, #0
 8002874:	f7ff fc3e 	bl	80020f4 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 800287e:	2000      	movs	r0, #0
 8002880:	f001 fc70 	bl	8004164 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff fe4f 	bl	8002528 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fc85 	bl	800219c <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 8002892:	78bb      	ldrb	r3, [r7, #2]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fcb5 	bl	8002204 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	01c9c380 	.word	0x01c9c380
 80028a8:	200025c8 	.word	0x200025c8

080028ac <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <SpiritManagementWaCmdStrobeTx+0x60>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d023      	beq.n	8002904 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 80028bc:	4b14      	ldr	r3, [pc, #80]	; (8002910 <SpiritManagementWaCmdStrobeTx+0x64>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a14      	ldr	r2, [pc, #80]	; (8002914 <SpiritManagementWaCmdStrobeTx+0x68>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d908      	bls.n	80028d8 <SpiritManagementWaCmdStrobeTx+0x2c>
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <SpiritManagementWaCmdStrobeTx+0x64>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a13      	ldr	r2, [pc, #76]	; (8002918 <SpiritManagementWaCmdStrobeTx+0x6c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d803      	bhi.n	80028d8 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 80028d0:	20c0      	movs	r0, #192	; 0xc0
 80028d2:	f001 fbbd 	bl	8004050 <SpiritRadioSetPACwc>
 80028d6:	e002      	b.n	80028de <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 80028d8:	2000      	movs	r0, #0
 80028da:	f001 fbb9 	bl	8004050 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 80028de:	2311      	movs	r3, #17
 80028e0:	71fb      	strb	r3, [r7, #7]
 80028e2:	1dfb      	adds	r3, r7, #7
 80028e4:	461a      	mov	r2, r3
 80028e6:	2101      	movs	r1, #1
 80028e8:	20a9      	movs	r0, #169	; 0xa9
 80028ea:	f001 fd8f 	bl	800440c <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 80028ee:	2320      	movs	r3, #32
 80028f0:	71fb      	strb	r3, [r7, #7]
 80028f2:	1dfb      	adds	r3, r7, #7
 80028f4:	461a      	mov	r2, r3
 80028f6:	2101      	movs	r1, #1
 80028f8:	20a5      	movs	r0, #165	; 0xa5
 80028fa:	f001 fd87 	bl	800440c <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 80028fe:	4b03      	ldr	r3, [pc, #12]	; (800290c <SpiritManagementWaCmdStrobeTx+0x60>)
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
  }
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	2000034c 	.word	0x2000034c
 8002910:	200025c0 	.word	0x200025c0
 8002914:	08f0d17f 	.word	0x08f0d17f
 8002918:	1c03a180 	.word	0x1c03a180

0800291c <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d00d      	beq.n	8002948 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 800292c:	2398      	movs	r3, #152	; 0x98
 800292e:	71fb      	strb	r3, [r7, #7]
 8002930:	1dfb      	adds	r3, r7, #7
 8002932:	461a      	mov	r2, r3
 8002934:	2101      	movs	r1, #1
 8002936:	20a5      	movs	r0, #165	; 0xa5
 8002938:	f001 fd68 	bl	800440c <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 800293c:	2000      	movs	r0, #0
 800293e:	f001 fb87 	bl	8004050 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 8002942:	4b03      	ldr	r3, [pc, #12]	; (8002950 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002944:	2201      	movs	r2, #1
 8002946:	701a      	strb	r2, [r3, #0]
  }
}
 8002948:	bf00      	nop
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	2000034c 	.word	0x2000034c

08002954 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <SpiritManagementWaTRxFcMem+0x20>)
 800295e:	2202      	movs	r2, #2
 8002960:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 8002962:	4a05      	ldr	r2, [pc, #20]	; (8002978 <SpiritManagementWaTRxFcMem+0x24>)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	2000034c 	.word	0x2000034c
 8002978:	200025c0 	.word	0x200025c0

0800297c <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 8002982:	23ca      	movs	r3, #202	; 0xca
 8002984:	71fb      	strb	r3, [r7, #7]
 8002986:	1dfb      	adds	r3, r7, #7
 8002988:	461a      	mov	r2, r3
 800298a:	2101      	movs	r1, #1
 800298c:	20b2      	movs	r0, #178	; 0xb2
 800298e:	f001 fd3d 	bl	800440c <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8002992:	2304      	movs	r3, #4
 8002994:	71fb      	strb	r3, [r7, #7]
 8002996:	1dfb      	adds	r3, r7, #7
 8002998:	461a      	mov	r2, r3
 800299a:	2101      	movs	r1, #1
 800299c:	20a8      	movs	r0, #168	; 0xa8
 800299e:	f001 fd35 	bl	800440c <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 80029a2:	1dfb      	adds	r3, r7, #7
 80029a4:	461a      	mov	r2, r3
 80029a6:	2101      	movs	r1, #1
 80029a8:	20a8      	movs	r0, #168	; 0xa8
 80029aa:	f001 fd7b 	bl	80044a4 <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80029ae:	2300      	movs	r3, #0
 80029b0:	71fb      	strb	r3, [r7, #7]
 80029b2:	1dfb      	adds	r3, r7, #7
 80029b4:	461a      	mov	r2, r3
 80029b6:	2101      	movs	r1, #1
 80029b8:	20a8      	movs	r0, #168	; 0xa8
 80029ba:	f001 fd27 	bl	800440c <RadioSpiWriteRegisters>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 80029ce:	1dfb      	adds	r3, r7, #7
 80029d0:	461a      	mov	r2, r3
 80029d2:	2101      	movs	r1, #1
 80029d4:	2030      	movs	r0, #48	; 0x30
 80029d6:	f001 fd65 	bl	80044a4 <RadioSpiReadRegisters>
 80029da:	4602      	mov	r2, r0
 80029dc:	4b07      	ldr	r3, [pc, #28]	; (80029fc <SpiritPktCommonGetControlLength+0x34>)
 80029de:	b212      	sxth	r2, r2
 80029e0:	4611      	mov	r1, r2
 80029e2:	7019      	strb	r1, [r3, #0]
 80029e4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029e8:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	b2db      	uxtb	r3, r3

}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	200025c8 	.word	0x200025c8

08002a00 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002a0a:	f107 030f 	add.w	r3, r7, #15
 8002a0e:	461a      	mov	r2, r3
 8002a10:	2101      	movs	r1, #1
 8002a12:	204f      	movs	r0, #79	; 0x4f
 8002a14:	f001 fd46 	bl	80044a4 <RadioSpiReadRegisters>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <SpiritPktCommonFilterOnCrc+0x6c>)
 8002a1c:	b212      	sxth	r2, r2
 8002a1e:	4611      	mov	r1, r2
 8002a20:	7019      	strb	r1, [r3, #0]
 8002a22:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a26:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	73fb      	strb	r3, [r7, #15]
 8002a38:	e004      	b.n	8002a44 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002a44:	f107 030f 	add.w	r3, r7, #15
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	204f      	movs	r0, #79	; 0x4f
 8002a4e:	f001 fcdd 	bl	800440c <RadioSpiWriteRegisters>
 8002a52:	4602      	mov	r2, r0
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <SpiritPktCommonFilterOnCrc+0x6c>)
 8002a56:	b212      	sxth	r2, r2
 8002a58:	4611      	mov	r1, r2
 8002a5a:	7019      	strb	r1, [r3, #0]
 8002a5c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a60:	705a      	strb	r2, [r3, #1]

}
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200025c8 	.word	0x200025c8

08002a70 <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8002a7a:	1dfb      	adds	r3, r7, #7
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2101      	movs	r1, #1
 8002a80:	204b      	movs	r0, #75	; 0x4b
 8002a82:	f001 fcc3 	bl	800440c <RadioSpiWriteRegisters>
 8002a86:	4602      	mov	r2, r0
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <SpiritPktCommonSetDestinationAddress+0x30>)
 8002a8a:	b212      	sxth	r2, r2
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	7019      	strb	r1, [r3, #0]
 8002a90:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a94:	705a      	strb	r2, [r3, #1]

}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200025c8 	.word	0x200025c8

08002aa4 <SpiritPktCommonGetReceivedSourceAddress>:
 * @brief  Returns the source address of the received packet.
 * @param  None.
 * @retval uint8_t Source address of the received packet.
 */
uint8_t SpiritPktCommonGetReceivedSourceAddress(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD1 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD1_BASE, 1, &tempRegValue);
 8002aaa:	1dfb      	adds	r3, r7, #7
 8002aac:	461a      	mov	r2, r3
 8002aae:	2101      	movs	r1, #1
 8002ab0:	20d2      	movs	r0, #210	; 0xd2
 8002ab2:	f001 fcf7 	bl	80044a4 <RadioSpiReadRegisters>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <SpiritPktCommonGetReceivedSourceAddress+0x2c>)
 8002aba:	b212      	sxth	r2, r2
 8002abc:	4611      	mov	r1, r2
 8002abe:	7019      	strb	r1, [r3, #0]
 8002ac0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ac4:	705a      	strb	r2, [r3, #1]

  /* Returns value */
  return tempRegValue;
 8002ac6:	79fb      	ldrb	r3, [r7, #7]

}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	200025c8 	.word	0x200025c8

08002ad4 <SpiritPktStackInit>:
 * @param  pxPktStackInit STack packet init structure.
 *         This parameter is a pointer to @ref PktStackInit.
 * @retval None.
 */
void SpiritPktStackInit(PktStackInit* pxPktStackInit)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackInit->xDataWhitening));
  s_assert_param(IS_STACK_CONTROL_LENGTH(pxPktStackInit->xControlLength));


  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002adc:	f107 0308 	add.w	r3, r7, #8
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	2051      	movs	r0, #81	; 0x51
 8002ae6:	f001 fcdd 	bl	80044a4 <RadioSpiReadRegisters>
 8002aea:	4602      	mov	r2, r0
 8002aec:	4b60      	ldr	r3, [pc, #384]	; (8002c70 <SpiritPktStackInit+0x19c>)
 8002aee:	b212      	sxth	r2, r2
 8002af0:	4611      	mov	r1, r2
 8002af2:	7019      	strb	r1, [r3, #0]
 8002af4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002af8:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 8002afa:	7a3b      	ldrb	r3, [r7, #8]
 8002afc:	f023 0320 	bic.w	r3, r3, #32
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	723b      	strb	r3, [r7, #8]

  /* Always (!) set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8002b04:	7a3b      	ldrb	r3, [r7, #8]
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002b0e:	f107 0308 	add.w	r3, r7, #8
 8002b12:	461a      	mov	r2, r3
 8002b14:	2101      	movs	r1, #1
 8002b16:	2051      	movs	r0, #81	; 0x51
 8002b18:	f001 fc78 	bl	800440c <RadioSpiWriteRegisters>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	4b54      	ldr	r3, [pc, #336]	; (8002c70 <SpiritPktStackInit+0x19c>)
 8002b20:	b212      	sxth	r2, r2
 8002b22:	4611      	mov	r1, r2
 8002b24:	7019      	strb	r1, [r3, #0]
 8002b26:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b2a:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002b2c:	f107 0308 	add.w	r3, r7, #8
 8002b30:	461a      	mov	r2, r3
 8002b32:	2101      	movs	r1, #1
 8002b34:	204f      	movs	r0, #79	; 0x4f
 8002b36:	f001 fcb5 	bl	80044a4 <RadioSpiReadRegisters>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	4b4c      	ldr	r3, [pc, #304]	; (8002c70 <SpiritPktStackInit+0x19c>)
 8002b3e:	b212      	sxth	r2, r2
 8002b40:	4611      	mov	r1, r2
 8002b42:	7019      	strb	r1, [r3, #0]
 8002b44:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b48:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 8002b4a:	7a3b      	ldrb	r3, [r7, #8]
 8002b4c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002b54:	f107 0308 	add.w	r3, r7, #8
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	204f      	movs	r0, #79	; 0x4f
 8002b5e:	f001 fc55 	bl	800440c <RadioSpiWriteRegisters>
 8002b62:	4602      	mov	r2, r0
 8002b64:	4b42      	ldr	r3, [pc, #264]	; (8002c70 <SpiritPktStackInit+0x19c>)
 8002b66:	b212      	sxth	r2, r2
 8002b68:	4611      	mov	r1, r2
 8002b6a:	7019      	strb	r1, [r3, #0]
 8002b6c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b70:	705a      	strb	r2, [r3, #1]


  /* Address and control length setting: source and destination address are always present so ADDRESS_LENGTH=2 */
  tempRegValue[0] = 0x10 | ((uint8_t) pxPktStackInit->xControlLength);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7adb      	ldrb	r3, [r3, #11]
 8002b76:	f043 0310 	orr.w	r3, r3, #16
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	723b      	strb	r3, [r7, #8]


  /* Packet format and width length setting */
  pxPktStackInit->cPktLengthWidth == 0 ? pxPktStackInit->cPktLengthWidth=1 : pxPktStackInit->cPktLengthWidth;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	7a5b      	ldrb	r3, [r3, #9]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <SpiritPktStackInit+0xb8>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_STACK) | ((uint8_t)(pxPktStackInit->cPktLengthWidth-1));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	7a5b      	ldrb	r3, [r3, #9]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	781a      	ldrb	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	785b      	ldrb	r3, [r3, #1]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktStackInit->xFixVarLength);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 8002bac:	4313      	orrs	r3, r2
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktStackInit->xCrcMode;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	7a9b      	ldrb	r3, [r3, #10]
 8002bb6:	72fb      	strb	r3, [r7, #11]

  if(pxPktStackInit->xDataWhitening == S_ENABLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7b5b      	ldrb	r3, [r3, #13]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d104      	bne.n	8002bca <SpiritPktStackInit+0xf6>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8002bc0:	7afb      	ldrb	r3, [r7, #11]
 8002bc2:	f043 0310 	orr.w	r3, r3, #16
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktStackInit->xFec == S_ENABLE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	7b1b      	ldrb	r3, [r3, #12]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d104      	bne.n	8002bdc <SpiritPktStackInit+0x108>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8002bd2:	7afb      	ldrb	r3, [r7, #11]
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 8002bdc:	f107 0308 	add.w	r3, r7, #8
 8002be0:	461a      	mov	r2, r3
 8002be2:	2104      	movs	r1, #4
 8002be4:	2030      	movs	r0, #48	; 0x30
 8002be6:	f001 fc11 	bl	800440c <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 8002bea:	2300      	movs	r3, #0
 8002bec:	73fb      	strb	r3, [r7, #15]
 8002bee:	e01d      	b.n	8002c2c <SpiritPktStackInit+0x158>
  {
    if(i<3-(pxPktStackInit->xSyncLength >>1))
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	785b      	ldrb	r3, [r3, #1]
 8002bf6:	085b      	lsrs	r3, r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f1c3 0303 	rsb	r3, r3, #3
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	da06      	bge.n	8002c10 <SpiritPktStackInit+0x13c>
    {
      tempRegValue[i]=0;
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	3310      	adds	r3, #16
 8002c06:	443b      	add	r3, r7
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002c0e:	e00a      	b.n	8002c26 <SpiritPktStackInit+0x152>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktStackInit->lSyncWords>>(8*i));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	40da      	lsrs	r2, r3
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	3310      	adds	r3, #16
 8002c20:	443b      	add	r3, r7
 8002c22:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d9de      	bls.n	8002bf0 <SpiritPktStackInit+0x11c>
    }
  }

  /* Enables or disables the CRC check */
  if(pxPktStackInit->xCrcMode == PKT_NO_CRC)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	7a9b      	ldrb	r3, [r3, #10]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d103      	bne.n	8002c42 <SpiritPktStackInit+0x16e>
  {
    SpiritPktStackFilterOnCrc(S_DISABLE);
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f7ff fee0 	bl	8002a00 <SpiritPktCommonFilterOnCrc>
 8002c40:	e002      	b.n	8002c48 <SpiritPktStackInit+0x174>
  }
  else
  {
    SpiritPktStackFilterOnCrc(S_ENABLE);
 8002c42:	2001      	movs	r0, #1
 8002c44:	f7ff fedc 	bl	8002a00 <SpiritPktCommonFilterOnCrc>
  }

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002c48:	f107 0308 	add.w	r3, r7, #8
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2104      	movs	r1, #4
 8002c50:	2036      	movs	r0, #54	; 0x36
 8002c52:	f001 fbdb 	bl	800440c <RadioSpiWriteRegisters>
 8002c56:	4602      	mov	r2, r0
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <SpiritPktStackInit+0x19c>)
 8002c5a:	b212      	sxth	r2, r2
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	7019      	strb	r1, [r3, #0]
 8002c60:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c64:	705a      	strb	r2, [r3, #1]

}
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200025c8 	.word	0x200025c8

08002c74 <SpiritPktStackAddressesInit>:
 * @param  pxPktStackAddresses STack packet addresses init structure.
 *         This parameter is a pointer to @ref PktStackAddressesInit .
 * @retval None.
 */
void SpiritPktStackAddressesInit(PktStackAddressesInit* pxPktStackAddresses)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMyAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnBroadcastAddress));
  
  /* Reads the filtering options ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002c7c:	f107 030c 	add.w	r3, r7, #12
 8002c80:	461a      	mov	r2, r3
 8002c82:	2101      	movs	r1, #1
 8002c84:	204f      	movs	r0, #79	; 0x4f
 8002c86:	f001 fc0d 	bl	80044a4 <RadioSpiReadRegisters>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4b2f      	ldr	r3, [pc, #188]	; (8002d4c <SpiritPktStackAddressesInit+0xd8>)
 8002c8e:	b212      	sxth	r2, r2
 8002c90:	4611      	mov	r1, r2
 8002c92:	7019      	strb	r1, [r3, #0]
 8002c94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c98:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktStackAddresses->xFilterOnMyAddress == S_ENABLE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d105      	bne.n	8002cae <SpiritPktStackAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002ca2:	7b3b      	ldrb	r3, [r7, #12]
 8002ca4:	f043 0308 	orr.w	r3, r3, #8
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	733b      	strb	r3, [r7, #12]
 8002cac:	e004      	b.n	8002cb8 <SpiritPktStackAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002cae:	7b3b      	ldrb	r3, [r7, #12]
 8002cb0:	f023 0308 	bic.w	r3, r3, #8
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktStackAddresses->xFilterOnMulticastAddress == S_ENABLE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	789b      	ldrb	r3, [r3, #2]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d105      	bne.n	8002ccc <SpiritPktStackAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002cc0:	7b3b      	ldrb	r3, [r7, #12]
 8002cc2:	f043 0304 	orr.w	r3, r3, #4
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	733b      	strb	r3, [r7, #12]
 8002cca:	e004      	b.n	8002cd6 <SpiritPktStackAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002ccc:	7b3b      	ldrb	r3, [r7, #12]
 8002cce:	f023 0304 	bic.w	r3, r3, #4
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktStackAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	791b      	ldrb	r3, [r3, #4]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d105      	bne.n	8002cea <SpiritPktStackAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002cde:	7b3b      	ldrb	r3, [r7, #12]
 8002ce0:	f043 0302 	orr.w	r3, r3, #2
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	733b      	strb	r3, [r7, #12]
 8002ce8:	e004      	b.n	8002cf4 <SpiritPktStackAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002cea:	7b3b      	ldrb	r3, [r7, #12]
 8002cec:	f023 0302 	bic.w	r3, r3, #2
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes value on the register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002cf4:	f107 030c 	add.w	r3, r7, #12
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	204f      	movs	r0, #79	; 0x4f
 8002cfe:	f001 fb85 	bl	800440c <RadioSpiWriteRegisters>
 8002d02:	4602      	mov	r2, r0
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <SpiritPktStackAddressesInit+0xd8>)
 8002d06:	b212      	sxth	r2, r2
 8002d08:	4611      	mov	r1, r2
 8002d0a:	7019      	strb	r1, [r3, #0]
 8002d0c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d10:	705a      	strb	r2, [r3, #1]
  
  /* Fills array with the addresses passed in the structure */
  tempRegValue[0] = pxPktStackAddresses->cBroadcastAddress;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	795b      	ldrb	r3, [r3, #5]
 8002d16:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktStackAddresses->cMulticastAddress;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	78db      	ldrb	r3, [r3, #3]
 8002d1c:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktStackAddresses->cMyAddress;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	785b      	ldrb	r3, [r3, #1]
 8002d22:	73bb      	strb	r3, [r7, #14]
  
  /* Writes them on the addresses registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002d24:	f107 030c 	add.w	r3, r7, #12
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2103      	movs	r1, #3
 8002d2c:	204c      	movs	r0, #76	; 0x4c
 8002d2e:	f001 fb6d 	bl	800440c <RadioSpiWriteRegisters>
 8002d32:	4602      	mov	r2, r0
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <SpiritPktStackAddressesInit+0xd8>)
 8002d36:	b212      	sxth	r2, r2
 8002d38:	4611      	mov	r1, r2
 8002d3a:	7019      	strb	r1, [r3, #0]
 8002d3c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d40:	705a      	strb	r2, [r3, #1]
  
}
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	200025c8 	.word	0x200025c8

08002d50 <SpiritPktStackLlpInit>:
* @param  pxPktStackLlpInit STack packet LLP init structure.
*         This parameter is a pointer to @ref PktStackLlpInit.
* @retval None.
*/
void SpiritPktStackLlpInit(PktStackLlpInit* pxPktStackLlpInit)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_STACK_NMAX_RETX(pxPktStackLlpInit->xNMaxRetx));
  /* check if piggybacking is enabled and autoack is disabled */
  s_assert_param(!(pxPktStackLlpInit->xPiggybacking==S_ENABLE && pxPktStackLlpInit->xAutoAck==S_DISABLE));

  /* Piggybacking mechanism setting on the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 8002d58:	f107 030c 	add.w	r3, r7, #12
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2102      	movs	r1, #2
 8002d60:	2051      	movs	r0, #81	; 0x51
 8002d62:	f001 fb9f 	bl	80044a4 <RadioSpiReadRegisters>
 8002d66:	4602      	mov	r2, r0
 8002d68:	4b21      	ldr	r3, [pc, #132]	; (8002df0 <SpiritPktStackLlpInit+0xa0>)
 8002d6a:	b212      	sxth	r2, r2
 8002d6c:	4611      	mov	r1, r2
 8002d6e:	7019      	strb	r1, [r3, #0]
 8002d70:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d74:	705a      	strb	r2, [r3, #1]
  if(pxPktStackLlpInit->xPiggybacking == S_ENABLE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	785b      	ldrb	r3, [r3, #1]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d105      	bne.n	8002d8a <SpiritPktStackLlpInit+0x3a>
  {
    tempRegValue[0] |= PROTOCOL1_PIGGYBACKING_MASK;
 8002d7e:	7b3b      	ldrb	r3, [r7, #12]
 8002d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	733b      	strb	r3, [r7, #12]
 8002d88:	e004      	b.n	8002d94 <SpiritPktStackLlpInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PROTOCOL1_PIGGYBACKING_MASK;
 8002d8a:	7b3b      	ldrb	r3, [r7, #12]
 8002d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	733b      	strb	r3, [r7, #12]
  }

  /* RX and TX autoack mechanisms setting on the PROTOCOL0 register */
  if(pxPktStackLlpInit->xAutoAck == S_ENABLE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d105      	bne.n	8002da8 <SpiritPktStackLlpInit+0x58>
  {
    tempRegValue[1] |= PROTOCOL0_AUTO_ACK_MASK;
 8002d9c:	7b7b      	ldrb	r3, [r7, #13]
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	737b      	strb	r3, [r7, #13]
 8002da6:	e004      	b.n	8002db2 <SpiritPktStackLlpInit+0x62>
  }
  else
  {
    tempRegValue[1] &= ~PROTOCOL0_AUTO_ACK_MASK;
 8002da8:	7b7b      	ldrb	r3, [r7, #13]
 8002daa:	f023 0304 	bic.w	r3, r3, #4
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	737b      	strb	r3, [r7, #13]
  }

  /* Max number of retransmission setting */
  tempRegValue[1] &= ~PROTOCOL0_NMAX_RETX_MASK;
 8002db2:	7b7b      	ldrb	r3, [r7, #13]
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= pxPktStackLlpInit->xNMaxRetx;
 8002dbc:	7b7a      	ldrb	r2, [r7, #13]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	789b      	ldrb	r3, [r3, #2]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	737b      	strb	r3, [r7, #13]

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 8002dc8:	f107 030c 	add.w	r3, r7, #12
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2102      	movs	r1, #2
 8002dd0:	2051      	movs	r0, #81	; 0x51
 8002dd2:	f001 fb1b 	bl	800440c <RadioSpiWriteRegisters>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <SpiritPktStackLlpInit+0xa0>)
 8002dda:	b212      	sxth	r2, r2
 8002ddc:	4611      	mov	r1, r2
 8002dde:	7019      	strb	r1, [r3, #0]
 8002de0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002de4:	705a      	strb	r2, [r3, #1]

}
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200025c8 	.word	0x200025c8

08002df4 <SpiritPktStackSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter can be any value of uint16_t.
 * @retval None.
 */
void SpiritPktStackSetPayloadLength(uint16_t nPayloadLength)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];

  /* Computes the oversize (address + control) size */
  uint16_t overSize = 2 + (uint16_t) SpiritPktStackGetControlLength();
 8002dfe:	f7ff fde3 	bl	80029c8 <SpiritPktCommonGetControlLength>
 8002e02:	4603      	mov	r3, r0
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3302      	adds	r3, #2
 8002e08:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from lPayloadLength */
  tempRegValue[1]=STACK_BUILD_PCKTLEN0(nPayloadLength+overSize);
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	89fb      	ldrh	r3, [r7, #14]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from lPayloadLength */
  tempRegValue[0]=STACK_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8002e18:	88fa      	ldrh	r2, [r7, #6]
 8002e1a:	89fb      	ldrh	r3, [r7, #14]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	121b      	asrs	r3, r3, #8
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	733b      	strb	r3, [r7, #12]

  /* Writes the value on the PCKTLENx registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	2034      	movs	r0, #52	; 0x34
 8002e2e:	f001 faed 	bl	800440c <RadioSpiWriteRegisters>
 8002e32:	4602      	mov	r2, r0
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <SpiritPktStackSetPayloadLength+0x58>)
 8002e36:	b212      	sxth	r2, r2
 8002e38:	4611      	mov	r1, r2
 8002e3a:	7019      	strb	r1, [r3, #0]
 8002e3c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e40:	705a      	strb	r2, [r3, #1]

}
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	200025c8 	.word	0x200025c8

08002e50 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002e5a:	f107 030f 	add.w	r3, r7, #15
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2101      	movs	r1, #1
 8002e62:	203a      	movs	r0, #58	; 0x3a
 8002e64:	f001 fb1e 	bl	80044a4 <RadioSpiReadRegisters>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <SpiritQiSqiCheck+0x6c>)
 8002e6c:	b212      	sxth	r2, r2
 8002e6e:	4611      	mov	r1, r2
 8002e70:	7019      	strb	r1, [r3, #0]
 8002e72:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e76:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d105      	bne.n	8002e8a <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	73fb      	strb	r3, [r7, #15]
 8002e88:	e004      	b.n	8002e94 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	f023 0302 	bic.w	r3, r3, #2
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002e94:	f107 030f 	add.w	r3, r7, #15
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	203a      	movs	r0, #58	; 0x3a
 8002e9e:	f001 fab5 	bl	800440c <RadioSpiWriteRegisters>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <SpiritQiSqiCheck+0x6c>)
 8002ea6:	b212      	sxth	r2, r2
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	7019      	strb	r1, [r3, #0]
 8002eac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002eb0:	705a      	strb	r2, [r3, #1]

}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	200025c8 	.word	0x200025c8

08002ec0 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002eca:	f107 030f 	add.w	r3, r7, #15
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	203a      	movs	r0, #58	; 0x3a
 8002ed4:	f001 fae6 	bl	80044a4 <RadioSpiReadRegisters>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <SpiritQiSetSqiThreshold+0x64>)
 8002edc:	b212      	sxth	r2, r2
 8002ede:	4611      	mov	r1, r2
 8002ee0:	7019      	strb	r1, [r3, #0]
 8002ee2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ee6:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 8002ef2:	7bfa      	ldrb	r2, [r7, #15]
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002efc:	f107 030f 	add.w	r3, r7, #15
 8002f00:	461a      	mov	r2, r3
 8002f02:	2101      	movs	r1, #1
 8002f04:	203a      	movs	r0, #58	; 0x3a
 8002f06:	f001 fa81 	bl	800440c <RadioSpiWriteRegisters>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <SpiritQiSetSqiThreshold+0x64>)
 8002f0e:	b212      	sxth	r2, r2
 8002f10:	4611      	mov	r1, r2
 8002f12:	7019      	strb	r1, [r3, #0]
 8002f14:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f18:	705a      	strb	r2, [r3, #1]

}
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	200025c8 	.word	0x200025c8

08002f28 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3382      	adds	r3, #130	; 0x82
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8002f3c:	f107 030f 	add.w	r3, r7, #15
 8002f40:	461a      	mov	r2, r3
 8002f42:	2101      	movs	r1, #1
 8002f44:	2022      	movs	r0, #34	; 0x22
 8002f46:	f001 fa61 	bl	800440c <RadioSpiWriteRegisters>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <SpiritQiSetRssiThresholddBm+0x3c>)
 8002f4e:	b212      	sxth	r2, r2
 8002f50:	4611      	mov	r1, r2
 8002f52:	7019      	strb	r1, [r3, #0]
 8002f54:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f58:	705a      	strb	r2, [r3, #1]

}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	200025c8 	.word	0x200025c8

08002f68 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08c      	sub	sp, #48	; 0x30
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8002f70:	23a0      	movs	r3, #160	; 0xa0
 8002f72:	747b      	strb	r3, [r7, #17]
 8002f74:	f107 0311 	add.w	r3, r7, #17
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	209f      	movs	r0, #159	; 0x9f
 8002f7e:	f001 fa45 	bl	800440c <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f88:	ee07 3a90 	vmov	s15, r3
 8002f8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	ee07 3a90 	vmov	s15, r3
 8002f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fa0:	eddf 6aae 	vldr	s13, [pc, #696]	; 800325c <SpiritRadioInit+0x2f4>
 8002fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fac:	ee17 3a90 	vmov	r3, s15
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8002fb2:	2063      	movs	r0, #99	; 0x63
 8002fb4:	f001 fac2 	bl	800453c <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002fb8:	2300      	movs	r3, #0
 8002fba:	73bb      	strb	r3, [r7, #14]
 8002fbc:	e004      	b.n	8002fc8 <SpiritRadioInit+0x60>
 8002fbe:	7bbb      	ldrb	r3, [r7, #14]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	73bb      	strb	r3, [r7, #14]
 8002fc8:	7bbb      	ldrb	r3, [r7, #14]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2bff      	cmp	r3, #255	; 0xff
 8002fce:	d1f6      	bne.n	8002fbe <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002fd0:	f001 f9ea 	bl	80043a8 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8002fd4:	4ba2      	ldr	r3, [pc, #648]	; (8003260 <SpiritRadioInit+0x2f8>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b40      	cmp	r3, #64	; 0x40
 8002fe0:	d1ea      	bne.n	8002fb8 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002fe2:	4ba0      	ldr	r3, [pc, #640]	; (8003264 <SpiritRadioInit+0x2fc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4aa0      	ldr	r2, [pc, #640]	; (8003268 <SpiritRadioInit+0x300>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d803      	bhi.n	8002ff4 <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002fec:	2000      	movs	r0, #0
 8002fee:	f001 f90b 	bl	8004208 <SpiritRadioSetDigDiv>
 8002ff2:	e002      	b.n	8002ffa <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	f001 f907 	bl	8004208 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8002ffa:	2062      	movs	r0, #98	; 0x62
 8002ffc:	f001 fa9e 	bl	800453c <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8003000:	2300      	movs	r3, #0
 8003002:	737b      	strb	r3, [r7, #13]
 8003004:	e004      	b.n	8003010 <SpiritRadioInit+0xa8>
 8003006:	7b7b      	ldrb	r3, [r7, #13]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	3301      	adds	r3, #1
 800300c:	b2db      	uxtb	r3, r3
 800300e:	737b      	strb	r3, [r7, #13]
 8003010:	7b7b      	ldrb	r3, [r7, #13]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2bff      	cmp	r3, #255	; 0xff
 8003016:	d1f6      	bne.n	8003006 <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8003018:	f001 f9c6 	bl	80043a8 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 800301c:	4b90      	ldr	r3, [pc, #576]	; (8003260 <SpiritRadioInit+0x2f8>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b03      	cmp	r3, #3
 8003028:	d1ea      	bne.n	8003000 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	ee07 3a90 	vmov	s15, r3
 8003030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003034:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800326c <SpiritRadioInit+0x304>
 8003038:	ee67 6a87 	vmul.f32	s13, s15, s14
 800303c:	4b89      	ldr	r3, [pc, #548]	; (8003264 <SpiritRadioInit+0x2fc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	ee07 3a90 	vmov	s15, r3
 8003044:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800304c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003050:	ee17 3a90 	vmov	r3, s15
 8003054:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8003056:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003058:	0a1b      	lsrs	r3, r3, #8
 800305a:	b29b      	uxth	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	b2db      	uxtb	r3, r3
 8003064:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8003066:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003068:	b2db      	uxtb	r3, r3
 800306a:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	025a      	lsls	r2, r3, #9
 8003072:	4b7c      	ldr	r3, [pc, #496]	; (8003264 <SpiritRadioInit+0x2fc>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	099b      	lsrs	r3, r3, #6
 8003078:	fbb2 f3f3 	udiv	r3, r2, r3
 800307c:	b2db      	uxtb	r3, r3
 800307e:	3301      	adds	r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fc63 	bl	8002954 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 800308e:	f107 0310 	add.w	r3, r7, #16
 8003092:	461a      	mov	r2, r3
 8003094:	2101      	movs	r1, #1
 8003096:	20a3      	movs	r0, #163	; 0xa3
 8003098:	f001 fa04 	bl	80044a4 <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 800309c:	7c3b      	ldrb	r3, [r7, #16]
 800309e:	f023 0302 	bic.w	r3, r3, #2
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	743b      	strb	r3, [r7, #16]
 80030a6:	f107 0310 	add.w	r3, r7, #16
 80030aa:	461a      	mov	r2, r3
 80030ac:	2101      	movs	r1, #1
 80030ae:	20a3      	movs	r0, #163	; 0xa3
 80030b0:	f001 f9ac 	bl	800440c <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f107 0216 	add.w	r2, r7, #22
 80030bc:	f107 0117 	add.w	r1, r7, #23
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fc3d 	bl	8003940 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
 80030c8:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	7b5a      	ldrb	r2, [r3, #13]
 80030ce:	7dbb      	ldrb	r3, [r7, #22]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 80030d6:	f107 0310 	add.w	r3, r7, #16
 80030da:	461a      	mov	r2, r3
 80030dc:	2101      	movs	r1, #1
 80030de:	201c      	movs	r0, #28
 80030e0:	f001 f9e0 	bl	80044a4 <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	f107 0214 	add.w	r2, r7, #20
 80030ec:	f107 0115 	add.w	r1, r7, #21
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fdbd 	bl	8003c70 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 80030f6:	7d3b      	ldrb	r3, [r7, #20]
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	b25a      	sxtb	r2, r3
 80030fc:	7c3b      	ldrb	r3, [r7, #16]
 80030fe:	b25b      	sxtb	r3, r3
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	b25b      	sxtb	r3, r3
 8003106:	4313      	orrs	r3, r2
 8003108:	b25a      	sxtb	r2, r3
 800310a:	7d7b      	ldrb	r3, [r7, #21]
 800310c:	b25b      	sxtb	r3, r3
 800310e:	4313      	orrs	r3, r2
 8003110:	b25b      	sxtb	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f107 0212 	add.w	r2, r7, #18
 800311e:	f107 0113 	add.w	r1, r7, #19
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fcbe 	bl	8003aa4 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8003128:	7cfb      	ldrb	r3, [r7, #19]
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	b25a      	sxtb	r2, r3
 800312e:	7cbb      	ldrb	r3, [r7, #18]
 8003130:	b25b      	sxtb	r3, r3
 8003132:	4313      	orrs	r3, r2
 8003134:	b25b      	sxtb	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 800313a:	4b4a      	ldr	r3, [pc, #296]	; (8003264 <SpiritRadioInit+0x2fc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	0b1b      	lsrs	r3, r3, #12
 8003140:	ee07 3a90 	vmov	s15, r3
 8003144:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003148:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003270 <SpiritRadioInit+0x308>
 800314c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003150:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003274 <SpiritRadioInit+0x30c>
 8003154:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003158:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 800315c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003168:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800316c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003170:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317c:	dd09      	ble.n	8003192 <SpiritRadioInit+0x22a>
 800317e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003186:	edc7 7a00 	vstr	s15, [r7]
 800318a:	783b      	ldrb	r3, [r7, #0]
 800318c:	3301      	adds	r3, #1
 800318e:	b2db      	uxtb	r3, r3
 8003190:	e006      	b.n	80031a0 <SpiritRadioInit+0x238>
 8003192:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800319a:	edc7 7a00 	vstr	s15, [r7]
 800319e:	783b      	ldrb	r3, [r7, #0]
 80031a0:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 80031a2:	4b30      	ldr	r3, [pc, #192]	; (8003264 <SpiritRadioInit+0x2fc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a30      	ldr	r2, [pc, #192]	; (8003268 <SpiritRadioInit+0x300>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d802      	bhi.n	80031b2 <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	777b      	strb	r3, [r7, #29]
 80031b0:	e033      	b.n	800321a <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 80031b2:	4b2c      	ldr	r3, [pc, #176]	; (8003264 <SpiritRadioInit+0x2fc>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	0b5b      	lsrs	r3, r3, #13
 80031b8:	ee07 3a90 	vmov	s15, r3
 80031bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031c0:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003270 <SpiritRadioInit+0x308>
 80031c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031c8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003274 <SpiritRadioInit+0x30c>
 80031cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 80031d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80031e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80031ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f4:	dd09      	ble.n	800320a <SpiritRadioInit+0x2a2>
 80031f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031fe:	edc7 7a00 	vstr	s15, [r7]
 8003202:	783b      	ldrb	r3, [r7, #0]
 8003204:	3301      	adds	r3, #1
 8003206:	b2db      	uxtb	r3, r3
 8003208:	e006      	b.n	8003218 <SpiritRadioInit+0x2b0>
 800320a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800320e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003212:	edc7 7a00 	vstr	s15, [r7]
 8003216:	783b      	ldrb	r3, [r7, #0]
 8003218:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 800321a:	f107 030f 	add.w	r3, r7, #15
 800321e:	461a      	mov	r2, r3
 8003220:	2101      	movs	r1, #1
 8003222:	2007      	movs	r0, #7
 8003224:	f001 f8f2 	bl	800440c <RadioSpiWriteRegisters>
 8003228:	4602      	mov	r2, r0
 800322a:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <SpiritRadioInit+0x2f8>)
 800322c:	b212      	sxth	r2, r2
 800322e:	4611      	mov	r1, r2
 8003230:	7019      	strb	r1, [r3, #0]
 8003232:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003236:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8003238:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <SpiritRadioInit+0x2fc>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a0e      	ldr	r2, [pc, #56]	; (8003278 <SpiritRadioInit+0x310>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d91e      	bls.n	8003280 <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <SpiritRadioInit+0x2fc>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a0d      	ldr	r2, [pc, #52]	; (800327c <SpiritRadioInit+0x314>)
 8003248:	4293      	cmp	r3, r2
 800324a:	bf8c      	ite	hi
 800324c:	2301      	movhi	r3, #1
 800324e:	2300      	movls	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f86c 	bl	8003330 <SpiritRadioSetXtalFlag>
 8003258:	e01d      	b.n	8003296 <SpiritRadioInit+0x32e>
 800325a:	bf00      	nop
 800325c:	49742400 	.word	0x49742400
 8003260:	200025c8 	.word	0x200025c8
 8003264:	200025c4 	.word	0x200025c4
 8003268:	01c9c37f 	.word	0x01c9c37f
 800326c:	48800000 	.word	0x48800000
 8003270:	49afd520 	.word	0x49afd520
 8003274:	42800000 	.word	0x42800000
 8003278:	01c9c380 	.word	0x01c9c380
 800327c:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8003280:	4b28      	ldr	r3, [pc, #160]	; (8003324 <SpiritRadioInit+0x3bc>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a28      	ldr	r2, [pc, #160]	; (8003328 <SpiritRadioInit+0x3c0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	bf8c      	ite	hi
 800328a:	2301      	movhi	r3, #1
 800328c:	2300      	movls	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	4618      	mov	r0, r3
 8003292:	f000 f84d 	bl	8003330 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	330c      	adds	r3, #12
 800329a:	461a      	mov	r2, r3
 800329c:	2101      	movs	r1, #1
 800329e:	206c      	movs	r0, #108	; 0x6c
 80032a0:	f001 f8b4 	bl	800440c <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 80032a4:	f107 031c 	add.w	r3, r7, #28
 80032a8:	461a      	mov	r2, r3
 80032aa:	2104      	movs	r1, #4
 80032ac:	200c      	movs	r0, #12
 80032ae:	f001 f8ad 	bl	800440c <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 80032b2:	f107 0318 	add.w	r3, r7, #24
 80032b6:	461a      	mov	r2, r3
 80032b8:	2104      	movs	r1, #4
 80032ba:	201a      	movs	r0, #26
 80032bc:	f001 f8a6 	bl	800440c <RadioSpiWriteRegisters>
 80032c0:	4602      	mov	r2, r0
 80032c2:	4b1a      	ldr	r3, [pc, #104]	; (800332c <SpiritRadioInit+0x3c4>)
 80032c4:	b212      	sxth	r2, r2
 80032c6:	4611      	mov	r1, r2
 80032c8:	7019      	strb	r1, [r3, #0]
 80032ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80032ce:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 80032d0:	2001      	movs	r0, #1
 80032d2:	f000 ff15 	bl	8004100 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 80032da:	23e3      	movs	r3, #227	; 0xe3
 80032dc:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 80032de:	f107 031c 	add.w	r3, r7, #28
 80032e2:	461a      	mov	r2, r3
 80032e4:	2102      	movs	r1, #2
 80032e6:	2099      	movs	r0, #153	; 0x99
 80032e8:	f001 f890 	bl	800440c <RadioSpiWriteRegisters>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b0f      	ldr	r3, [pc, #60]	; (800332c <SpiritRadioInit+0x3c4>)
 80032f0:	b212      	sxth	r2, r2
 80032f2:	4611      	mov	r1, r2
 80032f4:	7019      	strb	r1, [r3, #0]
 80032f6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80032fa:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 80032fc:	2322      	movs	r3, #34	; 0x22
 80032fe:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8003300:	f107 031c 	add.w	r3, r7, #28
 8003304:	461a      	mov	r2, r3
 8003306:	2101      	movs	r1, #1
 8003308:	20bc      	movs	r0, #188	; 0xbc
 800330a:	f001 f87f 	bl	800440c <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 f9aa 	bl	800366c <SpiritRadioSetFrequencyBase>
 8003318:	4603      	mov	r3, r0
  
}
 800331a:	4618      	mov	r0, r3
 800331c:	3730      	adds	r7, #48	; 0x30
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	200025c4 	.word	0x200025c4
 8003328:	017d783f 	.word	0x017d783f
 800332c:	200025c8 	.word	0x200025c8

08003330 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 800333e:	f107 030f 	add.w	r3, r7, #15
 8003342:	461a      	mov	r2, r3
 8003344:	2101      	movs	r1, #1
 8003346:	2001      	movs	r0, #1
 8003348:	f001 f8ac 	bl	80044a4 <RadioSpiReadRegisters>
 800334c:	4602      	mov	r2, r0
 800334e:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <SpiritRadioSetXtalFlag+0x70>)
 8003350:	b212      	sxth	r2, r2
 8003352:	4611      	mov	r1, r2
 8003354:	7019      	strb	r1, [r3, #0]
 8003356:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800335a:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d105      	bne.n	800336e <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003368:	b2db      	uxtb	r3, r3
 800336a:	73fb      	strb	r3, [r7, #15]
 800336c:	e004      	b.n	8003378 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003374:	b2db      	uxtb	r3, r3
 8003376:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8003378:	f107 030f 	add.w	r3, r7, #15
 800337c:	461a      	mov	r2, r3
 800337e:	2101      	movs	r1, #1
 8003380:	2001      	movs	r0, #1
 8003382:	f001 f843 	bl	800440c <RadioSpiWriteRegisters>
 8003386:	4602      	mov	r2, r0
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <SpiritRadioSetXtalFlag+0x70>)
 800338a:	b212      	sxth	r2, r2
 800338c:	4611      	mov	r1, r2
 800338e:	7019      	strb	r1, [r3, #0]
 8003390:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003394:	705a      	strb	r2, [r3, #1]
  
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200025c8 	.word	0x200025c8

080033a4 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a3a      	ldr	r2, [pc, #232]	; (80034a4 <SpiritRadioSearchWCP+0x100>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d306      	bcc.n	80033ce <SpiritRadioSearchWCP+0x2a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a39      	ldr	r2, [pc, #228]	; (80034a8 <SpiritRadioSearchWCP+0x104>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d802      	bhi.n	80033ce <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 80033c8:	2306      	movs	r3, #6
 80033ca:	73bb      	strb	r3, [r7, #14]
 80033cc:	e01f      	b.n	800340e <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a36      	ldr	r2, [pc, #216]	; (80034ac <SpiritRadioSearchWCP+0x108>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d906      	bls.n	80033e4 <SpiritRadioSearchWCP+0x40>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a35      	ldr	r2, [pc, #212]	; (80034b0 <SpiritRadioSearchWCP+0x10c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d802      	bhi.n	80033e4 <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 80033de:	230c      	movs	r3, #12
 80033e0:	73bb      	strb	r3, [r7, #14]
 80033e2:	e014      	b.n	800340e <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a33      	ldr	r2, [pc, #204]	; (80034b4 <SpiritRadioSearchWCP+0x110>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d906      	bls.n	80033fa <SpiritRadioSearchWCP+0x56>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a32      	ldr	r2, [pc, #200]	; (80034b8 <SpiritRadioSearchWCP+0x114>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d802      	bhi.n	80033fa <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 80033f4:	2310      	movs	r3, #16
 80033f6:	73bb      	strb	r3, [r7, #14]
 80033f8:	e009      	b.n	800340e <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a2f      	ldr	r2, [pc, #188]	; (80034bc <SpiritRadioSearchWCP+0x118>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d905      	bls.n	800340e <SpiritRadioSearchWCP+0x6a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a2e      	ldr	r2, [pc, #184]	; (80034c0 <SpiritRadioSearchWCP+0x11c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d801      	bhi.n	800340e <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 800340a:	2320      	movs	r3, #32
 800340c:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a2c      	ldr	r2, [pc, #176]	; (80034c4 <SpiritRadioSearchWCP+0x120>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	099b      	lsrs	r3, r3, #6
 8003418:	7bba      	ldrb	r2, [r7, #14]
 800341a:	fb02 f303 	mul.w	r3, r2, r3
 800341e:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8003420:	f241 631f 	movw	r3, #5663	; 0x161f
 8003424:	461a      	mov	r2, r3
 8003426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800342a:	fb02 f303 	mul.w	r3, r2, r3
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	429a      	cmp	r2, r3
 8003432:	d302      	bcc.n	800343a <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 8003434:	230f      	movs	r3, #15
 8003436:	73fb      	strb	r3, [r7, #15]
 8003438:	e023      	b.n	8003482 <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]
 800343e:	e005      	b.n	800344c <SpiritRadioSearchWCP+0xa8>
 8003440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	3301      	adds	r3, #1
 8003448:	b2db      	uxtb	r3, r3
 800344a:	73fb      	strb	r3, [r7, #15]
 800344c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003450:	2b0e      	cmp	r3, #14
 8003452:	dc0c      	bgt.n	800346e <SpiritRadioSearchWCP+0xca>
 8003454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003458:	4a1b      	ldr	r2, [pc, #108]	; (80034c8 <SpiritRadioSearchWCP+0x124>)
 800345a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800345e:	461a      	mov	r2, r3
 8003460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003464:	fb02 f303 	mul.w	r3, r2, r3
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	429a      	cmp	r2, r3
 800346c:	d8e8      	bhi.n	8003440 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 800346e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <SpiritRadioSearchWCP+0xde>
      i--;
 8003476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b2db      	uxtb	r3, r3
 8003480:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8003482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003486:	425a      	negs	r2, r3
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	f002 0207 	and.w	r2, r2, #7
 8003490:	bf58      	it	pl
 8003492:	4253      	negpl	r3, r2
 8003494:	b25b      	sxtb	r3, r3
 8003496:	b2db      	uxtb	r3, r3
  
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	2e5f5680 	.word	0x2e5f5680
 80034a8:	390c2fe0 	.word	0x390c2fe0
 80034ac:	1701e47f 	.word	0x1701e47f
 80034b0:	1c146a60 	.word	0x1c146a60
 80034b4:	11d260bf 	.word	0x11d260bf
 80034b8:	14ced7e0 	.word	0x14ced7e0
 80034bc:	08e18f3f 	.word	0x08e18f3f
 80034c0:	0a6fd060 	.word	0x0a6fd060
 80034c4:	10624dd3 	.word	0x10624dd3
 80034c8:	0800c284 	.word	0x0800c284

080034cc <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 80034d2:	1d3b      	adds	r3, r7, #4
 80034d4:	461a      	mov	r2, r3
 80034d6:	2104      	movs	r1, #4
 80034d8:	2008      	movs	r0, #8
 80034da:	f000 ffe3 	bl	80044a4 <RadioSpiReadRegisters>
 80034de:	4602      	mov	r2, r0
 80034e0:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <SpiritRadioGetSynthWord+0x48>)
 80034e2:	b212      	sxth	r2, r2
 80034e4:	4611      	mov	r1, r2
 80034e6:	7019      	strb	r1, [r3, #0]
 80034e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80034ec:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80034ee:	793b      	ldrb	r3, [r7, #4]
 80034f0:	055b      	lsls	r3, r3, #21
 80034f2:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 80034f6:	797b      	ldrb	r3, [r7, #5]
 80034f8:	035b      	lsls	r3, r3, #13
 80034fa:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80034fc:	79bb      	ldrb	r3, [r7, #6]
 80034fe:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8003500:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8003502:	79fa      	ldrb	r2, [r7, #7]
 8003504:	08d2      	lsrs	r2, r2, #3
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	4413      	add	r3, r2
  
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	200025c8 	.word	0x200025c8

08003518 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 800351e:	1dfb      	adds	r3, r7, #7
 8003520:	461a      	mov	r2, r3
 8003522:	2101      	movs	r1, #1
 8003524:	200b      	movs	r0, #11
 8003526:	f000 ffbd 	bl	80044a4 <RadioSpiReadRegisters>
 800352a:	4602      	mov	r2, r0
 800352c:	4b10      	ldr	r3, [pc, #64]	; (8003570 <SpiritRadioGetBand+0x58>)
 800352e:	b212      	sxth	r2, r2
 8003530:	4611      	mov	r1, r2
 8003532:	7019      	strb	r1, [r3, #0]
 8003534:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003538:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8003544:	2300      	movs	r3, #0
 8003546:	e00e      	b.n	8003566 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	2b03      	cmp	r3, #3
 8003550:	d101      	bne.n	8003556 <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8003552:	2301      	movs	r3, #1
 8003554:	e007      	b.n	8003566 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	2b04      	cmp	r3, #4
 800355e:	d101      	bne.n	8003564 <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8003560:	2302      	movs	r3, #2
 8003562:	e000      	b.n	8003566 <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8003564:	2303      	movs	r3, #3
  }
  
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	200025c8 	.word	0x200025c8

08003574 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 800357a:	1dfb      	adds	r3, r7, #7
 800357c:	461a      	mov	r2, r3
 800357e:	2101      	movs	r1, #1
 8003580:	206c      	movs	r0, #108	; 0x6c
 8003582:	f000 ff8f 	bl	80044a4 <RadioSpiReadRegisters>
 8003586:	4602      	mov	r2, r0
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <SpiritRadioGetChannel+0x2c>)
 800358a:	b212      	sxth	r2, r2
 800358c:	4611      	mov	r1, r2
 800358e:	7019      	strb	r1, [r3, #0]
 8003590:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003594:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8003596:	79fb      	ldrb	r3, [r7, #7]
  
}
 8003598:	4618      	mov	r0, r3
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	200025c8 	.word	0x200025c8

080035a4 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 80035aa:	1dfb      	adds	r3, r7, #7
 80035ac:	461a      	mov	r2, r3
 80035ae:	2101      	movs	r1, #1
 80035b0:	200c      	movs	r0, #12
 80035b2:	f000 ff77 	bl	80044a4 <RadioSpiReadRegisters>
 80035b6:	4602      	mov	r2, r0
 80035b8:	4b08      	ldr	r3, [pc, #32]	; (80035dc <SpiritRadioGetChannelSpace+0x38>)
 80035ba:	b212      	sxth	r2, r2
 80035bc:	4611      	mov	r1, r2
 80035be:	7019      	strb	r1, [r3, #0]
 80035c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80035c4:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	461a      	mov	r2, r3
 80035ca:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <SpiritRadioGetChannelSpace+0x3c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	fb02 f303 	mul.w	r3, r2, r3
 80035d2:	0bdb      	lsrs	r3, r3, #15
  
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	200025c8 	.word	0x200025c8
 80035e0:	200025c4 	.word	0x200025c4

080035e4 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 80035ea:	1d3b      	adds	r3, r7, #4
 80035ec:	461a      	mov	r2, r3
 80035ee:	2102      	movs	r1, #2
 80035f0:	200e      	movs	r0, #14
 80035f2:	f000 ff57 	bl	80044a4 <RadioSpiReadRegisters>
 80035f6:	4602      	mov	r2, r0
 80035f8:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <SpiritRadioGetFrequencyOffset+0x80>)
 80035fa:	b212      	sxth	r2, r2
 80035fc:	4611      	mov	r1, r2
 80035fe:	7019      	strb	r1, [r3, #0]
 8003600:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003604:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 8003606:	793b      	ldrb	r3, [r7, #4]
 8003608:	b29b      	uxth	r3, r3
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	b29a      	uxth	r2, r3
 800360e:	797b      	ldrb	r3, [r7, #5]
 8003610:	b29b      	uxth	r3, r3
 8003612:	4413      	add	r3, r2
 8003614:	b29b      	uxth	r3, r3
 8003616:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 8003618:	887b      	ldrh	r3, [r7, #2]
 800361a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 8003622:	887b      	ldrh	r3, [r7, #2]
 8003624:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8003628:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800362c:	b29b      	uxth	r3, r3
 800362e:	807b      	strh	r3, [r7, #2]
 8003630:	e004      	b.n	800363c <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 8003632:	887b      	ldrh	r3, [r7, #2]
 8003634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003638:	b29b      	uxth	r3, r3
 800363a:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 800363c:	1cbb      	adds	r3, r7, #2
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 8003642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003646:	4a08      	ldr	r2, [pc, #32]	; (8003668 <SpiritRadioGetFrequencyOffset+0x84>)
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	fb02 f303 	mul.w	r3, r2, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	da03      	bge.n	800365a <SpiritRadioGetFrequencyOffset+0x76>
 8003652:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8003656:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800365a:	149b      	asrs	r3, r3, #18
  
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	200025c8 	.word	0x200025c8
 8003668:	200025c4 	.word	0x200025c4

0800366c <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 800366c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003670:	b08a      	sub	sp, #40	; 0x28
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 8003676:	2300      	movs	r3, #0
 8003678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a79      	ldr	r2, [pc, #484]	; (8003864 <SpiritRadioSetFrequencyBase+0x1f8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d307      	bcc.n	8003694 <SpiritRadioSetFrequencyBase+0x28>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a78      	ldr	r2, [pc, #480]	; (8003868 <SpiritRadioSetFrequencyBase+0x1fc>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d803      	bhi.n	8003694 <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 800368c:	2300      	movs	r3, #0
 800368e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003692:	e022      	b.n	80036da <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a75      	ldr	r2, [pc, #468]	; (800386c <SpiritRadioSetFrequencyBase+0x200>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d907      	bls.n	80036ac <SpiritRadioSetFrequencyBase+0x40>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a74      	ldr	r2, [pc, #464]	; (8003870 <SpiritRadioSetFrequencyBase+0x204>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d803      	bhi.n	80036ac <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 80036a4:	2301      	movs	r3, #1
 80036a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036aa:	e016      	b.n	80036da <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a71      	ldr	r2, [pc, #452]	; (8003874 <SpiritRadioSetFrequencyBase+0x208>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d907      	bls.n	80036c4 <SpiritRadioSetFrequencyBase+0x58>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a70      	ldr	r2, [pc, #448]	; (8003878 <SpiritRadioSetFrequencyBase+0x20c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d803      	bhi.n	80036c4 <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 80036bc:	2302      	movs	r3, #2
 80036be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036c2:	e00a      	b.n	80036da <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a6d      	ldr	r2, [pc, #436]	; (800387c <SpiritRadioSetFrequencyBase+0x210>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d906      	bls.n	80036da <SpiritRadioSetFrequencyBase+0x6e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a6c      	ldr	r2, [pc, #432]	; (8003880 <SpiritRadioSetFrequencyBase+0x214>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d802      	bhi.n	80036da <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 80036d4:	2303      	movs	r3, #3
 80036d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 80036da:	f7ff ff83 	bl	80035e4 <SpiritRadioGetFrequencyOffset>
 80036de:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 80036e0:	f7ff ff60 	bl	80035a4 <SpiritRadioGetChannelSpace>
 80036e4:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 80036e6:	f7ff ff45 	bl	8003574 <SpiritRadioGetChannel>
 80036ea:	4603      	mov	r3, r0
 80036ec:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80036ee:	6a3a      	ldr	r2, [r7, #32]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	441a      	add	r2, r3
 80036f4:	7efb      	ldrb	r3, [r7, #27]
 80036f6:	69f9      	ldr	r1, [r7, #28]
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8003700:	f000 fd60 	bl	80041c4 <SpiritRadioGetRefDiv>
 8003704:	4603      	mov	r3, r0
 8003706:	3301      	adds	r3, #1
 8003708:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 800370a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800370e:	2b03      	cmp	r3, #3
 8003710:	d839      	bhi.n	8003786 <SpiritRadioSetFrequencyBase+0x11a>
 8003712:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <SpiritRadioSetFrequencyBase+0xac>)
 8003714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003718:	08003771 	.word	0x08003771
 800371c:	08003759 	.word	0x08003759
 8003720:	08003741 	.word	0x08003741
 8003724:	08003729 	.word	0x08003729
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	4a56      	ldr	r2, [pc, #344]	; (8003884 <SpiritRadioSetFrequencyBase+0x218>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d803      	bhi.n	8003738 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003730:	2000      	movs	r0, #0
 8003732:	f7fe fd9b 	bl	800226c <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003736:	e026      	b.n	8003786 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003738:	2001      	movs	r0, #1
 800373a:	f7fe fd97 	bl	800226c <SpiritCalibrationSelectVco>
    break;
 800373e:	e022      	b.n	8003786 <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	4a51      	ldr	r2, [pc, #324]	; (8003888 <SpiritRadioSetFrequencyBase+0x21c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d803      	bhi.n	8003750 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003748:	2000      	movs	r0, #0
 800374a:	f7fe fd8f 	bl	800226c <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800374e:	e01a      	b.n	8003786 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003750:	2001      	movs	r0, #1
 8003752:	f7fe fd8b 	bl	800226c <SpiritCalibrationSelectVco>
    break;
 8003756:	e016      	b.n	8003786 <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	4a4c      	ldr	r2, [pc, #304]	; (800388c <SpiritRadioSetFrequencyBase+0x220>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d803      	bhi.n	8003768 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003760:	2000      	movs	r0, #0
 8003762:	f7fe fd83 	bl	800226c <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003766:	e00e      	b.n	8003786 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003768:	2001      	movs	r0, #1
 800376a:	f7fe fd7f 	bl	800226c <SpiritCalibrationSelectVco>
    break;
 800376e:	e00a      	b.n	8003786 <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	4a47      	ldr	r2, [pc, #284]	; (8003890 <SpiritRadioSetFrequencyBase+0x224>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d803      	bhi.n	8003780 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003778:	2000      	movs	r0, #0
 800377a:	f7fe fd77 	bl	800226c <SpiritCalibrationSelectVco>
 800377e:	e002      	b.n	8003786 <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8003780:	2001      	movs	r0, #1
 8003782:	f7fe fd73 	bl	800226c <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8003786:	6978      	ldr	r0, [r7, #20]
 8003788:	f7ff fe0c 	bl	80033a4 <SpiritRadioSearchWCP>
 800378c:	4603      	mov	r3, r0
 800378e:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8003790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003794:	4a3f      	ldr	r2, [pc, #252]	; (8003894 <SpiritRadioSetFrequencyBase+0x228>)
 8003796:	5cd3      	ldrb	r3, [r2, r3]
 8003798:	461a      	mov	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	fb02 f303 	mul.w	r3, r2, r3
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fc feaf 	bl	8000504 <__aeabi_ui2d>
 80037a6:	4604      	mov	r4, r0
 80037a8:	460d      	mov	r5, r1
 80037aa:	7cfb      	ldrb	r3, [r7, #19]
 80037ac:	049b      	lsls	r3, r3, #18
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fc feb8 	bl	8000524 <__aeabi_i2d>
 80037b4:	4680      	mov	r8, r0
 80037b6:	4689      	mov	r9, r1
 80037b8:	4b37      	ldr	r3, [pc, #220]	; (8003898 <SpiritRadioSetFrequencyBase+0x22c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fc fea1 	bl	8000504 <__aeabi_ui2d>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4640      	mov	r0, r8
 80037c8:	4649      	mov	r1, r9
 80037ca:	f7fd f83f 	bl	800084c <__aeabi_ddiv>
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	4620      	mov	r0, r4
 80037d4:	4629      	mov	r1, r5
 80037d6:	f7fc ff0f 	bl	80005f8 <__aeabi_dmul>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4610      	mov	r0, r2
 80037e0:	4619      	mov	r1, r3
 80037e2:	f7fd f91b 	bl	8000a1c <__aeabi_d2uiz>
 80037e6:	4603      	mov	r3, r0
 80037e8:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	0d5b      	lsrs	r3, r3, #21
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	7cbb      	ldrb	r3, [r7, #18]
 80037f8:	015b      	lsls	r3, r3, #5
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	4313      	orrs	r3, r2
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	0b5b      	lsrs	r3, r3, #13
 8003806:	b2db      	uxtb	r3, r3
 8003808:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	b2db      	uxtb	r3, r3
 8003810:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	b2da      	uxtb	r2, r3
 800381a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800381e:	491f      	ldr	r1, [pc, #124]	; (800389c <SpiritRadioSetFrequencyBase+0x230>)
 8003820:	5ccb      	ldrb	r3, [r1, r3]
 8003822:	4313      	orrs	r3, r2
 8003824:	b2db      	uxtb	r3, r3
 8003826:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8003828:	f107 0308 	add.w	r3, r7, #8
 800382c:	461a      	mov	r2, r3
 800382e:	2104      	movs	r1, #4
 8003830:	2008      	movs	r0, #8
 8003832:	f000 fdeb 	bl	800440c <RadioSpiWriteRegisters>
 8003836:	4602      	mov	r2, r0
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <SpiritRadioSetFrequencyBase+0x234>)
 800383a:	b212      	sxth	r2, r2
 800383c:	4611      	mov	r1, r2
 800383e:	7019      	strb	r1, [r3, #0]
 8003840:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003844:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 8003846:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <SpiritRadioSetFrequencyBase+0x238>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d103      	bne.n	8003856 <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 800384e:	f7fe ff6d 	bl	800272c <SpiritManagementWaVcoCalibration>
 8003852:	4603      	mov	r3, r0
 8003854:	e000      	b.n	8003858 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3728      	adds	r7, #40	; 0x28
 800385c:	46bd      	mov	sp, r7
 800385e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003862:	bf00      	nop
 8003864:	2e5f5680 	.word	0x2e5f5680
 8003868:	390c2fe0 	.word	0x390c2fe0
 800386c:	1701e47f 	.word	0x1701e47f
 8003870:	1c146a60 	.word	0x1c146a60
 8003874:	11d260bf 	.word	0x11d260bf
 8003878:	14ced7e0 	.word	0x14ced7e0
 800387c:	08e18f3f 	.word	0x08e18f3f
 8003880:	0a6fd060 	.word	0x0a6fd060
 8003884:	099cf4e1 	.word	0x099cf4e1
 8003888:	1339e9c3 	.word	0x1339e9c3
 800388c:	19a28d05 	.word	0x19a28d05
 8003890:	33451a0a 	.word	0x33451a0a
 8003894:	0800c1c8 	.word	0x0800c1c8
 8003898:	200025c4 	.word	0x200025c4
 800389c:	0800c1cc 	.word	0x0800c1cc
 80038a0:	200025c8 	.word	0x200025c8
 80038a4:	2000034d 	.word	0x2000034d

080038a8 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 80038a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 80038b0:	f7ff fe0c 	bl	80034cc <SpiritRadioGetSynthWord>
 80038b4:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 80038b6:	f7ff fe2f 	bl	8003518 <SpiritRadioGetBand>
 80038ba:	4603      	mov	r3, r0
 80038bc:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 80038be:	f000 fc81 	bl	80041c4 <SpiritRadioGetRefDiv>
 80038c2:	4603      	mov	r3, r0
 80038c4:	3301      	adds	r3, #1
 80038c6:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7fc fe1b 	bl	8000504 <__aeabi_ui2d>
 80038ce:	4604      	mov	r4, r0
 80038d0:	460d      	mov	r5, r1
 80038d2:	4b19      	ldr	r3, [pc, #100]	; (8003938 <SpiritRadioGetFrequencyBase+0x90>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fc fe14 	bl	8000504 <__aeabi_ui2d>
 80038dc:	4680      	mov	r8, r0
 80038de:	4689      	mov	r9, r1
 80038e0:	78bb      	ldrb	r3, [r7, #2]
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	4915      	ldr	r1, [pc, #84]	; (800393c <SpiritRadioGetFrequencyBase+0x94>)
 80038e6:	5c8a      	ldrb	r2, [r1, r2]
 80038e8:	fb02 f303 	mul.w	r3, r2, r3
 80038ec:	049b      	lsls	r3, r3, #18
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fc fe18 	bl	8000524 <__aeabi_i2d>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4640      	mov	r0, r8
 80038fa:	4649      	mov	r1, r9
 80038fc:	f7fc ffa6 	bl	800084c <__aeabi_ddiv>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4620      	mov	r0, r4
 8003906:	4629      	mov	r1, r5
 8003908:	f7fc fe76 	bl	80005f8 <__aeabi_dmul>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	ec43 2b17 	vmov	d7, r2, r3
 8003914:	eeb0 0a47 	vmov.f32	s0, s14
 8003918:	eef0 0a67 	vmov.f32	s1, s15
 800391c:	f008 fa36 	bl	800bd8c <round>
 8003920:	ec53 2b10 	vmov	r2, r3, d0
 8003924:	4610      	mov	r0, r2
 8003926:	4619      	mov	r1, r3
 8003928:	f7fd f878 	bl	8000a1c <__aeabi_d2uiz>
 800392c:	4603      	mov	r3, r0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003938:	200025c4 	.word	0x200025c4
 800393c:	0800c1c8 	.word	0x0800c1c8

08003940 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 800394c:	2300      	movs	r3, #0
 800394e:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 8003950:	230f      	movs	r3, #15
 8003952:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 8003958:	f000 fc86 	bl	8004268 <SpiritRadioGetDigDiv>
 800395c:	4603      	mov	r3, r0
 800395e:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 8003960:	e015      	b.n	800398e <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 8003962:	4b4f      	ldr	r3, [pc, #316]	; (8003aa0 <SpiritRadioSearchDatarateME+0x160>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800396a:	f1c3 0114 	rsb	r1, r3, #20
 800396e:	7ebb      	ldrb	r3, [r7, #26]
 8003970:	440b      	add	r3, r1
 8003972:	fa22 f303 	lsr.w	r3, r2, r3
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	429a      	cmp	r2, r3
 800397a:	d302      	bcc.n	8003982 <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 800397c:	2301      	movs	r3, #1
 800397e:	763b      	strb	r3, [r7, #24]
 8003980:	e005      	b.n	800398e <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 8003982:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b2db      	uxtb	r3, r3
 800398c:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 800398e:	7e3b      	ldrb	r3, [r7, #24]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d103      	bne.n	800399e <SpiritRadioSearchDatarateME+0x5e>
 8003996:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800399a:	2b00      	cmp	r3, #0
 800399c:	dae1      	bge.n	8003962 <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 800399e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	da01      	bge.n	80039aa <SpiritRadioSearchDatarateME+0x6a>
 80039a6:	2300      	movs	r3, #0
 80039a8:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 80039aa:	7ffa      	ldrb	r2, [r7, #31]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 80039b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80039b4:	f1c3 0317 	rsb	r3, r3, #23
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	409a      	lsls	r2, r3
 80039bc:	4b38      	ldr	r3, [pc, #224]	; (8003aa0 <SpiritRadioSearchDatarateME+0x160>)
 80039be:	6819      	ldr	r1, [r3, #0]
 80039c0:	7ebb      	ldrb	r3, [r7, #26]
 80039c2:	3305      	adds	r3, #5
 80039c4:	fa21 f303 	lsr.w	r3, r1, r3
 80039c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039cc:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 80039ce:	2300      	movs	r3, #0
 80039d0:	77bb      	strb	r3, [r7, #30]
 80039d2:	e031      	b.n	8003a38 <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 80039d4:	7e7a      	ldrb	r2, [r7, #25]
 80039d6:	7fbb      	ldrb	r3, [r7, #30]
 80039d8:	4413      	add	r3, r2
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d021      	beq.n	8003a22 <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	7e7b      	ldrb	r3, [r7, #25]
 80039e4:	f503 7180 	add.w	r1, r3, #256	; 0x100
 80039e8:	7fbb      	ldrb	r3, [r7, #30]
 80039ea:	440b      	add	r3, r1
 80039ec:	3b01      	subs	r3, #1
 80039ee:	4618      	mov	r0, r3
 80039f0:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <SpiritRadioSearchDatarateME+0x160>)
 80039f2:	6819      	ldr	r1, [r3, #0]
 80039f4:	7ebb      	ldrb	r3, [r7, #26]
 80039f6:	3305      	adds	r3, #5
 80039f8:	fa21 f303 	lsr.w	r3, r1, r3
 80039fc:	fb03 f100 	mul.w	r1, r3, r0
 8003a00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003a04:	f1c3 0317 	rsb	r3, r3, #23
 8003a08:	fa21 f303 	lsr.w	r3, r1, r3
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	7fbb      	ldrb	r3, [r7, #30]
 8003a14:	b212      	sxth	r2, r2
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	3320      	adds	r3, #32
 8003a1a:	443b      	add	r3, r7
 8003a1c:	f823 2c10 	strh.w	r2, [r3, #-16]
 8003a20:	e007      	b.n	8003a32 <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 8003a22:	7fbb      	ldrb	r3, [r7, #30]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	3320      	adds	r3, #32
 8003a28:	443b      	add	r3, r7
 8003a2a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003a2e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 8003a32:	7fbb      	ldrb	r3, [r7, #30]
 8003a34:	3301      	adds	r3, #1
 8003a36:	77bb      	strb	r3, [r7, #30]
 8003a38:	7fbb      	ldrb	r3, [r7, #30]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d9ca      	bls.n	80039d4 <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 8003a3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a42:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 8003a44:	2300      	movs	r3, #0
 8003a46:	76fb      	strb	r3, [r7, #27]
 8003a48:	e021      	b.n	8003a8e <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 8003a4a:	7efb      	ldrb	r3, [r7, #27]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	3320      	adds	r3, #32
 8003a50:	443b      	add	r3, r7
 8003a52:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	bfb8      	it	lt
 8003a5a:	425b      	neglt	r3, r3
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	8bba      	ldrh	r2, [r7, #28]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d911      	bls.n	8003a88 <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 8003a64:	7efb      	ldrb	r3, [r7, #27]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	3320      	adds	r3, #32
 8003a6a:	443b      	add	r3, r7
 8003a6c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bfb8      	it	lt
 8003a74:	425b      	neglt	r3, r3
 8003a76:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 8003a78:	7e7a      	ldrb	r2, [r7, #25]
 8003a7a:	7efb      	ldrb	r3, [r7, #27]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003a88:	7efb      	ldrb	r3, [r7, #27]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	76fb      	strb	r3, [r7, #27]
 8003a8e:	7efb      	ldrb	r3, [r7, #27]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d9da      	bls.n	8003a4a <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	3720      	adds	r7, #32
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	200025c4 	.word	0x200025c4

08003aa4 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	; 0x28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8003ab6:	f000 fbd7 	bl	8004268 <SpiritRadioGetDigDiv>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003ac6:	e002      	b.n	8003ace <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8003ace:	4b63      	ldr	r3, [pc, #396]	; (8003c5c <SpiritRadioSearchChannelBwME+0x1b8>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	4a61      	ldr	r2, [pc, #388]	; (8003c60 <SpiritRadioSearchChannelBwME+0x1bc>)
 8003adc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003aea:	e006      	b.n	8003afa <SpiritRadioSearchChannelBwME+0x56>
 8003aec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	3301      	adds	r3, #1
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003afa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003afe:	2b59      	cmp	r3, #89	; 0x59
 8003b00:	dc0f      	bgt.n	8003b22 <SpiritRadioSearchChannelBwME+0x7e>
 8003b02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b06:	4a57      	ldr	r2, [pc, #348]	; (8003c64 <SpiritRadioSearchChannelBwME+0x1c0>)
 8003b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	fb02 f303 	mul.w	r3, r2, r3
 8003b14:	4a54      	ldr	r2, [pc, #336]	; (8003c68 <SpiritRadioSearchChannelBwME+0x1c4>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	0adb      	lsrs	r3, r3, #11
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d3e4      	bcc.n	8003aec <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 8003b22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d077      	beq.n	8003c1a <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 8003b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b2e:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 8003b30:	2300      	movs	r3, #0
 8003b32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003b36:	e03a      	b.n	8003bae <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8003b38:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003b3c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b40:	4413      	add	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	dc06      	bgt.n	8003b54 <SpiritRadioSearchChannelBwME+0xb0>
 8003b46:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003b4a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b4e:	4413      	add	r3, r2
 8003b50:	2b5a      	cmp	r3, #90	; 0x5a
 8003b52:	dc1e      	bgt.n	8003b92 <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8003b5c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b60:	440b      	add	r3, r1
 8003b62:	3b01      	subs	r3, #1
 8003b64:	493f      	ldr	r1, [pc, #252]	; (8003c64 <SpiritRadioSearchChannelBwME+0x1c0>)
 8003b66:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	493d      	ldr	r1, [pc, #244]	; (8003c68 <SpiritRadioSearchChannelBwME+0x1c4>)
 8003b74:	fba1 1303 	umull	r1, r3, r1, r3
 8003b78:	0adb      	lsrs	r3, r3, #11
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b84:	b212      	sxth	r2, r2
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	3328      	adds	r3, #40	; 0x28
 8003b8a:	443b      	add	r3, r7
 8003b8c:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003b90:	e008      	b.n	8003ba4 <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 8003b92:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	3328      	adds	r3, #40	; 0x28
 8003b9a:	443b      	add	r3, r7
 8003b9c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003ba0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 8003ba4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003ba8:	3301      	adds	r3, #1
 8003baa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003bae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d9c0      	bls.n	8003b38 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8003bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bba:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003bc2:	e026      	b.n	8003c12 <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8003bc4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	3328      	adds	r3, #40	; 0x28
 8003bcc:	443b      	add	r3, r7
 8003bce:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	bfb8      	it	lt
 8003bd6:	425b      	neglt	r3, r3
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d913      	bls.n	8003c08 <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8003be0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	3328      	adds	r3, #40	; 0x28
 8003be8:	443b      	add	r3, r7
 8003bea:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	bfb8      	it	lt
 8003bf2:	425b      	neglt	r3, r3
 8003bf4:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 8003bf6:	7efa      	ldrb	r2, [r7, #27]
 8003bf8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003bfc:	4413      	add	r3, r2
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 8003c08:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003c12:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d9d4      	bls.n	8003bc4 <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 8003c1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c1e:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <SpiritRadioSearchChannelBwME+0x1c8>)
 8003c20:	fb82 1203 	smull	r1, r2, r2, r3
 8003c24:	1052      	asrs	r2, r2, #1
 8003c26:	17db      	asrs	r3, r3, #31
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	b25b      	sxtb	r3, r3
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 8003c32:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <SpiritRadioSearchChannelBwME+0x1c8>)
 8003c38:	fb83 1302 	smull	r1, r3, r3, r2
 8003c3c:	1059      	asrs	r1, r3, #1
 8003c3e:	17d3      	asrs	r3, r2, #31
 8003c40:	1ac9      	subs	r1, r1, r3
 8003c42:	460b      	mov	r3, r1
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	440b      	add	r3, r1
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	b25b      	sxtb	r3, r3
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	701a      	strb	r2, [r3, #0]
  
}
 8003c52:	bf00      	nop
 8003c54:	3728      	adds	r7, #40	; 0x28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	200025c4 	.word	0x200025c4
 8003c60:	51eb851f 	.word	0x51eb851f
 8003c64:	0800c1d0 	.word	0x0800c1d0
 8003c68:	c9a633fd 	.word	0xc9a633fd
 8003c6c:	38e38e39 	.word	0x38e38e39

08003c70 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003c70:	b5b0      	push	{r4, r5, r7, lr}
 8003c72:	b08a      	sub	sp, #40	; 0x28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003c80:	4b53      	ldr	r3, [pc, #332]	; (8003dd0 <SpiritRadioSearchFreqDevME+0x160>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	ee07 3a90 	vmov	s15, r3
 8003c88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c8c:	eddf 6a51 	vldr	s13, [pc, #324]	; 8003dd4 <SpiritRadioSearchFreqDevME+0x164>
 8003c90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c94:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c9e:	e028      	b.n	8003cf2 <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8003ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fc fc3a 	bl	8000524 <__aeabi_i2d>
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	4b48      	ldr	r3, [pc, #288]	; (8003dd8 <SpiritRadioSearchFreqDevME+0x168>)
 8003cb6:	f7fc fc9f 	bl	80005f8 <__aeabi_dmul>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	f7fc feab 	bl	8000a1c <__aeabi_d2uiz>
 8003cc6:	ee07 0a90 	vmov	s15, r0
 8003cca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cce:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cda:	ee17 3a90 	vmov	r3, s15
 8003cde:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d309      	bcc.n	8003cfc <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 8003ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cec:	3301      	adds	r3, #1
 8003cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cf6:	2b09      	cmp	r3, #9
 8003cf8:	d9d2      	bls.n	8003ca0 <SpiritRadioSearchFreqDevME+0x30>
 8003cfa:	e000      	b.n	8003cfe <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8003cfc:	bf00      	nop
  }
  (*pcE) = i;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003d04:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 8003d06:	2300      	movs	r3, #0
 8003d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003d0c:	e043      	b.n	8003d96 <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 8003d12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fc fc04 	bl	8000524 <__aeabi_i2d>
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	4b2e      	ldr	r3, [pc, #184]	; (8003ddc <SpiritRadioSearchFreqDevME+0x16c>)
 8003d22:	f7fc fab3 	bl	800028c <__adddf3>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d36:	f7fc fd89 	bl	800084c <__aeabi_ddiv>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4614      	mov	r4, r2
 8003d40:	461d      	mov	r5, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	2301      	movs	r3, #1
 8003d4a:	4093      	lsls	r3, r2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fc fbe9 	bl	8000524 <__aeabi_i2d>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4620      	mov	r0, r4
 8003d58:	4629      	mov	r1, r5
 8003d5a:	f7fc fc4d 	bl	80005f8 <__aeabi_dmul>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4610      	mov	r0, r2
 8003d64:	4619      	mov	r1, r3
 8003d66:	f7fc fe59 	bl	8000a1c <__aeabi_d2uiz>
 8003d6a:	ee07 0a90 	vmov	s15, r0
 8003d6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d72:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d7e:	ee17 3a90 	vmov	r3, s15
 8003d82:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d309      	bcc.n	8003da0 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 8003d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d90:	3301      	adds	r3, #1
 8003d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d9a:	2b07      	cmp	r3, #7
 8003d9c:	d9b7      	bls.n	8003d0e <SpiritRadioSearchFreqDevME+0x9e>
 8003d9e:	e000      	b.n	8003da2 <SpiritRadioSearchFreqDevME+0x132>
      break;
 8003da0:	bf00      	nop
  }
  
  (*pcM)=i;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003da8:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	1ad2      	subs	r2, r2, r3
 8003db0:	69f9      	ldr	r1, [r7, #28]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1acb      	subs	r3, r1, r3
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d205      	bcs.n	8003dc6 <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	701a      	strb	r2, [r3, #0]
  
}
 8003dc6:	bf00      	nop
 8003dc8:	3728      	adds	r7, #40	; 0x28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	200025c4 	.word	0x200025c4
 8003dd4:	48800000 	.word	0x48800000
 8003dd8:	401e0000 	.word	0x401e0000
 8003ddc:	40200000 	.word	0x40200000

08003de0 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4a74      	ldr	r2, [pc, #464]	; (8003fc8 <SpiritRadioGetdBm2Reg+0x1e8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d30c      	bcc.n	8003e16 <SpiritRadioGetdBm2Reg+0x36>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a73      	ldr	r2, [pc, #460]	; (8003fcc <SpiritRadioGetdBm2Reg+0x1ec>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d808      	bhi.n	8003e16 <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4a71      	ldr	r2, [pc, #452]	; (8003fd0 <SpiritRadioGetdBm2Reg+0x1f0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d822      	bhi.n	8003e56 <SpiritRadioGetdBm2Reg+0x76>
 8003e10:	2301      	movs	r3, #1
 8003e12:	75fb      	strb	r3, [r7, #23]
 8003e14:	e01f      	b.n	8003e56 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4a6e      	ldr	r2, [pc, #440]	; (8003fd4 <SpiritRadioGetdBm2Reg+0x1f4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d906      	bls.n	8003e2c <SpiritRadioGetdBm2Reg+0x4c>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4a6d      	ldr	r2, [pc, #436]	; (8003fd8 <SpiritRadioGetdBm2Reg+0x1f8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d802      	bhi.n	8003e2c <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 8003e26:	2302      	movs	r3, #2
 8003e28:	75fb      	strb	r3, [r7, #23]
 8003e2a:	e014      	b.n	8003e56 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a6b      	ldr	r2, [pc, #428]	; (8003fdc <SpiritRadioGetdBm2Reg+0x1fc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d906      	bls.n	8003e42 <SpiritRadioGetdBm2Reg+0x62>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4a6a      	ldr	r2, [pc, #424]	; (8003fe0 <SpiritRadioGetdBm2Reg+0x200>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d802      	bhi.n	8003e42 <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	75fb      	strb	r3, [r7, #23]
 8003e40:	e009      	b.n	8003e56 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4a67      	ldr	r2, [pc, #412]	; (8003fe4 <SpiritRadioGetdBm2Reg+0x204>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d905      	bls.n	8003e56 <SpiritRadioGetdBm2Reg+0x76>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4a66      	ldr	r2, [pc, #408]	; (8003fe8 <SpiritRadioGetdBm2Reg+0x208>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d801      	bhi.n	8003e56 <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 8003e52:	2304      	movs	r3, #4
 8003e54:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 8003e56:	2301      	movs	r3, #1
 8003e58:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8003e5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e66:	dd2f      	ble.n	8003ec8 <SpiritRadioGetdBm2Reg+0xe8>
 8003e68:	7dfa      	ldrb	r2, [r7, #23]
 8003e6a:	4960      	ldr	r1, [pc, #384]	; (8003fec <SpiritRadioGetdBm2Reg+0x20c>)
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	4413      	add	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	440b      	add	r3, r1
 8003e76:	3308      	adds	r3, #8
 8003e78:	edd3 7a00 	vldr	s15, [r3]
 8003e7c:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8003e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e84:	7dfa      	ldrb	r2, [r7, #23]
 8003e86:	4959      	ldr	r1, [pc, #356]	; (8003fec <SpiritRadioGetdBm2Reg+0x20c>)
 8003e88:	4613      	mov	r3, r2
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	4413      	add	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	440b      	add	r3, r1
 8003e92:	330c      	adds	r3, #12
 8003e94:	ed93 6a00 	vldr	s12, [r3]
 8003e98:	7dfa      	ldrb	r2, [r7, #23]
 8003e9a:	4954      	ldr	r1, [pc, #336]	; (8003fec <SpiritRadioGetdBm2Reg+0x20c>)
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	4413      	add	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	440b      	add	r3, r1
 8003ea6:	3308      	adds	r3, #8
 8003ea8:	edd3 6a00 	vldr	s13, [r3]
 8003eac:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eb4:	ed97 7a02 	vldr	s14, [r7, #8]
 8003eb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec0:	dd02      	ble.n	8003ec8 <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	75bb      	strb	r3, [r7, #22]
 8003ec6:	e035      	b.n	8003f34 <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003ec8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ecc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed4:	d82e      	bhi.n	8003f34 <SpiritRadioGetdBm2Reg+0x154>
 8003ed6:	7dfa      	ldrb	r2, [r7, #23]
 8003ed8:	4944      	ldr	r1, [pc, #272]	; (8003fec <SpiritRadioGetdBm2Reg+0x20c>)
 8003eda:	4613      	mov	r3, r2
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	4413      	add	r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	440b      	add	r3, r1
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	edd3 7a00 	vldr	s15, [r3]
 8003eea:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003ff0 <SpiritRadioGetdBm2Reg+0x210>
 8003eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef2:	7dfa      	ldrb	r2, [r7, #23]
 8003ef4:	493d      	ldr	r1, [pc, #244]	; (8003fec <SpiritRadioGetdBm2Reg+0x20c>)
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	4413      	add	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	440b      	add	r3, r1
 8003f00:	330c      	adds	r3, #12
 8003f02:	ed93 6a00 	vldr	s12, [r3]
 8003f06:	7dfa      	ldrb	r2, [r7, #23]
 8003f08:	4938      	ldr	r1, [pc, #224]	; (8003fec <SpiritRadioGetdBm2Reg+0x20c>)
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	4413      	add	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	440b      	add	r3, r1
 8003f14:	3308      	adds	r3, #8
 8003f16:	edd3 6a00 	vldr	s13, [r3]
 8003f1a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f22:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f2e:	d501      	bpl.n	8003f34 <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 8003f30:	2302      	movs	r3, #2
 8003f32:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 8003f34:	7dfa      	ldrb	r2, [r7, #23]
 8003f36:	7dbb      	ldrb	r3, [r7, #22]
 8003f38:	0059      	lsls	r1, r3, #1
 8003f3a:	482c      	ldr	r0, [pc, #176]	; (8003fec <SpiritRadioGetdBm2Reg+0x20c>)
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	4413      	add	r3, r2
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	440b      	add	r3, r1
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4403      	add	r3, r0
 8003f4a:	ed93 7a00 	vldr	s14, [r3]
 8003f4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f56:	7dfa      	ldrb	r2, [r7, #23]
 8003f58:	7dbb      	ldrb	r3, [r7, #22]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	1c59      	adds	r1, r3, #1
 8003f5e:	4823      	ldr	r0, [pc, #140]	; (8003fec <SpiritRadioGetdBm2Reg+0x20c>)
 8003f60:	4613      	mov	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	440b      	add	r3, r1
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4403      	add	r3, r0
 8003f6e:	edd3 7a00 	vldr	s15, [r3]
 8003f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f76:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 8003f7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f8a:	d503      	bpl.n	8003f94 <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 8003f8c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	e00a      	b.n	8003faa <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 8003f94:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f98:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003ff4 <SpiritRadioGetdBm2Reg+0x214>
 8003f9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa4:	dd01      	ble.n	8003faa <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 8003fa6:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <SpiritRadioGetdBm2Reg+0x218>)
 8003fa8:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 8003faa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fb2:	edc7 7a01 	vstr	s15, [r7, #4]
 8003fb6:	793b      	ldrb	r3, [r7, #4]
 8003fb8:	b2db      	uxtb	r3, r3
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	2e5f5680 	.word	0x2e5f5680
 8003fcc:	390c2fe0 	.word	0x390c2fe0
 8003fd0:	35a4e8ff 	.word	0x35a4e8ff
 8003fd4:	1701e47f 	.word	0x1701e47f
 8003fd8:	1c146a60 	.word	0x1c146a60
 8003fdc:	11d260bf 	.word	0x11d260bf
 8003fe0:	14ced7e0 	.word	0x14ced7e0
 8003fe4:	08e18f3f 	.word	0x08e18f3f
 8003fe8:	0a6fd060 	.word	0x0a6fd060
 8003fec:	0800c2a4 	.word	0x0800c2a4
 8003ff0:	42200000 	.word	0x42200000
 8003ff4:	42b40000 	.word	0x42b40000
 8003ff8:	42b40000 	.word	0x42b40000

08003ffc <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	4603      	mov	r3, r0
 8004004:	ed87 0a00 	vstr	s0, [r7]
 8004008:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 800400a:	f7ff fc4d 	bl	80038a8 <SpiritRadioGetFrequencyBase>
 800400e:	4603      	mov	r3, r0
 8004010:	ed97 0a00 	vldr	s0, [r7]
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff fee3 	bl	8003de0 <SpiritRadioGetdBm2Reg>
 800401a:	4603      	mov	r3, r0
 800401c:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	f1c3 0317 	rsb	r3, r3, #23
 8004024:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 8004026:	f107 020e 	add.w	r2, r7, #14
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	2101      	movs	r1, #1
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f9ec 	bl	800440c <RadioSpiWriteRegisters>
 8004034:	4602      	mov	r2, r0
 8004036:	4b05      	ldr	r3, [pc, #20]	; (800404c <SpiritRadioSetPALeveldBm+0x50>)
 8004038:	b212      	sxth	r2, r2
 800403a:	4611      	mov	r1, r2
 800403c:	7019      	strb	r1, [r3, #0]
 800403e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004042:	705a      	strb	r2, [r3, #1]
  
}
 8004044:	bf00      	nop
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	200025c8 	.word	0x200025c8

08004050 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800405a:	f107 030f 	add.w	r3, r7, #15
 800405e:	461a      	mov	r2, r3
 8004060:	2101      	movs	r1, #1
 8004062:	2018      	movs	r0, #24
 8004064:	f000 fa1e 	bl	80044a4 <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800406e:	b2db      	uxtb	r3, r3
 8004070:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8004072:	7bfa      	ldrb	r2, [r7, #15]
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	4313      	orrs	r3, r2
 8004078:	b2db      	uxtb	r3, r3
 800407a:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800407c:	f107 030f 	add.w	r3, r7, #15
 8004080:	461a      	mov	r2, r3
 8004082:	2101      	movs	r1, #1
 8004084:	2018      	movs	r0, #24
 8004086:	f000 f9c1 	bl	800440c <RadioSpiWriteRegisters>
 800408a:	4602      	mov	r2, r0
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <SpiritRadioSetPACwc+0x54>)
 800408e:	b212      	sxth	r2, r2
 8004090:	4611      	mov	r1, r2
 8004092:	7019      	strb	r1, [r3, #0]
 8004094:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004098:	705a      	strb	r2, [r3, #1]
  
}
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	200025c8 	.word	0x200025c8

080040a8 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80040b2:	f107 030f 	add.w	r3, r7, #15
 80040b6:	461a      	mov	r2, r3
 80040b8:	2101      	movs	r1, #1
 80040ba:	2018      	movs	r0, #24
 80040bc:	f000 f9f2 	bl	80044a4 <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	f023 0307 	bic.w	r3, r3, #7
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 80040ca:	7bfa      	ldrb	r2, [r7, #15]
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80040d4:	f107 030f 	add.w	r3, r7, #15
 80040d8:	461a      	mov	r2, r3
 80040da:	2101      	movs	r1, #1
 80040dc:	2018      	movs	r0, #24
 80040de:	f000 f995 	bl	800440c <RadioSpiWriteRegisters>
 80040e2:	4602      	mov	r2, r0
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <SpiritRadioSetPALevelMaxIndex+0x54>)
 80040e6:	b212      	sxth	r2, r2
 80040e8:	4611      	mov	r1, r2
 80040ea:	7019      	strb	r1, [r3, #0]
 80040ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80040f0:	705a      	strb	r2, [r3, #1]
  
}
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	200025c8 	.word	0x200025c8

08004100 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	4603      	mov	r3, r0
 8004108:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 800410a:	2300      	movs	r3, #0
 800410c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 800410e:	f107 030f 	add.w	r3, r7, #15
 8004112:	461a      	mov	r2, r3
 8004114:	2101      	movs	r1, #1
 8004116:	201e      	movs	r0, #30
 8004118:	f000 f9c4 	bl	80044a4 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d105      	bne.n	800412e <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004128:	b2db      	uxtb	r3, r3
 800412a:	73fb      	strb	r3, [r7, #15]
 800412c:	e004      	b.n	8004138 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004134:	b2db      	uxtb	r3, r3
 8004136:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8004138:	f107 030f 	add.w	r3, r7, #15
 800413c:	461a      	mov	r2, r3
 800413e:	2101      	movs	r1, #1
 8004140:	201e      	movs	r0, #30
 8004142:	f000 f963 	bl	800440c <RadioSpiWriteRegisters>
 8004146:	4602      	mov	r2, r0
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <SpiritRadioAFCFreezeOnSync+0x60>)
 800414a:	b212      	sxth	r2, r2
 800414c:	4611      	mov	r1, r2
 800414e:	7019      	strb	r1, [r3, #0]
 8004150:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004154:	705a      	strb	r2, [r3, #1]
  
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	200025c8 	.word	0x200025c8

08004164 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800416e:	f107 030f 	add.w	r3, r7, #15
 8004172:	461a      	mov	r2, r3
 8004174:	2101      	movs	r1, #1
 8004176:	209e      	movs	r0, #158	; 0x9e
 8004178:	f000 f994 	bl	80044a4 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d105      	bne.n	800418e <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004188:	b2db      	uxtb	r3, r3
 800418a:	73fb      	strb	r3, [r7, #15]
 800418c:	e004      	b.n	8004198 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004194:	b2db      	uxtb	r3, r3
 8004196:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8004198:	f107 030f 	add.w	r3, r7, #15
 800419c:	461a      	mov	r2, r3
 800419e:	2101      	movs	r1, #1
 80041a0:	209e      	movs	r0, #158	; 0x9e
 80041a2:	f000 f933 	bl	800440c <RadioSpiWriteRegisters>
 80041a6:	4602      	mov	r2, r0
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <SpiritRadioSetRefDiv+0x5c>)
 80041aa:	b212      	sxth	r2, r2
 80041ac:	4611      	mov	r1, r2
 80041ae:	7019      	strb	r1, [r3, #0]
 80041b0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80041b4:	705a      	strb	r2, [r3, #1]
  
}
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	200025c8 	.word	0x200025c8

080041c4 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80041ca:	1dfb      	adds	r3, r7, #7
 80041cc:	461a      	mov	r2, r3
 80041ce:	2101      	movs	r1, #1
 80041d0:	209e      	movs	r0, #158	; 0x9e
 80041d2:	f000 f967 	bl	80044a4 <RadioSpiReadRegisters>
 80041d6:	4602      	mov	r2, r0
 80041d8:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <SpiritRadioGetRefDiv+0x40>)
 80041da:	b212      	sxth	r2, r2
 80041dc:	4611      	mov	r1, r2
 80041de:	7019      	strb	r1, [r3, #0]
 80041e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80041e4:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	09db      	lsrs	r3, r3, #7
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 80041f8:	2300      	movs	r3, #0
  }
  
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	200025c8 	.word	0x200025c8

08004208 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8004212:	f107 030f 	add.w	r3, r7, #15
 8004216:	461a      	mov	r2, r3
 8004218:	2101      	movs	r1, #1
 800421a:	20b4      	movs	r0, #180	; 0xb4
 800421c:	f000 f942 	bl	80044a4 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d105      	bne.n	8004232 <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	f023 0308 	bic.w	r3, r3, #8
 800422c:	b2db      	uxtb	r3, r3
 800422e:	73fb      	strb	r3, [r7, #15]
 8004230:	e004      	b.n	800423c <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	f043 0308 	orr.w	r3, r3, #8
 8004238:	b2db      	uxtb	r3, r3
 800423a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 800423c:	f107 030f 	add.w	r3, r7, #15
 8004240:	461a      	mov	r2, r3
 8004242:	2101      	movs	r1, #1
 8004244:	20b4      	movs	r0, #180	; 0xb4
 8004246:	f000 f8e1 	bl	800440c <RadioSpiWriteRegisters>
 800424a:	4602      	mov	r2, r0
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <SpiritRadioSetDigDiv+0x5c>)
 800424e:	b212      	sxth	r2, r2
 8004250:	4611      	mov	r1, r2
 8004252:	7019      	strb	r1, [r3, #0]
 8004254:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004258:	705a      	strb	r2, [r3, #1]
  
}
 800425a:	bf00      	nop
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	200025c8 	.word	0x200025c8

08004268 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 800426e:	1dfb      	adds	r3, r7, #7
 8004270:	461a      	mov	r2, r3
 8004272:	2101      	movs	r1, #1
 8004274:	20b4      	movs	r0, #180	; 0xb4
 8004276:	f000 f915 	bl	80044a4 <RadioSpiReadRegisters>
 800427a:	4602      	mov	r2, r0
 800427c:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <SpiritRadioGetDigDiv+0x40>)
 800427e:	b212      	sxth	r2, r2
 8004280:	4611      	mov	r1, r2
 8004282:	7019      	strb	r1, [r3, #0]
 8004284:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004288:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	08db      	lsrs	r3, r3, #3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8004298:	2300      	movs	r3, #0
 800429a:	e000      	b.n	800429e <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 800429c:	2301      	movs	r3, #1
  }
  
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	200025c8 	.word	0x200025c8

080042ac <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <SpiritRadioGetXtalFrequency+0x14>)
 80042b2:	681b      	ldr	r3, [r3, #0]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	200025c4 	.word	0x200025c4

080042c4 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 80042cc:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <SpiritRadioSetXtalFrequency+0x1c>)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6013      	str	r3, [r2, #0]
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	200025c4 	.word	0x200025c4

080042e4 <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	71fb      	strb	r3, [r7, #7]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 80042ee:	1dfb      	adds	r3, r7, #7
 80042f0:	461a      	mov	r2, r3
 80042f2:	2101      	movs	r1, #1
 80042f4:	2054      	movs	r0, #84	; 0x54
 80042f6:	f000 f889 	bl	800440c <RadioSpiWriteRegisters>
 80042fa:	4602      	mov	r2, r0
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <SpiritTimerSetRxTimeoutCounter+0x30>)
 80042fe:	b212      	sxth	r2, r2
 8004300:	4611      	mov	r1, r2
 8004302:	7019      	strb	r1, [r3, #0]
 8004304:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004308:	705a      	strb	r2, [r3, #1]

}
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	200025c8 	.word	0x200025c8

08004318 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8004322:	f107 030c 	add.w	r3, r7, #12
 8004326:	461a      	mov	r2, r3
 8004328:	2102      	movs	r1, #2
 800432a:	204f      	movs	r0, #79	; 0x4f
 800432c:	f000 f8ba 	bl	80044a4 <RadioSpiReadRegisters>
 8004330:	4602      	mov	r2, r0
 8004332:	4b1c      	ldr	r3, [pc, #112]	; (80043a4 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8004334:	b212      	sxth	r2, r2
 8004336:	4611      	mov	r1, r2
 8004338:	7019      	strb	r1, [r3, #0]
 800433a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800433e:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8004340:	7b3b      	ldrb	r3, [r7, #12]
 8004342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004346:	b2db      	uxtb	r3, r3
 8004348:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 800434a:	7b3b      	ldrb	r3, [r7, #12]
 800434c:	b25a      	sxtb	r2, r3
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	b25b      	sxtb	r3, r3
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	b25b      	sxtb	r3, r3
 800435a:	4313      	orrs	r3, r2
 800435c:	b25b      	sxtb	r3, r3
 800435e:	b2db      	uxtb	r3, r3
 8004360:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 8004362:	7b7b      	ldrb	r3, [r7, #13]
 8004364:	f003 031f 	and.w	r3, r3, #31
 8004368:	b2db      	uxtb	r3, r3
 800436a:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 800436c:	7b7b      	ldrb	r3, [r7, #13]
 800436e:	b25a      	sxtb	r2, r3
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	015b      	lsls	r3, r3, #5
 8004374:	b25b      	sxtb	r3, r3
 8004376:	4313      	orrs	r3, r2
 8004378:	b25b      	sxtb	r3, r3
 800437a:	b2db      	uxtb	r3, r3
 800437c:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 800437e:	f107 030c 	add.w	r3, r7, #12
 8004382:	461a      	mov	r2, r3
 8004384:	2102      	movs	r1, #2
 8004386:	204f      	movs	r0, #79	; 0x4f
 8004388:	f000 f840 	bl	800440c <RadioSpiWriteRegisters>
 800438c:	4602      	mov	r2, r0
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8004390:	b212      	sxth	r2, r2
 8004392:	4611      	mov	r1, r2
 8004394:	7019      	strb	r1, [r3, #0]
 8004396:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800439a:	705a      	strb	r2, [r3, #1]

}
 800439c:	bf00      	nop
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	200025c8 	.word	0x200025c8

080043a8 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 80043ae:	1d3b      	adds	r3, r7, #4
 80043b0:	461a      	mov	r2, r3
 80043b2:	2102      	movs	r1, #2
 80043b4:	20c0      	movs	r0, #192	; 0xc0
 80043b6:	f000 f875 	bl	80044a4 <RadioSpiReadRegisters>
 80043ba:	4603      	mov	r3, r0
 80043bc:	4a09      	ldr	r2, [pc, #36]	; (80043e4 <SpiritRefreshStatus+0x3c>)
 80043be:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 80043c0:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <SpiritRefreshStatus+0x3c>)
 80043c2:	781a      	ldrb	r2, [r3, #0]
 80043c4:	797b      	ldrb	r3, [r7, #5]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d1f1      	bne.n	80043ae <SpiritRefreshStatus+0x6>
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <SpiritRefreshStatus+0x40>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d1ea      	bne.n	80043ae <SpiritRefreshStatus+0x6>

}
 80043d8:	bf00      	nop
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	200025c8 	.word	0x200025c8
 80043e8:	200025c9 	.word	0x200025c9

080043ec <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <RadioSpiInit+0x1c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <RadioSpiInit+0x16>
  {
    Error_Handler();
 80043fe:	f7fd fb1b 	bl	8001a38 <Error_Handler>
  }
}
 8004402:	bf00      	nop
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000350 	.word	0x20000350

0800440c <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af02      	add	r7, sp, #8
 8004412:	4603      	mov	r3, r0
 8004414:	603a      	str	r2, [r7, #0]
 8004416:	71fb      	strb	r3, [r7, #7]
 8004418:	460b      	mov	r3, r1
 800441a:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 800441c:	2300      	movs	r3, #0
 800441e:	743b      	strb	r3, [r7, #16]
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004424:	2017      	movs	r0, #23
 8004426:	f000 faad 	bl	8004984 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 800442a:	2200      	movs	r2, #0
 800442c:	2140      	movs	r1, #64	; 0x40
 800442e:	481b      	ldr	r0, [pc, #108]	; (800449c <RadioSpiWriteRegisters+0x90>)
 8004430:	f000 fc60 	bl	8004cf4 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004434:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <RadioSpiWriteRegisters+0x94>)
 8004436:	6818      	ldr	r0, [r3, #0]
 8004438:	f107 020c 	add.w	r2, r7, #12
 800443c:	f107 0110 	add.w	r1, r7, #16
 8004440:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	2302      	movs	r3, #2
 8004448:	f002 fb25 	bl	8006a96 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800444c:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <RadioSpiWriteRegisters+0x94>)
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	79bb      	ldrb	r3, [r7, #6]
 8004452:	b29a      	uxth	r2, r3
 8004454:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004458:	6839      	ldr	r1, [r7, #0]
 800445a:	f002 f870 	bl	800653e <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800445e:	2201      	movs	r2, #1
 8004460:	2140      	movs	r1, #64	; 0x40
 8004462:	480e      	ldr	r0, [pc, #56]	; (800449c <RadioSpiWriteRegisters+0x90>)
 8004464:	f000 fc46 	bl	8004cf4 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004468:	2017      	movs	r0, #23
 800446a:	f000 fa7d 	bl	8004968 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800446e:	f107 0308 	add.w	r3, r7, #8
 8004472:	3301      	adds	r3, #1
 8004474:	7b3a      	ldrb	r2, [r7, #12]
 8004476:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004478:	f107 0308 	add.w	r3, r7, #8
 800447c:	7b7a      	ldrb	r2, [r7, #13]
 800447e:	701a      	strb	r2, [r3, #0]

  return status;
 8004480:	893b      	ldrh	r3, [r7, #8]
 8004482:	82bb      	strh	r3, [r7, #20]
 8004484:	2300      	movs	r3, #0
 8004486:	7d3a      	ldrb	r2, [r7, #20]
 8004488:	f362 0307 	bfi	r3, r2, #0, #8
 800448c:	7d7a      	ldrb	r2, [r7, #21]
 800448e:	f362 230f 	bfi	r3, r2, #8, #8

}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	48000400 	.word	0x48000400
 80044a0:	20000350 	.word	0x20000350

080044a4 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	4603      	mov	r3, r0
 80044ac:	603a      	str	r2, [r7, #0]
 80044ae:	71fb      	strb	r3, [r7, #7]
 80044b0:	460b      	mov	r3, r1
 80044b2:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 80044b4:	2301      	movs	r3, #1
 80044b6:	743b      	strb	r3, [r7, #16]
 80044b8:	79fb      	ldrb	r3, [r7, #7]
 80044ba:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80044bc:	2017      	movs	r0, #23
 80044be:	f000 fa61 	bl	8004984 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80044c2:	2200      	movs	r2, #0
 80044c4:	2140      	movs	r1, #64	; 0x40
 80044c6:	481b      	ldr	r0, [pc, #108]	; (8004534 <RadioSpiReadRegisters+0x90>)
 80044c8:	f000 fc14 	bl	8004cf4 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80044cc:	4b1a      	ldr	r3, [pc, #104]	; (8004538 <RadioSpiReadRegisters+0x94>)
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	f107 020c 	add.w	r2, r7, #12
 80044d4:	f107 0110 	add.w	r1, r7, #16
 80044d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	2302      	movs	r3, #2
 80044e0:	f002 fad9 	bl	8006a96 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80044e4:	4b14      	ldr	r3, [pc, #80]	; (8004538 <RadioSpiReadRegisters+0x94>)
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	79bb      	ldrb	r3, [r7, #6]
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044f0:	6839      	ldr	r1, [r7, #0]
 80044f2:	f002 f999 	bl	8006828 <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80044f6:	2201      	movs	r2, #1
 80044f8:	2140      	movs	r1, #64	; 0x40
 80044fa:	480e      	ldr	r0, [pc, #56]	; (8004534 <RadioSpiReadRegisters+0x90>)
 80044fc:	f000 fbfa 	bl	8004cf4 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004500:	2017      	movs	r0, #23
 8004502:	f000 fa31 	bl	8004968 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004506:	f107 0308 	add.w	r3, r7, #8
 800450a:	3301      	adds	r3, #1
 800450c:	7b3a      	ldrb	r2, [r7, #12]
 800450e:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004510:	f107 0308 	add.w	r3, r7, #8
 8004514:	7b7a      	ldrb	r2, [r7, #13]
 8004516:	701a      	strb	r2, [r3, #0]

  return status;
 8004518:	893b      	ldrh	r3, [r7, #8]
 800451a:	82bb      	strh	r3, [r7, #20]
 800451c:	2300      	movs	r3, #0
 800451e:	7d3a      	ldrb	r2, [r7, #20]
 8004520:	f362 0307 	bfi	r3, r2, #0, #8
 8004524:	7d7a      	ldrb	r2, [r7, #21]
 8004526:	f362 230f 	bfi	r3, r2, #8, #8
}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	48000400 	.word	0x48000400
 8004538:	20000350 	.word	0x20000350

0800453c <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af02      	add	r7, sp, #8
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 8004546:	2380      	movs	r3, #128	; 0x80
 8004548:	743b      	strb	r3, [r7, #16]
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800454e:	2017      	movs	r0, #23
 8004550:	f000 fa18 	bl	8004984 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004554:	2200      	movs	r2, #0
 8004556:	2140      	movs	r1, #64	; 0x40
 8004558:	4816      	ldr	r0, [pc, #88]	; (80045b4 <RadioSpiCommandStrobes+0x78>)
 800455a:	f000 fbcb 	bl	8004cf4 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800455e:	4b16      	ldr	r3, [pc, #88]	; (80045b8 <RadioSpiCommandStrobes+0x7c>)
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	f107 020c 	add.w	r2, r7, #12
 8004566:	f107 0110 	add.w	r1, r7, #16
 800456a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	2302      	movs	r3, #2
 8004572:	f002 fa90 	bl	8006a96 <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004576:	2201      	movs	r2, #1
 8004578:	2140      	movs	r1, #64	; 0x40
 800457a:	480e      	ldr	r0, [pc, #56]	; (80045b4 <RadioSpiCommandStrobes+0x78>)
 800457c:	f000 fbba 	bl	8004cf4 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004580:	2017      	movs	r0, #23
 8004582:	f000 f9f1 	bl	8004968 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004586:	f107 0308 	add.w	r3, r7, #8
 800458a:	3301      	adds	r3, #1
 800458c:	7b3a      	ldrb	r2, [r7, #12]
 800458e:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004590:	f107 0308 	add.w	r3, r7, #8
 8004594:	7b7a      	ldrb	r2, [r7, #13]
 8004596:	701a      	strb	r2, [r3, #0]

  return status;
 8004598:	893b      	ldrh	r3, [r7, #8]
 800459a:	82bb      	strh	r3, [r7, #20]
 800459c:	2300      	movs	r3, #0
 800459e:	7d3a      	ldrb	r2, [r7, #20]
 80045a0:	f362 0307 	bfi	r3, r2, #0, #8
 80045a4:	7d7a      	ldrb	r2, [r7, #21]
 80045a6:	f362 230f 	bfi	r3, r2, #8, #8
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	48000400 	.word	0x48000400
 80045b8:	20000350 	.word	0x20000350

080045bc <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	4603      	mov	r3, r0
 80045c4:	6039      	str	r1, [r7, #0]
 80045c6:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 80045c8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80045cc:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80045ce:	2017      	movs	r0, #23
 80045d0:	f000 f9d8 	bl	8004984 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80045d4:	2200      	movs	r2, #0
 80045d6:	2140      	movs	r1, #64	; 0x40
 80045d8:	481a      	ldr	r0, [pc, #104]	; (8004644 <RadioSpiWriteFifo+0x88>)
 80045da:	f000 fb8b 	bl	8004cf4 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80045de:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <RadioSpiWriteFifo+0x8c>)
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	f107 020c 	add.w	r2, r7, #12
 80045e6:	f107 0110 	add.w	r1, r7, #16
 80045ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	2302      	movs	r3, #2
 80045f2:	f002 fa50 	bl	8006a96 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80045f6:	4b14      	ldr	r3, [pc, #80]	; (8004648 <RadioSpiWriteFifo+0x8c>)
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004602:	6839      	ldr	r1, [r7, #0]
 8004604:	f001 ff9b 	bl	800653e <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004608:	2201      	movs	r2, #1
 800460a:	2140      	movs	r1, #64	; 0x40
 800460c:	480d      	ldr	r0, [pc, #52]	; (8004644 <RadioSpiWriteFifo+0x88>)
 800460e:	f000 fb71 	bl	8004cf4 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004612:	2017      	movs	r0, #23
 8004614:	f000 f9a8 	bl	8004968 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004618:	f107 0308 	add.w	r3, r7, #8
 800461c:	3301      	adds	r3, #1
 800461e:	7b3a      	ldrb	r2, [r7, #12]
 8004620:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004622:	f107 0308 	add.w	r3, r7, #8
 8004626:	7b7a      	ldrb	r2, [r7, #13]
 8004628:	701a      	strb	r2, [r3, #0]

  return status;
 800462a:	893b      	ldrh	r3, [r7, #8]
 800462c:	82bb      	strh	r3, [r7, #20]
 800462e:	2300      	movs	r3, #0
 8004630:	7d3a      	ldrb	r2, [r7, #20]
 8004632:	f362 0307 	bfi	r3, r2, #0, #8
 8004636:	7d7a      	ldrb	r2, [r7, #21]
 8004638:	f362 230f 	bfi	r3, r2, #8, #8
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	48000400 	.word	0x48000400
 8004648:	20000350 	.word	0x20000350

0800464c <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval Device status
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af02      	add	r7, sp, #8
 8004652:	4603      	mov	r3, r0
 8004654:	6039      	str	r1, [r7, #0]
 8004656:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {READ_HEADER, LINEAR_FIFO_ADDRESS};
 8004658:	f64f 7301 	movw	r3, #65281	; 0xff01
 800465c:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800465e:	2017      	movs	r0, #23
 8004660:	f000 f990 	bl	8004984 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004664:	2200      	movs	r2, #0
 8004666:	2140      	movs	r1, #64	; 0x40
 8004668:	481a      	ldr	r0, [pc, #104]	; (80046d4 <RadioSpiReadFifo+0x88>)
 800466a:	f000 fb43 	bl	8004cf4 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800466e:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <RadioSpiReadFifo+0x8c>)
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	f107 020c 	add.w	r2, r7, #12
 8004676:	f107 0110 	add.w	r1, r7, #16
 800467a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	2302      	movs	r3, #2
 8004682:	f002 fa08 	bl	8006a96 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004686:	4b14      	ldr	r3, [pc, #80]	; (80046d8 <RadioSpiReadFifo+0x8c>)
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	b29a      	uxth	r2, r3
 800468e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004692:	6839      	ldr	r1, [r7, #0]
 8004694:	f002 f8c8 	bl	8006828 <HAL_SPI_Receive>
  RadioSpiCSHigh();  // Puts the SPI chip select high to end the transaction
 8004698:	2201      	movs	r2, #1
 800469a:	2140      	movs	r1, #64	; 0x40
 800469c:	480d      	ldr	r0, [pc, #52]	; (80046d4 <RadioSpiReadFifo+0x88>)
 800469e:	f000 fb29 	bl	8004cf4 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80046a2:	2017      	movs	r0, #23
 80046a4:	f000 f960 	bl	8004968 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80046a8:	f107 0308 	add.w	r3, r7, #8
 80046ac:	3301      	adds	r3, #1
 80046ae:	7b3a      	ldrb	r2, [r7, #12]
 80046b0:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80046b2:	f107 0308 	add.w	r3, r7, #8
 80046b6:	7b7a      	ldrb	r2, [r7, #13]
 80046b8:	701a      	strb	r2, [r3, #0]

  return status;
 80046ba:	893b      	ldrh	r3, [r7, #8]
 80046bc:	82bb      	strh	r3, [r7, #20]
 80046be:	2300      	movs	r3, #0
 80046c0:	7d3a      	ldrb	r2, [r7, #20]
 80046c2:	f362 0307 	bfi	r3, r2, #0, #8
 80046c6:	7d7a      	ldrb	r2, [r7, #21]
 80046c8:	f362 230f 	bfi	r3, r2, #8, #8
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	48000400 	.word	0x48000400
 80046d8:	20000350 	.word	0x20000350

080046dc <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 80046e0:	2201      	movs	r2, #1
 80046e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046ea:	f000 fb03 	bl	8004cf4 <HAL_GPIO_WritePin>
}
 80046ee:	bf00      	nop
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 80046f6:	2200      	movs	r2, #0
 80046f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004700:	f000 faf8 	bl	8004cf4 <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
//  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
}
 8004704:	bf00      	nop
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004712:	2003      	movs	r0, #3
 8004714:	f000 f901 	bl	800491a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004718:	200f      	movs	r0, #15
 800471a:	f7fd fb4f 	bl	8001dbc <HAL_InitTick>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	71fb      	strb	r3, [r7, #7]
 8004728:	e001      	b.n	800472e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800472a:	f7fd fb1f 	bl	8001d6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800472e:	79fb      	ldrb	r3, [r7, #7]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_IncTick+0x20>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <HAL_IncTick+0x24>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4413      	add	r3, r2
 8004748:	4a04      	ldr	r2, [pc, #16]	; (800475c <HAL_IncTick+0x24>)
 800474a:	6013      	str	r3, [r2, #0]
}
 800474c:	bf00      	nop
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	20000358 	.word	0x20000358
 800475c:	200025cc 	.word	0x200025cc

08004760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  return uwTick;
 8004764:	4b03      	ldr	r3, [pc, #12]	; (8004774 <HAL_GetTick+0x14>)
 8004766:	681b      	ldr	r3, [r3, #0]
}
 8004768:	4618      	mov	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	200025cc 	.word	0x200025cc

08004778 <__NVIC_SetPriorityGrouping>:
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004788:	4b0c      	ldr	r3, [pc, #48]	; (80047bc <__NVIC_SetPriorityGrouping+0x44>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004794:	4013      	ands	r3, r2
 8004796:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047aa:	4a04      	ldr	r2, [pc, #16]	; (80047bc <__NVIC_SetPriorityGrouping+0x44>)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	60d3      	str	r3, [r2, #12]
}
 80047b0:	bf00      	nop
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	e000ed00 	.word	0xe000ed00

080047c0 <__NVIC_GetPriorityGrouping>:
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047c4:	4b04      	ldr	r3, [pc, #16]	; (80047d8 <__NVIC_GetPriorityGrouping+0x18>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	0a1b      	lsrs	r3, r3, #8
 80047ca:	f003 0307 	and.w	r3, r3, #7
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	e000ed00 	.word	0xe000ed00

080047dc <__NVIC_EnableIRQ>:
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	db0b      	blt.n	8004806 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	f003 021f 	and.w	r2, r3, #31
 80047f4:	4907      	ldr	r1, [pc, #28]	; (8004814 <__NVIC_EnableIRQ+0x38>)
 80047f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	2001      	movs	r0, #1
 80047fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	e000e100 	.word	0xe000e100

08004818 <__NVIC_DisableIRQ>:
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004826:	2b00      	cmp	r3, #0
 8004828:	db12      	blt.n	8004850 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	f003 021f 	and.w	r2, r3, #31
 8004830:	490a      	ldr	r1, [pc, #40]	; (800485c <__NVIC_DisableIRQ+0x44>)
 8004832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	2001      	movs	r0, #1
 800483a:	fa00 f202 	lsl.w	r2, r0, r2
 800483e:	3320      	adds	r3, #32
 8004840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004844:	f3bf 8f4f 	dsb	sy
}
 8004848:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800484a:	f3bf 8f6f 	isb	sy
}
 800484e:	bf00      	nop
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	e000e100 	.word	0xe000e100

08004860 <__NVIC_SetPriority>:
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	6039      	str	r1, [r7, #0]
 800486a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800486c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004870:	2b00      	cmp	r3, #0
 8004872:	db0a      	blt.n	800488a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	b2da      	uxtb	r2, r3
 8004878:	490c      	ldr	r1, [pc, #48]	; (80048ac <__NVIC_SetPriority+0x4c>)
 800487a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487e:	0112      	lsls	r2, r2, #4
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	440b      	add	r3, r1
 8004884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004888:	e00a      	b.n	80048a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	b2da      	uxtb	r2, r3
 800488e:	4908      	ldr	r1, [pc, #32]	; (80048b0 <__NVIC_SetPriority+0x50>)
 8004890:	79fb      	ldrb	r3, [r7, #7]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	3b04      	subs	r3, #4
 8004898:	0112      	lsls	r2, r2, #4
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	440b      	add	r3, r1
 800489e:	761a      	strb	r2, [r3, #24]
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	e000e100 	.word	0xe000e100
 80048b0:	e000ed00 	.word	0xe000ed00

080048b4 <NVIC_EncodePriority>:
{
 80048b4:	b480      	push	{r7}
 80048b6:	b089      	sub	sp, #36	; 0x24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f1c3 0307 	rsb	r3, r3, #7
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	bf28      	it	cs
 80048d2:	2304      	movcs	r3, #4
 80048d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	3304      	adds	r3, #4
 80048da:	2b06      	cmp	r3, #6
 80048dc:	d902      	bls.n	80048e4 <NVIC_EncodePriority+0x30>
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	3b03      	subs	r3, #3
 80048e2:	e000      	b.n	80048e6 <NVIC_EncodePriority+0x32>
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048e8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43da      	mvns	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	401a      	ands	r2, r3
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	fa01 f303 	lsl.w	r3, r1, r3
 8004906:	43d9      	mvns	r1, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800490c:	4313      	orrs	r3, r2
}
 800490e:	4618      	mov	r0, r3
 8004910:	3724      	adds	r7, #36	; 0x24
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b082      	sub	sp, #8
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff ff28 	bl	8004778 <__NVIC_SetPriorityGrouping>
}
 8004928:	bf00      	nop
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	4603      	mov	r3, r0
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004942:	f7ff ff3d 	bl	80047c0 <__NVIC_GetPriorityGrouping>
 8004946:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	68b9      	ldr	r1, [r7, #8]
 800494c:	6978      	ldr	r0, [r7, #20]
 800494e:	f7ff ffb1 	bl	80048b4 <NVIC_EncodePriority>
 8004952:	4602      	mov	r2, r0
 8004954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004958:	4611      	mov	r1, r2
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff ff80 	bl	8004860 <__NVIC_SetPriority>
}
 8004960:	bf00      	nop
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff ff30 	bl	80047dc <__NVIC_EnableIRQ>
}
 800497c:	bf00      	nop
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800498e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff ff40 	bl	8004818 <__NVIC_DisableIRQ>
}
 8004998:	bf00      	nop
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049ae:	e17f      	b.n	8004cb0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	2101      	movs	r1, #1
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	fa01 f303 	lsl.w	r3, r1, r3
 80049bc:	4013      	ands	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 8171 	beq.w	8004caa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f003 0303 	and.w	r3, r3, #3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d005      	beq.n	80049e0 <HAL_GPIO_Init+0x40>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d130      	bne.n	8004a42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	2203      	movs	r2, #3
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	43db      	mvns	r3, r3
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4013      	ands	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a16:	2201      	movs	r2, #1
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4013      	ands	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	091b      	lsrs	r3, r3, #4
 8004a2c:	f003 0201 	and.w	r2, r3, #1
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d118      	bne.n	8004a80 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004a54:	2201      	movs	r2, #1
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4013      	ands	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	08db      	lsrs	r3, r3, #3
 8004a6a:	f003 0201 	and.w	r2, r3, #1
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 0303 	and.w	r3, r3, #3
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d017      	beq.n	8004abc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	2203      	movs	r2, #3
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f003 0303 	and.w	r3, r3, #3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d123      	bne.n	8004b10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	08da      	lsrs	r2, r3, #3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3208      	adds	r2, #8
 8004ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	220f      	movs	r2, #15
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	08da      	lsrs	r2, r3, #3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3208      	adds	r2, #8
 8004b0a:	6939      	ldr	r1, [r7, #16]
 8004b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4013      	ands	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f003 0203 	and.w	r2, r3, #3
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80ac 	beq.w	8004caa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b52:	4b5f      	ldr	r3, [pc, #380]	; (8004cd0 <HAL_GPIO_Init+0x330>)
 8004b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b56:	4a5e      	ldr	r2, [pc, #376]	; (8004cd0 <HAL_GPIO_Init+0x330>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8004b5e:	4b5c      	ldr	r3, [pc, #368]	; (8004cd0 <HAL_GPIO_Init+0x330>)
 8004b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004b6a:	4a5a      	ldr	r2, [pc, #360]	; (8004cd4 <HAL_GPIO_Init+0x334>)
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	089b      	lsrs	r3, r3, #2
 8004b70:	3302      	adds	r3, #2
 8004b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	220f      	movs	r2, #15
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43db      	mvns	r3, r3
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b94:	d025      	beq.n	8004be2 <HAL_GPIO_Init+0x242>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a4f      	ldr	r2, [pc, #316]	; (8004cd8 <HAL_GPIO_Init+0x338>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d01f      	beq.n	8004bde <HAL_GPIO_Init+0x23e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a4e      	ldr	r2, [pc, #312]	; (8004cdc <HAL_GPIO_Init+0x33c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d019      	beq.n	8004bda <HAL_GPIO_Init+0x23a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a4d      	ldr	r2, [pc, #308]	; (8004ce0 <HAL_GPIO_Init+0x340>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d013      	beq.n	8004bd6 <HAL_GPIO_Init+0x236>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a4c      	ldr	r2, [pc, #304]	; (8004ce4 <HAL_GPIO_Init+0x344>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00d      	beq.n	8004bd2 <HAL_GPIO_Init+0x232>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a4b      	ldr	r2, [pc, #300]	; (8004ce8 <HAL_GPIO_Init+0x348>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d007      	beq.n	8004bce <HAL_GPIO_Init+0x22e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a4a      	ldr	r2, [pc, #296]	; (8004cec <HAL_GPIO_Init+0x34c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d101      	bne.n	8004bca <HAL_GPIO_Init+0x22a>
 8004bc6:	2306      	movs	r3, #6
 8004bc8:	e00c      	b.n	8004be4 <HAL_GPIO_Init+0x244>
 8004bca:	2307      	movs	r3, #7
 8004bcc:	e00a      	b.n	8004be4 <HAL_GPIO_Init+0x244>
 8004bce:	2305      	movs	r3, #5
 8004bd0:	e008      	b.n	8004be4 <HAL_GPIO_Init+0x244>
 8004bd2:	2304      	movs	r3, #4
 8004bd4:	e006      	b.n	8004be4 <HAL_GPIO_Init+0x244>
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e004      	b.n	8004be4 <HAL_GPIO_Init+0x244>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e002      	b.n	8004be4 <HAL_GPIO_Init+0x244>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <HAL_GPIO_Init+0x244>
 8004be2:	2300      	movs	r3, #0
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	f002 0203 	and.w	r2, r2, #3
 8004bea:	0092      	lsls	r2, r2, #2
 8004bec:	4093      	lsls	r3, r2
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004bf4:	4937      	ldr	r1, [pc, #220]	; (8004cd4 <HAL_GPIO_Init+0x334>)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	089b      	lsrs	r3, r3, #2
 8004bfa:	3302      	adds	r3, #2
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c02:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <HAL_GPIO_Init+0x350>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c26:	4a32      	ldr	r2, [pc, #200]	; (8004cf0 <HAL_GPIO_Init+0x350>)
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c2c:	4b30      	ldr	r3, [pc, #192]	; (8004cf0 <HAL_GPIO_Init+0x350>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	43db      	mvns	r3, r3
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c50:	4a27      	ldr	r2, [pc, #156]	; (8004cf0 <HAL_GPIO_Init+0x350>)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004c56:	4b26      	ldr	r3, [pc, #152]	; (8004cf0 <HAL_GPIO_Init+0x350>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4013      	ands	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c7a:	4a1d      	ldr	r2, [pc, #116]	; (8004cf0 <HAL_GPIO_Init+0x350>)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004c80:	4b1b      	ldr	r3, [pc, #108]	; (8004cf0 <HAL_GPIO_Init+0x350>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ca4:	4a12      	ldr	r2, [pc, #72]	; (8004cf0 <HAL_GPIO_Init+0x350>)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	3301      	adds	r3, #1
 8004cae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f47f ae78 	bne.w	80049b0 <HAL_GPIO_Init+0x10>
  }
}
 8004cc0:	bf00      	nop
 8004cc2:	bf00      	nop
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	40010000 	.word	0x40010000
 8004cd8:	48000400 	.word	0x48000400
 8004cdc:	48000800 	.word	0x48000800
 8004ce0:	48000c00 	.word	0x48000c00
 8004ce4:	48001000 	.word	0x48001000
 8004ce8:	48001400 	.word	0x48001400
 8004cec:	48001800 	.word	0x48001800
 8004cf0:	40010400 	.word	0x40010400

08004cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	807b      	strh	r3, [r7, #2]
 8004d00:	4613      	mov	r3, r2
 8004d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d04:	787b      	ldrb	r3, [r7, #1]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d0a:	887a      	ldrh	r2, [r7, #2]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d10:	e002      	b.n	8004d18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d12:	887a      	ldrh	r2, [r7, #2]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d2e:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d30:	695a      	ldr	r2, [r3, #20]
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d006      	beq.n	8004d48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d3a:	4a05      	ldr	r2, [pc, #20]	; (8004d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d40:	88fb      	ldrh	r3, [r7, #6]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fc f994 	bl	8001070 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d48:	bf00      	nop
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40010400 	.word	0x40010400

08004d54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004d58:	4b04      	ldr	r3, [pc, #16]	; (8004d6c <HAL_PWREx_GetVoltageRange+0x18>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40007000 	.word	0x40007000

08004d70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d7e:	d130      	bne.n	8004de2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d80:	4b23      	ldr	r3, [pc, #140]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8c:	d038      	beq.n	8004e00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d8e:	4b20      	ldr	r3, [pc, #128]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d96:	4a1e      	ldr	r2, [pc, #120]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d9e:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2232      	movs	r2, #50	; 0x32
 8004da4:	fb02 f303 	mul.w	r3, r2, r3
 8004da8:	4a1b      	ldr	r2, [pc, #108]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004daa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dae:	0c9b      	lsrs	r3, r3, #18
 8004db0:	3301      	adds	r3, #1
 8004db2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004db4:	e002      	b.n	8004dbc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dbc:	4b14      	ldr	r3, [pc, #80]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc8:	d102      	bne.n	8004dd0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f2      	bne.n	8004db6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dd0:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ddc:	d110      	bne.n	8004e00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e00f      	b.n	8004e02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004de2:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dee:	d007      	beq.n	8004e00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004df0:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004df8:	4a05      	ldr	r2, [pc, #20]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dfe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40007000 	.word	0x40007000
 8004e14:	20000348 	.word	0x20000348
 8004e18:	431bde83 	.word	0x431bde83

08004e1c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e3ca      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e2e:	4b97      	ldr	r3, [pc, #604]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 030c 	and.w	r3, r3, #12
 8004e36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e38:	4b94      	ldr	r3, [pc, #592]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0310 	and.w	r3, r3, #16
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 80e4 	beq.w	8005018 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <HAL_RCC_OscConfig+0x4a>
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	2b0c      	cmp	r3, #12
 8004e5a:	f040 808b 	bne.w	8004f74 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	f040 8087 	bne.w	8004f74 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e66:	4b89      	ldr	r3, [pc, #548]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <HAL_RCC_OscConfig+0x62>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e3a2      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1a      	ldr	r2, [r3, #32]
 8004e82:	4b82      	ldr	r3, [pc, #520]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d004      	beq.n	8004e98 <HAL_RCC_OscConfig+0x7c>
 8004e8e:	4b7f      	ldr	r3, [pc, #508]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e96:	e005      	b.n	8004ea4 <HAL_RCC_OscConfig+0x88>
 8004e98:	4b7c      	ldr	r3, [pc, #496]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e9e:	091b      	lsrs	r3, r3, #4
 8004ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d223      	bcs.n	8004ef0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fd87 	bl	80059c0 <RCC_SetFlashLatencyFromMSIRange>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e383      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ebc:	4b73      	ldr	r3, [pc, #460]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a72      	ldr	r2, [pc, #456]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004ec2:	f043 0308 	orr.w	r3, r3, #8
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	4b70      	ldr	r3, [pc, #448]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	496d      	ldr	r1, [pc, #436]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004eda:	4b6c      	ldr	r3, [pc, #432]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	4968      	ldr	r1, [pc, #416]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	604b      	str	r3, [r1, #4]
 8004eee:	e025      	b.n	8004f3c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ef0:	4b66      	ldr	r3, [pc, #408]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a65      	ldr	r2, [pc, #404]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004ef6:	f043 0308 	orr.w	r3, r3, #8
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	4b63      	ldr	r3, [pc, #396]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	4960      	ldr	r1, [pc, #384]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f0e:	4b5f      	ldr	r3, [pc, #380]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	021b      	lsls	r3, r3, #8
 8004f1c:	495b      	ldr	r1, [pc, #364]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d109      	bne.n	8004f3c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fd47 	bl	80059c0 <RCC_SetFlashLatencyFromMSIRange>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e343      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f3c:	f000 fc4a 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 8004f40:	4602      	mov	r2, r0
 8004f42:	4b52      	ldr	r3, [pc, #328]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	091b      	lsrs	r3, r3, #4
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	4950      	ldr	r1, [pc, #320]	; (8005090 <HAL_RCC_OscConfig+0x274>)
 8004f4e:	5ccb      	ldrb	r3, [r1, r3]
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	fa22 f303 	lsr.w	r3, r2, r3
 8004f58:	4a4e      	ldr	r2, [pc, #312]	; (8005094 <HAL_RCC_OscConfig+0x278>)
 8004f5a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f5c:	4b4e      	ldr	r3, [pc, #312]	; (8005098 <HAL_RCC_OscConfig+0x27c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fc ff2b 	bl	8001dbc <HAL_InitTick>
 8004f66:	4603      	mov	r3, r0
 8004f68:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d052      	beq.n	8005016 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	e327      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d032      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f7c:	4b43      	ldr	r3, [pc, #268]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a42      	ldr	r2, [pc, #264]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f88:	f7ff fbea 	bl	8004760 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f90:	f7ff fbe6 	bl	8004760 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e310      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fa2:	4b3a      	ldr	r3, [pc, #232]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0f0      	beq.n	8004f90 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fae:	4b37      	ldr	r3, [pc, #220]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a36      	ldr	r2, [pc, #216]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004fb4:	f043 0308 	orr.w	r3, r3, #8
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	4b34      	ldr	r3, [pc, #208]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	4931      	ldr	r1, [pc, #196]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fcc:	4b2f      	ldr	r3, [pc, #188]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	492c      	ldr	r1, [pc, #176]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	604b      	str	r3, [r1, #4]
 8004fe0:	e01a      	b.n	8005018 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004fe2:	4b2a      	ldr	r3, [pc, #168]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a29      	ldr	r2, [pc, #164]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8004fe8:	f023 0301 	bic.w	r3, r3, #1
 8004fec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004fee:	f7ff fbb7 	bl	8004760 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ff6:	f7ff fbb3 	bl	8004760 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e2dd      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005008:	4b20      	ldr	r3, [pc, #128]	; (800508c <HAL_RCC_OscConfig+0x270>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1f0      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x1da>
 8005014:	e000      	b.n	8005018 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005016:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	d074      	beq.n	800510e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2b08      	cmp	r3, #8
 8005028:	d005      	beq.n	8005036 <HAL_RCC_OscConfig+0x21a>
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2b0c      	cmp	r3, #12
 800502e:	d10e      	bne.n	800504e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2b03      	cmp	r3, #3
 8005034:	d10b      	bne.n	800504e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005036:	4b15      	ldr	r3, [pc, #84]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d064      	beq.n	800510c <HAL_RCC_OscConfig+0x2f0>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d160      	bne.n	800510c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e2ba      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005056:	d106      	bne.n	8005066 <HAL_RCC_OscConfig+0x24a>
 8005058:	4b0c      	ldr	r3, [pc, #48]	; (800508c <HAL_RCC_OscConfig+0x270>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a0b      	ldr	r2, [pc, #44]	; (800508c <HAL_RCC_OscConfig+0x270>)
 800505e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	e026      	b.n	80050b4 <HAL_RCC_OscConfig+0x298>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800506e:	d115      	bne.n	800509c <HAL_RCC_OscConfig+0x280>
 8005070:	4b06      	ldr	r3, [pc, #24]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a05      	ldr	r2, [pc, #20]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8005076:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	4b03      	ldr	r3, [pc, #12]	; (800508c <HAL_RCC_OscConfig+0x270>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a02      	ldr	r2, [pc, #8]	; (800508c <HAL_RCC_OscConfig+0x270>)
 8005082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	e014      	b.n	80050b4 <HAL_RCC_OscConfig+0x298>
 800508a:	bf00      	nop
 800508c:	40021000 	.word	0x40021000
 8005090:	0800c178 	.word	0x0800c178
 8005094:	20000348 	.word	0x20000348
 8005098:	20000354 	.word	0x20000354
 800509c:	4ba0      	ldr	r3, [pc, #640]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a9f      	ldr	r2, [pc, #636]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 80050a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	4b9d      	ldr	r3, [pc, #628]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a9c      	ldr	r2, [pc, #624]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 80050ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d013      	beq.n	80050e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050bc:	f7ff fb50 	bl	8004760 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050c4:	f7ff fb4c 	bl	8004760 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b64      	cmp	r3, #100	; 0x64
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e276      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050d6:	4b92      	ldr	r3, [pc, #584]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0f0      	beq.n	80050c4 <HAL_RCC_OscConfig+0x2a8>
 80050e2:	e014      	b.n	800510e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7ff fb3c 	bl	8004760 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050ec:	f7ff fb38 	bl	8004760 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b64      	cmp	r3, #100	; 0x64
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e262      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050fe:	4b88      	ldr	r3, [pc, #544]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x2d0>
 800510a:	e000      	b.n	800510e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800510c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d060      	beq.n	80051dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	2b04      	cmp	r3, #4
 800511e:	d005      	beq.n	800512c <HAL_RCC_OscConfig+0x310>
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2b0c      	cmp	r3, #12
 8005124:	d119      	bne.n	800515a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b02      	cmp	r3, #2
 800512a:	d116      	bne.n	800515a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800512c:	4b7c      	ldr	r3, [pc, #496]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <HAL_RCC_OscConfig+0x328>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e23f      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005144:	4b76      	ldr	r3, [pc, #472]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	061b      	lsls	r3, r3, #24
 8005152:	4973      	ldr	r1, [pc, #460]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 8005154:	4313      	orrs	r3, r2
 8005156:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005158:	e040      	b.n	80051dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d023      	beq.n	80051aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005162:	4b6f      	ldr	r3, [pc, #444]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a6e      	ldr	r2, [pc, #440]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 8005168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516e:	f7ff faf7 	bl	8004760 <HAL_GetTick>
 8005172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005176:	f7ff faf3 	bl	8004760 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e21d      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005188:	4b65      	ldr	r3, [pc, #404]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0f0      	beq.n	8005176 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005194:	4b62      	ldr	r3, [pc, #392]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	061b      	lsls	r3, r3, #24
 80051a2:	495f      	ldr	r1, [pc, #380]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	604b      	str	r3, [r1, #4]
 80051a8:	e018      	b.n	80051dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051aa:	4b5d      	ldr	r3, [pc, #372]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a5c      	ldr	r2, [pc, #368]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 80051b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b6:	f7ff fad3 	bl	8004760 <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051be:	f7ff facf 	bl	8004760 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e1f9      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051d0:	4b53      	ldr	r3, [pc, #332]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1f0      	bne.n	80051be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d03c      	beq.n	8005262 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01c      	beq.n	800522a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051f0:	4b4b      	ldr	r3, [pc, #300]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 80051f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f6:	4a4a      	ldr	r2, [pc, #296]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 80051f8:	f043 0301 	orr.w	r3, r3, #1
 80051fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005200:	f7ff faae 	bl	8004760 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005208:	f7ff faaa 	bl	8004760 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e1d4      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800521a:	4b41      	ldr	r3, [pc, #260]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 800521c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0ef      	beq.n	8005208 <HAL_RCC_OscConfig+0x3ec>
 8005228:	e01b      	b.n	8005262 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800522a:	4b3d      	ldr	r3, [pc, #244]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 800522c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005230:	4a3b      	ldr	r2, [pc, #236]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 8005232:	f023 0301 	bic.w	r3, r3, #1
 8005236:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523a:	f7ff fa91 	bl	8004760 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005242:	f7ff fa8d 	bl	8004760 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e1b7      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005254:	4b32      	ldr	r3, [pc, #200]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 8005256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1ef      	bne.n	8005242 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 80a6 	beq.w	80053bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005270:	2300      	movs	r3, #0
 8005272:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005274:	4b2a      	ldr	r3, [pc, #168]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 8005276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10d      	bne.n	800529c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005280:	4b27      	ldr	r3, [pc, #156]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 8005282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005284:	4a26      	ldr	r2, [pc, #152]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 8005286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800528a:	6593      	str	r3, [r2, #88]	; 0x58
 800528c:	4b24      	ldr	r3, [pc, #144]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 800528e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005298:	2301      	movs	r3, #1
 800529a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800529c:	4b21      	ldr	r3, [pc, #132]	; (8005324 <HAL_RCC_OscConfig+0x508>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d118      	bne.n	80052da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052a8:	4b1e      	ldr	r3, [pc, #120]	; (8005324 <HAL_RCC_OscConfig+0x508>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1d      	ldr	r2, [pc, #116]	; (8005324 <HAL_RCC_OscConfig+0x508>)
 80052ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052b4:	f7ff fa54 	bl	8004760 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052bc:	f7ff fa50 	bl	8004760 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e17a      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052ce:	4b15      	ldr	r3, [pc, #84]	; (8005324 <HAL_RCC_OscConfig+0x508>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f0      	beq.n	80052bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d108      	bne.n	80052f4 <HAL_RCC_OscConfig+0x4d8>
 80052e2:	4b0f      	ldr	r3, [pc, #60]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e8:	4a0d      	ldr	r2, [pc, #52]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 80052ea:	f043 0301 	orr.w	r3, r3, #1
 80052ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052f2:	e029      	b.n	8005348 <HAL_RCC_OscConfig+0x52c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2b05      	cmp	r3, #5
 80052fa:	d115      	bne.n	8005328 <HAL_RCC_OscConfig+0x50c>
 80052fc:	4b08      	ldr	r3, [pc, #32]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 80052fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005302:	4a07      	ldr	r2, [pc, #28]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 8005304:	f043 0304 	orr.w	r3, r3, #4
 8005308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800530c:	4b04      	ldr	r3, [pc, #16]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 800530e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005312:	4a03      	ldr	r2, [pc, #12]	; (8005320 <HAL_RCC_OscConfig+0x504>)
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800531c:	e014      	b.n	8005348 <HAL_RCC_OscConfig+0x52c>
 800531e:	bf00      	nop
 8005320:	40021000 	.word	0x40021000
 8005324:	40007000 	.word	0x40007000
 8005328:	4b9c      	ldr	r3, [pc, #624]	; (800559c <HAL_RCC_OscConfig+0x780>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532e:	4a9b      	ldr	r2, [pc, #620]	; (800559c <HAL_RCC_OscConfig+0x780>)
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005338:	4b98      	ldr	r3, [pc, #608]	; (800559c <HAL_RCC_OscConfig+0x780>)
 800533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533e:	4a97      	ldr	r2, [pc, #604]	; (800559c <HAL_RCC_OscConfig+0x780>)
 8005340:	f023 0304 	bic.w	r3, r3, #4
 8005344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d016      	beq.n	800537e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005350:	f7ff fa06 	bl	8004760 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005356:	e00a      	b.n	800536e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005358:	f7ff fa02 	bl	8004760 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	f241 3288 	movw	r2, #5000	; 0x1388
 8005366:	4293      	cmp	r3, r2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e12a      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800536e:	4b8b      	ldr	r3, [pc, #556]	; (800559c <HAL_RCC_OscConfig+0x780>)
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0ed      	beq.n	8005358 <HAL_RCC_OscConfig+0x53c>
 800537c:	e015      	b.n	80053aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537e:	f7ff f9ef 	bl	8004760 <HAL_GetTick>
 8005382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005384:	e00a      	b.n	800539c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005386:	f7ff f9eb 	bl	8004760 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	f241 3288 	movw	r2, #5000	; 0x1388
 8005394:	4293      	cmp	r3, r2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e113      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800539c:	4b7f      	ldr	r3, [pc, #508]	; (800559c <HAL_RCC_OscConfig+0x780>)
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1ed      	bne.n	8005386 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053aa:	7ffb      	ldrb	r3, [r7, #31]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d105      	bne.n	80053bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b0:	4b7a      	ldr	r3, [pc, #488]	; (800559c <HAL_RCC_OscConfig+0x780>)
 80053b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b4:	4a79      	ldr	r2, [pc, #484]	; (800559c <HAL_RCC_OscConfig+0x780>)
 80053b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 80fe 	beq.w	80055c2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	f040 80d0 	bne.w	8005570 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80053d0:	4b72      	ldr	r3, [pc, #456]	; (800559c <HAL_RCC_OscConfig+0x780>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f003 0203 	and.w	r2, r3, #3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d130      	bne.n	8005446 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	3b01      	subs	r3, #1
 80053f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d127      	bne.n	8005446 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005400:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005402:	429a      	cmp	r2, r3
 8005404:	d11f      	bne.n	8005446 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005410:	2a07      	cmp	r2, #7
 8005412:	bf14      	ite	ne
 8005414:	2201      	movne	r2, #1
 8005416:	2200      	moveq	r2, #0
 8005418:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800541a:	4293      	cmp	r3, r2
 800541c:	d113      	bne.n	8005446 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005428:	085b      	lsrs	r3, r3, #1
 800542a:	3b01      	subs	r3, #1
 800542c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800542e:	429a      	cmp	r2, r3
 8005430:	d109      	bne.n	8005446 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	085b      	lsrs	r3, r3, #1
 800543e:	3b01      	subs	r3, #1
 8005440:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005442:	429a      	cmp	r2, r3
 8005444:	d06e      	beq.n	8005524 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	2b0c      	cmp	r3, #12
 800544a:	d069      	beq.n	8005520 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800544c:	4b53      	ldr	r3, [pc, #332]	; (800559c <HAL_RCC_OscConfig+0x780>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d105      	bne.n	8005464 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005458:	4b50      	ldr	r3, [pc, #320]	; (800559c <HAL_RCC_OscConfig+0x780>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e0ad      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005468:	4b4c      	ldr	r3, [pc, #304]	; (800559c <HAL_RCC_OscConfig+0x780>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a4b      	ldr	r2, [pc, #300]	; (800559c <HAL_RCC_OscConfig+0x780>)
 800546e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005472:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005474:	f7ff f974 	bl	8004760 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800547c:	f7ff f970 	bl	8004760 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e09a      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800548e:	4b43      	ldr	r3, [pc, #268]	; (800559c <HAL_RCC_OscConfig+0x780>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800549a:	4b40      	ldr	r3, [pc, #256]	; (800559c <HAL_RCC_OscConfig+0x780>)
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	4b40      	ldr	r3, [pc, #256]	; (80055a0 <HAL_RCC_OscConfig+0x784>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054aa:	3a01      	subs	r2, #1
 80054ac:	0112      	lsls	r2, r2, #4
 80054ae:	4311      	orrs	r1, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054b4:	0212      	lsls	r2, r2, #8
 80054b6:	4311      	orrs	r1, r2
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80054bc:	0852      	lsrs	r2, r2, #1
 80054be:	3a01      	subs	r2, #1
 80054c0:	0552      	lsls	r2, r2, #21
 80054c2:	4311      	orrs	r1, r2
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054c8:	0852      	lsrs	r2, r2, #1
 80054ca:	3a01      	subs	r2, #1
 80054cc:	0652      	lsls	r2, r2, #25
 80054ce:	4311      	orrs	r1, r2
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054d4:	0912      	lsrs	r2, r2, #4
 80054d6:	0452      	lsls	r2, r2, #17
 80054d8:	430a      	orrs	r2, r1
 80054da:	4930      	ldr	r1, [pc, #192]	; (800559c <HAL_RCC_OscConfig+0x780>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80054e0:	4b2e      	ldr	r3, [pc, #184]	; (800559c <HAL_RCC_OscConfig+0x780>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a2d      	ldr	r2, [pc, #180]	; (800559c <HAL_RCC_OscConfig+0x780>)
 80054e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054ec:	4b2b      	ldr	r3, [pc, #172]	; (800559c <HAL_RCC_OscConfig+0x780>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	4a2a      	ldr	r2, [pc, #168]	; (800559c <HAL_RCC_OscConfig+0x780>)
 80054f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054f8:	f7ff f932 	bl	8004760 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005500:	f7ff f92e 	bl	8004760 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e058      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005512:	4b22      	ldr	r3, [pc, #136]	; (800559c <HAL_RCC_OscConfig+0x780>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0f0      	beq.n	8005500 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800551e:	e050      	b.n	80055c2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e04f      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005524:	4b1d      	ldr	r3, [pc, #116]	; (800559c <HAL_RCC_OscConfig+0x780>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d148      	bne.n	80055c2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005530:	4b1a      	ldr	r3, [pc, #104]	; (800559c <HAL_RCC_OscConfig+0x780>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a19      	ldr	r2, [pc, #100]	; (800559c <HAL_RCC_OscConfig+0x780>)
 8005536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800553a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800553c:	4b17      	ldr	r3, [pc, #92]	; (800559c <HAL_RCC_OscConfig+0x780>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	4a16      	ldr	r2, [pc, #88]	; (800559c <HAL_RCC_OscConfig+0x780>)
 8005542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005546:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005548:	f7ff f90a 	bl	8004760 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005550:	f7ff f906 	bl	8004760 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e030      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005562:	4b0e      	ldr	r3, [pc, #56]	; (800559c <HAL_RCC_OscConfig+0x780>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0f0      	beq.n	8005550 <HAL_RCC_OscConfig+0x734>
 800556e:	e028      	b.n	80055c2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	2b0c      	cmp	r3, #12
 8005574:	d023      	beq.n	80055be <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005576:	4b09      	ldr	r3, [pc, #36]	; (800559c <HAL_RCC_OscConfig+0x780>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a08      	ldr	r2, [pc, #32]	; (800559c <HAL_RCC_OscConfig+0x780>)
 800557c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005582:	f7ff f8ed 	bl	8004760 <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005588:	e00c      	b.n	80055a4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800558a:	f7ff f8e9 	bl	8004760 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d905      	bls.n	80055a4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e013      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
 800559c:	40021000 	.word	0x40021000
 80055a0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055a4:	4b09      	ldr	r3, [pc, #36]	; (80055cc <HAL_RCC_OscConfig+0x7b0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1ec      	bne.n	800558a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80055b0:	4b06      	ldr	r3, [pc, #24]	; (80055cc <HAL_RCC_OscConfig+0x7b0>)
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	4905      	ldr	r1, [pc, #20]	; (80055cc <HAL_RCC_OscConfig+0x7b0>)
 80055b6:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <HAL_RCC_OscConfig+0x7b4>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	60cb      	str	r3, [r1, #12]
 80055bc:	e001      	b.n	80055c2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3720      	adds	r7, #32
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40021000 	.word	0x40021000
 80055d0:	feeefffc 	.word	0xfeeefffc

080055d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0e7      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055e8:	4b75      	ldr	r3, [pc, #468]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d910      	bls.n	8005618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f6:	4b72      	ldr	r3, [pc, #456]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f023 0207 	bic.w	r2, r3, #7
 80055fe:	4970      	ldr	r1, [pc, #448]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	4313      	orrs	r3, r2
 8005604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005606:	4b6e      	ldr	r3, [pc, #440]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d001      	beq.n	8005618 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0cf      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d010      	beq.n	8005646 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	4b66      	ldr	r3, [pc, #408]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005630:	429a      	cmp	r2, r3
 8005632:	d908      	bls.n	8005646 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005634:	4b63      	ldr	r3, [pc, #396]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4960      	ldr	r1, [pc, #384]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005642:	4313      	orrs	r3, r2
 8005644:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d04c      	beq.n	80056ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b03      	cmp	r3, #3
 8005658:	d107      	bne.n	800566a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800565a:	4b5a      	ldr	r3, [pc, #360]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d121      	bne.n	80056aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e0a6      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d107      	bne.n	8005682 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005672:	4b54      	ldr	r3, [pc, #336]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d115      	bne.n	80056aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e09a      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d107      	bne.n	800569a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800568a:	4b4e      	ldr	r3, [pc, #312]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d109      	bne.n	80056aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e08e      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800569a:	4b4a      	ldr	r3, [pc, #296]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e086      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056aa:	4b46      	ldr	r3, [pc, #280]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f023 0203 	bic.w	r2, r3, #3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4943      	ldr	r1, [pc, #268]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056bc:	f7ff f850 	bl	8004760 <HAL_GetTick>
 80056c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c2:	e00a      	b.n	80056da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c4:	f7ff f84c 	bl	8004760 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e06e      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056da:	4b3a      	ldr	r3, [pc, #232]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 020c 	and.w	r2, r3, #12
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d1eb      	bne.n	80056c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d010      	beq.n	800571a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	4b31      	ldr	r3, [pc, #196]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005704:	429a      	cmp	r2, r3
 8005706:	d208      	bcs.n	800571a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005708:	4b2e      	ldr	r3, [pc, #184]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	492b      	ldr	r1, [pc, #172]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005716:	4313      	orrs	r3, r2
 8005718:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800571a:	4b29      	ldr	r3, [pc, #164]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d210      	bcs.n	800574a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005728:	4b25      	ldr	r3, [pc, #148]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f023 0207 	bic.w	r2, r3, #7
 8005730:	4923      	ldr	r1, [pc, #140]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	4313      	orrs	r3, r2
 8005736:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005738:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <HAL_RCC_ClockConfig+0x1ec>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d001      	beq.n	800574a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e036      	b.n	80057b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005756:	4b1b      	ldr	r3, [pc, #108]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	4918      	ldr	r1, [pc, #96]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005764:	4313      	orrs	r3, r2
 8005766:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	d009      	beq.n	8005788 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005774:	4b13      	ldr	r3, [pc, #76]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	4910      	ldr	r1, [pc, #64]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005784:	4313      	orrs	r3, r2
 8005786:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005788:	f000 f824 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 800578c:	4602      	mov	r2, r0
 800578e:	4b0d      	ldr	r3, [pc, #52]	; (80057c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	091b      	lsrs	r3, r3, #4
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	490b      	ldr	r1, [pc, #44]	; (80057c8 <HAL_RCC_ClockConfig+0x1f4>)
 800579a:	5ccb      	ldrb	r3, [r1, r3]
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	fa22 f303 	lsr.w	r3, r2, r3
 80057a4:	4a09      	ldr	r2, [pc, #36]	; (80057cc <HAL_RCC_ClockConfig+0x1f8>)
 80057a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80057a8:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <HAL_RCC_ClockConfig+0x1fc>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fc fb05 	bl	8001dbc <HAL_InitTick>
 80057b2:	4603      	mov	r3, r0
 80057b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80057b6:	7afb      	ldrb	r3, [r7, #11]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40022000 	.word	0x40022000
 80057c4:	40021000 	.word	0x40021000
 80057c8:	0800c178 	.word	0x0800c178
 80057cc:	20000348 	.word	0x20000348
 80057d0:	20000354 	.word	0x20000354

080057d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b089      	sub	sp, #36	; 0x24
 80057d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	61fb      	str	r3, [r7, #28]
 80057de:	2300      	movs	r3, #0
 80057e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057e2:	4b3e      	ldr	r3, [pc, #248]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 030c 	and.w	r3, r3, #12
 80057ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057ec:	4b3b      	ldr	r3, [pc, #236]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <HAL_RCC_GetSysClockFreq+0x34>
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2b0c      	cmp	r3, #12
 8005800:	d121      	bne.n	8005846 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d11e      	bne.n	8005846 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005808:	4b34      	ldr	r3, [pc, #208]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d107      	bne.n	8005824 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005814:	4b31      	ldr	r3, [pc, #196]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800581a:	0a1b      	lsrs	r3, r3, #8
 800581c:	f003 030f 	and.w	r3, r3, #15
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	e005      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005824:	4b2d      	ldr	r3, [pc, #180]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	091b      	lsrs	r3, r3, #4
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005830:	4a2b      	ldr	r2, [pc, #172]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005838:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10d      	bne.n	800585c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005844:	e00a      	b.n	800585c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b04      	cmp	r3, #4
 800584a:	d102      	bne.n	8005852 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800584c:	4b25      	ldr	r3, [pc, #148]	; (80058e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	e004      	b.n	800585c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b08      	cmp	r3, #8
 8005856:	d101      	bne.n	800585c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005858:	4b23      	ldr	r3, [pc, #140]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800585a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2b0c      	cmp	r3, #12
 8005860:	d134      	bne.n	80058cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005862:	4b1e      	ldr	r3, [pc, #120]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d003      	beq.n	800587a <HAL_RCC_GetSysClockFreq+0xa6>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b03      	cmp	r3, #3
 8005876:	d003      	beq.n	8005880 <HAL_RCC_GetSysClockFreq+0xac>
 8005878:	e005      	b.n	8005886 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800587a:	4b1a      	ldr	r3, [pc, #104]	; (80058e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800587c:	617b      	str	r3, [r7, #20]
      break;
 800587e:	e005      	b.n	800588c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005880:	4b19      	ldr	r3, [pc, #100]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005882:	617b      	str	r3, [r7, #20]
      break;
 8005884:	e002      	b.n	800588c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	617b      	str	r3, [r7, #20]
      break;
 800588a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800588c:	4b13      	ldr	r3, [pc, #76]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	091b      	lsrs	r3, r3, #4
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	3301      	adds	r3, #1
 8005898:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800589a:	4b10      	ldr	r3, [pc, #64]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	0a1b      	lsrs	r3, r3, #8
 80058a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	fb03 f202 	mul.w	r2, r3, r2
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058b2:	4b0a      	ldr	r3, [pc, #40]	; (80058dc <HAL_RCC_GetSysClockFreq+0x108>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	0e5b      	lsrs	r3, r3, #25
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	3301      	adds	r3, #1
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80058cc:	69bb      	ldr	r3, [r7, #24]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3724      	adds	r7, #36	; 0x24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40021000 	.word	0x40021000
 80058e0:	0800c190 	.word	0x0800c190
 80058e4:	00f42400 	.word	0x00f42400
 80058e8:	007a1200 	.word	0x007a1200

080058ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058f0:	4b03      	ldr	r3, [pc, #12]	; (8005900 <HAL_RCC_GetHCLKFreq+0x14>)
 80058f2:	681b      	ldr	r3, [r3, #0]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20000348 	.word	0x20000348

08005904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005908:	f7ff fff0 	bl	80058ec <HAL_RCC_GetHCLKFreq>
 800590c:	4602      	mov	r2, r0
 800590e:	4b06      	ldr	r3, [pc, #24]	; (8005928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	0a1b      	lsrs	r3, r3, #8
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	4904      	ldr	r1, [pc, #16]	; (800592c <HAL_RCC_GetPCLK1Freq+0x28>)
 800591a:	5ccb      	ldrb	r3, [r1, r3]
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005924:	4618      	mov	r0, r3
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40021000 	.word	0x40021000
 800592c:	0800c188 	.word	0x0800c188

08005930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005934:	f7ff ffda 	bl	80058ec <HAL_RCC_GetHCLKFreq>
 8005938:	4602      	mov	r2, r0
 800593a:	4b06      	ldr	r3, [pc, #24]	; (8005954 <HAL_RCC_GetPCLK2Freq+0x24>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	0adb      	lsrs	r3, r3, #11
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	4904      	ldr	r1, [pc, #16]	; (8005958 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005946:	5ccb      	ldrb	r3, [r1, r3]
 8005948:	f003 031f 	and.w	r3, r3, #31
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005950:	4618      	mov	r0, r3
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40021000 	.word	0x40021000
 8005958:	0800c188 	.word	0x0800c188

0800595c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	220f      	movs	r2, #15
 800596a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800596c:	4b12      	ldr	r3, [pc, #72]	; (80059b8 <HAL_RCC_GetClockConfig+0x5c>)
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 0203 	and.w	r2, r3, #3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005978:	4b0f      	ldr	r3, [pc, #60]	; (80059b8 <HAL_RCC_GetClockConfig+0x5c>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005984:	4b0c      	ldr	r3, [pc, #48]	; (80059b8 <HAL_RCC_GetClockConfig+0x5c>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005990:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <HAL_RCC_GetClockConfig+0x5c>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	08db      	lsrs	r3, r3, #3
 8005996:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800599e:	4b07      	ldr	r3, [pc, #28]	; (80059bc <HAL_RCC_GetClockConfig+0x60>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0207 	and.w	r2, r3, #7
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	601a      	str	r2, [r3, #0]
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40021000 	.word	0x40021000
 80059bc:	40022000 	.word	0x40022000

080059c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059c8:	2300      	movs	r3, #0
 80059ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059cc:	4b2a      	ldr	r3, [pc, #168]	; (8005a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80059d8:	f7ff f9bc 	bl	8004d54 <HAL_PWREx_GetVoltageRange>
 80059dc:	6178      	str	r0, [r7, #20]
 80059de:	e014      	b.n	8005a0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059e0:	4b25      	ldr	r3, [pc, #148]	; (8005a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e4:	4a24      	ldr	r2, [pc, #144]	; (8005a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ea:	6593      	str	r3, [r2, #88]	; 0x58
 80059ec:	4b22      	ldr	r3, [pc, #136]	; (8005a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80059f8:	f7ff f9ac 	bl	8004d54 <HAL_PWREx_GetVoltageRange>
 80059fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80059fe:	4b1e      	ldr	r3, [pc, #120]	; (8005a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a02:	4a1d      	ldr	r2, [pc, #116]	; (8005a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a10:	d10b      	bne.n	8005a2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b80      	cmp	r3, #128	; 0x80
 8005a16:	d919      	bls.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2ba0      	cmp	r3, #160	; 0xa0
 8005a1c:	d902      	bls.n	8005a24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a1e:	2302      	movs	r3, #2
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	e013      	b.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a24:	2301      	movs	r3, #1
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	e010      	b.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b80      	cmp	r3, #128	; 0x80
 8005a2e:	d902      	bls.n	8005a36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a30:	2303      	movs	r3, #3
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	e00a      	b.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b80      	cmp	r3, #128	; 0x80
 8005a3a:	d102      	bne.n	8005a42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	613b      	str	r3, [r7, #16]
 8005a40:	e004      	b.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b70      	cmp	r3, #112	; 0x70
 8005a46:	d101      	bne.n	8005a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a48:	2301      	movs	r3, #1
 8005a4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f023 0207 	bic.w	r2, r3, #7
 8005a54:	4909      	ldr	r1, [pc, #36]	; (8005a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a5c:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d001      	beq.n	8005a6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	40022000 	.word	0x40022000

08005a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a88:	2300      	movs	r3, #0
 8005a8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d041      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005aa4:	d02a      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005aa6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005aaa:	d824      	bhi.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005aac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ab0:	d008      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ab2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ab6:	d81e      	bhi.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005abc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ac0:	d010      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ac2:	e018      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ac4:	4b86      	ldr	r3, [pc, #536]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	4a85      	ldr	r2, [pc, #532]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ace:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ad0:	e015      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 fabb 	bl	8006054 <RCCEx_PLLSAI1_Config>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ae2:	e00c      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3320      	adds	r3, #32
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fba6 	bl	800623c <RCCEx_PLLSAI2_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005af4:	e003      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	74fb      	strb	r3, [r7, #19]
      break;
 8005afa:	e000      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005afe:	7cfb      	ldrb	r3, [r7, #19]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10b      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b04:	4b76      	ldr	r3, [pc, #472]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b12:	4973      	ldr	r1, [pc, #460]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b1a:	e001      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1c:	7cfb      	ldrb	r3, [r7, #19]
 8005b1e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d041      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b34:	d02a      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005b36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b3a:	d824      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b40:	d008      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b46:	d81e      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b50:	d010      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b52:	e018      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b54:	4b62      	ldr	r3, [pc, #392]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	4a61      	ldr	r2, [pc, #388]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b60:	e015      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3304      	adds	r3, #4
 8005b66:	2100      	movs	r1, #0
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fa73 	bl	8006054 <RCCEx_PLLSAI1_Config>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b72:	e00c      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3320      	adds	r3, #32
 8005b78:	2100      	movs	r1, #0
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fb5e 	bl	800623c <RCCEx_PLLSAI2_Config>
 8005b80:	4603      	mov	r3, r0
 8005b82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b84:	e003      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	74fb      	strb	r3, [r7, #19]
      break;
 8005b8a:	e000      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b8e:	7cfb      	ldrb	r3, [r7, #19]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10b      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b94:	4b52      	ldr	r3, [pc, #328]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ba2:	494f      	ldr	r1, [pc, #316]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005baa:	e001      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bac:	7cfb      	ldrb	r3, [r7, #19]
 8005bae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 80a0 	beq.w	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bc2:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00d      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bd8:	4b41      	ldr	r3, [pc, #260]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bdc:	4a40      	ldr	r2, [pc, #256]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be2:	6593      	str	r3, [r2, #88]	; 0x58
 8005be4:	4b3e      	ldr	r3, [pc, #248]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bec:	60bb      	str	r3, [r7, #8]
 8005bee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bf4:	4b3b      	ldr	r3, [pc, #236]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a3a      	ldr	r2, [pc, #232]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c00:	f7fe fdae 	bl	8004760 <HAL_GetTick>
 8005c04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c06:	e009      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c08:	f7fe fdaa 	bl	8004760 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d902      	bls.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	74fb      	strb	r3, [r7, #19]
        break;
 8005c1a:	e005      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c1c:	4b31      	ldr	r3, [pc, #196]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0ef      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005c28:	7cfb      	ldrb	r3, [r7, #19]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d15c      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c2e:	4b2c      	ldr	r3, [pc, #176]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01f      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d019      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c4c:	4b24      	ldr	r3, [pc, #144]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c58:	4b21      	ldr	r3, [pc, #132]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5e:	4a20      	ldr	r2, [pc, #128]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c68:	4b1d      	ldr	r3, [pc, #116]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6e:	4a1c      	ldr	r2, [pc, #112]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c78:	4a19      	ldr	r2, [pc, #100]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d016      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8a:	f7fe fd69 	bl	8004760 <HAL_GetTick>
 8005c8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c90:	e00b      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c92:	f7fe fd65 	bl	8004760 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d902      	bls.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	74fb      	strb	r3, [r7, #19]
            break;
 8005ca8:	e006      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005caa:	4b0d      	ldr	r3, [pc, #52]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0ec      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005cb8:	7cfb      	ldrb	r3, [r7, #19]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10c      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cbe:	4b08      	ldr	r3, [pc, #32]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cce:	4904      	ldr	r1, [pc, #16]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cd6:	e009      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cd8:	7cfb      	ldrb	r3, [r7, #19]
 8005cda:	74bb      	strb	r3, [r7, #18]
 8005cdc:	e006      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005cde:	bf00      	nop
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce8:	7cfb      	ldrb	r3, [r7, #19]
 8005cea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cec:	7c7b      	ldrb	r3, [r7, #17]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d105      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cf2:	4b9e      	ldr	r3, [pc, #632]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf6:	4a9d      	ldr	r2, [pc, #628]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d0a:	4b98      	ldr	r3, [pc, #608]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d10:	f023 0203 	bic.w	r2, r3, #3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d18:	4994      	ldr	r1, [pc, #592]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00a      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d2c:	4b8f      	ldr	r3, [pc, #572]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d32:	f023 020c 	bic.w	r2, r3, #12
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3a:	498c      	ldr	r1, [pc, #560]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d4e:	4b87      	ldr	r3, [pc, #540]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	4983      	ldr	r1, [pc, #524]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00a      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d70:	4b7e      	ldr	r3, [pc, #504]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7e:	497b      	ldr	r1, [pc, #492]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0310 	and.w	r3, r3, #16
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d92:	4b76      	ldr	r3, [pc, #472]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da0:	4972      	ldr	r1, [pc, #456]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0320 	and.w	r3, r3, #32
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00a      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005db4:	4b6d      	ldr	r3, [pc, #436]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc2:	496a      	ldr	r1, [pc, #424]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dd6:	4b65      	ldr	r3, [pc, #404]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ddc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de4:	4961      	ldr	r1, [pc, #388]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00a      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005df8:	4b5c      	ldr	r3, [pc, #368]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e06:	4959      	ldr	r1, [pc, #356]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e1a:	4b54      	ldr	r3, [pc, #336]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e28:	4950      	ldr	r1, [pc, #320]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00a      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e3c:	4b4b      	ldr	r3, [pc, #300]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4a:	4948      	ldr	r1, [pc, #288]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e5e:	4b43      	ldr	r3, [pc, #268]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6c:	493f      	ldr	r1, [pc, #252]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d028      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e80:	4b3a      	ldr	r3, [pc, #232]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e8e:	4937      	ldr	r1, [pc, #220]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e9e:	d106      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ea0:	4b32      	ldr	r3, [pc, #200]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	4a31      	ldr	r2, [pc, #196]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eaa:	60d3      	str	r3, [r2, #12]
 8005eac:	e011      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005eb6:	d10c      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 f8c8 	bl	8006054 <RCCEx_PLLSAI1_Config>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ec8:	7cfb      	ldrb	r3, [r7, #19]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005ece:	7cfb      	ldrb	r3, [r7, #19]
 8005ed0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d028      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ede:	4b23      	ldr	r3, [pc, #140]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eec:	491f      	ldr	r1, [pc, #124]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005efc:	d106      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005efe:	4b1b      	ldr	r3, [pc, #108]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	4a1a      	ldr	r2, [pc, #104]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f08:	60d3      	str	r3, [r2, #12]
 8005f0a:	e011      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f14:	d10c      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3304      	adds	r3, #4
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 f899 	bl	8006054 <RCCEx_PLLSAI1_Config>
 8005f22:	4603      	mov	r3, r0
 8005f24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f26:	7cfb      	ldrb	r3, [r7, #19]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005f2c:	7cfb      	ldrb	r3, [r7, #19]
 8005f2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d02b      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f3c:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f4a:	4908      	ldr	r1, [pc, #32]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f5a:	d109      	bne.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f5c:	4b03      	ldr	r3, [pc, #12]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	4a02      	ldr	r2, [pc, #8]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f66:	60d3      	str	r3, [r2, #12]
 8005f68:	e014      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005f6a:	bf00      	nop
 8005f6c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f78:	d10c      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	2101      	movs	r1, #1
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 f867 	bl	8006054 <RCCEx_PLLSAI1_Config>
 8005f86:	4603      	mov	r3, r0
 8005f88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f8a:	7cfb      	ldrb	r3, [r7, #19]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005f90:	7cfb      	ldrb	r3, [r7, #19]
 8005f92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d02f      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fa0:	4b2b      	ldr	r3, [pc, #172]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fae:	4928      	ldr	r1, [pc, #160]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fbe:	d10d      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	2102      	movs	r1, #2
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 f844 	bl	8006054 <RCCEx_PLLSAI1_Config>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fd0:	7cfb      	ldrb	r3, [r7, #19]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d014      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005fd6:	7cfb      	ldrb	r3, [r7, #19]
 8005fd8:	74bb      	strb	r3, [r7, #18]
 8005fda:	e011      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fe4:	d10c      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3320      	adds	r3, #32
 8005fea:	2102      	movs	r1, #2
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 f925 	bl	800623c <RCCEx_PLLSAI2_Config>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ff6:	7cfb      	ldrb	r3, [r7, #19]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005ffc:	7cfb      	ldrb	r3, [r7, #19]
 8005ffe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00a      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800600c:	4b10      	ldr	r3, [pc, #64]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800600e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006012:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800601a:	490d      	ldr	r1, [pc, #52]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800601c:	4313      	orrs	r3, r2
 800601e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800602e:	4b08      	ldr	r3, [pc, #32]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006034:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800603e:	4904      	ldr	r1, [pc, #16]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006040:	4313      	orrs	r3, r2
 8006042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006046:	7cbb      	ldrb	r3, [r7, #18]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	40021000 	.word	0x40021000

08006054 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006062:	4b75      	ldr	r3, [pc, #468]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f003 0303 	and.w	r3, r3, #3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d018      	beq.n	80060a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800606e:	4b72      	ldr	r3, [pc, #456]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	f003 0203 	and.w	r2, r3, #3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	429a      	cmp	r2, r3
 800607c:	d10d      	bne.n	800609a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
       ||
 8006082:	2b00      	cmp	r3, #0
 8006084:	d009      	beq.n	800609a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006086:	4b6c      	ldr	r3, [pc, #432]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	091b      	lsrs	r3, r3, #4
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
       ||
 8006096:	429a      	cmp	r2, r3
 8006098:	d047      	beq.n	800612a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	73fb      	strb	r3, [r7, #15]
 800609e:	e044      	b.n	800612a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d018      	beq.n	80060da <RCCEx_PLLSAI1_Config+0x86>
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d825      	bhi.n	80060f8 <RCCEx_PLLSAI1_Config+0xa4>
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d002      	beq.n	80060b6 <RCCEx_PLLSAI1_Config+0x62>
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d009      	beq.n	80060c8 <RCCEx_PLLSAI1_Config+0x74>
 80060b4:	e020      	b.n	80060f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060b6:	4b60      	ldr	r3, [pc, #384]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d11d      	bne.n	80060fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060c6:	e01a      	b.n	80060fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060c8:	4b5b      	ldr	r3, [pc, #364]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d116      	bne.n	8006102 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060d8:	e013      	b.n	8006102 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060da:	4b57      	ldr	r3, [pc, #348]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10f      	bne.n	8006106 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060e6:	4b54      	ldr	r3, [pc, #336]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d109      	bne.n	8006106 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060f6:	e006      	b.n	8006106 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	73fb      	strb	r3, [r7, #15]
      break;
 80060fc:	e004      	b.n	8006108 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060fe:	bf00      	nop
 8006100:	e002      	b.n	8006108 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006102:	bf00      	nop
 8006104:	e000      	b.n	8006108 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006106:	bf00      	nop
    }

    if(status == HAL_OK)
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10d      	bne.n	800612a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800610e:	4b4a      	ldr	r3, [pc, #296]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6819      	ldr	r1, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	3b01      	subs	r3, #1
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	430b      	orrs	r3, r1
 8006124:	4944      	ldr	r1, [pc, #272]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006126:	4313      	orrs	r3, r2
 8006128:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800612a:	7bfb      	ldrb	r3, [r7, #15]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d17d      	bne.n	800622c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006130:	4b41      	ldr	r3, [pc, #260]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a40      	ldr	r2, [pc, #256]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006136:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800613a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800613c:	f7fe fb10 	bl	8004760 <HAL_GetTick>
 8006140:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006142:	e009      	b.n	8006158 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006144:	f7fe fb0c 	bl	8004760 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b02      	cmp	r3, #2
 8006150:	d902      	bls.n	8006158 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	73fb      	strb	r3, [r7, #15]
        break;
 8006156:	e005      	b.n	8006164 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006158:	4b37      	ldr	r3, [pc, #220]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1ef      	bne.n	8006144 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d160      	bne.n	800622c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d111      	bne.n	8006194 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006170:	4b31      	ldr	r3, [pc, #196]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6892      	ldr	r2, [r2, #8]
 8006180:	0211      	lsls	r1, r2, #8
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	68d2      	ldr	r2, [r2, #12]
 8006186:	0912      	lsrs	r2, r2, #4
 8006188:	0452      	lsls	r2, r2, #17
 800618a:	430a      	orrs	r2, r1
 800618c:	492a      	ldr	r1, [pc, #168]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 800618e:	4313      	orrs	r3, r2
 8006190:	610b      	str	r3, [r1, #16]
 8006192:	e027      	b.n	80061e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d112      	bne.n	80061c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800619a:	4b27      	ldr	r3, [pc, #156]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80061a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6892      	ldr	r2, [r2, #8]
 80061aa:	0211      	lsls	r1, r2, #8
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6912      	ldr	r2, [r2, #16]
 80061b0:	0852      	lsrs	r2, r2, #1
 80061b2:	3a01      	subs	r2, #1
 80061b4:	0552      	lsls	r2, r2, #21
 80061b6:	430a      	orrs	r2, r1
 80061b8:	491f      	ldr	r1, [pc, #124]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	610b      	str	r3, [r1, #16]
 80061be:	e011      	b.n	80061e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061c0:	4b1d      	ldr	r3, [pc, #116]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80061c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6892      	ldr	r2, [r2, #8]
 80061d0:	0211      	lsls	r1, r2, #8
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6952      	ldr	r2, [r2, #20]
 80061d6:	0852      	lsrs	r2, r2, #1
 80061d8:	3a01      	subs	r2, #1
 80061da:	0652      	lsls	r2, r2, #25
 80061dc:	430a      	orrs	r2, r1
 80061de:	4916      	ldr	r1, [pc, #88]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80061e4:	4b14      	ldr	r3, [pc, #80]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a13      	ldr	r2, [pc, #76]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f0:	f7fe fab6 	bl	8004760 <HAL_GetTick>
 80061f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061f6:	e009      	b.n	800620c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061f8:	f7fe fab2 	bl	8004760 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b02      	cmp	r3, #2
 8006204:	d902      	bls.n	800620c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	73fb      	strb	r3, [r7, #15]
          break;
 800620a:	e005      	b.n	8006218 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800620c:	4b0a      	ldr	r3, [pc, #40]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0ef      	beq.n	80061f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800621e:	4b06      	ldr	r3, [pc, #24]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006220:	691a      	ldr	r2, [r3, #16]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	4904      	ldr	r1, [pc, #16]	; (8006238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006228:	4313      	orrs	r3, r2
 800622a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800622c:	7bfb      	ldrb	r3, [r7, #15]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	40021000 	.word	0x40021000

0800623c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800624a:	4b6a      	ldr	r3, [pc, #424]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d018      	beq.n	8006288 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006256:	4b67      	ldr	r3, [pc, #412]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f003 0203 	and.w	r2, r3, #3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	429a      	cmp	r2, r3
 8006264:	d10d      	bne.n	8006282 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
       ||
 800626a:	2b00      	cmp	r3, #0
 800626c:	d009      	beq.n	8006282 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800626e:	4b61      	ldr	r3, [pc, #388]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	091b      	lsrs	r3, r3, #4
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
       ||
 800627e:	429a      	cmp	r2, r3
 8006280:	d047      	beq.n	8006312 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	73fb      	strb	r3, [r7, #15]
 8006286:	e044      	b.n	8006312 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b03      	cmp	r3, #3
 800628e:	d018      	beq.n	80062c2 <RCCEx_PLLSAI2_Config+0x86>
 8006290:	2b03      	cmp	r3, #3
 8006292:	d825      	bhi.n	80062e0 <RCCEx_PLLSAI2_Config+0xa4>
 8006294:	2b01      	cmp	r3, #1
 8006296:	d002      	beq.n	800629e <RCCEx_PLLSAI2_Config+0x62>
 8006298:	2b02      	cmp	r3, #2
 800629a:	d009      	beq.n	80062b0 <RCCEx_PLLSAI2_Config+0x74>
 800629c:	e020      	b.n	80062e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800629e:	4b55      	ldr	r3, [pc, #340]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d11d      	bne.n	80062e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062ae:	e01a      	b.n	80062e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062b0:	4b50      	ldr	r3, [pc, #320]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d116      	bne.n	80062ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062c0:	e013      	b.n	80062ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062c2:	4b4c      	ldr	r3, [pc, #304]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10f      	bne.n	80062ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062ce:	4b49      	ldr	r3, [pc, #292]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d109      	bne.n	80062ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062de:	e006      	b.n	80062ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	73fb      	strb	r3, [r7, #15]
      break;
 80062e4:	e004      	b.n	80062f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062e6:	bf00      	nop
 80062e8:	e002      	b.n	80062f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062ea:	bf00      	nop
 80062ec:	e000      	b.n	80062f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10d      	bne.n	8006312 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062f6:	4b3f      	ldr	r3, [pc, #252]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6819      	ldr	r1, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	3b01      	subs	r3, #1
 8006308:	011b      	lsls	r3, r3, #4
 800630a:	430b      	orrs	r3, r1
 800630c:	4939      	ldr	r1, [pc, #228]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800630e:	4313      	orrs	r3, r2
 8006310:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006312:	7bfb      	ldrb	r3, [r7, #15]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d167      	bne.n	80063e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006318:	4b36      	ldr	r3, [pc, #216]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a35      	ldr	r2, [pc, #212]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800631e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006322:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006324:	f7fe fa1c 	bl	8004760 <HAL_GetTick>
 8006328:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800632a:	e009      	b.n	8006340 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800632c:	f7fe fa18 	bl	8004760 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d902      	bls.n	8006340 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	73fb      	strb	r3, [r7, #15]
        break;
 800633e:	e005      	b.n	800634c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006340:	4b2c      	ldr	r3, [pc, #176]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1ef      	bne.n	800632c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d14a      	bne.n	80063e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d111      	bne.n	800637c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006358:	4b26      	ldr	r3, [pc, #152]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6892      	ldr	r2, [r2, #8]
 8006368:	0211      	lsls	r1, r2, #8
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	68d2      	ldr	r2, [r2, #12]
 800636e:	0912      	lsrs	r2, r2, #4
 8006370:	0452      	lsls	r2, r2, #17
 8006372:	430a      	orrs	r2, r1
 8006374:	491f      	ldr	r1, [pc, #124]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006376:	4313      	orrs	r3, r2
 8006378:	614b      	str	r3, [r1, #20]
 800637a:	e011      	b.n	80063a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800637c:	4b1d      	ldr	r3, [pc, #116]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006384:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6892      	ldr	r2, [r2, #8]
 800638c:	0211      	lsls	r1, r2, #8
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	6912      	ldr	r2, [r2, #16]
 8006392:	0852      	lsrs	r2, r2, #1
 8006394:	3a01      	subs	r2, #1
 8006396:	0652      	lsls	r2, r2, #25
 8006398:	430a      	orrs	r2, r1
 800639a:	4916      	ldr	r1, [pc, #88]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800639c:	4313      	orrs	r3, r2
 800639e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80063a0:	4b14      	ldr	r3, [pc, #80]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a13      	ldr	r2, [pc, #76]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ac:	f7fe f9d8 	bl	8004760 <HAL_GetTick>
 80063b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063b2:	e009      	b.n	80063c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80063b4:	f7fe f9d4 	bl	8004760 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d902      	bls.n	80063c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	73fb      	strb	r3, [r7, #15]
          break;
 80063c6:	e005      	b.n	80063d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063c8:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0ef      	beq.n	80063b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80063da:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063dc:	695a      	ldr	r2, [r3, #20]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	4904      	ldr	r1, [pc, #16]	; (80063f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	40021000 	.word	0x40021000

080063f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e095      	b.n	8006536 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	2b00      	cmp	r3, #0
 8006410:	d108      	bne.n	8006424 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800641a:	d009      	beq.n	8006430 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	61da      	str	r2, [r3, #28]
 8006422:	e005      	b.n	8006430 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d106      	bne.n	8006450 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7fb fb38 	bl	8001ac0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006466:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006470:	d902      	bls.n	8006478 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	e002      	b.n	800647e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800647c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006486:	d007      	beq.n	8006498 <HAL_SPI_Init+0xa0>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006490:	d002      	beq.n	8006498 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80064a8:	431a      	orrs	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	431a      	orrs	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064c6:	431a      	orrs	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064d0:	431a      	orrs	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064da:	ea42 0103 	orr.w	r1, r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	0c1b      	lsrs	r3, r3, #16
 80064f4:	f003 0204 	and.w	r2, r3, #4
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	f003 0310 	and.w	r3, r3, #16
 8006500:	431a      	orrs	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006506:	f003 0308 	and.w	r3, r3, #8
 800650a:	431a      	orrs	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006514:	ea42 0103 	orr.w	r1, r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b088      	sub	sp, #32
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	603b      	str	r3, [r7, #0]
 800654a:	4613      	mov	r3, r2
 800654c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_SPI_Transmit+0x22>
 800655c:	2302      	movs	r3, #2
 800655e:	e15f      	b.n	8006820 <HAL_SPI_Transmit+0x2e2>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006568:	f7fe f8fa 	bl	8004760 <HAL_GetTick>
 800656c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800656e:	88fb      	ldrh	r3, [r7, #6]
 8006570:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b01      	cmp	r3, #1
 800657c:	d002      	beq.n	8006584 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800657e:	2302      	movs	r3, #2
 8006580:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006582:	e148      	b.n	8006816 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <HAL_SPI_Transmit+0x52>
 800658a:	88fb      	ldrh	r3, [r7, #6]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d102      	bne.n	8006596 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006594:	e13f      	b.n	8006816 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2203      	movs	r2, #3
 800659a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	88fa      	ldrh	r2, [r7, #6]
 80065ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	88fa      	ldrh	r2, [r7, #6]
 80065b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065e0:	d10f      	bne.n	8006602 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006600:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660c:	2b40      	cmp	r3, #64	; 0x40
 800660e:	d007      	beq.n	8006620 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800661e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006628:	d94f      	bls.n	80066ca <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <HAL_SPI_Transmit+0xfa>
 8006632:	8afb      	ldrh	r3, [r7, #22]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d142      	bne.n	80066be <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	881a      	ldrh	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	1c9a      	adds	r2, r3, #2
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006652:	b29b      	uxth	r3, r3
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800665c:	e02f      	b.n	80066be <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b02      	cmp	r3, #2
 800666a:	d112      	bne.n	8006692 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	881a      	ldrh	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667c:	1c9a      	adds	r2, r3, #2
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006686:	b29b      	uxth	r3, r3
 8006688:	3b01      	subs	r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006690:	e015      	b.n	80066be <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006692:	f7fe f865 	bl	8004760 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d803      	bhi.n	80066aa <HAL_SPI_Transmit+0x16c>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a8:	d102      	bne.n	80066b0 <HAL_SPI_Transmit+0x172>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d106      	bne.n	80066be <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80066bc:	e0ab      	b.n	8006816 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1ca      	bne.n	800665e <HAL_SPI_Transmit+0x120>
 80066c8:	e080      	b.n	80067cc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <HAL_SPI_Transmit+0x19a>
 80066d2:	8afb      	ldrh	r3, [r7, #22]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d174      	bne.n	80067c2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d912      	bls.n	8006708 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e6:	881a      	ldrh	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	1c9a      	adds	r2, r3, #2
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	3b02      	subs	r3, #2
 8006700:	b29a      	uxth	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006706:	e05c      	b.n	80067c2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	330c      	adds	r3, #12
 8006712:	7812      	ldrb	r2, [r2, #0]
 8006714:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006724:	b29b      	uxth	r3, r3
 8006726:	3b01      	subs	r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800672e:	e048      	b.n	80067c2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b02      	cmp	r3, #2
 800673c:	d12b      	bne.n	8006796 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006742:	b29b      	uxth	r3, r3
 8006744:	2b01      	cmp	r3, #1
 8006746:	d912      	bls.n	800676e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674c:	881a      	ldrh	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006758:	1c9a      	adds	r2, r3, #2
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006762:	b29b      	uxth	r3, r3
 8006764:	3b02      	subs	r3, #2
 8006766:	b29a      	uxth	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800676c:	e029      	b.n	80067c2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	330c      	adds	r3, #12
 8006778:	7812      	ldrb	r2, [r2, #0]
 800677a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006794:	e015      	b.n	80067c2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006796:	f7fd ffe3 	bl	8004760 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d803      	bhi.n	80067ae <HAL_SPI_Transmit+0x270>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ac:	d102      	bne.n	80067b4 <HAL_SPI_Transmit+0x276>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d106      	bne.n	80067c2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80067c0:	e029      	b.n	8006816 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1b1      	bne.n	8006730 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 fcf9 	bl	80071c8 <SPI_EndRxTxTransaction>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2220      	movs	r2, #32
 80067e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10a      	bne.n	8006800 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067ea:	2300      	movs	r3, #0
 80067ec:	613b      	str	r3, [r7, #16]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	613b      	str	r3, [r7, #16]
 80067fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	77fb      	strb	r3, [r7, #31]
 800680c:	e003      	b.n	8006816 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800681e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3720      	adds	r7, #32
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af02      	add	r7, sp, #8
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	4613      	mov	r3, r2
 8006836:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b01      	cmp	r3, #1
 8006846:	d002      	beq.n	800684e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006848:	2302      	movs	r3, #2
 800684a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800684c:	e11a      	b.n	8006a84 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006856:	d112      	bne.n	800687e <HAL_SPI_Receive+0x56>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10e      	bne.n	800687e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2204      	movs	r2, #4
 8006864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006868:	88fa      	ldrh	r2, [r7, #6]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	4613      	mov	r3, r2
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	68b9      	ldr	r1, [r7, #8]
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f90e 	bl	8006a96 <HAL_SPI_TransmitReceive>
 800687a:	4603      	mov	r3, r0
 800687c:	e107      	b.n	8006a8e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_SPI_Receive+0x64>
 8006888:	2302      	movs	r3, #2
 800688a:	e100      	b.n	8006a8e <HAL_SPI_Receive+0x266>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006894:	f7fd ff64 	bl	8004760 <HAL_GetTick>
 8006898:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d002      	beq.n	80068a6 <HAL_SPI_Receive+0x7e>
 80068a0:	88fb      	ldrh	r3, [r7, #6]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d102      	bne.n	80068ac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068aa:	e0eb      	b.n	8006a84 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2204      	movs	r2, #4
 80068b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	88fa      	ldrh	r2, [r7, #6]
 80068c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	88fa      	ldrh	r2, [r7, #6]
 80068cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068f6:	d908      	bls.n	800690a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006906:	605a      	str	r2, [r3, #4]
 8006908:	e007      	b.n	800691a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006918:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006922:	d10f      	bne.n	8006944 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006932:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006942:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694e:	2b40      	cmp	r3, #64	; 0x40
 8006950:	d007      	beq.n	8006962 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006960:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800696a:	d86f      	bhi.n	8006a4c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800696c:	e034      	b.n	80069d8 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b01      	cmp	r3, #1
 800697a:	d117      	bne.n	80069ac <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f103 020c 	add.w	r2, r3, #12
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006988:	7812      	ldrb	r2, [r2, #0]
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80069aa:	e015      	b.n	80069d8 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069ac:	f7fd fed8 	bl	8004760 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d803      	bhi.n	80069c4 <HAL_SPI_Receive+0x19c>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c2:	d102      	bne.n	80069ca <HAL_SPI_Receive+0x1a2>
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d106      	bne.n	80069d8 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80069d6:	e055      	b.n	8006a84 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1c4      	bne.n	800696e <HAL_SPI_Receive+0x146>
 80069e4:	e038      	b.n	8006a58 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d115      	bne.n	8006a20 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	b292      	uxth	r2, r2
 8006a00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	1c9a      	adds	r2, r3, #2
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006a1e:	e015      	b.n	8006a4c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a20:	f7fd fe9e 	bl	8004760 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d803      	bhi.n	8006a38 <HAL_SPI_Receive+0x210>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a36:	d102      	bne.n	8006a3e <HAL_SPI_Receive+0x216>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d106      	bne.n	8006a4c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006a4a:	e01b      	b.n	8006a84 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1c6      	bne.n	80069e6 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	6839      	ldr	r1, [r7, #0]
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 fb5b 	bl	8007118 <SPI_EndRxTransaction>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	75fb      	strb	r3, [r7, #23]
 8006a7a:	e003      	b.n	8006a84 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b08a      	sub	sp, #40	; 0x28
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	60b9      	str	r1, [r7, #8]
 8006aa0:	607a      	str	r2, [r7, #4]
 8006aa2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_SPI_TransmitReceive+0x26>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e20a      	b.n	8006ed2 <HAL_SPI_TransmitReceive+0x43c>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ac4:	f7fd fe4c 	bl	8004760 <HAL_GetTick>
 8006ac8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ad0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006ad8:	887b      	ldrh	r3, [r7, #2]
 8006ada:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006adc:	887b      	ldrh	r3, [r7, #2]
 8006ade:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ae0:	7efb      	ldrb	r3, [r7, #27]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d00e      	beq.n	8006b04 <HAL_SPI_TransmitReceive+0x6e>
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aec:	d106      	bne.n	8006afc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d102      	bne.n	8006afc <HAL_SPI_TransmitReceive+0x66>
 8006af6:	7efb      	ldrb	r3, [r7, #27]
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d003      	beq.n	8006b04 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006afc:	2302      	movs	r3, #2
 8006afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006b02:	e1e0      	b.n	8006ec6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d005      	beq.n	8006b16 <HAL_SPI_TransmitReceive+0x80>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <HAL_SPI_TransmitReceive+0x80>
 8006b10:	887b      	ldrh	r3, [r7, #2]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d103      	bne.n	8006b1e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006b1c:	e1d3      	b.n	8006ec6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d003      	beq.n	8006b32 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2205      	movs	r2, #5
 8006b2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	887a      	ldrh	r2, [r7, #2]
 8006b42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	887a      	ldrh	r2, [r7, #2]
 8006b4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	887a      	ldrh	r2, [r7, #2]
 8006b58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	887a      	ldrh	r2, [r7, #2]
 8006b5e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b74:	d802      	bhi.n	8006b7c <HAL_SPI_TransmitReceive+0xe6>
 8006b76:	8a3b      	ldrh	r3, [r7, #16]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d908      	bls.n	8006b8e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b8a:	605a      	str	r2, [r3, #4]
 8006b8c:	e007      	b.n	8006b9e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b9c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba8:	2b40      	cmp	r3, #64	; 0x40
 8006baa:	d007      	beq.n	8006bbc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bc4:	f240 8081 	bls.w	8006cca <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <HAL_SPI_TransmitReceive+0x140>
 8006bd0:	8a7b      	ldrh	r3, [r7, #18]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d16d      	bne.n	8006cb2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bda:	881a      	ldrh	r2, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	1c9a      	adds	r2, r3, #2
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bfa:	e05a      	b.n	8006cb2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d11b      	bne.n	8006c42 <HAL_SPI_TransmitReceive+0x1ac>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d016      	beq.n	8006c42 <HAL_SPI_TransmitReceive+0x1ac>
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d113      	bne.n	8006c42 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	881a      	ldrh	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	1c9a      	adds	r2, r3, #2
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	3b01      	subs	r3, #1
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d11c      	bne.n	8006c8a <HAL_SPI_TransmitReceive+0x1f4>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d016      	beq.n	8006c8a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	b292      	uxth	r2, r2
 8006c68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	1c9a      	adds	r2, r3, #2
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c86:	2301      	movs	r3, #1
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c8a:	f7fd fd69 	bl	8004760 <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d80b      	bhi.n	8006cb2 <HAL_SPI_TransmitReceive+0x21c>
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca0:	d007      	beq.n	8006cb2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006cb0:	e109      	b.n	8006ec6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d19f      	bne.n	8006bfc <HAL_SPI_TransmitReceive+0x166>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d199      	bne.n	8006bfc <HAL_SPI_TransmitReceive+0x166>
 8006cc8:	e0e3      	b.n	8006e92 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <HAL_SPI_TransmitReceive+0x244>
 8006cd2:	8a7b      	ldrh	r3, [r7, #18]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	f040 80cf 	bne.w	8006e78 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d912      	bls.n	8006d0a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce8:	881a      	ldrh	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	1c9a      	adds	r2, r3, #2
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	3b02      	subs	r3, #2
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d08:	e0b6      	b.n	8006e78 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	330c      	adds	r3, #12
 8006d14:	7812      	ldrb	r2, [r2, #0]
 8006d16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d30:	e0a2      	b.n	8006e78 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d134      	bne.n	8006daa <HAL_SPI_TransmitReceive+0x314>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d02f      	beq.n	8006daa <HAL_SPI_TransmitReceive+0x314>
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d12c      	bne.n	8006daa <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d912      	bls.n	8006d80 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5e:	881a      	ldrh	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6a:	1c9a      	adds	r2, r3, #2
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3b02      	subs	r3, #2
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d7e:	e012      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	330c      	adds	r3, #12
 8006d8a:	7812      	ldrb	r2, [r2, #0]
 8006d8c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d148      	bne.n	8006e4a <HAL_SPI_TransmitReceive+0x3b4>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d042      	beq.n	8006e4a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d923      	bls.n	8006e18 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	b292      	uxth	r2, r2
 8006ddc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	1c9a      	adds	r2, r3, #2
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	3b02      	subs	r3, #2
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d81f      	bhi.n	8006e46 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e14:	605a      	str	r2, [r3, #4]
 8006e16:	e016      	b.n	8006e46 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f103 020c 	add.w	r2, r3, #12
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	7812      	ldrb	r2, [r2, #0]
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e46:	2301      	movs	r3, #1
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e4a:	f7fd fc89 	bl	8004760 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d803      	bhi.n	8006e62 <HAL_SPI_TransmitReceive+0x3cc>
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e60:	d102      	bne.n	8006e68 <HAL_SPI_TransmitReceive+0x3d2>
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d107      	bne.n	8006e78 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006e76:	e026      	b.n	8006ec6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f47f af57 	bne.w	8006d32 <HAL_SPI_TransmitReceive+0x29c>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f47f af50 	bne.w	8006d32 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e92:	69fa      	ldr	r2, [r7, #28]
 8006e94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 f996 	bl	80071c8 <SPI_EndRxTxTransaction>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ebc:	e003      	b.n	8006ec6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ece:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3728      	adds	r7, #40	; 0x28
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	603b      	str	r3, [r7, #0]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006eec:	f7fd fc38 	bl	8004760 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef4:	1a9b      	subs	r3, r3, r2
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	4413      	add	r3, r2
 8006efa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006efc:	f7fd fc30 	bl	8004760 <HAL_GetTick>
 8006f00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f02:	4b39      	ldr	r3, [pc, #228]	; (8006fe8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	015b      	lsls	r3, r3, #5
 8006f08:	0d1b      	lsrs	r3, r3, #20
 8006f0a:	69fa      	ldr	r2, [r7, #28]
 8006f0c:	fb02 f303 	mul.w	r3, r2, r3
 8006f10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f12:	e054      	b.n	8006fbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1a:	d050      	beq.n	8006fbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f1c:	f7fd fc20 	bl	8004760 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d902      	bls.n	8006f32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d13d      	bne.n	8006fae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f4a:	d111      	bne.n	8006f70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f54:	d004      	beq.n	8006f60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f5e:	d107      	bne.n	8006f70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f78:	d10f      	bne.n	8006f9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e017      	b.n	8006fde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	bf0c      	ite	eq
 8006fce:	2301      	moveq	r3, #1
 8006fd0:	2300      	movne	r3, #0
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	79fb      	ldrb	r3, [r7, #7]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d19b      	bne.n	8006f14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3720      	adds	r7, #32
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20000348 	.word	0x20000348

08006fec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08a      	sub	sp, #40	; 0x28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
 8006ff8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006ffe:	f7fd fbaf 	bl	8004760 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007006:	1a9b      	subs	r3, r3, r2
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	4413      	add	r3, r2
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800700e:	f7fd fba7 	bl	8004760 <HAL_GetTick>
 8007012:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	330c      	adds	r3, #12
 800701a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800701c:	4b3d      	ldr	r3, [pc, #244]	; (8007114 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	00da      	lsls	r2, r3, #3
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	0d1b      	lsrs	r3, r3, #20
 800702c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800702e:	fb02 f303 	mul.w	r3, r2, r3
 8007032:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007034:	e060      	b.n	80070f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800703c:	d107      	bne.n	800704e <SPI_WaitFifoStateUntilTimeout+0x62>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d104      	bne.n	800704e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	b2db      	uxtb	r3, r3
 800704a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800704c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007054:	d050      	beq.n	80070f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007056:	f7fd fb83 	bl	8004760 <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007062:	429a      	cmp	r2, r3
 8007064:	d902      	bls.n	800706c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	2b00      	cmp	r3, #0
 800706a:	d13d      	bne.n	80070e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800707a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007084:	d111      	bne.n	80070aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800708e:	d004      	beq.n	800709a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007098:	d107      	bne.n	80070aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070b2:	d10f      	bne.n	80070d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e010      	b.n	800710a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689a      	ldr	r2, [r3, #8]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	4013      	ands	r3, r2
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	429a      	cmp	r2, r3
 8007106:	d196      	bne.n	8007036 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3728      	adds	r7, #40	; 0x28
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	20000348 	.word	0x20000348

08007118 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af02      	add	r7, sp, #8
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800712c:	d111      	bne.n	8007152 <SPI_EndRxTransaction+0x3a>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007136:	d004      	beq.n	8007142 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007140:	d107      	bne.n	8007152 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007150:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2200      	movs	r2, #0
 800715a:	2180      	movs	r1, #128	; 0x80
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f7ff febd 	bl	8006edc <SPI_WaitFlagStateUntilTimeout>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d007      	beq.n	8007178 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800716c:	f043 0220 	orr.w	r2, r3, #32
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e023      	b.n	80071c0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007180:	d11d      	bne.n	80071be <SPI_EndRxTransaction+0xa6>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800718a:	d004      	beq.n	8007196 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007194:	d113      	bne.n	80071be <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2200      	movs	r2, #0
 800719e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f7ff ff22 	bl	8006fec <SPI_WaitFifoStateUntilTimeout>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d007      	beq.n	80071be <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b2:	f043 0220 	orr.w	r2, r3, #32
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e000      	b.n	80071c0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af02      	add	r7, sp, #8
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2200      	movs	r2, #0
 80071dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f7ff ff03 	bl	8006fec <SPI_WaitFifoStateUntilTimeout>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d007      	beq.n	80071fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f0:	f043 0220 	orr.w	r2, r3, #32
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e027      	b.n	800724c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2200      	movs	r2, #0
 8007204:	2180      	movs	r1, #128	; 0x80
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f7ff fe68 	bl	8006edc <SPI_WaitFlagStateUntilTimeout>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d007      	beq.n	8007222 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007216:	f043 0220 	orr.w	r2, r3, #32
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e014      	b.n	800724c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2200      	movs	r2, #0
 800722a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f7ff fedc 	bl	8006fec <SPI_WaitFifoStateUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d007      	beq.n	800724a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800723e:	f043 0220 	orr.w	r2, r3, #32
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e000      	b.n	800724c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e049      	b.n	80072fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d106      	bne.n	8007280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f841 	bl	8007302 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3304      	adds	r3, #4
 8007290:	4619      	mov	r1, r3
 8007292:	4610      	mov	r0, r2
 8007294:	f000 f9da 	bl	800764c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
	...

08007318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b01      	cmp	r3, #1
 800732a:	d001      	beq.n	8007330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e04f      	b.n	80073d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f042 0201 	orr.w	r2, r2, #1
 8007346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a23      	ldr	r2, [pc, #140]	; (80073dc <HAL_TIM_Base_Start_IT+0xc4>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d01d      	beq.n	800738e <HAL_TIM_Base_Start_IT+0x76>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800735a:	d018      	beq.n	800738e <HAL_TIM_Base_Start_IT+0x76>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a1f      	ldr	r2, [pc, #124]	; (80073e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d013      	beq.n	800738e <HAL_TIM_Base_Start_IT+0x76>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a1e      	ldr	r2, [pc, #120]	; (80073e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d00e      	beq.n	800738e <HAL_TIM_Base_Start_IT+0x76>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a1c      	ldr	r2, [pc, #112]	; (80073e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d009      	beq.n	800738e <HAL_TIM_Base_Start_IT+0x76>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a1b      	ldr	r2, [pc, #108]	; (80073ec <HAL_TIM_Base_Start_IT+0xd4>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d004      	beq.n	800738e <HAL_TIM_Base_Start_IT+0x76>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a19      	ldr	r2, [pc, #100]	; (80073f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d115      	bne.n	80073ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	4b17      	ldr	r3, [pc, #92]	; (80073f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007396:	4013      	ands	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b06      	cmp	r3, #6
 800739e:	d015      	beq.n	80073cc <HAL_TIM_Base_Start_IT+0xb4>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073a6:	d011      	beq.n	80073cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f042 0201 	orr.w	r2, r2, #1
 80073b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b8:	e008      	b.n	80073cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f042 0201 	orr.w	r2, r2, #1
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	e000      	b.n	80073ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	40012c00 	.word	0x40012c00
 80073e0:	40000400 	.word	0x40000400
 80073e4:	40000800 	.word	0x40000800
 80073e8:	40000c00 	.word	0x40000c00
 80073ec:	40013400 	.word	0x40013400
 80073f0:	40014000 	.word	0x40014000
 80073f4:	00010007 	.word	0x00010007

080073f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d020      	beq.n	800745c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	2b00      	cmp	r3, #0
 8007422:	d01b      	beq.n	800745c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f06f 0202 	mvn.w	r2, #2
 800742c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	f003 0303 	and.w	r3, r3, #3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f8e4 	bl	8007610 <HAL_TIM_IC_CaptureCallback>
 8007448:	e005      	b.n	8007456 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f8d6 	bl	80075fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f8e7 	bl	8007624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f003 0304 	and.w	r3, r3, #4
 8007462:	2b00      	cmp	r3, #0
 8007464:	d020      	beq.n	80074a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f003 0304 	and.w	r3, r3, #4
 800746c:	2b00      	cmp	r3, #0
 800746e:	d01b      	beq.n	80074a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f06f 0204 	mvn.w	r2, #4
 8007478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2202      	movs	r2, #2
 800747e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f8be 	bl	8007610 <HAL_TIM_IC_CaptureCallback>
 8007494:	e005      	b.n	80074a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f8b0 	bl	80075fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f8c1 	bl	8007624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f003 0308 	and.w	r3, r3, #8
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d020      	beq.n	80074f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f003 0308 	and.w	r3, r3, #8
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d01b      	beq.n	80074f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f06f 0208 	mvn.w	r2, #8
 80074c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2204      	movs	r2, #4
 80074ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	f003 0303 	and.w	r3, r3, #3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f898 	bl	8007610 <HAL_TIM_IC_CaptureCallback>
 80074e0:	e005      	b.n	80074ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f88a 	bl	80075fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f89b 	bl	8007624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f003 0310 	and.w	r3, r3, #16
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d020      	beq.n	8007540 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f003 0310 	and.w	r3, r3, #16
 8007504:	2b00      	cmp	r3, #0
 8007506:	d01b      	beq.n	8007540 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f06f 0210 	mvn.w	r2, #16
 8007510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2208      	movs	r2, #8
 8007516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f872 	bl	8007610 <HAL_TIM_IC_CaptureCallback>
 800752c:	e005      	b.n	800753a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f864 	bl	80075fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f875 	bl	8007624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00c      	beq.n	8007564 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b00      	cmp	r3, #0
 8007552:	d007      	beq.n	8007564 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f06f 0201 	mvn.w	r2, #1
 800755c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7fa fa58 	bl	8001a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00c      	beq.n	8007588 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007574:	2b00      	cmp	r3, #0
 8007576:	d007      	beq.n	8007588 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f906 	bl	8007794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00c      	beq.n	80075ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007598:	2b00      	cmp	r3, #0
 800759a:	d007      	beq.n	80075ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80075a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f8fe 	bl	80077a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00c      	beq.n	80075d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d007      	beq.n	80075d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f834 	bl	8007638 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f003 0320 	and.w	r3, r3, #32
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00c      	beq.n	80075f4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f003 0320 	and.w	r3, r3, #32
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d007      	beq.n	80075f4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f06f 0220 	mvn.w	r2, #32
 80075ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f8c6 	bl	8007780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075f4:	bf00      	nop
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a40      	ldr	r2, [pc, #256]	; (8007760 <TIM_Base_SetConfig+0x114>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d013      	beq.n	800768c <TIM_Base_SetConfig+0x40>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800766a:	d00f      	beq.n	800768c <TIM_Base_SetConfig+0x40>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a3d      	ldr	r2, [pc, #244]	; (8007764 <TIM_Base_SetConfig+0x118>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d00b      	beq.n	800768c <TIM_Base_SetConfig+0x40>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a3c      	ldr	r2, [pc, #240]	; (8007768 <TIM_Base_SetConfig+0x11c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d007      	beq.n	800768c <TIM_Base_SetConfig+0x40>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a3b      	ldr	r2, [pc, #236]	; (800776c <TIM_Base_SetConfig+0x120>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d003      	beq.n	800768c <TIM_Base_SetConfig+0x40>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a3a      	ldr	r2, [pc, #232]	; (8007770 <TIM_Base_SetConfig+0x124>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d108      	bne.n	800769e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	4313      	orrs	r3, r2
 800769c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a2f      	ldr	r2, [pc, #188]	; (8007760 <TIM_Base_SetConfig+0x114>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d01f      	beq.n	80076e6 <TIM_Base_SetConfig+0x9a>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ac:	d01b      	beq.n	80076e6 <TIM_Base_SetConfig+0x9a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a2c      	ldr	r2, [pc, #176]	; (8007764 <TIM_Base_SetConfig+0x118>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d017      	beq.n	80076e6 <TIM_Base_SetConfig+0x9a>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a2b      	ldr	r2, [pc, #172]	; (8007768 <TIM_Base_SetConfig+0x11c>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d013      	beq.n	80076e6 <TIM_Base_SetConfig+0x9a>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a2a      	ldr	r2, [pc, #168]	; (800776c <TIM_Base_SetConfig+0x120>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d00f      	beq.n	80076e6 <TIM_Base_SetConfig+0x9a>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a29      	ldr	r2, [pc, #164]	; (8007770 <TIM_Base_SetConfig+0x124>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d00b      	beq.n	80076e6 <TIM_Base_SetConfig+0x9a>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a28      	ldr	r2, [pc, #160]	; (8007774 <TIM_Base_SetConfig+0x128>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d007      	beq.n	80076e6 <TIM_Base_SetConfig+0x9a>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a27      	ldr	r2, [pc, #156]	; (8007778 <TIM_Base_SetConfig+0x12c>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d003      	beq.n	80076e6 <TIM_Base_SetConfig+0x9a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a26      	ldr	r2, [pc, #152]	; (800777c <TIM_Base_SetConfig+0x130>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d108      	bne.n	80076f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	4313      	orrs	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a10      	ldr	r2, [pc, #64]	; (8007760 <TIM_Base_SetConfig+0x114>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d00f      	beq.n	8007744 <TIM_Base_SetConfig+0xf8>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a12      	ldr	r2, [pc, #72]	; (8007770 <TIM_Base_SetConfig+0x124>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d00b      	beq.n	8007744 <TIM_Base_SetConfig+0xf8>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a11      	ldr	r2, [pc, #68]	; (8007774 <TIM_Base_SetConfig+0x128>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d007      	beq.n	8007744 <TIM_Base_SetConfig+0xf8>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a10      	ldr	r2, [pc, #64]	; (8007778 <TIM_Base_SetConfig+0x12c>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d003      	beq.n	8007744 <TIM_Base_SetConfig+0xf8>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a0f      	ldr	r2, [pc, #60]	; (800777c <TIM_Base_SetConfig+0x130>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d103      	bne.n	800774c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	691a      	ldr	r2, [r3, #16]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	615a      	str	r2, [r3, #20]
}
 8007752:	bf00      	nop
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	40012c00 	.word	0x40012c00
 8007764:	40000400 	.word	0x40000400
 8007768:	40000800 	.word	0x40000800
 800776c:	40000c00 	.word	0x40000c00
 8007770:	40013400 	.word	0x40013400
 8007774:	40014000 	.word	0x40014000
 8007778:	40014400 	.word	0x40014400
 800777c:	40014800 	.word	0x40014800

08007780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e040      	b.n	8007850 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d106      	bne.n	80077e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7fa fc02 	bl	8001fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2224      	movs	r2, #36	; 0x24
 80077e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f022 0201 	bic.w	r2, r2, #1
 80077f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fb6a 	bl	8007edc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f8af 	bl	800796c <UART_SetConfig>
 800780e:	4603      	mov	r3, r0
 8007810:	2b01      	cmp	r3, #1
 8007812:	d101      	bne.n	8007818 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e01b      	b.n	8007850 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007826:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007836:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0201 	orr.w	r2, r2, #1
 8007846:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fbe9 	bl	8008020 <UART_CheckIdleState>
 800784e:	4603      	mov	r3, r0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08a      	sub	sp, #40	; 0x28
 800785c:	af02      	add	r7, sp, #8
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	603b      	str	r3, [r7, #0]
 8007864:	4613      	mov	r3, r2
 8007866:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800786c:	2b20      	cmp	r3, #32
 800786e:	d178      	bne.n	8007962 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d002      	beq.n	800787c <HAL_UART_Transmit+0x24>
 8007876:	88fb      	ldrh	r3, [r7, #6]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e071      	b.n	8007964 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2221      	movs	r2, #33	; 0x21
 800788c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800788e:	f7fc ff67 	bl	8004760 <HAL_GetTick>
 8007892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	88fa      	ldrh	r2, [r7, #6]
 8007898:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	88fa      	ldrh	r2, [r7, #6]
 80078a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ac:	d108      	bne.n	80078c0 <HAL_UART_Transmit+0x68>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d104      	bne.n	80078c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	61bb      	str	r3, [r7, #24]
 80078be:	e003      	b.n	80078c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078c4:	2300      	movs	r3, #0
 80078c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078c8:	e030      	b.n	800792c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2200      	movs	r2, #0
 80078d2:	2180      	movs	r1, #128	; 0x80
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 fc4b 	bl	8008170 <UART_WaitOnFlagUntilTimeout>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d004      	beq.n	80078ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2220      	movs	r2, #32
 80078e4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e03c      	b.n	8007964 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10b      	bne.n	8007908 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	881a      	ldrh	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078fc:	b292      	uxth	r2, r2
 80078fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	3302      	adds	r3, #2
 8007904:	61bb      	str	r3, [r7, #24]
 8007906:	e008      	b.n	800791a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	781a      	ldrb	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	b292      	uxth	r2, r2
 8007912:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	3301      	adds	r3, #1
 8007918:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007920:	b29b      	uxth	r3, r3
 8007922:	3b01      	subs	r3, #1
 8007924:	b29a      	uxth	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007932:	b29b      	uxth	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1c8      	bne.n	80078ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	2200      	movs	r2, #0
 8007940:	2140      	movs	r1, #64	; 0x40
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 fc14 	bl	8008170 <UART_WaitOnFlagUntilTimeout>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d004      	beq.n	8007958 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2220      	movs	r2, #32
 8007952:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e005      	b.n	8007964 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2220      	movs	r2, #32
 800795c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	e000      	b.n	8007964 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007962:	2302      	movs	r3, #2
  }
}
 8007964:	4618      	mov	r0, r3
 8007966:	3720      	adds	r7, #32
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800796c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007970:	b08a      	sub	sp, #40	; 0x28
 8007972:	af00      	add	r7, sp, #0
 8007974:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	431a      	orrs	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	431a      	orrs	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	4313      	orrs	r3, r2
 8007992:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	4ba4      	ldr	r3, [pc, #656]	; (8007c2c <UART_SetConfig+0x2c0>)
 800799c:	4013      	ands	r3, r2
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	6812      	ldr	r2, [r2, #0]
 80079a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079a4:	430b      	orrs	r3, r1
 80079a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	68da      	ldr	r2, [r3, #12]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a99      	ldr	r2, [pc, #612]	; (8007c30 <UART_SetConfig+0x2c4>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d004      	beq.n	80079d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d4:	4313      	orrs	r3, r2
 80079d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079e8:	430a      	orrs	r2, r1
 80079ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a90      	ldr	r2, [pc, #576]	; (8007c34 <UART_SetConfig+0x2c8>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d126      	bne.n	8007a44 <UART_SetConfig+0xd8>
 80079f6:	4b90      	ldr	r3, [pc, #576]	; (8007c38 <UART_SetConfig+0x2cc>)
 80079f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079fc:	f003 0303 	and.w	r3, r3, #3
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	d81b      	bhi.n	8007a3c <UART_SetConfig+0xd0>
 8007a04:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <UART_SetConfig+0xa0>)
 8007a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0a:	bf00      	nop
 8007a0c:	08007a1d 	.word	0x08007a1d
 8007a10:	08007a2d 	.word	0x08007a2d
 8007a14:	08007a25 	.word	0x08007a25
 8007a18:	08007a35 	.word	0x08007a35
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a22:	e116      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007a24:	2302      	movs	r3, #2
 8007a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a2a:	e112      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007a2c:	2304      	movs	r3, #4
 8007a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a32:	e10e      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007a34:	2308      	movs	r3, #8
 8007a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a3a:	e10a      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007a3c:	2310      	movs	r3, #16
 8007a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a42:	e106      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a7c      	ldr	r2, [pc, #496]	; (8007c3c <UART_SetConfig+0x2d0>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d138      	bne.n	8007ac0 <UART_SetConfig+0x154>
 8007a4e:	4b7a      	ldr	r3, [pc, #488]	; (8007c38 <UART_SetConfig+0x2cc>)
 8007a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a54:	f003 030c 	and.w	r3, r3, #12
 8007a58:	2b0c      	cmp	r3, #12
 8007a5a:	d82d      	bhi.n	8007ab8 <UART_SetConfig+0x14c>
 8007a5c:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <UART_SetConfig+0xf8>)
 8007a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a62:	bf00      	nop
 8007a64:	08007a99 	.word	0x08007a99
 8007a68:	08007ab9 	.word	0x08007ab9
 8007a6c:	08007ab9 	.word	0x08007ab9
 8007a70:	08007ab9 	.word	0x08007ab9
 8007a74:	08007aa9 	.word	0x08007aa9
 8007a78:	08007ab9 	.word	0x08007ab9
 8007a7c:	08007ab9 	.word	0x08007ab9
 8007a80:	08007ab9 	.word	0x08007ab9
 8007a84:	08007aa1 	.word	0x08007aa1
 8007a88:	08007ab9 	.word	0x08007ab9
 8007a8c:	08007ab9 	.word	0x08007ab9
 8007a90:	08007ab9 	.word	0x08007ab9
 8007a94:	08007ab1 	.word	0x08007ab1
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a9e:	e0d8      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aa6:	e0d4      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007aa8:	2304      	movs	r3, #4
 8007aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aae:	e0d0      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007ab0:	2308      	movs	r3, #8
 8007ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ab6:	e0cc      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007ab8:	2310      	movs	r3, #16
 8007aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007abe:	e0c8      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a5e      	ldr	r2, [pc, #376]	; (8007c40 <UART_SetConfig+0x2d4>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d125      	bne.n	8007b16 <UART_SetConfig+0x1aa>
 8007aca:	4b5b      	ldr	r3, [pc, #364]	; (8007c38 <UART_SetConfig+0x2cc>)
 8007acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ad4:	2b30      	cmp	r3, #48	; 0x30
 8007ad6:	d016      	beq.n	8007b06 <UART_SetConfig+0x19a>
 8007ad8:	2b30      	cmp	r3, #48	; 0x30
 8007ada:	d818      	bhi.n	8007b0e <UART_SetConfig+0x1a2>
 8007adc:	2b20      	cmp	r3, #32
 8007ade:	d00a      	beq.n	8007af6 <UART_SetConfig+0x18a>
 8007ae0:	2b20      	cmp	r3, #32
 8007ae2:	d814      	bhi.n	8007b0e <UART_SetConfig+0x1a2>
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <UART_SetConfig+0x182>
 8007ae8:	2b10      	cmp	r3, #16
 8007aea:	d008      	beq.n	8007afe <UART_SetConfig+0x192>
 8007aec:	e00f      	b.n	8007b0e <UART_SetConfig+0x1a2>
 8007aee:	2300      	movs	r3, #0
 8007af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007af4:	e0ad      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007af6:	2302      	movs	r3, #2
 8007af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007afc:	e0a9      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007afe:	2304      	movs	r3, #4
 8007b00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b04:	e0a5      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007b06:	2308      	movs	r3, #8
 8007b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b0c:	e0a1      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007b0e:	2310      	movs	r3, #16
 8007b10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b14:	e09d      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a4a      	ldr	r2, [pc, #296]	; (8007c44 <UART_SetConfig+0x2d8>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d125      	bne.n	8007b6c <UART_SetConfig+0x200>
 8007b20:	4b45      	ldr	r3, [pc, #276]	; (8007c38 <UART_SetConfig+0x2cc>)
 8007b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b2a:	2bc0      	cmp	r3, #192	; 0xc0
 8007b2c:	d016      	beq.n	8007b5c <UART_SetConfig+0x1f0>
 8007b2e:	2bc0      	cmp	r3, #192	; 0xc0
 8007b30:	d818      	bhi.n	8007b64 <UART_SetConfig+0x1f8>
 8007b32:	2b80      	cmp	r3, #128	; 0x80
 8007b34:	d00a      	beq.n	8007b4c <UART_SetConfig+0x1e0>
 8007b36:	2b80      	cmp	r3, #128	; 0x80
 8007b38:	d814      	bhi.n	8007b64 <UART_SetConfig+0x1f8>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <UART_SetConfig+0x1d8>
 8007b3e:	2b40      	cmp	r3, #64	; 0x40
 8007b40:	d008      	beq.n	8007b54 <UART_SetConfig+0x1e8>
 8007b42:	e00f      	b.n	8007b64 <UART_SetConfig+0x1f8>
 8007b44:	2300      	movs	r3, #0
 8007b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b4a:	e082      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b52:	e07e      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007b54:	2304      	movs	r3, #4
 8007b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b5a:	e07a      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007b5c:	2308      	movs	r3, #8
 8007b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b62:	e076      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007b64:	2310      	movs	r3, #16
 8007b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b6a:	e072      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a35      	ldr	r2, [pc, #212]	; (8007c48 <UART_SetConfig+0x2dc>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d12a      	bne.n	8007bcc <UART_SetConfig+0x260>
 8007b76:	4b30      	ldr	r3, [pc, #192]	; (8007c38 <UART_SetConfig+0x2cc>)
 8007b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b84:	d01a      	beq.n	8007bbc <UART_SetConfig+0x250>
 8007b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b8a:	d81b      	bhi.n	8007bc4 <UART_SetConfig+0x258>
 8007b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b90:	d00c      	beq.n	8007bac <UART_SetConfig+0x240>
 8007b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b96:	d815      	bhi.n	8007bc4 <UART_SetConfig+0x258>
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <UART_SetConfig+0x238>
 8007b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ba0:	d008      	beq.n	8007bb4 <UART_SetConfig+0x248>
 8007ba2:	e00f      	b.n	8007bc4 <UART_SetConfig+0x258>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007baa:	e052      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007bac:	2302      	movs	r3, #2
 8007bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bb2:	e04e      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007bb4:	2304      	movs	r3, #4
 8007bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bba:	e04a      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007bbc:	2308      	movs	r3, #8
 8007bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bc2:	e046      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007bc4:	2310      	movs	r3, #16
 8007bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bca:	e042      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a17      	ldr	r2, [pc, #92]	; (8007c30 <UART_SetConfig+0x2c4>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d13a      	bne.n	8007c4c <UART_SetConfig+0x2e0>
 8007bd6:	4b18      	ldr	r3, [pc, #96]	; (8007c38 <UART_SetConfig+0x2cc>)
 8007bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007be0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007be4:	d01a      	beq.n	8007c1c <UART_SetConfig+0x2b0>
 8007be6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bea:	d81b      	bhi.n	8007c24 <UART_SetConfig+0x2b8>
 8007bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bf0:	d00c      	beq.n	8007c0c <UART_SetConfig+0x2a0>
 8007bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bf6:	d815      	bhi.n	8007c24 <UART_SetConfig+0x2b8>
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <UART_SetConfig+0x298>
 8007bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c00:	d008      	beq.n	8007c14 <UART_SetConfig+0x2a8>
 8007c02:	e00f      	b.n	8007c24 <UART_SetConfig+0x2b8>
 8007c04:	2300      	movs	r3, #0
 8007c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c0a:	e022      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c12:	e01e      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007c14:	2304      	movs	r3, #4
 8007c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c1a:	e01a      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007c1c:	2308      	movs	r3, #8
 8007c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c22:	e016      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007c24:	2310      	movs	r3, #16
 8007c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c2a:	e012      	b.n	8007c52 <UART_SetConfig+0x2e6>
 8007c2c:	efff69f3 	.word	0xefff69f3
 8007c30:	40008000 	.word	0x40008000
 8007c34:	40013800 	.word	0x40013800
 8007c38:	40021000 	.word	0x40021000
 8007c3c:	40004400 	.word	0x40004400
 8007c40:	40004800 	.word	0x40004800
 8007c44:	40004c00 	.word	0x40004c00
 8007c48:	40005000 	.word	0x40005000
 8007c4c:	2310      	movs	r3, #16
 8007c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a9f      	ldr	r2, [pc, #636]	; (8007ed4 <UART_SetConfig+0x568>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d17a      	bne.n	8007d52 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d824      	bhi.n	8007cae <UART_SetConfig+0x342>
 8007c64:	a201      	add	r2, pc, #4	; (adr r2, 8007c6c <UART_SetConfig+0x300>)
 8007c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6a:	bf00      	nop
 8007c6c:	08007c91 	.word	0x08007c91
 8007c70:	08007caf 	.word	0x08007caf
 8007c74:	08007c99 	.word	0x08007c99
 8007c78:	08007caf 	.word	0x08007caf
 8007c7c:	08007c9f 	.word	0x08007c9f
 8007c80:	08007caf 	.word	0x08007caf
 8007c84:	08007caf 	.word	0x08007caf
 8007c88:	08007caf 	.word	0x08007caf
 8007c8c:	08007ca7 	.word	0x08007ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c90:	f7fd fe38 	bl	8005904 <HAL_RCC_GetPCLK1Freq>
 8007c94:	61f8      	str	r0, [r7, #28]
        break;
 8007c96:	e010      	b.n	8007cba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c98:	4b8f      	ldr	r3, [pc, #572]	; (8007ed8 <UART_SetConfig+0x56c>)
 8007c9a:	61fb      	str	r3, [r7, #28]
        break;
 8007c9c:	e00d      	b.n	8007cba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c9e:	f7fd fd99 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 8007ca2:	61f8      	str	r0, [r7, #28]
        break;
 8007ca4:	e009      	b.n	8007cba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007caa:	61fb      	str	r3, [r7, #28]
        break;
 8007cac:	e005      	b.n	8007cba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007cb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 80fb 	beq.w	8007eb8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	005b      	lsls	r3, r3, #1
 8007cca:	4413      	add	r3, r2
 8007ccc:	69fa      	ldr	r2, [r7, #28]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d305      	bcc.n	8007cde <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007cd8:	69fa      	ldr	r2, [r7, #28]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d903      	bls.n	8007ce6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ce4:	e0e8      	b.n	8007eb8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	461c      	mov	r4, r3
 8007cec:	4615      	mov	r5, r2
 8007cee:	f04f 0200 	mov.w	r2, #0
 8007cf2:	f04f 0300 	mov.w	r3, #0
 8007cf6:	022b      	lsls	r3, r5, #8
 8007cf8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007cfc:	0222      	lsls	r2, r4, #8
 8007cfe:	68f9      	ldr	r1, [r7, #12]
 8007d00:	6849      	ldr	r1, [r1, #4]
 8007d02:	0849      	lsrs	r1, r1, #1
 8007d04:	2000      	movs	r0, #0
 8007d06:	4688      	mov	r8, r1
 8007d08:	4681      	mov	r9, r0
 8007d0a:	eb12 0a08 	adds.w	sl, r2, r8
 8007d0e:	eb43 0b09 	adc.w	fp, r3, r9
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	603b      	str	r3, [r7, #0]
 8007d1a:	607a      	str	r2, [r7, #4]
 8007d1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d20:	4650      	mov	r0, sl
 8007d22:	4659      	mov	r1, fp
 8007d24:	f7f8 fe9a 	bl	8000a5c <__aeabi_uldivmod>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d36:	d308      	bcc.n	8007d4a <UART_SetConfig+0x3de>
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d3e:	d204      	bcs.n	8007d4a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	60da      	str	r2, [r3, #12]
 8007d48:	e0b6      	b.n	8007eb8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007d50:	e0b2      	b.n	8007eb8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d5a:	d15e      	bne.n	8007e1a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d60:	2b08      	cmp	r3, #8
 8007d62:	d828      	bhi.n	8007db6 <UART_SetConfig+0x44a>
 8007d64:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <UART_SetConfig+0x400>)
 8007d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6a:	bf00      	nop
 8007d6c:	08007d91 	.word	0x08007d91
 8007d70:	08007d99 	.word	0x08007d99
 8007d74:	08007da1 	.word	0x08007da1
 8007d78:	08007db7 	.word	0x08007db7
 8007d7c:	08007da7 	.word	0x08007da7
 8007d80:	08007db7 	.word	0x08007db7
 8007d84:	08007db7 	.word	0x08007db7
 8007d88:	08007db7 	.word	0x08007db7
 8007d8c:	08007daf 	.word	0x08007daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d90:	f7fd fdb8 	bl	8005904 <HAL_RCC_GetPCLK1Freq>
 8007d94:	61f8      	str	r0, [r7, #28]
        break;
 8007d96:	e014      	b.n	8007dc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d98:	f7fd fdca 	bl	8005930 <HAL_RCC_GetPCLK2Freq>
 8007d9c:	61f8      	str	r0, [r7, #28]
        break;
 8007d9e:	e010      	b.n	8007dc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007da0:	4b4d      	ldr	r3, [pc, #308]	; (8007ed8 <UART_SetConfig+0x56c>)
 8007da2:	61fb      	str	r3, [r7, #28]
        break;
 8007da4:	e00d      	b.n	8007dc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007da6:	f7fd fd15 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 8007daa:	61f8      	str	r0, [r7, #28]
        break;
 8007dac:	e009      	b.n	8007dc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007db2:	61fb      	str	r3, [r7, #28]
        break;
 8007db4:	e005      	b.n	8007dc2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007db6:	2300      	movs	r3, #0
 8007db8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007dc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d077      	beq.n	8007eb8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	005a      	lsls	r2, r3, #1
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	085b      	lsrs	r3, r3, #1
 8007dd2:	441a      	add	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ddc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	2b0f      	cmp	r3, #15
 8007de2:	d916      	bls.n	8007e12 <UART_SetConfig+0x4a6>
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dea:	d212      	bcs.n	8007e12 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	f023 030f 	bic.w	r3, r3, #15
 8007df4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	085b      	lsrs	r3, r3, #1
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	f003 0307 	and.w	r3, r3, #7
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	8afb      	ldrh	r3, [r7, #22]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	8afa      	ldrh	r2, [r7, #22]
 8007e0e:	60da      	str	r2, [r3, #12]
 8007e10:	e052      	b.n	8007eb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007e18:	e04e      	b.n	8007eb8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e1e:	2b08      	cmp	r3, #8
 8007e20:	d827      	bhi.n	8007e72 <UART_SetConfig+0x506>
 8007e22:	a201      	add	r2, pc, #4	; (adr r2, 8007e28 <UART_SetConfig+0x4bc>)
 8007e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e28:	08007e4d 	.word	0x08007e4d
 8007e2c:	08007e55 	.word	0x08007e55
 8007e30:	08007e5d 	.word	0x08007e5d
 8007e34:	08007e73 	.word	0x08007e73
 8007e38:	08007e63 	.word	0x08007e63
 8007e3c:	08007e73 	.word	0x08007e73
 8007e40:	08007e73 	.word	0x08007e73
 8007e44:	08007e73 	.word	0x08007e73
 8007e48:	08007e6b 	.word	0x08007e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e4c:	f7fd fd5a 	bl	8005904 <HAL_RCC_GetPCLK1Freq>
 8007e50:	61f8      	str	r0, [r7, #28]
        break;
 8007e52:	e014      	b.n	8007e7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e54:	f7fd fd6c 	bl	8005930 <HAL_RCC_GetPCLK2Freq>
 8007e58:	61f8      	str	r0, [r7, #28]
        break;
 8007e5a:	e010      	b.n	8007e7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e5c:	4b1e      	ldr	r3, [pc, #120]	; (8007ed8 <UART_SetConfig+0x56c>)
 8007e5e:	61fb      	str	r3, [r7, #28]
        break;
 8007e60:	e00d      	b.n	8007e7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e62:	f7fd fcb7 	bl	80057d4 <HAL_RCC_GetSysClockFreq>
 8007e66:	61f8      	str	r0, [r7, #28]
        break;
 8007e68:	e009      	b.n	8007e7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e6e:	61fb      	str	r3, [r7, #28]
        break;
 8007e70:	e005      	b.n	8007e7e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007e72:	2300      	movs	r3, #0
 8007e74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007e7c:	bf00      	nop
    }

    if (pclk != 0U)
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d019      	beq.n	8007eb8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	085a      	lsrs	r2, r3, #1
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	441a      	add	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e96:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	2b0f      	cmp	r3, #15
 8007e9c:	d909      	bls.n	8007eb2 <UART_SetConfig+0x546>
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ea4:	d205      	bcs.n	8007eb2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	60da      	str	r2, [r3, #12]
 8007eb0:	e002      	b.n	8007eb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007ec4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3728      	adds	r7, #40	; 0x28
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ed2:	bf00      	nop
 8007ed4:	40008000 	.word	0x40008000
 8007ed8:	00f42400 	.word	0x00f42400

08007edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee8:	f003 0308 	and.w	r3, r3, #8
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00a      	beq.n	8007f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00a      	beq.n	8007f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	430a      	orrs	r2, r1
 8007f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00a      	beq.n	8007f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	430a      	orrs	r2, r1
 8007f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4e:	f003 0304 	and.w	r3, r3, #4
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	430a      	orrs	r2, r1
 8007f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f70:	f003 0310 	and.w	r3, r3, #16
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00a      	beq.n	8007f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f92:	f003 0320 	and.w	r3, r3, #32
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00a      	beq.n	8007fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d01a      	beq.n	8007ff2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fda:	d10a      	bne.n	8007ff2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00a      	beq.n	8008014 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	430a      	orrs	r2, r1
 8008012:	605a      	str	r2, [r3, #4]
  }
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b098      	sub	sp, #96	; 0x60
 8008024:	af02      	add	r7, sp, #8
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008030:	f7fc fb96 	bl	8004760 <HAL_GetTick>
 8008034:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0308 	and.w	r3, r3, #8
 8008040:	2b08      	cmp	r3, #8
 8008042:	d12e      	bne.n	80080a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008044:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800804c:	2200      	movs	r2, #0
 800804e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f88c 	bl	8008170 <UART_WaitOnFlagUntilTimeout>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d021      	beq.n	80080a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008066:	e853 3f00 	ldrex	r3, [r3]
 800806a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800806c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008072:	653b      	str	r3, [r7, #80]	; 0x50
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	461a      	mov	r2, r3
 800807a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800807c:	647b      	str	r3, [r7, #68]	; 0x44
 800807e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008080:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008082:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008084:	e841 2300 	strex	r3, r2, [r1]
 8008088:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800808a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1e6      	bne.n	800805e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2220      	movs	r2, #32
 8008094:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e062      	b.n	8008168 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0304 	and.w	r3, r3, #4
 80080ac:	2b04      	cmp	r3, #4
 80080ae:	d149      	bne.n	8008144 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080b8:	2200      	movs	r2, #0
 80080ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f856 	bl	8008170 <UART_WaitOnFlagUntilTimeout>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d03c      	beq.n	8008144 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	623b      	str	r3, [r7, #32]
   return(result);
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	461a      	mov	r2, r3
 80080e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e8:	633b      	str	r3, [r7, #48]	; 0x30
 80080ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080f0:	e841 2300 	strex	r3, r2, [r1]
 80080f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e6      	bne.n	80080ca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3308      	adds	r3, #8
 8008102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	e853 3f00 	ldrex	r3, [r3]
 800810a:	60fb      	str	r3, [r7, #12]
   return(result);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f023 0301 	bic.w	r3, r3, #1
 8008112:	64bb      	str	r3, [r7, #72]	; 0x48
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	3308      	adds	r3, #8
 800811a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800811c:	61fa      	str	r2, [r7, #28]
 800811e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008120:	69b9      	ldr	r1, [r7, #24]
 8008122:	69fa      	ldr	r2, [r7, #28]
 8008124:	e841 2300 	strex	r3, r2, [r1]
 8008128:	617b      	str	r3, [r7, #20]
   return(result);
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1e5      	bne.n	80080fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2220      	movs	r2, #32
 8008134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e011      	b.n	8008168 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2220      	movs	r2, #32
 8008148:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2220      	movs	r2, #32
 800814e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3758      	adds	r7, #88	; 0x58
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	4613      	mov	r3, r2
 800817e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008180:	e049      	b.n	8008216 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008188:	d045      	beq.n	8008216 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800818a:	f7fc fae9 	bl	8004760 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	69ba      	ldr	r2, [r7, #24]
 8008196:	429a      	cmp	r2, r3
 8008198:	d302      	bcc.n	80081a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e048      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0304 	and.w	r3, r3, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d031      	beq.n	8008216 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	f003 0308 	and.w	r3, r3, #8
 80081bc:	2b08      	cmp	r3, #8
 80081be:	d110      	bne.n	80081e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2208      	movs	r2, #8
 80081c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f000 f838 	bl	800823e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2208      	movs	r2, #8
 80081d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e029      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081f0:	d111      	bne.n	8008216 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 f81e 	bl	800823e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2220      	movs	r2, #32
 8008206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e00f      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	69da      	ldr	r2, [r3, #28]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	4013      	ands	r3, r2
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	429a      	cmp	r2, r3
 8008224:	bf0c      	ite	eq
 8008226:	2301      	moveq	r3, #1
 8008228:	2300      	movne	r3, #0
 800822a:	b2db      	uxtb	r3, r3
 800822c:	461a      	mov	r2, r3
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	429a      	cmp	r2, r3
 8008232:	d0a6      	beq.n	8008182 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800823e:	b480      	push	{r7}
 8008240:	b095      	sub	sp, #84	; 0x54
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800824e:	e853 3f00 	ldrex	r3, [r3]
 8008252:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800825a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	461a      	mov	r2, r3
 8008262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008264:	643b      	str	r3, [r7, #64]	; 0x40
 8008266:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008268:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800826a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800826c:	e841 2300 	strex	r3, r2, [r1]
 8008270:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1e6      	bne.n	8008246 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3308      	adds	r3, #8
 800827e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	e853 3f00 	ldrex	r3, [r3]
 8008286:	61fb      	str	r3, [r7, #28]
   return(result);
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	f023 0301 	bic.w	r3, r3, #1
 800828e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3308      	adds	r3, #8
 8008296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008298:	62fa      	str	r2, [r7, #44]	; 0x2c
 800829a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800829e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082a0:	e841 2300 	strex	r3, r2, [r1]
 80082a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1e5      	bne.n	8008278 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d118      	bne.n	80082e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f023 0310 	bic.w	r3, r3, #16
 80082c8:	647b      	str	r3, [r7, #68]	; 0x44
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	461a      	mov	r2, r3
 80082d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082d2:	61bb      	str	r3, [r7, #24]
 80082d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d6:	6979      	ldr	r1, [r7, #20]
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	613b      	str	r3, [r7, #16]
   return(result);
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e6      	bne.n	80082b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80082fa:	bf00      	nop
 80082fc:	3754      	adds	r7, #84	; 0x54
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
	...

08008308 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800830c:	4b05      	ldr	r3, [pc, #20]	; (8008324 <SysTick_Handler+0x1c>)
 800830e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008310:	f001 fe32 	bl	8009f78 <xTaskGetSchedulerState>
 8008314:	4603      	mov	r3, r0
 8008316:	2b01      	cmp	r3, #1
 8008318:	d001      	beq.n	800831e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800831a:	f002 fd15 	bl	800ad48 <xPortSysTickHandler>
  }
}
 800831e:	bf00      	nop
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	e000e010 	.word	0xe000e010

08008328 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4a07      	ldr	r2, [pc, #28]	; (8008354 <vApplicationGetIdleTaskMemory+0x2c>)
 8008338:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	4a06      	ldr	r2, [pc, #24]	; (8008358 <vApplicationGetIdleTaskMemory+0x30>)
 800833e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2280      	movs	r2, #128	; 0x80
 8008344:	601a      	str	r2, [r3, #0]
}
 8008346:	bf00      	nop
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	200025d0 	.word	0x200025d0
 8008358:	2000267c 	.word	0x2000267c

0800835c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4a07      	ldr	r2, [pc, #28]	; (8008388 <vApplicationGetTimerTaskMemory+0x2c>)
 800836c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	4a06      	ldr	r2, [pc, #24]	; (800838c <vApplicationGetTimerTaskMemory+0x30>)
 8008372:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800837a:	601a      	str	r2, [r3, #0]
}
 800837c:	bf00      	nop
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	2000287c 	.word	0x2000287c
 800838c:	20002928 	.word	0x20002928

08008390 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f103 0208 	add.w	r2, r3, #8
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f04f 32ff 	mov.w	r2, #4294967295
 80083a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f103 0208 	add.w	r2, r3, #8
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f103 0208 	add.w	r2, r3, #8
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083de:	bf00      	nop
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083ea:	b480      	push	{r7}
 80083ec:	b085      	sub	sp, #20
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	689a      	ldr	r2, [r3, #8]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	1c5a      	adds	r2, r3, #1
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	601a      	str	r2, [r3, #0]
}
 8008426:	bf00      	nop
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008432:	b480      	push	{r7}
 8008434:	b085      	sub	sp, #20
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008448:	d103      	bne.n	8008452 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	e00c      	b.n	800846c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	3308      	adds	r3, #8
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	e002      	b.n	8008460 <vListInsert+0x2e>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	60fb      	str	r3, [r7, #12]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68ba      	ldr	r2, [r7, #8]
 8008468:	429a      	cmp	r2, r3
 800846a:	d2f6      	bcs.n	800845a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	1c5a      	adds	r2, r3, #1
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	601a      	str	r2, [r3, #0]
}
 8008498:	bf00      	nop
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	6892      	ldr	r2, [r2, #8]
 80084ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	6852      	ldr	r2, [r2, #4]
 80084c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d103      	bne.n	80084d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	1e5a      	subs	r2, r3, #1
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3714      	adds	r7, #20
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10a      	bne.n	8008522 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800850c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008510:	f383 8811 	msr	BASEPRI, r3
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800851e:	bf00      	nop
 8008520:	e7fe      	b.n	8008520 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008522:	f002 fb7f 	bl	800ac24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800852e:	68f9      	ldr	r1, [r7, #12]
 8008530:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008532:	fb01 f303 	mul.w	r3, r1, r3
 8008536:	441a      	add	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008552:	3b01      	subs	r3, #1
 8008554:	68f9      	ldr	r1, [r7, #12]
 8008556:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008558:	fb01 f303 	mul.w	r3, r1, r3
 800855c:	441a      	add	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	22ff      	movs	r2, #255	; 0xff
 8008566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	22ff      	movs	r2, #255	; 0xff
 800856e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d114      	bne.n	80085a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d01a      	beq.n	80085b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3310      	adds	r3, #16
 8008584:	4618      	mov	r0, r3
 8008586:	f001 fb35 	bl	8009bf4 <xTaskRemoveFromEventList>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d012      	beq.n	80085b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008590:	4b0c      	ldr	r3, [pc, #48]	; (80085c4 <xQueueGenericReset+0xcc>)
 8008592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	e009      	b.n	80085b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3310      	adds	r3, #16
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff fef2 	bl	8008390 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3324      	adds	r3, #36	; 0x24
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7ff feed 	bl	8008390 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80085b6:	f002 fb65 	bl	800ac84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80085ba:	2301      	movs	r3, #1
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	e000ed04 	.word	0xe000ed04

080085c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b08e      	sub	sp, #56	; 0x38
 80085cc:	af02      	add	r7, sp, #8
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
 80085d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10a      	bne.n	80085f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80085dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e0:	f383 8811 	msr	BASEPRI, r3
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085ee:	bf00      	nop
 80085f0:	e7fe      	b.n	80085f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10a      	bne.n	800860e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80085f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	627b      	str	r3, [r7, #36]	; 0x24
}
 800860a:	bf00      	nop
 800860c:	e7fe      	b.n	800860c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d002      	beq.n	800861a <xQueueGenericCreateStatic+0x52>
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <xQueueGenericCreateStatic+0x56>
 800861a:	2301      	movs	r3, #1
 800861c:	e000      	b.n	8008620 <xQueueGenericCreateStatic+0x58>
 800861e:	2300      	movs	r3, #0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10a      	bne.n	800863a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	623b      	str	r3, [r7, #32]
}
 8008636:	bf00      	nop
 8008638:	e7fe      	b.n	8008638 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d102      	bne.n	8008646 <xQueueGenericCreateStatic+0x7e>
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <xQueueGenericCreateStatic+0x82>
 8008646:	2301      	movs	r3, #1
 8008648:	e000      	b.n	800864c <xQueueGenericCreateStatic+0x84>
 800864a:	2300      	movs	r3, #0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10a      	bne.n	8008666 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	61fb      	str	r3, [r7, #28]
}
 8008662:	bf00      	nop
 8008664:	e7fe      	b.n	8008664 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008666:	2350      	movs	r3, #80	; 0x50
 8008668:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	2b50      	cmp	r3, #80	; 0x50
 800866e:	d00a      	beq.n	8008686 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	61bb      	str	r3, [r7, #24]
}
 8008682:	bf00      	nop
 8008684:	e7fe      	b.n	8008684 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008686:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800868c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00d      	beq.n	80086ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	2201      	movs	r2, #1
 8008696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800869a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800869e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	4613      	mov	r3, r2
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	68b9      	ldr	r1, [r7, #8]
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f000 f83f 	bl	800872c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3730      	adds	r7, #48	; 0x30
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08a      	sub	sp, #40	; 0x28
 80086bc:	af02      	add	r7, sp, #8
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	4613      	mov	r3, r2
 80086c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10a      	bne.n	80086e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80086cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	613b      	str	r3, [r7, #16]
}
 80086de:	bf00      	nop
 80086e0:	e7fe      	b.n	80086e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	fb02 f303 	mul.w	r3, r2, r3
 80086ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	3350      	adds	r3, #80	; 0x50
 80086f0:	4618      	mov	r0, r3
 80086f2:	f002 fbb9 	bl	800ae68 <pvPortMalloc>
 80086f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d011      	beq.n	8008722 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	3350      	adds	r3, #80	; 0x50
 8008706:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008710:	79fa      	ldrb	r2, [r7, #7]
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	4613      	mov	r3, r2
 8008718:	697a      	ldr	r2, [r7, #20]
 800871a:	68b9      	ldr	r1, [r7, #8]
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f000 f805 	bl	800872c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008722:	69bb      	ldr	r3, [r7, #24]
	}
 8008724:	4618      	mov	r0, r3
 8008726:	3720      	adds	r7, #32
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
 8008738:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d103      	bne.n	8008748 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	69ba      	ldr	r2, [r7, #24]
 8008744:	601a      	str	r2, [r3, #0]
 8008746:	e002      	b.n	800874e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800875a:	2101      	movs	r1, #1
 800875c:	69b8      	ldr	r0, [r7, #24]
 800875e:	f7ff fecb 	bl	80084f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	78fa      	ldrb	r2, [r7, #3]
 8008766:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800876a:	bf00      	nop
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
	...

08008774 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08e      	sub	sp, #56	; 0x38
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008782:	2300      	movs	r3, #0
 8008784:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10a      	bne.n	80087a6 <xQueueGenericSend+0x32>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087a2:	bf00      	nop
 80087a4:	e7fe      	b.n	80087a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d103      	bne.n	80087b4 <xQueueGenericSend+0x40>
 80087ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <xQueueGenericSend+0x44>
 80087b4:	2301      	movs	r3, #1
 80087b6:	e000      	b.n	80087ba <xQueueGenericSend+0x46>
 80087b8:	2300      	movs	r3, #0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10a      	bne.n	80087d4 <xQueueGenericSend+0x60>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087d0:	bf00      	nop
 80087d2:	e7fe      	b.n	80087d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d103      	bne.n	80087e2 <xQueueGenericSend+0x6e>
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d101      	bne.n	80087e6 <xQueueGenericSend+0x72>
 80087e2:	2301      	movs	r3, #1
 80087e4:	e000      	b.n	80087e8 <xQueueGenericSend+0x74>
 80087e6:	2300      	movs	r3, #0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10a      	bne.n	8008802 <xQueueGenericSend+0x8e>
	__asm volatile
 80087ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	623b      	str	r3, [r7, #32]
}
 80087fe:	bf00      	nop
 8008800:	e7fe      	b.n	8008800 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008802:	f001 fbb9 	bl	8009f78 <xTaskGetSchedulerState>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d102      	bne.n	8008812 <xQueueGenericSend+0x9e>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d101      	bne.n	8008816 <xQueueGenericSend+0xa2>
 8008812:	2301      	movs	r3, #1
 8008814:	e000      	b.n	8008818 <xQueueGenericSend+0xa4>
 8008816:	2300      	movs	r3, #0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10a      	bne.n	8008832 <xQueueGenericSend+0xbe>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	61fb      	str	r3, [r7, #28]
}
 800882e:	bf00      	nop
 8008830:	e7fe      	b.n	8008830 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008832:	f002 f9f7 	bl	800ac24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883e:	429a      	cmp	r2, r3
 8008840:	d302      	bcc.n	8008848 <xQueueGenericSend+0xd4>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b02      	cmp	r3, #2
 8008846:	d129      	bne.n	800889c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	68b9      	ldr	r1, [r7, #8]
 800884c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800884e:	f000 fbbb 	bl	8008fc8 <prvCopyDataToQueue>
 8008852:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	2b00      	cmp	r3, #0
 800885a:	d010      	beq.n	800887e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800885c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885e:	3324      	adds	r3, #36	; 0x24
 8008860:	4618      	mov	r0, r3
 8008862:	f001 f9c7 	bl	8009bf4 <xTaskRemoveFromEventList>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d013      	beq.n	8008894 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800886c:	4b3f      	ldr	r3, [pc, #252]	; (800896c <xQueueGenericSend+0x1f8>)
 800886e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	e00a      	b.n	8008894 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800887e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008880:	2b00      	cmp	r3, #0
 8008882:	d007      	beq.n	8008894 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008884:	4b39      	ldr	r3, [pc, #228]	; (800896c <xQueueGenericSend+0x1f8>)
 8008886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008894:	f002 f9f6 	bl	800ac84 <vPortExitCritical>
				return pdPASS;
 8008898:	2301      	movs	r3, #1
 800889a:	e063      	b.n	8008964 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d103      	bne.n	80088aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088a2:	f002 f9ef 	bl	800ac84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80088a6:	2300      	movs	r3, #0
 80088a8:	e05c      	b.n	8008964 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d106      	bne.n	80088be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088b0:	f107 0314 	add.w	r3, r7, #20
 80088b4:	4618      	mov	r0, r3
 80088b6:	f001 fa01 	bl	8009cbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088ba:	2301      	movs	r3, #1
 80088bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088be:	f002 f9e1 	bl	800ac84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088c2:	f000 ff51 	bl	8009768 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088c6:	f002 f9ad 	bl	800ac24 <vPortEnterCritical>
 80088ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088d0:	b25b      	sxtb	r3, r3
 80088d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d6:	d103      	bne.n	80088e0 <xQueueGenericSend+0x16c>
 80088d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088e6:	b25b      	sxtb	r3, r3
 80088e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ec:	d103      	bne.n	80088f6 <xQueueGenericSend+0x182>
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088f6:	f002 f9c5 	bl	800ac84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088fa:	1d3a      	adds	r2, r7, #4
 80088fc:	f107 0314 	add.w	r3, r7, #20
 8008900:	4611      	mov	r1, r2
 8008902:	4618      	mov	r0, r3
 8008904:	f001 f9f0 	bl	8009ce8 <xTaskCheckForTimeOut>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d124      	bne.n	8008958 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800890e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008910:	f000 fc52 	bl	80091b8 <prvIsQueueFull>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d018      	beq.n	800894c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	3310      	adds	r3, #16
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	4611      	mov	r1, r2
 8008922:	4618      	mov	r0, r3
 8008924:	f001 f916 	bl	8009b54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800892a:	f000 fbdd 	bl	80090e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800892e:	f000 ff29 	bl	8009784 <xTaskResumeAll>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	f47f af7c 	bne.w	8008832 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800893a:	4b0c      	ldr	r3, [pc, #48]	; (800896c <xQueueGenericSend+0x1f8>)
 800893c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	e772      	b.n	8008832 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800894c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800894e:	f000 fbcb 	bl	80090e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008952:	f000 ff17 	bl	8009784 <xTaskResumeAll>
 8008956:	e76c      	b.n	8008832 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800895a:	f000 fbc5 	bl	80090e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800895e:	f000 ff11 	bl	8009784 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008962:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008964:	4618      	mov	r0, r3
 8008966:	3738      	adds	r7, #56	; 0x38
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	e000ed04 	.word	0xe000ed04

08008970 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b090      	sub	sp, #64	; 0x40
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10a      	bne.n	800899e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800899a:	bf00      	nop
 800899c:	e7fe      	b.n	800899c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d103      	bne.n	80089ac <xQueueGenericSendFromISR+0x3c>
 80089a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <xQueueGenericSendFromISR+0x40>
 80089ac:	2301      	movs	r3, #1
 80089ae:	e000      	b.n	80089b2 <xQueueGenericSendFromISR+0x42>
 80089b0:	2300      	movs	r3, #0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10a      	bne.n	80089cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80089b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089c8:	bf00      	nop
 80089ca:	e7fe      	b.n	80089ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d103      	bne.n	80089da <xQueueGenericSendFromISR+0x6a>
 80089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d101      	bne.n	80089de <xQueueGenericSendFromISR+0x6e>
 80089da:	2301      	movs	r3, #1
 80089dc:	e000      	b.n	80089e0 <xQueueGenericSendFromISR+0x70>
 80089de:	2300      	movs	r3, #0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10a      	bne.n	80089fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	623b      	str	r3, [r7, #32]
}
 80089f6:	bf00      	nop
 80089f8:	e7fe      	b.n	80089f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089fa:	f002 f9f5 	bl	800ade8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089fe:	f3ef 8211 	mrs	r2, BASEPRI
 8008a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a06:	f383 8811 	msr	BASEPRI, r3
 8008a0a:	f3bf 8f6f 	isb	sy
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	61fa      	str	r2, [r7, #28]
 8008a14:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a16:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a18:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d302      	bcc.n	8008a2c <xQueueGenericSendFromISR+0xbc>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d12f      	bne.n	8008a8c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	68b9      	ldr	r1, [r7, #8]
 8008a40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a42:	f000 fac1 	bl	8008fc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4e:	d112      	bne.n	8008a76 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d016      	beq.n	8008a86 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5a:	3324      	adds	r3, #36	; 0x24
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f001 f8c9 	bl	8009bf4 <xTaskRemoveFromEventList>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00e      	beq.n	8008a86 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00b      	beq.n	8008a86 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	e007      	b.n	8008a86 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	b25a      	sxtb	r2, r3
 8008a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a86:	2301      	movs	r3, #1
 8008a88:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008a8a:	e001      	b.n	8008a90 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a92:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3740      	adds	r7, #64	; 0x40
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b08e      	sub	sp, #56	; 0x38
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10a      	bne.n	8008ad0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	623b      	str	r3, [r7, #32]
}
 8008acc:	bf00      	nop
 8008ace:	e7fe      	b.n	8008ace <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00a      	beq.n	8008aee <xQueueGiveFromISR+0x48>
	__asm volatile
 8008ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	61fb      	str	r3, [r7, #28]
}
 8008aea:	bf00      	nop
 8008aec:	e7fe      	b.n	8008aec <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d103      	bne.n	8008afe <xQueueGiveFromISR+0x58>
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <xQueueGiveFromISR+0x5c>
 8008afe:	2301      	movs	r3, #1
 8008b00:	e000      	b.n	8008b04 <xQueueGiveFromISR+0x5e>
 8008b02:	2300      	movs	r3, #0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10a      	bne.n	8008b1e <xQueueGiveFromISR+0x78>
	__asm volatile
 8008b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	61bb      	str	r3, [r7, #24]
}
 8008b1a:	bf00      	nop
 8008b1c:	e7fe      	b.n	8008b1c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b1e:	f002 f963 	bl	800ade8 <vPortValidateInterruptPriority>
	__asm volatile
 8008b22:	f3ef 8211 	mrs	r2, BASEPRI
 8008b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	617a      	str	r2, [r7, #20]
 8008b38:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008b3a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d22b      	bcs.n	8008ba6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b68:	d112      	bne.n	8008b90 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d016      	beq.n	8008ba0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b74:	3324      	adds	r3, #36	; 0x24
 8008b76:	4618      	mov	r0, r3
 8008b78:	f001 f83c 	bl	8009bf4 <xTaskRemoveFromEventList>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00e      	beq.n	8008ba0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00b      	beq.n	8008ba0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	e007      	b.n	8008ba0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b94:	3301      	adds	r3, #1
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	b25a      	sxtb	r2, r3
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8008ba4:	e001      	b.n	8008baa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8008baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f383 8811 	msr	BASEPRI, r3
}
 8008bb4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3738      	adds	r7, #56	; 0x38
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b08c      	sub	sp, #48	; 0x30
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10a      	bne.n	8008bf0 <xQueueReceive+0x30>
	__asm volatile
 8008bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	623b      	str	r3, [r7, #32]
}
 8008bec:	bf00      	nop
 8008bee:	e7fe      	b.n	8008bee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d103      	bne.n	8008bfe <xQueueReceive+0x3e>
 8008bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d101      	bne.n	8008c02 <xQueueReceive+0x42>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e000      	b.n	8008c04 <xQueueReceive+0x44>
 8008c02:	2300      	movs	r3, #0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d10a      	bne.n	8008c1e <xQueueReceive+0x5e>
	__asm volatile
 8008c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	61fb      	str	r3, [r7, #28]
}
 8008c1a:	bf00      	nop
 8008c1c:	e7fe      	b.n	8008c1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c1e:	f001 f9ab 	bl	8009f78 <xTaskGetSchedulerState>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d102      	bne.n	8008c2e <xQueueReceive+0x6e>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d101      	bne.n	8008c32 <xQueueReceive+0x72>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e000      	b.n	8008c34 <xQueueReceive+0x74>
 8008c32:	2300      	movs	r3, #0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <xQueueReceive+0x8e>
	__asm volatile
 8008c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3c:	f383 8811 	msr	BASEPRI, r3
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	f3bf 8f4f 	dsb	sy
 8008c48:	61bb      	str	r3, [r7, #24]
}
 8008c4a:	bf00      	nop
 8008c4c:	e7fe      	b.n	8008c4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c4e:	f001 ffe9 	bl	800ac24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d01f      	beq.n	8008c9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c5e:	68b9      	ldr	r1, [r7, #8]
 8008c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c62:	f000 fa1b 	bl	800909c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c68:	1e5a      	subs	r2, r3, #1
 8008c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00f      	beq.n	8008c96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c78:	3310      	adds	r3, #16
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 ffba 	bl	8009bf4 <xTaskRemoveFromEventList>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d007      	beq.n	8008c96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c86:	4b3d      	ldr	r3, [pc, #244]	; (8008d7c <xQueueReceive+0x1bc>)
 8008c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c8c:	601a      	str	r2, [r3, #0]
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c96:	f001 fff5 	bl	800ac84 <vPortExitCritical>
				return pdPASS;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e069      	b.n	8008d72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d103      	bne.n	8008cac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ca4:	f001 ffee 	bl	800ac84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	e062      	b.n	8008d72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d106      	bne.n	8008cc0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cb2:	f107 0310 	add.w	r3, r7, #16
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f001 f800 	bl	8009cbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cc0:	f001 ffe0 	bl	800ac84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cc4:	f000 fd50 	bl	8009768 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cc8:	f001 ffac 	bl	800ac24 <vPortEnterCritical>
 8008ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cd2:	b25b      	sxtb	r3, r3
 8008cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd8:	d103      	bne.n	8008ce2 <xQueueReceive+0x122>
 8008cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ce8:	b25b      	sxtb	r3, r3
 8008cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cee:	d103      	bne.n	8008cf8 <xQueueReceive+0x138>
 8008cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cf8:	f001 ffc4 	bl	800ac84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cfc:	1d3a      	adds	r2, r7, #4
 8008cfe:	f107 0310 	add.w	r3, r7, #16
 8008d02:	4611      	mov	r1, r2
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 ffef 	bl	8009ce8 <xTaskCheckForTimeOut>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d123      	bne.n	8008d58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d12:	f000 fa3b 	bl	800918c <prvIsQueueEmpty>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d017      	beq.n	8008d4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1e:	3324      	adds	r3, #36	; 0x24
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	4611      	mov	r1, r2
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 ff15 	bl	8009b54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d2c:	f000 f9dc 	bl	80090e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d30:	f000 fd28 	bl	8009784 <xTaskResumeAll>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d189      	bne.n	8008c4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008d3a:	4b10      	ldr	r3, [pc, #64]	; (8008d7c <xQueueReceive+0x1bc>)
 8008d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	e780      	b.n	8008c4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d4e:	f000 f9cb 	bl	80090e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d52:	f000 fd17 	bl	8009784 <xTaskResumeAll>
 8008d56:	e77a      	b.n	8008c4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d5a:	f000 f9c5 	bl	80090e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d5e:	f000 fd11 	bl	8009784 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d64:	f000 fa12 	bl	800918c <prvIsQueueEmpty>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f43f af6f 	beq.w	8008c4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3730      	adds	r7, #48	; 0x30
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	e000ed04 	.word	0xe000ed04

08008d80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08e      	sub	sp, #56	; 0x38
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008d92:	2300      	movs	r3, #0
 8008d94:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10a      	bne.n	8008db2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	623b      	str	r3, [r7, #32]
}
 8008dae:	bf00      	nop
 8008db0:	e7fe      	b.n	8008db0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00a      	beq.n	8008dd0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	61fb      	str	r3, [r7, #28]
}
 8008dcc:	bf00      	nop
 8008dce:	e7fe      	b.n	8008dce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dd0:	f001 f8d2 	bl	8009f78 <xTaskGetSchedulerState>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d102      	bne.n	8008de0 <xQueueSemaphoreTake+0x60>
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <xQueueSemaphoreTake+0x64>
 8008de0:	2301      	movs	r3, #1
 8008de2:	e000      	b.n	8008de6 <xQueueSemaphoreTake+0x66>
 8008de4:	2300      	movs	r3, #0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10a      	bne.n	8008e00 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	61bb      	str	r3, [r7, #24]
}
 8008dfc:	bf00      	nop
 8008dfe:	e7fe      	b.n	8008dfe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e00:	f001 ff10 	bl	800ac24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e08:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d024      	beq.n	8008e5a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e12:	1e5a      	subs	r2, r3, #1
 8008e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e16:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d104      	bne.n	8008e2a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008e20:	f001 fa20 	bl	800a264 <pvTaskIncrementMutexHeldCount>
 8008e24:	4602      	mov	r2, r0
 8008e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e28:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00f      	beq.n	8008e52 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	3310      	adds	r3, #16
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 fedc 	bl	8009bf4 <xTaskRemoveFromEventList>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d007      	beq.n	8008e52 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e42:	4b54      	ldr	r3, [pc, #336]	; (8008f94 <xQueueSemaphoreTake+0x214>)
 8008e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e48:	601a      	str	r2, [r3, #0]
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e52:	f001 ff17 	bl	800ac84 <vPortExitCritical>
				return pdPASS;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e097      	b.n	8008f8a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d111      	bne.n	8008e84 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00a      	beq.n	8008e7c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	617b      	str	r3, [r7, #20]
}
 8008e78:	bf00      	nop
 8008e7a:	e7fe      	b.n	8008e7a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008e7c:	f001 ff02 	bl	800ac84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e80:	2300      	movs	r3, #0
 8008e82:	e082      	b.n	8008f8a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d106      	bne.n	8008e98 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e8a:	f107 030c 	add.w	r3, r7, #12
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 ff14 	bl	8009cbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e94:	2301      	movs	r3, #1
 8008e96:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e98:	f001 fef4 	bl	800ac84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e9c:	f000 fc64 	bl	8009768 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ea0:	f001 fec0 	bl	800ac24 <vPortEnterCritical>
 8008ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eaa:	b25b      	sxtb	r3, r3
 8008eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb0:	d103      	bne.n	8008eba <xQueueSemaphoreTake+0x13a>
 8008eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ec0:	b25b      	sxtb	r3, r3
 8008ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec6:	d103      	bne.n	8008ed0 <xQueueSemaphoreTake+0x150>
 8008ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ed0:	f001 fed8 	bl	800ac84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ed4:	463a      	mov	r2, r7
 8008ed6:	f107 030c 	add.w	r3, r7, #12
 8008eda:	4611      	mov	r1, r2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 ff03 	bl	8009ce8 <xTaskCheckForTimeOut>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d132      	bne.n	8008f4e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ee8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008eea:	f000 f94f 	bl	800918c <prvIsQueueEmpty>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d026      	beq.n	8008f42 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d109      	bne.n	8008f10 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008efc:	f001 fe92 	bl	800ac24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f001 f855 	bl	8009fb4 <xTaskPriorityInherit>
 8008f0a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008f0c:	f001 feba 	bl	800ac84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	3324      	adds	r3, #36	; 0x24
 8008f14:	683a      	ldr	r2, [r7, #0]
 8008f16:	4611      	mov	r1, r2
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 fe1b 	bl	8009b54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f20:	f000 f8e2 	bl	80090e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f24:	f000 fc2e 	bl	8009784 <xTaskResumeAll>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f47f af68 	bne.w	8008e00 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008f30:	4b18      	ldr	r3, [pc, #96]	; (8008f94 <xQueueSemaphoreTake+0x214>)
 8008f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f36:	601a      	str	r2, [r3, #0]
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	e75e      	b.n	8008e00 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008f42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f44:	f000 f8d0 	bl	80090e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f48:	f000 fc1c 	bl	8009784 <xTaskResumeAll>
 8008f4c:	e758      	b.n	8008e00 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008f4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f50:	f000 f8ca 	bl	80090e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f54:	f000 fc16 	bl	8009784 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f5a:	f000 f917 	bl	800918c <prvIsQueueEmpty>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f43f af4d 	beq.w	8008e00 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00d      	beq.n	8008f88 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008f6c:	f001 fe5a 	bl	800ac24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008f70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f72:	f000 f811 	bl	8008f98 <prvGetDisinheritPriorityAfterTimeout>
 8008f76:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f001 f8ee 	bl	800a160 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008f84:	f001 fe7e 	bl	800ac84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3738      	adds	r7, #56	; 0x38
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	e000ed04 	.word	0xe000ed04

08008f98 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d006      	beq.n	8008fb6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008fb2:	60fb      	str	r3, [r7, #12]
 8008fb4:	e001      	b.n	8008fba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008fba:	68fb      	ldr	r3, [r7, #12]
	}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fdc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10d      	bne.n	8009002 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d14d      	bne.n	800908a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f001 f846 	bl	800a084 <xTaskPriorityDisinherit>
 8008ff8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	609a      	str	r2, [r3, #8]
 8009000:	e043      	b.n	800908a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d119      	bne.n	800903c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6858      	ldr	r0, [r3, #4]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009010:	461a      	mov	r2, r3
 8009012:	68b9      	ldr	r1, [r7, #8]
 8009014:	f002 fb26 	bl	800b664 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009020:	441a      	add	r2, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	429a      	cmp	r2, r3
 8009030:	d32b      	bcc.n	800908a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	605a      	str	r2, [r3, #4]
 800903a:	e026      	b.n	800908a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	68d8      	ldr	r0, [r3, #12]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009044:	461a      	mov	r2, r3
 8009046:	68b9      	ldr	r1, [r7, #8]
 8009048:	f002 fb0c 	bl	800b664 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	68da      	ldr	r2, [r3, #12]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009054:	425b      	negs	r3, r3
 8009056:	441a      	add	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	68da      	ldr	r2, [r3, #12]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	429a      	cmp	r2, r3
 8009066:	d207      	bcs.n	8009078 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	689a      	ldr	r2, [r3, #8]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009070:	425b      	negs	r3, r3
 8009072:	441a      	add	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2b02      	cmp	r3, #2
 800907c:	d105      	bne.n	800908a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	3b01      	subs	r3, #1
 8009088:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009092:	697b      	ldr	r3, [r7, #20]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3718      	adds	r7, #24
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d018      	beq.n	80090e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68da      	ldr	r2, [r3, #12]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b6:	441a      	add	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68da      	ldr	r2, [r3, #12]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d303      	bcc.n	80090d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68d9      	ldr	r1, [r3, #12]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d8:	461a      	mov	r2, r3
 80090da:	6838      	ldr	r0, [r7, #0]
 80090dc:	f002 fac2 	bl	800b664 <memcpy>
	}
}
 80090e0:	bf00      	nop
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80090f0:	f001 fd98 	bl	800ac24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090fc:	e011      	b.n	8009122 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	2b00      	cmp	r3, #0
 8009104:	d012      	beq.n	800912c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	3324      	adds	r3, #36	; 0x24
 800910a:	4618      	mov	r0, r3
 800910c:	f000 fd72 	bl	8009bf4 <xTaskRemoveFromEventList>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009116:	f000 fe49 	bl	8009dac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800911a:	7bfb      	ldrb	r3, [r7, #15]
 800911c:	3b01      	subs	r3, #1
 800911e:	b2db      	uxtb	r3, r3
 8009120:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009126:	2b00      	cmp	r3, #0
 8009128:	dce9      	bgt.n	80090fe <prvUnlockQueue+0x16>
 800912a:	e000      	b.n	800912e <prvUnlockQueue+0x46>
					break;
 800912c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	22ff      	movs	r2, #255	; 0xff
 8009132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009136:	f001 fda5 	bl	800ac84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800913a:	f001 fd73 	bl	800ac24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009144:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009146:	e011      	b.n	800916c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d012      	beq.n	8009176 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3310      	adds	r3, #16
 8009154:	4618      	mov	r0, r3
 8009156:	f000 fd4d 	bl	8009bf4 <xTaskRemoveFromEventList>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009160:	f000 fe24 	bl	8009dac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009164:	7bbb      	ldrb	r3, [r7, #14]
 8009166:	3b01      	subs	r3, #1
 8009168:	b2db      	uxtb	r3, r3
 800916a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800916c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009170:	2b00      	cmp	r3, #0
 8009172:	dce9      	bgt.n	8009148 <prvUnlockQueue+0x60>
 8009174:	e000      	b.n	8009178 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009176:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	22ff      	movs	r2, #255	; 0xff
 800917c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009180:	f001 fd80 	bl	800ac84 <vPortExitCritical>
}
 8009184:	bf00      	nop
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009194:	f001 fd46 	bl	800ac24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919c:	2b00      	cmp	r3, #0
 800919e:	d102      	bne.n	80091a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80091a0:	2301      	movs	r3, #1
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	e001      	b.n	80091aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80091a6:	2300      	movs	r3, #0
 80091a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091aa:	f001 fd6b 	bl	800ac84 <vPortExitCritical>

	return xReturn;
 80091ae:	68fb      	ldr	r3, [r7, #12]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091c0:	f001 fd30 	bl	800ac24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d102      	bne.n	80091d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091d0:	2301      	movs	r3, #1
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	e001      	b.n	80091da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80091d6:	2300      	movs	r3, #0
 80091d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091da:	f001 fd53 	bl	800ac84 <vPortExitCritical>

	return xReturn;
 80091de:	68fb      	ldr	r3, [r7, #12]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091f2:	2300      	movs	r3, #0
 80091f4:	60fb      	str	r3, [r7, #12]
 80091f6:	e014      	b.n	8009222 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80091f8:	4a0f      	ldr	r2, [pc, #60]	; (8009238 <vQueueAddToRegistry+0x50>)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10b      	bne.n	800921c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009204:	490c      	ldr	r1, [pc, #48]	; (8009238 <vQueueAddToRegistry+0x50>)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800920e:	4a0a      	ldr	r2, [pc, #40]	; (8009238 <vQueueAddToRegistry+0x50>)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	00db      	lsls	r3, r3, #3
 8009214:	4413      	add	r3, r2
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800921a:	e006      	b.n	800922a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3301      	adds	r3, #1
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2b07      	cmp	r3, #7
 8009226:	d9e7      	bls.n	80091f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009228:	bf00      	nop
 800922a:	bf00      	nop
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	20002d28 	.word	0x20002d28

0800923c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800924c:	f001 fcea 	bl	800ac24 <vPortEnterCritical>
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009256:	b25b      	sxtb	r3, r3
 8009258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925c:	d103      	bne.n	8009266 <vQueueWaitForMessageRestricted+0x2a>
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800926c:	b25b      	sxtb	r3, r3
 800926e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009272:	d103      	bne.n	800927c <vQueueWaitForMessageRestricted+0x40>
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800927c:	f001 fd02 	bl	800ac84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009284:	2b00      	cmp	r3, #0
 8009286:	d106      	bne.n	8009296 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	3324      	adds	r3, #36	; 0x24
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	68b9      	ldr	r1, [r7, #8]
 8009290:	4618      	mov	r0, r3
 8009292:	f000 fc83 	bl	8009b9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009296:	6978      	ldr	r0, [r7, #20]
 8009298:	f7ff ff26 	bl	80090e8 <prvUnlockQueue>
	}
 800929c:	bf00      	nop
 800929e:	3718      	adds	r7, #24
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b08e      	sub	sp, #56	; 0x38
 80092a8:	af04      	add	r7, sp, #16
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
 80092b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80092b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10a      	bne.n	80092ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80092b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	623b      	str	r3, [r7, #32]
}
 80092ca:	bf00      	nop
 80092cc:	e7fe      	b.n	80092cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80092ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10a      	bne.n	80092ea <xTaskCreateStatic+0x46>
	__asm volatile
 80092d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	61fb      	str	r3, [r7, #28]
}
 80092e6:	bf00      	nop
 80092e8:	e7fe      	b.n	80092e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80092ea:	23ac      	movs	r3, #172	; 0xac
 80092ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	2bac      	cmp	r3, #172	; 0xac
 80092f2:	d00a      	beq.n	800930a <xTaskCreateStatic+0x66>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	61bb      	str	r3, [r7, #24]
}
 8009306:	bf00      	nop
 8009308:	e7fe      	b.n	8009308 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800930a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800930c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930e:	2b00      	cmp	r3, #0
 8009310:	d01e      	beq.n	8009350 <xTaskCreateStatic+0xac>
 8009312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009314:	2b00      	cmp	r3, #0
 8009316:	d01b      	beq.n	8009350 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009320:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009324:	2202      	movs	r2, #2
 8009326:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800932a:	2300      	movs	r3, #0
 800932c:	9303      	str	r3, [sp, #12]
 800932e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009330:	9302      	str	r3, [sp, #8]
 8009332:	f107 0314 	add.w	r3, r7, #20
 8009336:	9301      	str	r3, [sp, #4]
 8009338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	68b9      	ldr	r1, [r7, #8]
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f000 f850 	bl	80093e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009348:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800934a:	f000 f8f7 	bl	800953c <prvAddNewTaskToReadyList>
 800934e:	e001      	b.n	8009354 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009350:	2300      	movs	r3, #0
 8009352:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009354:	697b      	ldr	r3, [r7, #20]
	}
 8009356:	4618      	mov	r0, r3
 8009358:	3728      	adds	r7, #40	; 0x28
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800935e:	b580      	push	{r7, lr}
 8009360:	b08c      	sub	sp, #48	; 0x30
 8009362:	af04      	add	r7, sp, #16
 8009364:	60f8      	str	r0, [r7, #12]
 8009366:	60b9      	str	r1, [r7, #8]
 8009368:	603b      	str	r3, [r7, #0]
 800936a:	4613      	mov	r3, r2
 800936c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800936e:	88fb      	ldrh	r3, [r7, #6]
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4618      	mov	r0, r3
 8009374:	f001 fd78 	bl	800ae68 <pvPortMalloc>
 8009378:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00e      	beq.n	800939e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009380:	20ac      	movs	r0, #172	; 0xac
 8009382:	f001 fd71 	bl	800ae68 <pvPortMalloc>
 8009386:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d003      	beq.n	8009396 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	631a      	str	r2, [r3, #48]	; 0x30
 8009394:	e005      	b.n	80093a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009396:	6978      	ldr	r0, [r7, #20]
 8009398:	f001 fe32 	bl	800b000 <vPortFree>
 800939c:	e001      	b.n	80093a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800939e:	2300      	movs	r3, #0
 80093a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d017      	beq.n	80093d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80093b0:	88fa      	ldrh	r2, [r7, #6]
 80093b2:	2300      	movs	r3, #0
 80093b4:	9303      	str	r3, [sp, #12]
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	9302      	str	r3, [sp, #8]
 80093ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093bc:	9301      	str	r3, [sp, #4]
 80093be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	68b9      	ldr	r1, [r7, #8]
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 f80e 	bl	80093e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093cc:	69f8      	ldr	r0, [r7, #28]
 80093ce:	f000 f8b5 	bl	800953c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80093d2:	2301      	movs	r3, #1
 80093d4:	61bb      	str	r3, [r7, #24]
 80093d6:	e002      	b.n	80093de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80093d8:	f04f 33ff 	mov.w	r3, #4294967295
 80093dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80093de:	69bb      	ldr	r3, [r7, #24]
	}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3720      	adds	r7, #32
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b088      	sub	sp, #32
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
 80093f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	461a      	mov	r2, r3
 8009400:	21a5      	movs	r1, #165	; 0xa5
 8009402:	f002 f88d 	bl	800b520 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009410:	3b01      	subs	r3, #1
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4413      	add	r3, r2
 8009416:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	f023 0307 	bic.w	r3, r3, #7
 800941e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	f003 0307 	and.w	r3, r3, #7
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00a      	beq.n	8009440 <prvInitialiseNewTask+0x58>
	__asm volatile
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	617b      	str	r3, [r7, #20]
}
 800943c:	bf00      	nop
 800943e:	e7fe      	b.n	800943e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d01f      	beq.n	8009486 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009446:	2300      	movs	r3, #0
 8009448:	61fb      	str	r3, [r7, #28]
 800944a:	e012      	b.n	8009472 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	4413      	add	r3, r2
 8009452:	7819      	ldrb	r1, [r3, #0]
 8009454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	4413      	add	r3, r2
 800945a:	3334      	adds	r3, #52	; 0x34
 800945c:	460a      	mov	r2, r1
 800945e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	4413      	add	r3, r2
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d006      	beq.n	800947a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	3301      	adds	r3, #1
 8009470:	61fb      	str	r3, [r7, #28]
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	2b0f      	cmp	r3, #15
 8009476:	d9e9      	bls.n	800944c <prvInitialiseNewTask+0x64>
 8009478:	e000      	b.n	800947c <prvInitialiseNewTask+0x94>
			{
				break;
 800947a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800947c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009484:	e003      	b.n	800948e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	2200      	movs	r2, #0
 800948a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800948e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009490:	2b37      	cmp	r3, #55	; 0x37
 8009492:	d901      	bls.n	8009498 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009494:	2337      	movs	r3, #55	; 0x37
 8009496:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800949c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80094a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a6:	2200      	movs	r2, #0
 80094a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80094aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ac:	3304      	adds	r3, #4
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fe ff8e 	bl	80083d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80094b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b6:	3318      	adds	r3, #24
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fe ff89 	bl	80083d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80094be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80094ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80094d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d6:	2200      	movs	r2, #0
 80094d8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80094da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094dc:	2200      	movs	r2, #0
 80094de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80094e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80094ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ec:	3358      	adds	r3, #88	; 0x58
 80094ee:	224c      	movs	r2, #76	; 0x4c
 80094f0:	2100      	movs	r1, #0
 80094f2:	4618      	mov	r0, r3
 80094f4:	f002 f814 	bl	800b520 <memset>
 80094f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fa:	4a0d      	ldr	r2, [pc, #52]	; (8009530 <prvInitialiseNewTask+0x148>)
 80094fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80094fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009500:	4a0c      	ldr	r2, [pc, #48]	; (8009534 <prvInitialiseNewTask+0x14c>)
 8009502:	661a      	str	r2, [r3, #96]	; 0x60
 8009504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009506:	4a0c      	ldr	r2, [pc, #48]	; (8009538 <prvInitialiseNewTask+0x150>)
 8009508:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	68f9      	ldr	r1, [r7, #12]
 800950e:	69b8      	ldr	r0, [r7, #24]
 8009510:	f001 fa5e 	bl	800a9d0 <pxPortInitialiseStack>
 8009514:	4602      	mov	r2, r0
 8009516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009518:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800951a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009526:	bf00      	nop
 8009528:	3720      	adds	r7, #32
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	20003f84 	.word	0x20003f84
 8009534:	20003fec 	.word	0x20003fec
 8009538:	20004054 	.word	0x20004054

0800953c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009544:	f001 fb6e 	bl	800ac24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009548:	4b2d      	ldr	r3, [pc, #180]	; (8009600 <prvAddNewTaskToReadyList+0xc4>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	4a2c      	ldr	r2, [pc, #176]	; (8009600 <prvAddNewTaskToReadyList+0xc4>)
 8009550:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009552:	4b2c      	ldr	r3, [pc, #176]	; (8009604 <prvAddNewTaskToReadyList+0xc8>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d109      	bne.n	800956e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800955a:	4a2a      	ldr	r2, [pc, #168]	; (8009604 <prvAddNewTaskToReadyList+0xc8>)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009560:	4b27      	ldr	r3, [pc, #156]	; (8009600 <prvAddNewTaskToReadyList+0xc4>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d110      	bne.n	800958a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009568:	f000 fc44 	bl	8009df4 <prvInitialiseTaskLists>
 800956c:	e00d      	b.n	800958a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800956e:	4b26      	ldr	r3, [pc, #152]	; (8009608 <prvAddNewTaskToReadyList+0xcc>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d109      	bne.n	800958a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009576:	4b23      	ldr	r3, [pc, #140]	; (8009604 <prvAddNewTaskToReadyList+0xc8>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009580:	429a      	cmp	r2, r3
 8009582:	d802      	bhi.n	800958a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009584:	4a1f      	ldr	r2, [pc, #124]	; (8009604 <prvAddNewTaskToReadyList+0xc8>)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800958a:	4b20      	ldr	r3, [pc, #128]	; (800960c <prvAddNewTaskToReadyList+0xd0>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3301      	adds	r3, #1
 8009590:	4a1e      	ldr	r2, [pc, #120]	; (800960c <prvAddNewTaskToReadyList+0xd0>)
 8009592:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009594:	4b1d      	ldr	r3, [pc, #116]	; (800960c <prvAddNewTaskToReadyList+0xd0>)
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a0:	4b1b      	ldr	r3, [pc, #108]	; (8009610 <prvAddNewTaskToReadyList+0xd4>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d903      	bls.n	80095b0 <prvAddNewTaskToReadyList+0x74>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ac:	4a18      	ldr	r2, [pc, #96]	; (8009610 <prvAddNewTaskToReadyList+0xd4>)
 80095ae:	6013      	str	r3, [r2, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b4:	4613      	mov	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4a15      	ldr	r2, [pc, #84]	; (8009614 <prvAddNewTaskToReadyList+0xd8>)
 80095be:	441a      	add	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	3304      	adds	r3, #4
 80095c4:	4619      	mov	r1, r3
 80095c6:	4610      	mov	r0, r2
 80095c8:	f7fe ff0f 	bl	80083ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80095cc:	f001 fb5a 	bl	800ac84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80095d0:	4b0d      	ldr	r3, [pc, #52]	; (8009608 <prvAddNewTaskToReadyList+0xcc>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00e      	beq.n	80095f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80095d8:	4b0a      	ldr	r3, [pc, #40]	; (8009604 <prvAddNewTaskToReadyList+0xc8>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d207      	bcs.n	80095f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80095e6:	4b0c      	ldr	r3, [pc, #48]	; (8009618 <prvAddNewTaskToReadyList+0xdc>)
 80095e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095f6:	bf00      	nop
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	2000323c 	.word	0x2000323c
 8009604:	20002d68 	.word	0x20002d68
 8009608:	20003248 	.word	0x20003248
 800960c:	20003258 	.word	0x20003258
 8009610:	20003244 	.word	0x20003244
 8009614:	20002d6c 	.word	0x20002d6c
 8009618:	e000ed04 	.word	0xe000ed04

0800961c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009624:	2300      	movs	r3, #0
 8009626:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d017      	beq.n	800965e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800962e:	4b13      	ldr	r3, [pc, #76]	; (800967c <vTaskDelay+0x60>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00a      	beq.n	800964c <vTaskDelay+0x30>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	60bb      	str	r3, [r7, #8]
}
 8009648:	bf00      	nop
 800964a:	e7fe      	b.n	800964a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800964c:	f000 f88c 	bl	8009768 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009650:	2100      	movs	r1, #0
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fe1a 	bl	800a28c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009658:	f000 f894 	bl	8009784 <xTaskResumeAll>
 800965c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d107      	bne.n	8009674 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009664:	4b06      	ldr	r3, [pc, #24]	; (8009680 <vTaskDelay+0x64>)
 8009666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800966a:	601a      	str	r2, [r3, #0]
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009674:	bf00      	nop
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	20003264 	.word	0x20003264
 8009680:	e000ed04 	.word	0xe000ed04

08009684 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b08a      	sub	sp, #40	; 0x28
 8009688:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800968a:	2300      	movs	r3, #0
 800968c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800968e:	2300      	movs	r3, #0
 8009690:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009692:	463a      	mov	r2, r7
 8009694:	1d39      	adds	r1, r7, #4
 8009696:	f107 0308 	add.w	r3, r7, #8
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe fe44 	bl	8008328 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	9202      	str	r2, [sp, #8]
 80096a8:	9301      	str	r3, [sp, #4]
 80096aa:	2300      	movs	r3, #0
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	2300      	movs	r3, #0
 80096b0:	460a      	mov	r2, r1
 80096b2:	4925      	ldr	r1, [pc, #148]	; (8009748 <vTaskStartScheduler+0xc4>)
 80096b4:	4825      	ldr	r0, [pc, #148]	; (800974c <vTaskStartScheduler+0xc8>)
 80096b6:	f7ff fdf5 	bl	80092a4 <xTaskCreateStatic>
 80096ba:	4603      	mov	r3, r0
 80096bc:	4a24      	ldr	r2, [pc, #144]	; (8009750 <vTaskStartScheduler+0xcc>)
 80096be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096c0:	4b23      	ldr	r3, [pc, #140]	; (8009750 <vTaskStartScheduler+0xcc>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d002      	beq.n	80096ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096c8:	2301      	movs	r3, #1
 80096ca:	617b      	str	r3, [r7, #20]
 80096cc:	e001      	b.n	80096d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096ce:	2300      	movs	r3, #0
 80096d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d102      	bne.n	80096de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80096d8:	f000 fe2c 	bl	800a334 <xTimerCreateTimerTask>
 80096dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d11d      	bne.n	8009720 <vTaskStartScheduler+0x9c>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	613b      	str	r3, [r7, #16]
}
 80096f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096f8:	4b16      	ldr	r3, [pc, #88]	; (8009754 <vTaskStartScheduler+0xd0>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	3358      	adds	r3, #88	; 0x58
 80096fe:	4a16      	ldr	r2, [pc, #88]	; (8009758 <vTaskStartScheduler+0xd4>)
 8009700:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009702:	4b16      	ldr	r3, [pc, #88]	; (800975c <vTaskStartScheduler+0xd8>)
 8009704:	f04f 32ff 	mov.w	r2, #4294967295
 8009708:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800970a:	4b15      	ldr	r3, [pc, #84]	; (8009760 <vTaskStartScheduler+0xdc>)
 800970c:	2201      	movs	r2, #1
 800970e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009710:	4b14      	ldr	r3, [pc, #80]	; (8009764 <vTaskStartScheduler+0xe0>)
 8009712:	2200      	movs	r2, #0
 8009714:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009716:	f7f7 fb1f 	bl	8000d58 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800971a:	f001 f9e1 	bl	800aae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800971e:	e00e      	b.n	800973e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009726:	d10a      	bne.n	800973e <vTaskStartScheduler+0xba>
	__asm volatile
 8009728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	60fb      	str	r3, [r7, #12]
}
 800973a:	bf00      	nop
 800973c:	e7fe      	b.n	800973c <vTaskStartScheduler+0xb8>
}
 800973e:	bf00      	nop
 8009740:	3718      	adds	r7, #24
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	0800c160 	.word	0x0800c160
 800974c:	08009dc5 	.word	0x08009dc5
 8009750:	20003260 	.word	0x20003260
 8009754:	20002d68 	.word	0x20002d68
 8009758:	200003ac 	.word	0x200003ac
 800975c:	2000325c 	.word	0x2000325c
 8009760:	20003248 	.word	0x20003248
 8009764:	20003240 	.word	0x20003240

08009768 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009768:	b480      	push	{r7}
 800976a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800976c:	4b04      	ldr	r3, [pc, #16]	; (8009780 <vTaskSuspendAll+0x18>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	3301      	adds	r3, #1
 8009772:	4a03      	ldr	r2, [pc, #12]	; (8009780 <vTaskSuspendAll+0x18>)
 8009774:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009776:	bf00      	nop
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr
 8009780:	20003264 	.word	0x20003264

08009784 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800978a:	2300      	movs	r3, #0
 800978c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800978e:	2300      	movs	r3, #0
 8009790:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009792:	4b42      	ldr	r3, [pc, #264]	; (800989c <xTaskResumeAll+0x118>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10a      	bne.n	80097b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800979a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	603b      	str	r3, [r7, #0]
}
 80097ac:	bf00      	nop
 80097ae:	e7fe      	b.n	80097ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097b0:	f001 fa38 	bl	800ac24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097b4:	4b39      	ldr	r3, [pc, #228]	; (800989c <xTaskResumeAll+0x118>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3b01      	subs	r3, #1
 80097ba:	4a38      	ldr	r2, [pc, #224]	; (800989c <xTaskResumeAll+0x118>)
 80097bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097be:	4b37      	ldr	r3, [pc, #220]	; (800989c <xTaskResumeAll+0x118>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d162      	bne.n	800988c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097c6:	4b36      	ldr	r3, [pc, #216]	; (80098a0 <xTaskResumeAll+0x11c>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d05e      	beq.n	800988c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097ce:	e02f      	b.n	8009830 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097d0:	4b34      	ldr	r3, [pc, #208]	; (80098a4 <xTaskResumeAll+0x120>)
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	3318      	adds	r3, #24
 80097dc:	4618      	mov	r0, r3
 80097de:	f7fe fe61 	bl	80084a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3304      	adds	r3, #4
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fe fe5c 	bl	80084a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f0:	4b2d      	ldr	r3, [pc, #180]	; (80098a8 <xTaskResumeAll+0x124>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d903      	bls.n	8009800 <xTaskResumeAll+0x7c>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fc:	4a2a      	ldr	r2, [pc, #168]	; (80098a8 <xTaskResumeAll+0x124>)
 80097fe:	6013      	str	r3, [r2, #0]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009804:	4613      	mov	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4413      	add	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4a27      	ldr	r2, [pc, #156]	; (80098ac <xTaskResumeAll+0x128>)
 800980e:	441a      	add	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	3304      	adds	r3, #4
 8009814:	4619      	mov	r1, r3
 8009816:	4610      	mov	r0, r2
 8009818:	f7fe fde7 	bl	80083ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009820:	4b23      	ldr	r3, [pc, #140]	; (80098b0 <xTaskResumeAll+0x12c>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009826:	429a      	cmp	r2, r3
 8009828:	d302      	bcc.n	8009830 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800982a:	4b22      	ldr	r3, [pc, #136]	; (80098b4 <xTaskResumeAll+0x130>)
 800982c:	2201      	movs	r2, #1
 800982e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009830:	4b1c      	ldr	r3, [pc, #112]	; (80098a4 <xTaskResumeAll+0x120>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1cb      	bne.n	80097d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800983e:	f000 fb7b 	bl	8009f38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009842:	4b1d      	ldr	r3, [pc, #116]	; (80098b8 <xTaskResumeAll+0x134>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d010      	beq.n	8009870 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800984e:	f000 f847 	bl	80098e0 <xTaskIncrementTick>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d002      	beq.n	800985e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009858:	4b16      	ldr	r3, [pc, #88]	; (80098b4 <xTaskResumeAll+0x130>)
 800985a:	2201      	movs	r2, #1
 800985c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	3b01      	subs	r3, #1
 8009862:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1f1      	bne.n	800984e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800986a:	4b13      	ldr	r3, [pc, #76]	; (80098b8 <xTaskResumeAll+0x134>)
 800986c:	2200      	movs	r2, #0
 800986e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009870:	4b10      	ldr	r3, [pc, #64]	; (80098b4 <xTaskResumeAll+0x130>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d009      	beq.n	800988c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009878:	2301      	movs	r3, #1
 800987a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800987c:	4b0f      	ldr	r3, [pc, #60]	; (80098bc <xTaskResumeAll+0x138>)
 800987e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009882:	601a      	str	r2, [r3, #0]
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800988c:	f001 f9fa 	bl	800ac84 <vPortExitCritical>

	return xAlreadyYielded;
 8009890:	68bb      	ldr	r3, [r7, #8]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	20003264 	.word	0x20003264
 80098a0:	2000323c 	.word	0x2000323c
 80098a4:	200031fc 	.word	0x200031fc
 80098a8:	20003244 	.word	0x20003244
 80098ac:	20002d6c 	.word	0x20002d6c
 80098b0:	20002d68 	.word	0x20002d68
 80098b4:	20003250 	.word	0x20003250
 80098b8:	2000324c 	.word	0x2000324c
 80098bc:	e000ed04 	.word	0xe000ed04

080098c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098c6:	4b05      	ldr	r3, [pc, #20]	; (80098dc <xTaskGetTickCount+0x1c>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80098cc:	687b      	ldr	r3, [r7, #4]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	370c      	adds	r7, #12
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	20003240 	.word	0x20003240

080098e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80098e6:	2300      	movs	r3, #0
 80098e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098ea:	4b4f      	ldr	r3, [pc, #316]	; (8009a28 <xTaskIncrementTick+0x148>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f040 808f 	bne.w	8009a12 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098f4:	4b4d      	ldr	r3, [pc, #308]	; (8009a2c <xTaskIncrementTick+0x14c>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	3301      	adds	r3, #1
 80098fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098fc:	4a4b      	ldr	r2, [pc, #300]	; (8009a2c <xTaskIncrementTick+0x14c>)
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d120      	bne.n	800994a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009908:	4b49      	ldr	r3, [pc, #292]	; (8009a30 <xTaskIncrementTick+0x150>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00a      	beq.n	8009928 <xTaskIncrementTick+0x48>
	__asm volatile
 8009912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009916:	f383 8811 	msr	BASEPRI, r3
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	603b      	str	r3, [r7, #0]
}
 8009924:	bf00      	nop
 8009926:	e7fe      	b.n	8009926 <xTaskIncrementTick+0x46>
 8009928:	4b41      	ldr	r3, [pc, #260]	; (8009a30 <xTaskIncrementTick+0x150>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	60fb      	str	r3, [r7, #12]
 800992e:	4b41      	ldr	r3, [pc, #260]	; (8009a34 <xTaskIncrementTick+0x154>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a3f      	ldr	r2, [pc, #252]	; (8009a30 <xTaskIncrementTick+0x150>)
 8009934:	6013      	str	r3, [r2, #0]
 8009936:	4a3f      	ldr	r2, [pc, #252]	; (8009a34 <xTaskIncrementTick+0x154>)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6013      	str	r3, [r2, #0]
 800993c:	4b3e      	ldr	r3, [pc, #248]	; (8009a38 <xTaskIncrementTick+0x158>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	3301      	adds	r3, #1
 8009942:	4a3d      	ldr	r2, [pc, #244]	; (8009a38 <xTaskIncrementTick+0x158>)
 8009944:	6013      	str	r3, [r2, #0]
 8009946:	f000 faf7 	bl	8009f38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800994a:	4b3c      	ldr	r3, [pc, #240]	; (8009a3c <xTaskIncrementTick+0x15c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	429a      	cmp	r2, r3
 8009952:	d349      	bcc.n	80099e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009954:	4b36      	ldr	r3, [pc, #216]	; (8009a30 <xTaskIncrementTick+0x150>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d104      	bne.n	8009968 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800995e:	4b37      	ldr	r3, [pc, #220]	; (8009a3c <xTaskIncrementTick+0x15c>)
 8009960:	f04f 32ff 	mov.w	r2, #4294967295
 8009964:	601a      	str	r2, [r3, #0]
					break;
 8009966:	e03f      	b.n	80099e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009968:	4b31      	ldr	r3, [pc, #196]	; (8009a30 <xTaskIncrementTick+0x150>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009978:	693a      	ldr	r2, [r7, #16]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	429a      	cmp	r2, r3
 800997e:	d203      	bcs.n	8009988 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009980:	4a2e      	ldr	r2, [pc, #184]	; (8009a3c <xTaskIncrementTick+0x15c>)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009986:	e02f      	b.n	80099e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	3304      	adds	r3, #4
 800998c:	4618      	mov	r0, r3
 800998e:	f7fe fd89 	bl	80084a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009996:	2b00      	cmp	r3, #0
 8009998:	d004      	beq.n	80099a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	3318      	adds	r3, #24
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fe fd80 	bl	80084a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a8:	4b25      	ldr	r3, [pc, #148]	; (8009a40 <xTaskIncrementTick+0x160>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d903      	bls.n	80099b8 <xTaskIncrementTick+0xd8>
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b4:	4a22      	ldr	r2, [pc, #136]	; (8009a40 <xTaskIncrementTick+0x160>)
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099bc:	4613      	mov	r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4413      	add	r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	4a1f      	ldr	r2, [pc, #124]	; (8009a44 <xTaskIncrementTick+0x164>)
 80099c6:	441a      	add	r2, r3
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	3304      	adds	r3, #4
 80099cc:	4619      	mov	r1, r3
 80099ce:	4610      	mov	r0, r2
 80099d0:	f7fe fd0b 	bl	80083ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099d8:	4b1b      	ldr	r3, [pc, #108]	; (8009a48 <xTaskIncrementTick+0x168>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099de:	429a      	cmp	r2, r3
 80099e0:	d3b8      	bcc.n	8009954 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80099e2:	2301      	movs	r3, #1
 80099e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099e6:	e7b5      	b.n	8009954 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099e8:	4b17      	ldr	r3, [pc, #92]	; (8009a48 <xTaskIncrementTick+0x168>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ee:	4915      	ldr	r1, [pc, #84]	; (8009a44 <xTaskIncrementTick+0x164>)
 80099f0:	4613      	mov	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4413      	add	r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	440b      	add	r3, r1
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d901      	bls.n	8009a04 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009a00:	2301      	movs	r3, #1
 8009a02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009a04:	4b11      	ldr	r3, [pc, #68]	; (8009a4c <xTaskIncrementTick+0x16c>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d007      	beq.n	8009a1c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	617b      	str	r3, [r7, #20]
 8009a10:	e004      	b.n	8009a1c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009a12:	4b0f      	ldr	r3, [pc, #60]	; (8009a50 <xTaskIncrementTick+0x170>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	3301      	adds	r3, #1
 8009a18:	4a0d      	ldr	r2, [pc, #52]	; (8009a50 <xTaskIncrementTick+0x170>)
 8009a1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a1c:	697b      	ldr	r3, [r7, #20]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3718      	adds	r7, #24
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	20003264 	.word	0x20003264
 8009a2c:	20003240 	.word	0x20003240
 8009a30:	200031f4 	.word	0x200031f4
 8009a34:	200031f8 	.word	0x200031f8
 8009a38:	20003254 	.word	0x20003254
 8009a3c:	2000325c 	.word	0x2000325c
 8009a40:	20003244 	.word	0x20003244
 8009a44:	20002d6c 	.word	0x20002d6c
 8009a48:	20002d68 	.word	0x20002d68
 8009a4c:	20003250 	.word	0x20003250
 8009a50:	2000324c 	.word	0x2000324c

08009a54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a5a:	4b36      	ldr	r3, [pc, #216]	; (8009b34 <vTaskSwitchContext+0xe0>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d003      	beq.n	8009a6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a62:	4b35      	ldr	r3, [pc, #212]	; (8009b38 <vTaskSwitchContext+0xe4>)
 8009a64:	2201      	movs	r2, #1
 8009a66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a68:	e05f      	b.n	8009b2a <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8009a6a:	4b33      	ldr	r3, [pc, #204]	; (8009b38 <vTaskSwitchContext+0xe4>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009a70:	f7f7 f979 	bl	8000d66 <getRunTimeCounterValue>
 8009a74:	4603      	mov	r3, r0
 8009a76:	4a31      	ldr	r2, [pc, #196]	; (8009b3c <vTaskSwitchContext+0xe8>)
 8009a78:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009a7a:	4b30      	ldr	r3, [pc, #192]	; (8009b3c <vTaskSwitchContext+0xe8>)
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	4b30      	ldr	r3, [pc, #192]	; (8009b40 <vTaskSwitchContext+0xec>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d909      	bls.n	8009a9a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009a86:	4b2f      	ldr	r3, [pc, #188]	; (8009b44 <vTaskSwitchContext+0xf0>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009a8c:	4a2b      	ldr	r2, [pc, #172]	; (8009b3c <vTaskSwitchContext+0xe8>)
 8009a8e:	6810      	ldr	r0, [r2, #0]
 8009a90:	4a2b      	ldr	r2, [pc, #172]	; (8009b40 <vTaskSwitchContext+0xec>)
 8009a92:	6812      	ldr	r2, [r2, #0]
 8009a94:	1a82      	subs	r2, r0, r2
 8009a96:	440a      	add	r2, r1
 8009a98:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009a9a:	4b28      	ldr	r3, [pc, #160]	; (8009b3c <vTaskSwitchContext+0xe8>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a28      	ldr	r2, [pc, #160]	; (8009b40 <vTaskSwitchContext+0xec>)
 8009aa0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aa2:	4b29      	ldr	r3, [pc, #164]	; (8009b48 <vTaskSwitchContext+0xf4>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	60fb      	str	r3, [r7, #12]
 8009aa8:	e010      	b.n	8009acc <vTaskSwitchContext+0x78>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10a      	bne.n	8009ac6 <vTaskSwitchContext+0x72>
	__asm volatile
 8009ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab4:	f383 8811 	msr	BASEPRI, r3
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	607b      	str	r3, [r7, #4]
}
 8009ac2:	bf00      	nop
 8009ac4:	e7fe      	b.n	8009ac4 <vTaskSwitchContext+0x70>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	3b01      	subs	r3, #1
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	491f      	ldr	r1, [pc, #124]	; (8009b4c <vTaskSwitchContext+0xf8>)
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4413      	add	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	440b      	add	r3, r1
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d0e4      	beq.n	8009aaa <vTaskSwitchContext+0x56>
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4413      	add	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4a18      	ldr	r2, [pc, #96]	; (8009b4c <vTaskSwitchContext+0xf8>)
 8009aec:	4413      	add	r3, r2
 8009aee:	60bb      	str	r3, [r7, #8]
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	605a      	str	r2, [r3, #4]
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	685a      	ldr	r2, [r3, #4]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	3308      	adds	r3, #8
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d104      	bne.n	8009b10 <vTaskSwitchContext+0xbc>
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	605a      	str	r2, [r3, #4]
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	4a0b      	ldr	r2, [pc, #44]	; (8009b44 <vTaskSwitchContext+0xf0>)
 8009b18:	6013      	str	r3, [r2, #0]
 8009b1a:	4a0b      	ldr	r2, [pc, #44]	; (8009b48 <vTaskSwitchContext+0xf4>)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b20:	4b08      	ldr	r3, [pc, #32]	; (8009b44 <vTaskSwitchContext+0xf0>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3358      	adds	r3, #88	; 0x58
 8009b26:	4a0a      	ldr	r2, [pc, #40]	; (8009b50 <vTaskSwitchContext+0xfc>)
 8009b28:	6013      	str	r3, [r2, #0]
}
 8009b2a:	bf00      	nop
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	20003264 	.word	0x20003264
 8009b38:	20003250 	.word	0x20003250
 8009b3c:	2000326c 	.word	0x2000326c
 8009b40:	20003268 	.word	0x20003268
 8009b44:	20002d68 	.word	0x20002d68
 8009b48:	20003244 	.word	0x20003244
 8009b4c:	20002d6c 	.word	0x20002d6c
 8009b50:	200003ac 	.word	0x200003ac

08009b54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d10a      	bne.n	8009b7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b68:	f383 8811 	msr	BASEPRI, r3
 8009b6c:	f3bf 8f6f 	isb	sy
 8009b70:	f3bf 8f4f 	dsb	sy
 8009b74:	60fb      	str	r3, [r7, #12]
}
 8009b76:	bf00      	nop
 8009b78:	e7fe      	b.n	8009b78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b7a:	4b07      	ldr	r3, [pc, #28]	; (8009b98 <vTaskPlaceOnEventList+0x44>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	3318      	adds	r3, #24
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7fe fc55 	bl	8008432 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b88:	2101      	movs	r1, #1
 8009b8a:	6838      	ldr	r0, [r7, #0]
 8009b8c:	f000 fb7e 	bl	800a28c <prvAddCurrentTaskToDelayedList>
}
 8009b90:	bf00      	nop
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	20002d68 	.word	0x20002d68

08009b9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10a      	bne.n	8009bc4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	617b      	str	r3, [r7, #20]
}
 8009bc0:	bf00      	nop
 8009bc2:	e7fe      	b.n	8009bc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bc4:	4b0a      	ldr	r3, [pc, #40]	; (8009bf0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	3318      	adds	r3, #24
 8009bca:	4619      	mov	r1, r3
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f7fe fc0c 	bl	80083ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d002      	beq.n	8009bde <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bdc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009bde:	6879      	ldr	r1, [r7, #4]
 8009be0:	68b8      	ldr	r0, [r7, #8]
 8009be2:	f000 fb53 	bl	800a28c <prvAddCurrentTaskToDelayedList>
	}
 8009be6:	bf00      	nop
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	20002d68 	.word	0x20002d68

08009bf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10a      	bne.n	8009c20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0e:	f383 8811 	msr	BASEPRI, r3
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	60fb      	str	r3, [r7, #12]
}
 8009c1c:	bf00      	nop
 8009c1e:	e7fe      	b.n	8009c1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	3318      	adds	r3, #24
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7fe fc3d 	bl	80084a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c2a:	4b1e      	ldr	r3, [pc, #120]	; (8009ca4 <xTaskRemoveFromEventList+0xb0>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d11d      	bne.n	8009c6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	3304      	adds	r3, #4
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fe fc34 	bl	80084a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c40:	4b19      	ldr	r3, [pc, #100]	; (8009ca8 <xTaskRemoveFromEventList+0xb4>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d903      	bls.n	8009c50 <xTaskRemoveFromEventList+0x5c>
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4c:	4a16      	ldr	r2, [pc, #88]	; (8009ca8 <xTaskRemoveFromEventList+0xb4>)
 8009c4e:	6013      	str	r3, [r2, #0]
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c54:	4613      	mov	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	4413      	add	r3, r2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4a13      	ldr	r2, [pc, #76]	; (8009cac <xTaskRemoveFromEventList+0xb8>)
 8009c5e:	441a      	add	r2, r3
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	3304      	adds	r3, #4
 8009c64:	4619      	mov	r1, r3
 8009c66:	4610      	mov	r0, r2
 8009c68:	f7fe fbbf 	bl	80083ea <vListInsertEnd>
 8009c6c:	e005      	b.n	8009c7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	3318      	adds	r3, #24
 8009c72:	4619      	mov	r1, r3
 8009c74:	480e      	ldr	r0, [pc, #56]	; (8009cb0 <xTaskRemoveFromEventList+0xbc>)
 8009c76:	f7fe fbb8 	bl	80083ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c7e:	4b0d      	ldr	r3, [pc, #52]	; (8009cb4 <xTaskRemoveFromEventList+0xc0>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d905      	bls.n	8009c94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c8c:	4b0a      	ldr	r3, [pc, #40]	; (8009cb8 <xTaskRemoveFromEventList+0xc4>)
 8009c8e:	2201      	movs	r2, #1
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	e001      	b.n	8009c98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009c94:	2300      	movs	r3, #0
 8009c96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c98:	697b      	ldr	r3, [r7, #20]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3718      	adds	r7, #24
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	20003264 	.word	0x20003264
 8009ca8:	20003244 	.word	0x20003244
 8009cac:	20002d6c 	.word	0x20002d6c
 8009cb0:	200031fc 	.word	0x200031fc
 8009cb4:	20002d68 	.word	0x20002d68
 8009cb8:	20003250 	.word	0x20003250

08009cbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009cc4:	4b06      	ldr	r3, [pc, #24]	; (8009ce0 <vTaskInternalSetTimeOutState+0x24>)
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ccc:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <vTaskInternalSetTimeOutState+0x28>)
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	605a      	str	r2, [r3, #4]
}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr
 8009ce0:	20003254 	.word	0x20003254
 8009ce4:	20003240 	.word	0x20003240

08009ce8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b088      	sub	sp, #32
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10a      	bne.n	8009d0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfc:	f383 8811 	msr	BASEPRI, r3
 8009d00:	f3bf 8f6f 	isb	sy
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	613b      	str	r3, [r7, #16]
}
 8009d0a:	bf00      	nop
 8009d0c:	e7fe      	b.n	8009d0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10a      	bne.n	8009d2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	60fb      	str	r3, [r7, #12]
}
 8009d26:	bf00      	nop
 8009d28:	e7fe      	b.n	8009d28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009d2a:	f000 ff7b 	bl	800ac24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d2e:	4b1d      	ldr	r3, [pc, #116]	; (8009da4 <xTaskCheckForTimeOut+0xbc>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	69ba      	ldr	r2, [r7, #24]
 8009d3a:	1ad3      	subs	r3, r2, r3
 8009d3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d46:	d102      	bne.n	8009d4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	61fb      	str	r3, [r7, #28]
 8009d4c:	e023      	b.n	8009d96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	4b15      	ldr	r3, [pc, #84]	; (8009da8 <xTaskCheckForTimeOut+0xc0>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d007      	beq.n	8009d6a <xTaskCheckForTimeOut+0x82>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	69ba      	ldr	r2, [r7, #24]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d302      	bcc.n	8009d6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d64:	2301      	movs	r3, #1
 8009d66:	61fb      	str	r3, [r7, #28]
 8009d68:	e015      	b.n	8009d96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d20b      	bcs.n	8009d8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	1ad2      	subs	r2, r2, r3
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7ff ff9b 	bl	8009cbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d86:	2300      	movs	r3, #0
 8009d88:	61fb      	str	r3, [r7, #28]
 8009d8a:	e004      	b.n	8009d96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d92:	2301      	movs	r3, #1
 8009d94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d96:	f000 ff75 	bl	800ac84 <vPortExitCritical>

	return xReturn;
 8009d9a:	69fb      	ldr	r3, [r7, #28]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3720      	adds	r7, #32
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	20003240 	.word	0x20003240
 8009da8:	20003254 	.word	0x20003254

08009dac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009dac:	b480      	push	{r7}
 8009dae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009db0:	4b03      	ldr	r3, [pc, #12]	; (8009dc0 <vTaskMissedYield+0x14>)
 8009db2:	2201      	movs	r2, #1
 8009db4:	601a      	str	r2, [r3, #0]
}
 8009db6:	bf00      	nop
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	20003250 	.word	0x20003250

08009dc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009dcc:	f000 f852 	bl	8009e74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009dd0:	4b06      	ldr	r3, [pc, #24]	; (8009dec <prvIdleTask+0x28>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d9f9      	bls.n	8009dcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8009dd8:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <prvIdleTask+0x2c>)
 8009dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dde:	601a      	str	r2, [r3, #0]
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009de8:	e7f0      	b.n	8009dcc <prvIdleTask+0x8>
 8009dea:	bf00      	nop
 8009dec:	20002d6c 	.word	0x20002d6c
 8009df0:	e000ed04 	.word	0xe000ed04

08009df4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	607b      	str	r3, [r7, #4]
 8009dfe:	e00c      	b.n	8009e1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	4613      	mov	r3, r2
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	4413      	add	r3, r2
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	4a12      	ldr	r2, [pc, #72]	; (8009e54 <prvInitialiseTaskLists+0x60>)
 8009e0c:	4413      	add	r3, r2
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7fe fabe 	bl	8008390 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	3301      	adds	r3, #1
 8009e18:	607b      	str	r3, [r7, #4]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2b37      	cmp	r3, #55	; 0x37
 8009e1e:	d9ef      	bls.n	8009e00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e20:	480d      	ldr	r0, [pc, #52]	; (8009e58 <prvInitialiseTaskLists+0x64>)
 8009e22:	f7fe fab5 	bl	8008390 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e26:	480d      	ldr	r0, [pc, #52]	; (8009e5c <prvInitialiseTaskLists+0x68>)
 8009e28:	f7fe fab2 	bl	8008390 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e2c:	480c      	ldr	r0, [pc, #48]	; (8009e60 <prvInitialiseTaskLists+0x6c>)
 8009e2e:	f7fe faaf 	bl	8008390 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e32:	480c      	ldr	r0, [pc, #48]	; (8009e64 <prvInitialiseTaskLists+0x70>)
 8009e34:	f7fe faac 	bl	8008390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e38:	480b      	ldr	r0, [pc, #44]	; (8009e68 <prvInitialiseTaskLists+0x74>)
 8009e3a:	f7fe faa9 	bl	8008390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e3e:	4b0b      	ldr	r3, [pc, #44]	; (8009e6c <prvInitialiseTaskLists+0x78>)
 8009e40:	4a05      	ldr	r2, [pc, #20]	; (8009e58 <prvInitialiseTaskLists+0x64>)
 8009e42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e44:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <prvInitialiseTaskLists+0x7c>)
 8009e46:	4a05      	ldr	r2, [pc, #20]	; (8009e5c <prvInitialiseTaskLists+0x68>)
 8009e48:	601a      	str	r2, [r3, #0]
}
 8009e4a:	bf00      	nop
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20002d6c 	.word	0x20002d6c
 8009e58:	200031cc 	.word	0x200031cc
 8009e5c:	200031e0 	.word	0x200031e0
 8009e60:	200031fc 	.word	0x200031fc
 8009e64:	20003210 	.word	0x20003210
 8009e68:	20003228 	.word	0x20003228
 8009e6c:	200031f4 	.word	0x200031f4
 8009e70:	200031f8 	.word	0x200031f8

08009e74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e7a:	e019      	b.n	8009eb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e7c:	f000 fed2 	bl	800ac24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e80:	4b10      	ldr	r3, [pc, #64]	; (8009ec4 <prvCheckTasksWaitingTermination+0x50>)
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fe fb09 	bl	80084a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e92:	4b0d      	ldr	r3, [pc, #52]	; (8009ec8 <prvCheckTasksWaitingTermination+0x54>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	3b01      	subs	r3, #1
 8009e98:	4a0b      	ldr	r2, [pc, #44]	; (8009ec8 <prvCheckTasksWaitingTermination+0x54>)
 8009e9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e9c:	4b0b      	ldr	r3, [pc, #44]	; (8009ecc <prvCheckTasksWaitingTermination+0x58>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	4a0a      	ldr	r2, [pc, #40]	; (8009ecc <prvCheckTasksWaitingTermination+0x58>)
 8009ea4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ea6:	f000 feed 	bl	800ac84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f810 	bl	8009ed0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009eb0:	4b06      	ldr	r3, [pc, #24]	; (8009ecc <prvCheckTasksWaitingTermination+0x58>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1e1      	bne.n	8009e7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009eb8:	bf00      	nop
 8009eba:	bf00      	nop
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	20003210 	.word	0x20003210
 8009ec8:	2000323c 	.word	0x2000323c
 8009ecc:	20003224 	.word	0x20003224

08009ed0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	3358      	adds	r3, #88	; 0x58
 8009edc:	4618      	mov	r0, r3
 8009ede:	f001 fb27 	bl	800b530 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d108      	bne.n	8009efe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f001 f885 	bl	800b000 <vPortFree>
				vPortFree( pxTCB );
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f001 f882 	bl	800b000 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009efc:	e018      	b.n	8009f30 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d103      	bne.n	8009f10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f001 f879 	bl	800b000 <vPortFree>
	}
 8009f0e:	e00f      	b.n	8009f30 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d00a      	beq.n	8009f30 <prvDeleteTCB+0x60>
	__asm volatile
 8009f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1e:	f383 8811 	msr	BASEPRI, r3
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	f3bf 8f4f 	dsb	sy
 8009f2a:	60fb      	str	r3, [r7, #12]
}
 8009f2c:	bf00      	nop
 8009f2e:	e7fe      	b.n	8009f2e <prvDeleteTCB+0x5e>
	}
 8009f30:	bf00      	nop
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f3e:	4b0c      	ldr	r3, [pc, #48]	; (8009f70 <prvResetNextTaskUnblockTime+0x38>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d104      	bne.n	8009f52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f48:	4b0a      	ldr	r3, [pc, #40]	; (8009f74 <prvResetNextTaskUnblockTime+0x3c>)
 8009f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f50:	e008      	b.n	8009f64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f52:	4b07      	ldr	r3, [pc, #28]	; (8009f70 <prvResetNextTaskUnblockTime+0x38>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	4a04      	ldr	r2, [pc, #16]	; (8009f74 <prvResetNextTaskUnblockTime+0x3c>)
 8009f62:	6013      	str	r3, [r2, #0]
}
 8009f64:	bf00      	nop
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr
 8009f70:	200031f4 	.word	0x200031f4
 8009f74:	2000325c 	.word	0x2000325c

08009f78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f7e:	4b0b      	ldr	r3, [pc, #44]	; (8009fac <xTaskGetSchedulerState+0x34>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d102      	bne.n	8009f8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f86:	2301      	movs	r3, #1
 8009f88:	607b      	str	r3, [r7, #4]
 8009f8a:	e008      	b.n	8009f9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f8c:	4b08      	ldr	r3, [pc, #32]	; (8009fb0 <xTaskGetSchedulerState+0x38>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d102      	bne.n	8009f9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f94:	2302      	movs	r3, #2
 8009f96:	607b      	str	r3, [r7, #4]
 8009f98:	e001      	b.n	8009f9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f9e:	687b      	ldr	r3, [r7, #4]
	}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	20003248 	.word	0x20003248
 8009fb0:	20003264 	.word	0x20003264

08009fb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d051      	beq.n	800a06e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fce:	4b2a      	ldr	r3, [pc, #168]	; (800a078 <xTaskPriorityInherit+0xc4>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d241      	bcs.n	800a05c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	db06      	blt.n	8009fee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fe0:	4b25      	ldr	r3, [pc, #148]	; (800a078 <xTaskPriorityInherit+0xc4>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	6959      	ldr	r1, [r3, #20]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4a1f      	ldr	r2, [pc, #124]	; (800a07c <xTaskPriorityInherit+0xc8>)
 800a000:	4413      	add	r3, r2
 800a002:	4299      	cmp	r1, r3
 800a004:	d122      	bne.n	800a04c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	3304      	adds	r3, #4
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fe fa4a 	bl	80084a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a010:	4b19      	ldr	r3, [pc, #100]	; (800a078 <xTaskPriorityInherit+0xc4>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a01e:	4b18      	ldr	r3, [pc, #96]	; (800a080 <xTaskPriorityInherit+0xcc>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	429a      	cmp	r2, r3
 800a024:	d903      	bls.n	800a02e <xTaskPriorityInherit+0x7a>
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02a:	4a15      	ldr	r2, [pc, #84]	; (800a080 <xTaskPriorityInherit+0xcc>)
 800a02c:	6013      	str	r3, [r2, #0]
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a032:	4613      	mov	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	4a10      	ldr	r2, [pc, #64]	; (800a07c <xTaskPriorityInherit+0xc8>)
 800a03c:	441a      	add	r2, r3
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	3304      	adds	r3, #4
 800a042:	4619      	mov	r1, r3
 800a044:	4610      	mov	r0, r2
 800a046:	f7fe f9d0 	bl	80083ea <vListInsertEnd>
 800a04a:	e004      	b.n	800a056 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a04c:	4b0a      	ldr	r3, [pc, #40]	; (800a078 <xTaskPriorityInherit+0xc4>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a056:	2301      	movs	r3, #1
 800a058:	60fb      	str	r3, [r7, #12]
 800a05a:	e008      	b.n	800a06e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a060:	4b05      	ldr	r3, [pc, #20]	; (800a078 <xTaskPriorityInherit+0xc4>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a066:	429a      	cmp	r2, r3
 800a068:	d201      	bcs.n	800a06e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a06a:	2301      	movs	r3, #1
 800a06c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a06e:	68fb      	ldr	r3, [r7, #12]
	}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	20002d68 	.word	0x20002d68
 800a07c:	20002d6c 	.word	0x20002d6c
 800a080:	20003244 	.word	0x20003244

0800a084 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a090:	2300      	movs	r3, #0
 800a092:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d056      	beq.n	800a148 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a09a:	4b2e      	ldr	r3, [pc, #184]	; (800a154 <xTaskPriorityDisinherit+0xd0>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d00a      	beq.n	800a0ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a8:	f383 8811 	msr	BASEPRI, r3
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	60fb      	str	r3, [r7, #12]
}
 800a0b6:	bf00      	nop
 800a0b8:	e7fe      	b.n	800a0b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10a      	bne.n	800a0d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	60bb      	str	r3, [r7, #8]
}
 800a0d4:	bf00      	nop
 800a0d6:	e7fe      	b.n	800a0d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0dc:	1e5a      	subs	r2, r3, #1
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d02c      	beq.n	800a148 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d128      	bne.n	800a148 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	3304      	adds	r3, #4
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fe f9d2 	bl	80084a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a118:	4b0f      	ldr	r3, [pc, #60]	; (800a158 <xTaskPriorityDisinherit+0xd4>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d903      	bls.n	800a128 <xTaskPriorityDisinherit+0xa4>
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a124:	4a0c      	ldr	r2, [pc, #48]	; (800a158 <xTaskPriorityDisinherit+0xd4>)
 800a126:	6013      	str	r3, [r2, #0]
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a12c:	4613      	mov	r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4a09      	ldr	r2, [pc, #36]	; (800a15c <xTaskPriorityDisinherit+0xd8>)
 800a136:	441a      	add	r2, r3
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	3304      	adds	r3, #4
 800a13c:	4619      	mov	r1, r3
 800a13e:	4610      	mov	r0, r2
 800a140:	f7fe f953 	bl	80083ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a144:	2301      	movs	r3, #1
 800a146:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a148:	697b      	ldr	r3, [r7, #20]
	}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3718      	adds	r7, #24
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	20002d68 	.word	0x20002d68
 800a158:	20003244 	.word	0x20003244
 800a15c:	20002d6c 	.word	0x20002d6c

0800a160 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a160:	b580      	push	{r7, lr}
 800a162:	b088      	sub	sp, #32
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a16e:	2301      	movs	r3, #1
 800a170:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d06a      	beq.n	800a24e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d10a      	bne.n	800a196 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a184:	f383 8811 	msr	BASEPRI, r3
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	60fb      	str	r3, [r7, #12]
}
 800a192:	bf00      	nop
 800a194:	e7fe      	b.n	800a194 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a19a:	683a      	ldr	r2, [r7, #0]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d902      	bls.n	800a1a6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	61fb      	str	r3, [r7, #28]
 800a1a4:	e002      	b.n	800a1ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b0:	69fa      	ldr	r2, [r7, #28]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d04b      	beq.n	800a24e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1ba:	697a      	ldr	r2, [r7, #20]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d146      	bne.n	800a24e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a1c0:	4b25      	ldr	r3, [pc, #148]	; (800a258 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	69ba      	ldr	r2, [r7, #24]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d10a      	bne.n	800a1e0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ce:	f383 8811 	msr	BASEPRI, r3
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	f3bf 8f4f 	dsb	sy
 800a1da:	60bb      	str	r3, [r7, #8]
}
 800a1dc:	bf00      	nop
 800a1de:	e7fe      	b.n	800a1de <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	69fa      	ldr	r2, [r7, #28]
 800a1ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	db04      	blt.n	800a1fe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	6959      	ldr	r1, [r3, #20]
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	4613      	mov	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	4413      	add	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4a13      	ldr	r2, [pc, #76]	; (800a25c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a20e:	4413      	add	r3, r2
 800a210:	4299      	cmp	r1, r3
 800a212:	d11c      	bne.n	800a24e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	3304      	adds	r3, #4
 800a218:	4618      	mov	r0, r3
 800a21a:	f7fe f943 	bl	80084a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a222:	4b0f      	ldr	r3, [pc, #60]	; (800a260 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	429a      	cmp	r2, r3
 800a228:	d903      	bls.n	800a232 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22e:	4a0c      	ldr	r2, [pc, #48]	; (800a260 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a230:	6013      	str	r3, [r2, #0]
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a236:	4613      	mov	r3, r2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4413      	add	r3, r2
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	4a07      	ldr	r2, [pc, #28]	; (800a25c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a240:	441a      	add	r2, r3
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	3304      	adds	r3, #4
 800a246:	4619      	mov	r1, r3
 800a248:	4610      	mov	r0, r2
 800a24a:	f7fe f8ce 	bl	80083ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a24e:	bf00      	nop
 800a250:	3720      	adds	r7, #32
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	20002d68 	.word	0x20002d68
 800a25c:	20002d6c 	.word	0x20002d6c
 800a260:	20003244 	.word	0x20003244

0800a264 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a264:	b480      	push	{r7}
 800a266:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a268:	4b07      	ldr	r3, [pc, #28]	; (800a288 <pvTaskIncrementMutexHeldCount+0x24>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d004      	beq.n	800a27a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a270:	4b05      	ldr	r3, [pc, #20]	; (800a288 <pvTaskIncrementMutexHeldCount+0x24>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a276:	3201      	adds	r2, #1
 800a278:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a27a:	4b03      	ldr	r3, [pc, #12]	; (800a288 <pvTaskIncrementMutexHeldCount+0x24>)
 800a27c:	681b      	ldr	r3, [r3, #0]
	}
 800a27e:	4618      	mov	r0, r3
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr
 800a288:	20002d68 	.word	0x20002d68

0800a28c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a296:	4b21      	ldr	r3, [pc, #132]	; (800a31c <prvAddCurrentTaskToDelayedList+0x90>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a29c:	4b20      	ldr	r3, [pc, #128]	; (800a320 <prvAddCurrentTaskToDelayedList+0x94>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	3304      	adds	r3, #4
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fe f8fe 	bl	80084a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ae:	d10a      	bne.n	800a2c6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d007      	beq.n	800a2c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2b6:	4b1a      	ldr	r3, [pc, #104]	; (800a320 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	3304      	adds	r3, #4
 800a2bc:	4619      	mov	r1, r3
 800a2be:	4819      	ldr	r0, [pc, #100]	; (800a324 <prvAddCurrentTaskToDelayedList+0x98>)
 800a2c0:	f7fe f893 	bl	80083ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a2c4:	e026      	b.n	800a314 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a2ce:	4b14      	ldr	r3, [pc, #80]	; (800a320 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d209      	bcs.n	800a2f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2de:	4b12      	ldr	r3, [pc, #72]	; (800a328 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	4b0f      	ldr	r3, [pc, #60]	; (800a320 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	3304      	adds	r3, #4
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	4610      	mov	r0, r2
 800a2ec:	f7fe f8a1 	bl	8008432 <vListInsert>
}
 800a2f0:	e010      	b.n	800a314 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2f2:	4b0e      	ldr	r3, [pc, #56]	; (800a32c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	4b0a      	ldr	r3, [pc, #40]	; (800a320 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	4610      	mov	r0, r2
 800a300:	f7fe f897 	bl	8008432 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a304:	4b0a      	ldr	r3, [pc, #40]	; (800a330 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	68ba      	ldr	r2, [r7, #8]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d202      	bcs.n	800a314 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a30e:	4a08      	ldr	r2, [pc, #32]	; (800a330 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	6013      	str	r3, [r2, #0]
}
 800a314:	bf00      	nop
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	20003240 	.word	0x20003240
 800a320:	20002d68 	.word	0x20002d68
 800a324:	20003228 	.word	0x20003228
 800a328:	200031f8 	.word	0x200031f8
 800a32c:	200031f4 	.word	0x200031f4
 800a330:	2000325c 	.word	0x2000325c

0800a334 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b08a      	sub	sp, #40	; 0x28
 800a338:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a33a:	2300      	movs	r3, #0
 800a33c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a33e:	f000 fb07 	bl	800a950 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a342:	4b1c      	ldr	r3, [pc, #112]	; (800a3b4 <xTimerCreateTimerTask+0x80>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d021      	beq.n	800a38e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a34a:	2300      	movs	r3, #0
 800a34c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a34e:	2300      	movs	r3, #0
 800a350:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a352:	1d3a      	adds	r2, r7, #4
 800a354:	f107 0108 	add.w	r1, r7, #8
 800a358:	f107 030c 	add.w	r3, r7, #12
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7fd fffd 	bl	800835c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a362:	6879      	ldr	r1, [r7, #4]
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	9202      	str	r2, [sp, #8]
 800a36a:	9301      	str	r3, [sp, #4]
 800a36c:	2302      	movs	r3, #2
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	2300      	movs	r3, #0
 800a372:	460a      	mov	r2, r1
 800a374:	4910      	ldr	r1, [pc, #64]	; (800a3b8 <xTimerCreateTimerTask+0x84>)
 800a376:	4811      	ldr	r0, [pc, #68]	; (800a3bc <xTimerCreateTimerTask+0x88>)
 800a378:	f7fe ff94 	bl	80092a4 <xTaskCreateStatic>
 800a37c:	4603      	mov	r3, r0
 800a37e:	4a10      	ldr	r2, [pc, #64]	; (800a3c0 <xTimerCreateTimerTask+0x8c>)
 800a380:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a382:	4b0f      	ldr	r3, [pc, #60]	; (800a3c0 <xTimerCreateTimerTask+0x8c>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a38a:	2301      	movs	r3, #1
 800a38c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10a      	bne.n	800a3aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a398:	f383 8811 	msr	BASEPRI, r3
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	613b      	str	r3, [r7, #16]
}
 800a3a6:	bf00      	nop
 800a3a8:	e7fe      	b.n	800a3a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a3aa:	697b      	ldr	r3, [r7, #20]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3718      	adds	r7, #24
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	200032a0 	.word	0x200032a0
 800a3b8:	0800c168 	.word	0x0800c168
 800a3bc:	0800a4f9 	.word	0x0800a4f9
 800a3c0:	200032a4 	.word	0x200032a4

0800a3c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b08a      	sub	sp, #40	; 0x28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
 800a3d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10a      	bne.n	800a3f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e0:	f383 8811 	msr	BASEPRI, r3
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	623b      	str	r3, [r7, #32]
}
 800a3ee:	bf00      	nop
 800a3f0:	e7fe      	b.n	800a3f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a3f2:	4b1a      	ldr	r3, [pc, #104]	; (800a45c <xTimerGenericCommand+0x98>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d02a      	beq.n	800a450 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	2b05      	cmp	r3, #5
 800a40a:	dc18      	bgt.n	800a43e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a40c:	f7ff fdb4 	bl	8009f78 <xTaskGetSchedulerState>
 800a410:	4603      	mov	r3, r0
 800a412:	2b02      	cmp	r3, #2
 800a414:	d109      	bne.n	800a42a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a416:	4b11      	ldr	r3, [pc, #68]	; (800a45c <xTimerGenericCommand+0x98>)
 800a418:	6818      	ldr	r0, [r3, #0]
 800a41a:	f107 0110 	add.w	r1, r7, #16
 800a41e:	2300      	movs	r3, #0
 800a420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a422:	f7fe f9a7 	bl	8008774 <xQueueGenericSend>
 800a426:	6278      	str	r0, [r7, #36]	; 0x24
 800a428:	e012      	b.n	800a450 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a42a:	4b0c      	ldr	r3, [pc, #48]	; (800a45c <xTimerGenericCommand+0x98>)
 800a42c:	6818      	ldr	r0, [r3, #0]
 800a42e:	f107 0110 	add.w	r1, r7, #16
 800a432:	2300      	movs	r3, #0
 800a434:	2200      	movs	r2, #0
 800a436:	f7fe f99d 	bl	8008774 <xQueueGenericSend>
 800a43a:	6278      	str	r0, [r7, #36]	; 0x24
 800a43c:	e008      	b.n	800a450 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a43e:	4b07      	ldr	r3, [pc, #28]	; (800a45c <xTimerGenericCommand+0x98>)
 800a440:	6818      	ldr	r0, [r3, #0]
 800a442:	f107 0110 	add.w	r1, r7, #16
 800a446:	2300      	movs	r3, #0
 800a448:	683a      	ldr	r2, [r7, #0]
 800a44a:	f7fe fa91 	bl	8008970 <xQueueGenericSendFromISR>
 800a44e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a452:	4618      	mov	r0, r3
 800a454:	3728      	adds	r7, #40	; 0x28
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	200032a0 	.word	0x200032a0

0800a460 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b088      	sub	sp, #32
 800a464:	af02      	add	r7, sp, #8
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a46a:	4b22      	ldr	r3, [pc, #136]	; (800a4f4 <prvProcessExpiredTimer+0x94>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	3304      	adds	r3, #4
 800a478:	4618      	mov	r0, r3
 800a47a:	f7fe f813 	bl	80084a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a484:	f003 0304 	and.w	r3, r3, #4
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d022      	beq.n	800a4d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	699a      	ldr	r2, [r3, #24]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	18d1      	adds	r1, r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	6978      	ldr	r0, [r7, #20]
 800a49a:	f000 f8d1 	bl	800a640 <prvInsertTimerInActiveList>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d01f      	beq.n	800a4e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	6978      	ldr	r0, [r7, #20]
 800a4b0:	f7ff ff88 	bl	800a3c4 <xTimerGenericCommand>
 800a4b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d113      	bne.n	800a4e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c0:	f383 8811 	msr	BASEPRI, r3
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	60fb      	str	r3, [r7, #12]
}
 800a4ce:	bf00      	nop
 800a4d0:	e7fe      	b.n	800a4d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4d8:	f023 0301 	bic.w	r3, r3, #1
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	6a1b      	ldr	r3, [r3, #32]
 800a4e8:	6978      	ldr	r0, [r7, #20]
 800a4ea:	4798      	blx	r3
}
 800a4ec:	bf00      	nop
 800a4ee:	3718      	adds	r7, #24
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	20003298 	.word	0x20003298

0800a4f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a500:	f107 0308 	add.w	r3, r7, #8
 800a504:	4618      	mov	r0, r3
 800a506:	f000 f857 	bl	800a5b8 <prvGetNextExpireTime>
 800a50a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	4619      	mov	r1, r3
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f000 f803 	bl	800a51c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a516:	f000 f8d5 	bl	800a6c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a51a:	e7f1      	b.n	800a500 <prvTimerTask+0x8>

0800a51c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a526:	f7ff f91f 	bl	8009768 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a52a:	f107 0308 	add.w	r3, r7, #8
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 f866 	bl	800a600 <prvSampleTimeNow>
 800a534:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d130      	bne.n	800a59e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d10a      	bne.n	800a558 <prvProcessTimerOrBlockTask+0x3c>
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	429a      	cmp	r2, r3
 800a548:	d806      	bhi.n	800a558 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a54a:	f7ff f91b 	bl	8009784 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a54e:	68f9      	ldr	r1, [r7, #12]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f7ff ff85 	bl	800a460 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a556:	e024      	b.n	800a5a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d008      	beq.n	800a570 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a55e:	4b13      	ldr	r3, [pc, #76]	; (800a5ac <prvProcessTimerOrBlockTask+0x90>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d101      	bne.n	800a56c <prvProcessTimerOrBlockTask+0x50>
 800a568:	2301      	movs	r3, #1
 800a56a:	e000      	b.n	800a56e <prvProcessTimerOrBlockTask+0x52>
 800a56c:	2300      	movs	r3, #0
 800a56e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a570:	4b0f      	ldr	r3, [pc, #60]	; (800a5b0 <prvProcessTimerOrBlockTask+0x94>)
 800a572:	6818      	ldr	r0, [r3, #0]
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	683a      	ldr	r2, [r7, #0]
 800a57c:	4619      	mov	r1, r3
 800a57e:	f7fe fe5d 	bl	800923c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a582:	f7ff f8ff 	bl	8009784 <xTaskResumeAll>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10a      	bne.n	800a5a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a58c:	4b09      	ldr	r3, [pc, #36]	; (800a5b4 <prvProcessTimerOrBlockTask+0x98>)
 800a58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	f3bf 8f6f 	isb	sy
}
 800a59c:	e001      	b.n	800a5a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a59e:	f7ff f8f1 	bl	8009784 <xTaskResumeAll>
}
 800a5a2:	bf00      	nop
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	2000329c 	.word	0x2000329c
 800a5b0:	200032a0 	.word	0x200032a0
 800a5b4:	e000ed04 	.word	0xe000ed04

0800a5b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a5c0:	4b0e      	ldr	r3, [pc, #56]	; (800a5fc <prvGetNextExpireTime+0x44>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d101      	bne.n	800a5ce <prvGetNextExpireTime+0x16>
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	e000      	b.n	800a5d0 <prvGetNextExpireTime+0x18>
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d105      	bne.n	800a5e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5dc:	4b07      	ldr	r3, [pc, #28]	; (800a5fc <prvGetNextExpireTime+0x44>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	60fb      	str	r3, [r7, #12]
 800a5e6:	e001      	b.n	800a5ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3714      	adds	r7, #20
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	20003298 	.word	0x20003298

0800a600 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a608:	f7ff f95a 	bl	80098c0 <xTaskGetTickCount>
 800a60c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a60e:	4b0b      	ldr	r3, [pc, #44]	; (800a63c <prvSampleTimeNow+0x3c>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	429a      	cmp	r2, r3
 800a616:	d205      	bcs.n	800a624 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a618:	f000 f936 	bl	800a888 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	601a      	str	r2, [r3, #0]
 800a622:	e002      	b.n	800a62a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a62a:	4a04      	ldr	r2, [pc, #16]	; (800a63c <prvSampleTimeNow+0x3c>)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a630:	68fb      	ldr	r3, [r7, #12]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	200032a8 	.word	0x200032a8

0800a640 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
 800a64c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a64e:	2300      	movs	r3, #0
 800a650:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	429a      	cmp	r2, r3
 800a664:	d812      	bhi.n	800a68c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	1ad2      	subs	r2, r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	429a      	cmp	r2, r3
 800a672:	d302      	bcc.n	800a67a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a674:	2301      	movs	r3, #1
 800a676:	617b      	str	r3, [r7, #20]
 800a678:	e01b      	b.n	800a6b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a67a:	4b10      	ldr	r3, [pc, #64]	; (800a6bc <prvInsertTimerInActiveList+0x7c>)
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	3304      	adds	r3, #4
 800a682:	4619      	mov	r1, r3
 800a684:	4610      	mov	r0, r2
 800a686:	f7fd fed4 	bl	8008432 <vListInsert>
 800a68a:	e012      	b.n	800a6b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	429a      	cmp	r2, r3
 800a692:	d206      	bcs.n	800a6a2 <prvInsertTimerInActiveList+0x62>
 800a694:	68ba      	ldr	r2, [r7, #8]
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d302      	bcc.n	800a6a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a69c:	2301      	movs	r3, #1
 800a69e:	617b      	str	r3, [r7, #20]
 800a6a0:	e007      	b.n	800a6b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6a2:	4b07      	ldr	r3, [pc, #28]	; (800a6c0 <prvInsertTimerInActiveList+0x80>)
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	3304      	adds	r3, #4
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	f7fd fec0 	bl	8008432 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a6b2:	697b      	ldr	r3, [r7, #20]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3718      	adds	r7, #24
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	2000329c 	.word	0x2000329c
 800a6c0:	20003298 	.word	0x20003298

0800a6c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b08e      	sub	sp, #56	; 0x38
 800a6c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6ca:	e0ca      	b.n	800a862 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	da18      	bge.n	800a704 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a6d2:	1d3b      	adds	r3, r7, #4
 800a6d4:	3304      	adds	r3, #4
 800a6d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10a      	bne.n	800a6f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e2:	f383 8811 	msr	BASEPRI, r3
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	61fb      	str	r3, [r7, #28]
}
 800a6f0:	bf00      	nop
 800a6f2:	e7fe      	b.n	800a6f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6fa:	6850      	ldr	r0, [r2, #4]
 800a6fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6fe:	6892      	ldr	r2, [r2, #8]
 800a700:	4611      	mov	r1, r2
 800a702:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	f2c0 80ab 	blt.w	800a862 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a712:	695b      	ldr	r3, [r3, #20]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d004      	beq.n	800a722 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71a:	3304      	adds	r3, #4
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fd fec1 	bl	80084a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a722:	463b      	mov	r3, r7
 800a724:	4618      	mov	r0, r3
 800a726:	f7ff ff6b 	bl	800a600 <prvSampleTimeNow>
 800a72a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b09      	cmp	r3, #9
 800a730:	f200 8096 	bhi.w	800a860 <prvProcessReceivedCommands+0x19c>
 800a734:	a201      	add	r2, pc, #4	; (adr r2, 800a73c <prvProcessReceivedCommands+0x78>)
 800a736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73a:	bf00      	nop
 800a73c:	0800a765 	.word	0x0800a765
 800a740:	0800a765 	.word	0x0800a765
 800a744:	0800a765 	.word	0x0800a765
 800a748:	0800a7d9 	.word	0x0800a7d9
 800a74c:	0800a7ed 	.word	0x0800a7ed
 800a750:	0800a837 	.word	0x0800a837
 800a754:	0800a765 	.word	0x0800a765
 800a758:	0800a765 	.word	0x0800a765
 800a75c:	0800a7d9 	.word	0x0800a7d9
 800a760:	0800a7ed 	.word	0x0800a7ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a76a:	f043 0301 	orr.w	r3, r3, #1
 800a76e:	b2da      	uxtb	r2, r3
 800a770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	18d1      	adds	r1, r2, r3
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a784:	f7ff ff5c 	bl	800a640 <prvInsertTimerInActiveList>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d069      	beq.n	800a862 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a790:	6a1b      	ldr	r3, [r3, #32]
 800a792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a794:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a79c:	f003 0304 	and.w	r3, r3, #4
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d05e      	beq.n	800a862 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a7a4:	68ba      	ldr	r2, [r7, #8]
 800a7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a8:	699b      	ldr	r3, [r3, #24]
 800a7aa:	441a      	add	r2, r3
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7b6:	f7ff fe05 	bl	800a3c4 <xTimerGenericCommand>
 800a7ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a7bc:	6a3b      	ldr	r3, [r7, #32]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d14f      	bne.n	800a862 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	61bb      	str	r3, [r7, #24]
}
 800a7d4:	bf00      	nop
 800a7d6:	e7fe      	b.n	800a7d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7de:	f023 0301 	bic.w	r3, r3, #1
 800a7e2:	b2da      	uxtb	r2, r3
 800a7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a7ea:	e03a      	b.n	800a862 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7f2:	f043 0301 	orr.w	r3, r3, #1
 800a7f6:	b2da      	uxtb	r2, r3
 800a7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a806:	699b      	ldr	r3, [r3, #24]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d10a      	bne.n	800a822 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	617b      	str	r3, [r7, #20]
}
 800a81e:	bf00      	nop
 800a820:	e7fe      	b.n	800a820 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a824:	699a      	ldr	r2, [r3, #24]
 800a826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a828:	18d1      	adds	r1, r2, r3
 800a82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a82e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a830:	f7ff ff06 	bl	800a640 <prvInsertTimerInActiveList>
					break;
 800a834:	e015      	b.n	800a862 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a83c:	f003 0302 	and.w	r3, r3, #2
 800a840:	2b00      	cmp	r3, #0
 800a842:	d103      	bne.n	800a84c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a846:	f000 fbdb 	bl	800b000 <vPortFree>
 800a84a:	e00a      	b.n	800a862 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a852:	f023 0301 	bic.w	r3, r3, #1
 800a856:	b2da      	uxtb	r2, r3
 800a858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a85e:	e000      	b.n	800a862 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a860:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a862:	4b08      	ldr	r3, [pc, #32]	; (800a884 <prvProcessReceivedCommands+0x1c0>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	1d39      	adds	r1, r7, #4
 800a868:	2200      	movs	r2, #0
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fe f9a8 	bl	8008bc0 <xQueueReceive>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	f47f af2a 	bne.w	800a6cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a878:	bf00      	nop
 800a87a:	bf00      	nop
 800a87c:	3730      	adds	r7, #48	; 0x30
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	200032a0 	.word	0x200032a0

0800a888 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b088      	sub	sp, #32
 800a88c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a88e:	e048      	b.n	800a922 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a890:	4b2d      	ldr	r3, [pc, #180]	; (800a948 <prvSwitchTimerLists+0xc0>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a89a:	4b2b      	ldr	r3, [pc, #172]	; (800a948 <prvSwitchTimerLists+0xc0>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	3304      	adds	r3, #4
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7fd fdfb 	bl	80084a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6a1b      	ldr	r3, [r3, #32]
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8bc:	f003 0304 	and.w	r3, r3, #4
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d02e      	beq.n	800a922 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d90e      	bls.n	800a8f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8e2:	4b19      	ldr	r3, [pc, #100]	; (800a948 <prvSwitchTimerLists+0xc0>)
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	f7fd fda0 	bl	8008432 <vListInsert>
 800a8f2:	e016      	b.n	800a922 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	693a      	ldr	r2, [r7, #16]
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f7ff fd60 	bl	800a3c4 <xTimerGenericCommand>
 800a904:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10a      	bne.n	800a922 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a910:	f383 8811 	msr	BASEPRI, r3
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	f3bf 8f4f 	dsb	sy
 800a91c:	603b      	str	r3, [r7, #0]
}
 800a91e:	bf00      	nop
 800a920:	e7fe      	b.n	800a920 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a922:	4b09      	ldr	r3, [pc, #36]	; (800a948 <prvSwitchTimerLists+0xc0>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1b1      	bne.n	800a890 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a92c:	4b06      	ldr	r3, [pc, #24]	; (800a948 <prvSwitchTimerLists+0xc0>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a932:	4b06      	ldr	r3, [pc, #24]	; (800a94c <prvSwitchTimerLists+0xc4>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a04      	ldr	r2, [pc, #16]	; (800a948 <prvSwitchTimerLists+0xc0>)
 800a938:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a93a:	4a04      	ldr	r2, [pc, #16]	; (800a94c <prvSwitchTimerLists+0xc4>)
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	6013      	str	r3, [r2, #0]
}
 800a940:	bf00      	nop
 800a942:	3718      	adds	r7, #24
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	20003298 	.word	0x20003298
 800a94c:	2000329c 	.word	0x2000329c

0800a950 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a956:	f000 f965 	bl	800ac24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a95a:	4b15      	ldr	r3, [pc, #84]	; (800a9b0 <prvCheckForValidListAndQueue+0x60>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d120      	bne.n	800a9a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a962:	4814      	ldr	r0, [pc, #80]	; (800a9b4 <prvCheckForValidListAndQueue+0x64>)
 800a964:	f7fd fd14 	bl	8008390 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a968:	4813      	ldr	r0, [pc, #76]	; (800a9b8 <prvCheckForValidListAndQueue+0x68>)
 800a96a:	f7fd fd11 	bl	8008390 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a96e:	4b13      	ldr	r3, [pc, #76]	; (800a9bc <prvCheckForValidListAndQueue+0x6c>)
 800a970:	4a10      	ldr	r2, [pc, #64]	; (800a9b4 <prvCheckForValidListAndQueue+0x64>)
 800a972:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a974:	4b12      	ldr	r3, [pc, #72]	; (800a9c0 <prvCheckForValidListAndQueue+0x70>)
 800a976:	4a10      	ldr	r2, [pc, #64]	; (800a9b8 <prvCheckForValidListAndQueue+0x68>)
 800a978:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a97a:	2300      	movs	r3, #0
 800a97c:	9300      	str	r3, [sp, #0]
 800a97e:	4b11      	ldr	r3, [pc, #68]	; (800a9c4 <prvCheckForValidListAndQueue+0x74>)
 800a980:	4a11      	ldr	r2, [pc, #68]	; (800a9c8 <prvCheckForValidListAndQueue+0x78>)
 800a982:	2110      	movs	r1, #16
 800a984:	200a      	movs	r0, #10
 800a986:	f7fd fe1f 	bl	80085c8 <xQueueGenericCreateStatic>
 800a98a:	4603      	mov	r3, r0
 800a98c:	4a08      	ldr	r2, [pc, #32]	; (800a9b0 <prvCheckForValidListAndQueue+0x60>)
 800a98e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a990:	4b07      	ldr	r3, [pc, #28]	; (800a9b0 <prvCheckForValidListAndQueue+0x60>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d005      	beq.n	800a9a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a998:	4b05      	ldr	r3, [pc, #20]	; (800a9b0 <prvCheckForValidListAndQueue+0x60>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	490b      	ldr	r1, [pc, #44]	; (800a9cc <prvCheckForValidListAndQueue+0x7c>)
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fe fc22 	bl	80091e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9a4:	f000 f96e 	bl	800ac84 <vPortExitCritical>
}
 800a9a8:	bf00      	nop
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	200032a0 	.word	0x200032a0
 800a9b4:	20003270 	.word	0x20003270
 800a9b8:	20003284 	.word	0x20003284
 800a9bc:	20003298 	.word	0x20003298
 800a9c0:	2000329c 	.word	0x2000329c
 800a9c4:	2000334c 	.word	0x2000334c
 800a9c8:	200032ac 	.word	0x200032ac
 800a9cc:	0800c170 	.word	0x0800c170

0800a9d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	3b04      	subs	r3, #4
 800a9e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a9e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3b04      	subs	r3, #4
 800a9ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	f023 0201 	bic.w	r2, r3, #1
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	3b04      	subs	r3, #4
 800a9fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa00:	4a0c      	ldr	r2, [pc, #48]	; (800aa34 <pxPortInitialiseStack+0x64>)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	3b14      	subs	r3, #20
 800aa0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	3b04      	subs	r3, #4
 800aa16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f06f 0202 	mvn.w	r2, #2
 800aa1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	3b20      	subs	r3, #32
 800aa24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa26:	68fb      	ldr	r3, [r7, #12]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3714      	adds	r7, #20
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	0800aa39 	.word	0x0800aa39

0800aa38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa42:	4b12      	ldr	r3, [pc, #72]	; (800aa8c <prvTaskExitError+0x54>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa4a:	d00a      	beq.n	800aa62 <prvTaskExitError+0x2a>
	__asm volatile
 800aa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa50:	f383 8811 	msr	BASEPRI, r3
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	60fb      	str	r3, [r7, #12]
}
 800aa5e:	bf00      	nop
 800aa60:	e7fe      	b.n	800aa60 <prvTaskExitError+0x28>
	__asm volatile
 800aa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa66:	f383 8811 	msr	BASEPRI, r3
 800aa6a:	f3bf 8f6f 	isb	sy
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	60bb      	str	r3, [r7, #8]
}
 800aa74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa76:	bf00      	nop
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d0fc      	beq.n	800aa78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa7e:	bf00      	nop
 800aa80:	bf00      	nop
 800aa82:	3714      	adds	r7, #20
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	2000035c 	.word	0x2000035c

0800aa90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa90:	4b07      	ldr	r3, [pc, #28]	; (800aab0 <pxCurrentTCBConst2>)
 800aa92:	6819      	ldr	r1, [r3, #0]
 800aa94:	6808      	ldr	r0, [r1, #0]
 800aa96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9a:	f380 8809 	msr	PSP, r0
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	f04f 0000 	mov.w	r0, #0
 800aaa6:	f380 8811 	msr	BASEPRI, r0
 800aaaa:	4770      	bx	lr
 800aaac:	f3af 8000 	nop.w

0800aab0 <pxCurrentTCBConst2>:
 800aab0:	20002d68 	.word	0x20002d68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aab4:	bf00      	nop
 800aab6:	bf00      	nop

0800aab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aab8:	4808      	ldr	r0, [pc, #32]	; (800aadc <prvPortStartFirstTask+0x24>)
 800aaba:	6800      	ldr	r0, [r0, #0]
 800aabc:	6800      	ldr	r0, [r0, #0]
 800aabe:	f380 8808 	msr	MSP, r0
 800aac2:	f04f 0000 	mov.w	r0, #0
 800aac6:	f380 8814 	msr	CONTROL, r0
 800aaca:	b662      	cpsie	i
 800aacc:	b661      	cpsie	f
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	f3bf 8f6f 	isb	sy
 800aad6:	df00      	svc	0
 800aad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aada:	bf00      	nop
 800aadc:	e000ed08 	.word	0xe000ed08

0800aae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aae6:	4b46      	ldr	r3, [pc, #280]	; (800ac00 <xPortStartScheduler+0x120>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a46      	ldr	r2, [pc, #280]	; (800ac04 <xPortStartScheduler+0x124>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d10a      	bne.n	800ab06 <xPortStartScheduler+0x26>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	613b      	str	r3, [r7, #16]
}
 800ab02:	bf00      	nop
 800ab04:	e7fe      	b.n	800ab04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ab06:	4b3e      	ldr	r3, [pc, #248]	; (800ac00 <xPortStartScheduler+0x120>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a3f      	ldr	r2, [pc, #252]	; (800ac08 <xPortStartScheduler+0x128>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d10a      	bne.n	800ab26 <xPortStartScheduler+0x46>
	__asm volatile
 800ab10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab14:	f383 8811 	msr	BASEPRI, r3
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	60fb      	str	r3, [r7, #12]
}
 800ab22:	bf00      	nop
 800ab24:	e7fe      	b.n	800ab24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab26:	4b39      	ldr	r3, [pc, #228]	; (800ac0c <xPortStartScheduler+0x12c>)
 800ab28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	22ff      	movs	r2, #255	; 0xff
 800ab36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab40:	78fb      	ldrb	r3, [r7, #3]
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	4b31      	ldr	r3, [pc, #196]	; (800ac10 <xPortStartScheduler+0x130>)
 800ab4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab4e:	4b31      	ldr	r3, [pc, #196]	; (800ac14 <xPortStartScheduler+0x134>)
 800ab50:	2207      	movs	r2, #7
 800ab52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab54:	e009      	b.n	800ab6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ab56:	4b2f      	ldr	r3, [pc, #188]	; (800ac14 <xPortStartScheduler+0x134>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	4a2d      	ldr	r2, [pc, #180]	; (800ac14 <xPortStartScheduler+0x134>)
 800ab5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab60:	78fb      	ldrb	r3, [r7, #3]
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	005b      	lsls	r3, r3, #1
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab6a:	78fb      	ldrb	r3, [r7, #3]
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab72:	2b80      	cmp	r3, #128	; 0x80
 800ab74:	d0ef      	beq.n	800ab56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab76:	4b27      	ldr	r3, [pc, #156]	; (800ac14 <xPortStartScheduler+0x134>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f1c3 0307 	rsb	r3, r3, #7
 800ab7e:	2b04      	cmp	r3, #4
 800ab80:	d00a      	beq.n	800ab98 <xPortStartScheduler+0xb8>
	__asm volatile
 800ab82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab86:	f383 8811 	msr	BASEPRI, r3
 800ab8a:	f3bf 8f6f 	isb	sy
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	60bb      	str	r3, [r7, #8]
}
 800ab94:	bf00      	nop
 800ab96:	e7fe      	b.n	800ab96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab98:	4b1e      	ldr	r3, [pc, #120]	; (800ac14 <xPortStartScheduler+0x134>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	021b      	lsls	r3, r3, #8
 800ab9e:	4a1d      	ldr	r2, [pc, #116]	; (800ac14 <xPortStartScheduler+0x134>)
 800aba0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aba2:	4b1c      	ldr	r3, [pc, #112]	; (800ac14 <xPortStartScheduler+0x134>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abaa:	4a1a      	ldr	r2, [pc, #104]	; (800ac14 <xPortStartScheduler+0x134>)
 800abac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800abb6:	4b18      	ldr	r3, [pc, #96]	; (800ac18 <xPortStartScheduler+0x138>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a17      	ldr	r2, [pc, #92]	; (800ac18 <xPortStartScheduler+0x138>)
 800abbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800abc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800abc2:	4b15      	ldr	r3, [pc, #84]	; (800ac18 <xPortStartScheduler+0x138>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a14      	ldr	r2, [pc, #80]	; (800ac18 <xPortStartScheduler+0x138>)
 800abc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800abcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800abce:	f000 f8dd 	bl	800ad8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800abd2:	4b12      	ldr	r3, [pc, #72]	; (800ac1c <xPortStartScheduler+0x13c>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800abd8:	f000 f8fc 	bl	800add4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800abdc:	4b10      	ldr	r3, [pc, #64]	; (800ac20 <xPortStartScheduler+0x140>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a0f      	ldr	r2, [pc, #60]	; (800ac20 <xPortStartScheduler+0x140>)
 800abe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800abe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800abe8:	f7ff ff66 	bl	800aab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800abec:	f7fe ff32 	bl	8009a54 <vTaskSwitchContext>
	prvTaskExitError();
 800abf0:	f7ff ff22 	bl	800aa38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800abf4:	2300      	movs	r3, #0
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3718      	adds	r7, #24
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	e000ed00 	.word	0xe000ed00
 800ac04:	410fc271 	.word	0x410fc271
 800ac08:	410fc270 	.word	0x410fc270
 800ac0c:	e000e400 	.word	0xe000e400
 800ac10:	2000339c 	.word	0x2000339c
 800ac14:	200033a0 	.word	0x200033a0
 800ac18:	e000ed20 	.word	0xe000ed20
 800ac1c:	2000035c 	.word	0x2000035c
 800ac20:	e000ef34 	.word	0xe000ef34

0800ac24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
	__asm volatile
 800ac2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2e:	f383 8811 	msr	BASEPRI, r3
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	f3bf 8f4f 	dsb	sy
 800ac3a:	607b      	str	r3, [r7, #4]
}
 800ac3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac3e:	4b0f      	ldr	r3, [pc, #60]	; (800ac7c <vPortEnterCritical+0x58>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	3301      	adds	r3, #1
 800ac44:	4a0d      	ldr	r2, [pc, #52]	; (800ac7c <vPortEnterCritical+0x58>)
 800ac46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac48:	4b0c      	ldr	r3, [pc, #48]	; (800ac7c <vPortEnterCritical+0x58>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d10f      	bne.n	800ac70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac50:	4b0b      	ldr	r3, [pc, #44]	; (800ac80 <vPortEnterCritical+0x5c>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00a      	beq.n	800ac70 <vPortEnterCritical+0x4c>
	__asm volatile
 800ac5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5e:	f383 8811 	msr	BASEPRI, r3
 800ac62:	f3bf 8f6f 	isb	sy
 800ac66:	f3bf 8f4f 	dsb	sy
 800ac6a:	603b      	str	r3, [r7, #0]
}
 800ac6c:	bf00      	nop
 800ac6e:	e7fe      	b.n	800ac6e <vPortEnterCritical+0x4a>
	}
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr
 800ac7c:	2000035c 	.word	0x2000035c
 800ac80:	e000ed04 	.word	0xe000ed04

0800ac84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac8a:	4b12      	ldr	r3, [pc, #72]	; (800acd4 <vPortExitCritical+0x50>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d10a      	bne.n	800aca8 <vPortExitCritical+0x24>
	__asm volatile
 800ac92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac96:	f383 8811 	msr	BASEPRI, r3
 800ac9a:	f3bf 8f6f 	isb	sy
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	607b      	str	r3, [r7, #4]
}
 800aca4:	bf00      	nop
 800aca6:	e7fe      	b.n	800aca6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aca8:	4b0a      	ldr	r3, [pc, #40]	; (800acd4 <vPortExitCritical+0x50>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	3b01      	subs	r3, #1
 800acae:	4a09      	ldr	r2, [pc, #36]	; (800acd4 <vPortExitCritical+0x50>)
 800acb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800acb2:	4b08      	ldr	r3, [pc, #32]	; (800acd4 <vPortExitCritical+0x50>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d105      	bne.n	800acc6 <vPortExitCritical+0x42>
 800acba:	2300      	movs	r3, #0
 800acbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	f383 8811 	msr	BASEPRI, r3
}
 800acc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800acc6:	bf00      	nop
 800acc8:	370c      	adds	r7, #12
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	2000035c 	.word	0x2000035c
	...

0800ace0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ace0:	f3ef 8009 	mrs	r0, PSP
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	4b15      	ldr	r3, [pc, #84]	; (800ad40 <pxCurrentTCBConst>)
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	f01e 0f10 	tst.w	lr, #16
 800acf0:	bf08      	it	eq
 800acf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800acf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfa:	6010      	str	r0, [r2, #0]
 800acfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ad04:	f380 8811 	msr	BASEPRI, r0
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	f3bf 8f6f 	isb	sy
 800ad10:	f7fe fea0 	bl	8009a54 <vTaskSwitchContext>
 800ad14:	f04f 0000 	mov.w	r0, #0
 800ad18:	f380 8811 	msr	BASEPRI, r0
 800ad1c:	bc09      	pop	{r0, r3}
 800ad1e:	6819      	ldr	r1, [r3, #0]
 800ad20:	6808      	ldr	r0, [r1, #0]
 800ad22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad26:	f01e 0f10 	tst.w	lr, #16
 800ad2a:	bf08      	it	eq
 800ad2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad30:	f380 8809 	msr	PSP, r0
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	f3af 8000 	nop.w

0800ad40 <pxCurrentTCBConst>:
 800ad40:	20002d68 	.word	0x20002d68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop

0800ad48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad52:	f383 8811 	msr	BASEPRI, r3
 800ad56:	f3bf 8f6f 	isb	sy
 800ad5a:	f3bf 8f4f 	dsb	sy
 800ad5e:	607b      	str	r3, [r7, #4]
}
 800ad60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad62:	f7fe fdbd 	bl	80098e0 <xTaskIncrementTick>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d003      	beq.n	800ad74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad6c:	4b06      	ldr	r3, [pc, #24]	; (800ad88 <xPortSysTickHandler+0x40>)
 800ad6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad72:	601a      	str	r2, [r3, #0]
 800ad74:	2300      	movs	r3, #0
 800ad76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	f383 8811 	msr	BASEPRI, r3
}
 800ad7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad80:	bf00      	nop
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	e000ed04 	.word	0xe000ed04

0800ad8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad90:	4b0b      	ldr	r3, [pc, #44]	; (800adc0 <vPortSetupTimerInterrupt+0x34>)
 800ad92:	2200      	movs	r2, #0
 800ad94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad96:	4b0b      	ldr	r3, [pc, #44]	; (800adc4 <vPortSetupTimerInterrupt+0x38>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad9c:	4b0a      	ldr	r3, [pc, #40]	; (800adc8 <vPortSetupTimerInterrupt+0x3c>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a0a      	ldr	r2, [pc, #40]	; (800adcc <vPortSetupTimerInterrupt+0x40>)
 800ada2:	fba2 2303 	umull	r2, r3, r2, r3
 800ada6:	099b      	lsrs	r3, r3, #6
 800ada8:	4a09      	ldr	r2, [pc, #36]	; (800add0 <vPortSetupTimerInterrupt+0x44>)
 800adaa:	3b01      	subs	r3, #1
 800adac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800adae:	4b04      	ldr	r3, [pc, #16]	; (800adc0 <vPortSetupTimerInterrupt+0x34>)
 800adb0:	2207      	movs	r2, #7
 800adb2:	601a      	str	r2, [r3, #0]
}
 800adb4:	bf00      	nop
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	e000e010 	.word	0xe000e010
 800adc4:	e000e018 	.word	0xe000e018
 800adc8:	20000348 	.word	0x20000348
 800adcc:	10624dd3 	.word	0x10624dd3
 800add0:	e000e014 	.word	0xe000e014

0800add4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800add4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ade4 <vPortEnableVFP+0x10>
 800add8:	6801      	ldr	r1, [r0, #0]
 800adda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800adde:	6001      	str	r1, [r0, #0]
 800ade0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ade2:	bf00      	nop
 800ade4:	e000ed88 	.word	0xe000ed88

0800ade8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800adee:	f3ef 8305 	mrs	r3, IPSR
 800adf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2b0f      	cmp	r3, #15
 800adf8:	d914      	bls.n	800ae24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800adfa:	4a17      	ldr	r2, [pc, #92]	; (800ae58 <vPortValidateInterruptPriority+0x70>)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	4413      	add	r3, r2
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae04:	4b15      	ldr	r3, [pc, #84]	; (800ae5c <vPortValidateInterruptPriority+0x74>)
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	7afa      	ldrb	r2, [r7, #11]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d20a      	bcs.n	800ae24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ae0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	607b      	str	r3, [r7, #4]
}
 800ae20:	bf00      	nop
 800ae22:	e7fe      	b.n	800ae22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ae24:	4b0e      	ldr	r3, [pc, #56]	; (800ae60 <vPortValidateInterruptPriority+0x78>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ae2c:	4b0d      	ldr	r3, [pc, #52]	; (800ae64 <vPortValidateInterruptPriority+0x7c>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d90a      	bls.n	800ae4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	603b      	str	r3, [r7, #0]
}
 800ae46:	bf00      	nop
 800ae48:	e7fe      	b.n	800ae48 <vPortValidateInterruptPriority+0x60>
	}
 800ae4a:	bf00      	nop
 800ae4c:	3714      	adds	r7, #20
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	e000e3f0 	.word	0xe000e3f0
 800ae5c:	2000339c 	.word	0x2000339c
 800ae60:	e000ed0c 	.word	0xe000ed0c
 800ae64:	200033a0 	.word	0x200033a0

0800ae68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b08a      	sub	sp, #40	; 0x28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae70:	2300      	movs	r3, #0
 800ae72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ae74:	f7fe fc78 	bl	8009768 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ae78:	4b5b      	ldr	r3, [pc, #364]	; (800afe8 <pvPortMalloc+0x180>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d101      	bne.n	800ae84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae80:	f000 f920 	bl	800b0c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae84:	4b59      	ldr	r3, [pc, #356]	; (800afec <pvPortMalloc+0x184>)
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f040 8093 	bne.w	800afb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d01d      	beq.n	800aed4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ae98:	2208      	movs	r2, #8
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f003 0307 	and.w	r3, r3, #7
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d014      	beq.n	800aed4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f023 0307 	bic.w	r3, r3, #7
 800aeb0:	3308      	adds	r3, #8
 800aeb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f003 0307 	and.w	r3, r3, #7
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00a      	beq.n	800aed4 <pvPortMalloc+0x6c>
	__asm volatile
 800aebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec2:	f383 8811 	msr	BASEPRI, r3
 800aec6:	f3bf 8f6f 	isb	sy
 800aeca:	f3bf 8f4f 	dsb	sy
 800aece:	617b      	str	r3, [r7, #20]
}
 800aed0:	bf00      	nop
 800aed2:	e7fe      	b.n	800aed2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d06e      	beq.n	800afb8 <pvPortMalloc+0x150>
 800aeda:	4b45      	ldr	r3, [pc, #276]	; (800aff0 <pvPortMalloc+0x188>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d869      	bhi.n	800afb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aee4:	4b43      	ldr	r3, [pc, #268]	; (800aff4 <pvPortMalloc+0x18c>)
 800aee6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aee8:	4b42      	ldr	r3, [pc, #264]	; (800aff4 <pvPortMalloc+0x18c>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aeee:	e004      	b.n	800aefa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	429a      	cmp	r2, r3
 800af02:	d903      	bls.n	800af0c <pvPortMalloc+0xa4>
 800af04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d1f1      	bne.n	800aef0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af0c:	4b36      	ldr	r3, [pc, #216]	; (800afe8 <pvPortMalloc+0x180>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af12:	429a      	cmp	r2, r3
 800af14:	d050      	beq.n	800afb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800af16:	6a3b      	ldr	r3, [r7, #32]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2208      	movs	r2, #8
 800af1c:	4413      	add	r3, r2
 800af1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800af20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	6a3b      	ldr	r3, [r7, #32]
 800af26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2a:	685a      	ldr	r2, [r3, #4]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	1ad2      	subs	r2, r2, r3
 800af30:	2308      	movs	r3, #8
 800af32:	005b      	lsls	r3, r3, #1
 800af34:	429a      	cmp	r2, r3
 800af36:	d91f      	bls.n	800af78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4413      	add	r3, r2
 800af3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	f003 0307 	and.w	r3, r3, #7
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00a      	beq.n	800af60 <pvPortMalloc+0xf8>
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	613b      	str	r3, [r7, #16]
}
 800af5c:	bf00      	nop
 800af5e:	e7fe      	b.n	800af5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af62:	685a      	ldr	r2, [r3, #4]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	1ad2      	subs	r2, r2, r3
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af72:	69b8      	ldr	r0, [r7, #24]
 800af74:	f000 f908 	bl	800b188 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af78:	4b1d      	ldr	r3, [pc, #116]	; (800aff0 <pvPortMalloc+0x188>)
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	4a1b      	ldr	r2, [pc, #108]	; (800aff0 <pvPortMalloc+0x188>)
 800af84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af86:	4b1a      	ldr	r3, [pc, #104]	; (800aff0 <pvPortMalloc+0x188>)
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	4b1b      	ldr	r3, [pc, #108]	; (800aff8 <pvPortMalloc+0x190>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d203      	bcs.n	800af9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af92:	4b17      	ldr	r3, [pc, #92]	; (800aff0 <pvPortMalloc+0x188>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a18      	ldr	r2, [pc, #96]	; (800aff8 <pvPortMalloc+0x190>)
 800af98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9c:	685a      	ldr	r2, [r3, #4]
 800af9e:	4b13      	ldr	r3, [pc, #76]	; (800afec <pvPortMalloc+0x184>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	431a      	orrs	r2, r3
 800afa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800afa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afaa:	2200      	movs	r2, #0
 800afac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800afae:	4b13      	ldr	r3, [pc, #76]	; (800affc <pvPortMalloc+0x194>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	3301      	adds	r3, #1
 800afb4:	4a11      	ldr	r2, [pc, #68]	; (800affc <pvPortMalloc+0x194>)
 800afb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800afb8:	f7fe fbe4 	bl	8009784 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	f003 0307 	and.w	r3, r3, #7
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00a      	beq.n	800afdc <pvPortMalloc+0x174>
	__asm volatile
 800afc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afca:	f383 8811 	msr	BASEPRI, r3
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	60fb      	str	r3, [r7, #12]
}
 800afd8:	bf00      	nop
 800afda:	e7fe      	b.n	800afda <pvPortMalloc+0x172>
	return pvReturn;
 800afdc:	69fb      	ldr	r3, [r7, #28]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3728      	adds	r7, #40	; 0x28
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	20003f64 	.word	0x20003f64
 800afec:	20003f78 	.word	0x20003f78
 800aff0:	20003f68 	.word	0x20003f68
 800aff4:	20003f5c 	.word	0x20003f5c
 800aff8:	20003f6c 	.word	0x20003f6c
 800affc:	20003f70 	.word	0x20003f70

0800b000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b086      	sub	sp, #24
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d04d      	beq.n	800b0ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b012:	2308      	movs	r3, #8
 800b014:	425b      	negs	r3, r3
 800b016:	697a      	ldr	r2, [r7, #20]
 800b018:	4413      	add	r3, r2
 800b01a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	685a      	ldr	r2, [r3, #4]
 800b024:	4b24      	ldr	r3, [pc, #144]	; (800b0b8 <vPortFree+0xb8>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4013      	ands	r3, r2
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d10a      	bne.n	800b044 <vPortFree+0x44>
	__asm volatile
 800b02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b032:	f383 8811 	msr	BASEPRI, r3
 800b036:	f3bf 8f6f 	isb	sy
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	60fb      	str	r3, [r7, #12]
}
 800b040:	bf00      	nop
 800b042:	e7fe      	b.n	800b042 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d00a      	beq.n	800b062 <vPortFree+0x62>
	__asm volatile
 800b04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b050:	f383 8811 	msr	BASEPRI, r3
 800b054:	f3bf 8f6f 	isb	sy
 800b058:	f3bf 8f4f 	dsb	sy
 800b05c:	60bb      	str	r3, [r7, #8]
}
 800b05e:	bf00      	nop
 800b060:	e7fe      	b.n	800b060 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	685a      	ldr	r2, [r3, #4]
 800b066:	4b14      	ldr	r3, [pc, #80]	; (800b0b8 <vPortFree+0xb8>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4013      	ands	r3, r2
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d01e      	beq.n	800b0ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d11a      	bne.n	800b0ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	685a      	ldr	r2, [r3, #4]
 800b07c:	4b0e      	ldr	r3, [pc, #56]	; (800b0b8 <vPortFree+0xb8>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	43db      	mvns	r3, r3
 800b082:	401a      	ands	r2, r3
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b088:	f7fe fb6e 	bl	8009768 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	685a      	ldr	r2, [r3, #4]
 800b090:	4b0a      	ldr	r3, [pc, #40]	; (800b0bc <vPortFree+0xbc>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4413      	add	r3, r2
 800b096:	4a09      	ldr	r2, [pc, #36]	; (800b0bc <vPortFree+0xbc>)
 800b098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b09a:	6938      	ldr	r0, [r7, #16]
 800b09c:	f000 f874 	bl	800b188 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b0a0:	4b07      	ldr	r3, [pc, #28]	; (800b0c0 <vPortFree+0xc0>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	4a06      	ldr	r2, [pc, #24]	; (800b0c0 <vPortFree+0xc0>)
 800b0a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b0aa:	f7fe fb6b 	bl	8009784 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b0ae:	bf00      	nop
 800b0b0:	3718      	adds	r7, #24
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	20003f78 	.word	0x20003f78
 800b0bc:	20003f68 	.word	0x20003f68
 800b0c0:	20003f74 	.word	0x20003f74

0800b0c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b0ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800b0ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b0d0:	4b27      	ldr	r3, [pc, #156]	; (800b170 <prvHeapInit+0xac>)
 800b0d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f003 0307 	and.w	r3, r3, #7
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00c      	beq.n	800b0f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	3307      	adds	r3, #7
 800b0e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f023 0307 	bic.w	r3, r3, #7
 800b0ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	4a1f      	ldr	r2, [pc, #124]	; (800b170 <prvHeapInit+0xac>)
 800b0f4:	4413      	add	r3, r2
 800b0f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b0fc:	4a1d      	ldr	r2, [pc, #116]	; (800b174 <prvHeapInit+0xb0>)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b102:	4b1c      	ldr	r3, [pc, #112]	; (800b174 <prvHeapInit+0xb0>)
 800b104:	2200      	movs	r2, #0
 800b106:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	68ba      	ldr	r2, [r7, #8]
 800b10c:	4413      	add	r3, r2
 800b10e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b110:	2208      	movs	r2, #8
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	1a9b      	subs	r3, r3, r2
 800b116:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f023 0307 	bic.w	r3, r3, #7
 800b11e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	4a15      	ldr	r2, [pc, #84]	; (800b178 <prvHeapInit+0xb4>)
 800b124:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b126:	4b14      	ldr	r3, [pc, #80]	; (800b178 <prvHeapInit+0xb4>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2200      	movs	r2, #0
 800b12c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b12e:	4b12      	ldr	r3, [pc, #72]	; (800b178 <prvHeapInit+0xb4>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2200      	movs	r2, #0
 800b134:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	1ad2      	subs	r2, r2, r3
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b144:	4b0c      	ldr	r3, [pc, #48]	; (800b178 <prvHeapInit+0xb4>)
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	4a0a      	ldr	r2, [pc, #40]	; (800b17c <prvHeapInit+0xb8>)
 800b152:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	4a09      	ldr	r2, [pc, #36]	; (800b180 <prvHeapInit+0xbc>)
 800b15a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b15c:	4b09      	ldr	r3, [pc, #36]	; (800b184 <prvHeapInit+0xc0>)
 800b15e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b162:	601a      	str	r2, [r3, #0]
}
 800b164:	bf00      	nop
 800b166:	3714      	adds	r7, #20
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	200033a4 	.word	0x200033a4
 800b174:	20003f5c 	.word	0x20003f5c
 800b178:	20003f64 	.word	0x20003f64
 800b17c:	20003f6c 	.word	0x20003f6c
 800b180:	20003f68 	.word	0x20003f68
 800b184:	20003f78 	.word	0x20003f78

0800b188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b190:	4b28      	ldr	r3, [pc, #160]	; (800b234 <prvInsertBlockIntoFreeList+0xac>)
 800b192:	60fb      	str	r3, [r7, #12]
 800b194:	e002      	b.n	800b19c <prvInsertBlockIntoFreeList+0x14>
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	60fb      	str	r3, [r7, #12]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d8f7      	bhi.n	800b196 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d108      	bne.n	800b1ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	685a      	ldr	r2, [r3, #4]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	441a      	add	r2, r3
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	68ba      	ldr	r2, [r7, #8]
 800b1d4:	441a      	add	r2, r3
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d118      	bne.n	800b210 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	4b15      	ldr	r3, [pc, #84]	; (800b238 <prvInsertBlockIntoFreeList+0xb0>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d00d      	beq.n	800b206 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	441a      	add	r2, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	601a      	str	r2, [r3, #0]
 800b204:	e008      	b.n	800b218 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b206:	4b0c      	ldr	r3, [pc, #48]	; (800b238 <prvInsertBlockIntoFreeList+0xb0>)
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	601a      	str	r2, [r3, #0]
 800b20e:	e003      	b.n	800b218 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d002      	beq.n	800b226 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b226:	bf00      	nop
 800b228:	3714      	adds	r7, #20
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop
 800b234:	20003f5c 	.word	0x20003f5c
 800b238:	20003f64 	.word	0x20003f64

0800b23c <sbrk_aligned>:
 800b23c:	b570      	push	{r4, r5, r6, lr}
 800b23e:	4e0e      	ldr	r6, [pc, #56]	; (800b278 <sbrk_aligned+0x3c>)
 800b240:	460c      	mov	r4, r1
 800b242:	6831      	ldr	r1, [r6, #0]
 800b244:	4605      	mov	r5, r0
 800b246:	b911      	cbnz	r1, 800b24e <sbrk_aligned+0x12>
 800b248:	f000 f9c8 	bl	800b5dc <_sbrk_r>
 800b24c:	6030      	str	r0, [r6, #0]
 800b24e:	4621      	mov	r1, r4
 800b250:	4628      	mov	r0, r5
 800b252:	f000 f9c3 	bl	800b5dc <_sbrk_r>
 800b256:	1c43      	adds	r3, r0, #1
 800b258:	d00a      	beq.n	800b270 <sbrk_aligned+0x34>
 800b25a:	1cc4      	adds	r4, r0, #3
 800b25c:	f024 0403 	bic.w	r4, r4, #3
 800b260:	42a0      	cmp	r0, r4
 800b262:	d007      	beq.n	800b274 <sbrk_aligned+0x38>
 800b264:	1a21      	subs	r1, r4, r0
 800b266:	4628      	mov	r0, r5
 800b268:	f000 f9b8 	bl	800b5dc <_sbrk_r>
 800b26c:	3001      	adds	r0, #1
 800b26e:	d101      	bne.n	800b274 <sbrk_aligned+0x38>
 800b270:	f04f 34ff 	mov.w	r4, #4294967295
 800b274:	4620      	mov	r0, r4
 800b276:	bd70      	pop	{r4, r5, r6, pc}
 800b278:	20003f80 	.word	0x20003f80

0800b27c <_malloc_r>:
 800b27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b280:	1ccd      	adds	r5, r1, #3
 800b282:	f025 0503 	bic.w	r5, r5, #3
 800b286:	3508      	adds	r5, #8
 800b288:	2d0c      	cmp	r5, #12
 800b28a:	bf38      	it	cc
 800b28c:	250c      	movcc	r5, #12
 800b28e:	2d00      	cmp	r5, #0
 800b290:	4607      	mov	r7, r0
 800b292:	db01      	blt.n	800b298 <_malloc_r+0x1c>
 800b294:	42a9      	cmp	r1, r5
 800b296:	d905      	bls.n	800b2a4 <_malloc_r+0x28>
 800b298:	230c      	movs	r3, #12
 800b29a:	603b      	str	r3, [r7, #0]
 800b29c:	2600      	movs	r6, #0
 800b29e:	4630      	mov	r0, r6
 800b2a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b378 <_malloc_r+0xfc>
 800b2a8:	f000 f868 	bl	800b37c <__malloc_lock>
 800b2ac:	f8d8 3000 	ldr.w	r3, [r8]
 800b2b0:	461c      	mov	r4, r3
 800b2b2:	bb5c      	cbnz	r4, 800b30c <_malloc_r+0x90>
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	4638      	mov	r0, r7
 800b2b8:	f7ff ffc0 	bl	800b23c <sbrk_aligned>
 800b2bc:	1c43      	adds	r3, r0, #1
 800b2be:	4604      	mov	r4, r0
 800b2c0:	d155      	bne.n	800b36e <_malloc_r+0xf2>
 800b2c2:	f8d8 4000 	ldr.w	r4, [r8]
 800b2c6:	4626      	mov	r6, r4
 800b2c8:	2e00      	cmp	r6, #0
 800b2ca:	d145      	bne.n	800b358 <_malloc_r+0xdc>
 800b2cc:	2c00      	cmp	r4, #0
 800b2ce:	d048      	beq.n	800b362 <_malloc_r+0xe6>
 800b2d0:	6823      	ldr	r3, [r4, #0]
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	eb04 0903 	add.w	r9, r4, r3
 800b2da:	f000 f97f 	bl	800b5dc <_sbrk_r>
 800b2de:	4581      	cmp	r9, r0
 800b2e0:	d13f      	bne.n	800b362 <_malloc_r+0xe6>
 800b2e2:	6821      	ldr	r1, [r4, #0]
 800b2e4:	1a6d      	subs	r5, r5, r1
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	4638      	mov	r0, r7
 800b2ea:	f7ff ffa7 	bl	800b23c <sbrk_aligned>
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	d037      	beq.n	800b362 <_malloc_r+0xe6>
 800b2f2:	6823      	ldr	r3, [r4, #0]
 800b2f4:	442b      	add	r3, r5
 800b2f6:	6023      	str	r3, [r4, #0]
 800b2f8:	f8d8 3000 	ldr.w	r3, [r8]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d038      	beq.n	800b372 <_malloc_r+0xf6>
 800b300:	685a      	ldr	r2, [r3, #4]
 800b302:	42a2      	cmp	r2, r4
 800b304:	d12b      	bne.n	800b35e <_malloc_r+0xe2>
 800b306:	2200      	movs	r2, #0
 800b308:	605a      	str	r2, [r3, #4]
 800b30a:	e00f      	b.n	800b32c <_malloc_r+0xb0>
 800b30c:	6822      	ldr	r2, [r4, #0]
 800b30e:	1b52      	subs	r2, r2, r5
 800b310:	d41f      	bmi.n	800b352 <_malloc_r+0xd6>
 800b312:	2a0b      	cmp	r2, #11
 800b314:	d917      	bls.n	800b346 <_malloc_r+0xca>
 800b316:	1961      	adds	r1, r4, r5
 800b318:	42a3      	cmp	r3, r4
 800b31a:	6025      	str	r5, [r4, #0]
 800b31c:	bf18      	it	ne
 800b31e:	6059      	strne	r1, [r3, #4]
 800b320:	6863      	ldr	r3, [r4, #4]
 800b322:	bf08      	it	eq
 800b324:	f8c8 1000 	streq.w	r1, [r8]
 800b328:	5162      	str	r2, [r4, r5]
 800b32a:	604b      	str	r3, [r1, #4]
 800b32c:	4638      	mov	r0, r7
 800b32e:	f104 060b 	add.w	r6, r4, #11
 800b332:	f000 f829 	bl	800b388 <__malloc_unlock>
 800b336:	f026 0607 	bic.w	r6, r6, #7
 800b33a:	1d23      	adds	r3, r4, #4
 800b33c:	1af2      	subs	r2, r6, r3
 800b33e:	d0ae      	beq.n	800b29e <_malloc_r+0x22>
 800b340:	1b9b      	subs	r3, r3, r6
 800b342:	50a3      	str	r3, [r4, r2]
 800b344:	e7ab      	b.n	800b29e <_malloc_r+0x22>
 800b346:	42a3      	cmp	r3, r4
 800b348:	6862      	ldr	r2, [r4, #4]
 800b34a:	d1dd      	bne.n	800b308 <_malloc_r+0x8c>
 800b34c:	f8c8 2000 	str.w	r2, [r8]
 800b350:	e7ec      	b.n	800b32c <_malloc_r+0xb0>
 800b352:	4623      	mov	r3, r4
 800b354:	6864      	ldr	r4, [r4, #4]
 800b356:	e7ac      	b.n	800b2b2 <_malloc_r+0x36>
 800b358:	4634      	mov	r4, r6
 800b35a:	6876      	ldr	r6, [r6, #4]
 800b35c:	e7b4      	b.n	800b2c8 <_malloc_r+0x4c>
 800b35e:	4613      	mov	r3, r2
 800b360:	e7cc      	b.n	800b2fc <_malloc_r+0x80>
 800b362:	230c      	movs	r3, #12
 800b364:	603b      	str	r3, [r7, #0]
 800b366:	4638      	mov	r0, r7
 800b368:	f000 f80e 	bl	800b388 <__malloc_unlock>
 800b36c:	e797      	b.n	800b29e <_malloc_r+0x22>
 800b36e:	6025      	str	r5, [r4, #0]
 800b370:	e7dc      	b.n	800b32c <_malloc_r+0xb0>
 800b372:	605b      	str	r3, [r3, #4]
 800b374:	deff      	udf	#255	; 0xff
 800b376:	bf00      	nop
 800b378:	20003f7c 	.word	0x20003f7c

0800b37c <__malloc_lock>:
 800b37c:	4801      	ldr	r0, [pc, #4]	; (800b384 <__malloc_lock+0x8>)
 800b37e:	f000 b967 	b.w	800b650 <__retarget_lock_acquire_recursive>
 800b382:	bf00      	nop
 800b384:	200040c0 	.word	0x200040c0

0800b388 <__malloc_unlock>:
 800b388:	4801      	ldr	r0, [pc, #4]	; (800b390 <__malloc_unlock+0x8>)
 800b38a:	f000 b962 	b.w	800b652 <__retarget_lock_release_recursive>
 800b38e:	bf00      	nop
 800b390:	200040c0 	.word	0x200040c0

0800b394 <_strtol_l.constprop.0>:
 800b394:	2b01      	cmp	r3, #1
 800b396:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b39a:	d001      	beq.n	800b3a0 <_strtol_l.constprop.0+0xc>
 800b39c:	2b24      	cmp	r3, #36	; 0x24
 800b39e:	d906      	bls.n	800b3ae <_strtol_l.constprop.0+0x1a>
 800b3a0:	f000 f92c 	bl	800b5fc <__errno>
 800b3a4:	2316      	movs	r3, #22
 800b3a6:	6003      	str	r3, [r0, #0]
 800b3a8:	2000      	movs	r0, #0
 800b3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b494 <_strtol_l.constprop.0+0x100>
 800b3b2:	460d      	mov	r5, r1
 800b3b4:	462e      	mov	r6, r5
 800b3b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3ba:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b3be:	f017 0708 	ands.w	r7, r7, #8
 800b3c2:	d1f7      	bne.n	800b3b4 <_strtol_l.constprop.0+0x20>
 800b3c4:	2c2d      	cmp	r4, #45	; 0x2d
 800b3c6:	d132      	bne.n	800b42e <_strtol_l.constprop.0+0x9a>
 800b3c8:	782c      	ldrb	r4, [r5, #0]
 800b3ca:	2701      	movs	r7, #1
 800b3cc:	1cb5      	adds	r5, r6, #2
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d05b      	beq.n	800b48a <_strtol_l.constprop.0+0xf6>
 800b3d2:	2b10      	cmp	r3, #16
 800b3d4:	d109      	bne.n	800b3ea <_strtol_l.constprop.0+0x56>
 800b3d6:	2c30      	cmp	r4, #48	; 0x30
 800b3d8:	d107      	bne.n	800b3ea <_strtol_l.constprop.0+0x56>
 800b3da:	782c      	ldrb	r4, [r5, #0]
 800b3dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b3e0:	2c58      	cmp	r4, #88	; 0x58
 800b3e2:	d14d      	bne.n	800b480 <_strtol_l.constprop.0+0xec>
 800b3e4:	786c      	ldrb	r4, [r5, #1]
 800b3e6:	2310      	movs	r3, #16
 800b3e8:	3502      	adds	r5, #2
 800b3ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b3ee:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3f2:	f04f 0e00 	mov.w	lr, #0
 800b3f6:	fbb8 f9f3 	udiv	r9, r8, r3
 800b3fa:	4676      	mov	r6, lr
 800b3fc:	fb03 8a19 	mls	sl, r3, r9, r8
 800b400:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b404:	f1bc 0f09 	cmp.w	ip, #9
 800b408:	d816      	bhi.n	800b438 <_strtol_l.constprop.0+0xa4>
 800b40a:	4664      	mov	r4, ip
 800b40c:	42a3      	cmp	r3, r4
 800b40e:	dd24      	ble.n	800b45a <_strtol_l.constprop.0+0xc6>
 800b410:	f1be 3fff 	cmp.w	lr, #4294967295
 800b414:	d008      	beq.n	800b428 <_strtol_l.constprop.0+0x94>
 800b416:	45b1      	cmp	r9, r6
 800b418:	d31c      	bcc.n	800b454 <_strtol_l.constprop.0+0xc0>
 800b41a:	d101      	bne.n	800b420 <_strtol_l.constprop.0+0x8c>
 800b41c:	45a2      	cmp	sl, r4
 800b41e:	db19      	blt.n	800b454 <_strtol_l.constprop.0+0xc0>
 800b420:	fb06 4603 	mla	r6, r6, r3, r4
 800b424:	f04f 0e01 	mov.w	lr, #1
 800b428:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b42c:	e7e8      	b.n	800b400 <_strtol_l.constprop.0+0x6c>
 800b42e:	2c2b      	cmp	r4, #43	; 0x2b
 800b430:	bf04      	itt	eq
 800b432:	782c      	ldrbeq	r4, [r5, #0]
 800b434:	1cb5      	addeq	r5, r6, #2
 800b436:	e7ca      	b.n	800b3ce <_strtol_l.constprop.0+0x3a>
 800b438:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b43c:	f1bc 0f19 	cmp.w	ip, #25
 800b440:	d801      	bhi.n	800b446 <_strtol_l.constprop.0+0xb2>
 800b442:	3c37      	subs	r4, #55	; 0x37
 800b444:	e7e2      	b.n	800b40c <_strtol_l.constprop.0+0x78>
 800b446:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b44a:	f1bc 0f19 	cmp.w	ip, #25
 800b44e:	d804      	bhi.n	800b45a <_strtol_l.constprop.0+0xc6>
 800b450:	3c57      	subs	r4, #87	; 0x57
 800b452:	e7db      	b.n	800b40c <_strtol_l.constprop.0+0x78>
 800b454:	f04f 3eff 	mov.w	lr, #4294967295
 800b458:	e7e6      	b.n	800b428 <_strtol_l.constprop.0+0x94>
 800b45a:	f1be 3fff 	cmp.w	lr, #4294967295
 800b45e:	d105      	bne.n	800b46c <_strtol_l.constprop.0+0xd8>
 800b460:	2322      	movs	r3, #34	; 0x22
 800b462:	6003      	str	r3, [r0, #0]
 800b464:	4646      	mov	r6, r8
 800b466:	b942      	cbnz	r2, 800b47a <_strtol_l.constprop.0+0xe6>
 800b468:	4630      	mov	r0, r6
 800b46a:	e79e      	b.n	800b3aa <_strtol_l.constprop.0+0x16>
 800b46c:	b107      	cbz	r7, 800b470 <_strtol_l.constprop.0+0xdc>
 800b46e:	4276      	negs	r6, r6
 800b470:	2a00      	cmp	r2, #0
 800b472:	d0f9      	beq.n	800b468 <_strtol_l.constprop.0+0xd4>
 800b474:	f1be 0f00 	cmp.w	lr, #0
 800b478:	d000      	beq.n	800b47c <_strtol_l.constprop.0+0xe8>
 800b47a:	1e69      	subs	r1, r5, #1
 800b47c:	6011      	str	r1, [r2, #0]
 800b47e:	e7f3      	b.n	800b468 <_strtol_l.constprop.0+0xd4>
 800b480:	2430      	movs	r4, #48	; 0x30
 800b482:	2b00      	cmp	r3, #0
 800b484:	d1b1      	bne.n	800b3ea <_strtol_l.constprop.0+0x56>
 800b486:	2308      	movs	r3, #8
 800b488:	e7af      	b.n	800b3ea <_strtol_l.constprop.0+0x56>
 800b48a:	2c30      	cmp	r4, #48	; 0x30
 800b48c:	d0a5      	beq.n	800b3da <_strtol_l.constprop.0+0x46>
 800b48e:	230a      	movs	r3, #10
 800b490:	e7ab      	b.n	800b3ea <_strtol_l.constprop.0+0x56>
 800b492:	bf00      	nop
 800b494:	0800c31d 	.word	0x0800c31d

0800b498 <strtol>:
 800b498:	4613      	mov	r3, r2
 800b49a:	460a      	mov	r2, r1
 800b49c:	4601      	mov	r1, r0
 800b49e:	4802      	ldr	r0, [pc, #8]	; (800b4a8 <strtol+0x10>)
 800b4a0:	6800      	ldr	r0, [r0, #0]
 800b4a2:	f7ff bf77 	b.w	800b394 <_strtol_l.constprop.0>
 800b4a6:	bf00      	nop
 800b4a8:	200003ac 	.word	0x200003ac

0800b4ac <_vsniprintf_r>:
 800b4ac:	b530      	push	{r4, r5, lr}
 800b4ae:	4614      	mov	r4, r2
 800b4b0:	2c00      	cmp	r4, #0
 800b4b2:	b09b      	sub	sp, #108	; 0x6c
 800b4b4:	4605      	mov	r5, r0
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	da05      	bge.n	800b4c6 <_vsniprintf_r+0x1a>
 800b4ba:	238b      	movs	r3, #139	; 0x8b
 800b4bc:	6003      	str	r3, [r0, #0]
 800b4be:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c2:	b01b      	add	sp, #108	; 0x6c
 800b4c4:	bd30      	pop	{r4, r5, pc}
 800b4c6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b4ca:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b4ce:	bf14      	ite	ne
 800b4d0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b4d4:	4623      	moveq	r3, r4
 800b4d6:	9302      	str	r3, [sp, #8]
 800b4d8:	9305      	str	r3, [sp, #20]
 800b4da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4de:	9100      	str	r1, [sp, #0]
 800b4e0:	9104      	str	r1, [sp, #16]
 800b4e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b4e6:	4669      	mov	r1, sp
 800b4e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b4ea:	f000 f96f 	bl	800b7cc <_svfiprintf_r>
 800b4ee:	1c43      	adds	r3, r0, #1
 800b4f0:	bfbc      	itt	lt
 800b4f2:	238b      	movlt	r3, #139	; 0x8b
 800b4f4:	602b      	strlt	r3, [r5, #0]
 800b4f6:	2c00      	cmp	r4, #0
 800b4f8:	d0e3      	beq.n	800b4c2 <_vsniprintf_r+0x16>
 800b4fa:	9b00      	ldr	r3, [sp, #0]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	701a      	strb	r2, [r3, #0]
 800b500:	e7df      	b.n	800b4c2 <_vsniprintf_r+0x16>
	...

0800b504 <vsniprintf>:
 800b504:	b507      	push	{r0, r1, r2, lr}
 800b506:	9300      	str	r3, [sp, #0]
 800b508:	4613      	mov	r3, r2
 800b50a:	460a      	mov	r2, r1
 800b50c:	4601      	mov	r1, r0
 800b50e:	4803      	ldr	r0, [pc, #12]	; (800b51c <vsniprintf+0x18>)
 800b510:	6800      	ldr	r0, [r0, #0]
 800b512:	f7ff ffcb 	bl	800b4ac <_vsniprintf_r>
 800b516:	b003      	add	sp, #12
 800b518:	f85d fb04 	ldr.w	pc, [sp], #4
 800b51c:	200003ac 	.word	0x200003ac

0800b520 <memset>:
 800b520:	4402      	add	r2, r0
 800b522:	4603      	mov	r3, r0
 800b524:	4293      	cmp	r3, r2
 800b526:	d100      	bne.n	800b52a <memset+0xa>
 800b528:	4770      	bx	lr
 800b52a:	f803 1b01 	strb.w	r1, [r3], #1
 800b52e:	e7f9      	b.n	800b524 <memset+0x4>

0800b530 <_reclaim_reent>:
 800b530:	4b29      	ldr	r3, [pc, #164]	; (800b5d8 <_reclaim_reent+0xa8>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4283      	cmp	r3, r0
 800b536:	b570      	push	{r4, r5, r6, lr}
 800b538:	4604      	mov	r4, r0
 800b53a:	d04b      	beq.n	800b5d4 <_reclaim_reent+0xa4>
 800b53c:	69c3      	ldr	r3, [r0, #28]
 800b53e:	b143      	cbz	r3, 800b552 <_reclaim_reent+0x22>
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d144      	bne.n	800b5d0 <_reclaim_reent+0xa0>
 800b546:	69e3      	ldr	r3, [r4, #28]
 800b548:	6819      	ldr	r1, [r3, #0]
 800b54a:	b111      	cbz	r1, 800b552 <_reclaim_reent+0x22>
 800b54c:	4620      	mov	r0, r4
 800b54e:	f000 f897 	bl	800b680 <_free_r>
 800b552:	6961      	ldr	r1, [r4, #20]
 800b554:	b111      	cbz	r1, 800b55c <_reclaim_reent+0x2c>
 800b556:	4620      	mov	r0, r4
 800b558:	f000 f892 	bl	800b680 <_free_r>
 800b55c:	69e1      	ldr	r1, [r4, #28]
 800b55e:	b111      	cbz	r1, 800b566 <_reclaim_reent+0x36>
 800b560:	4620      	mov	r0, r4
 800b562:	f000 f88d 	bl	800b680 <_free_r>
 800b566:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b568:	b111      	cbz	r1, 800b570 <_reclaim_reent+0x40>
 800b56a:	4620      	mov	r0, r4
 800b56c:	f000 f888 	bl	800b680 <_free_r>
 800b570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b572:	b111      	cbz	r1, 800b57a <_reclaim_reent+0x4a>
 800b574:	4620      	mov	r0, r4
 800b576:	f000 f883 	bl	800b680 <_free_r>
 800b57a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b57c:	b111      	cbz	r1, 800b584 <_reclaim_reent+0x54>
 800b57e:	4620      	mov	r0, r4
 800b580:	f000 f87e 	bl	800b680 <_free_r>
 800b584:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b586:	b111      	cbz	r1, 800b58e <_reclaim_reent+0x5e>
 800b588:	4620      	mov	r0, r4
 800b58a:	f000 f879 	bl	800b680 <_free_r>
 800b58e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b590:	b111      	cbz	r1, 800b598 <_reclaim_reent+0x68>
 800b592:	4620      	mov	r0, r4
 800b594:	f000 f874 	bl	800b680 <_free_r>
 800b598:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b59a:	b111      	cbz	r1, 800b5a2 <_reclaim_reent+0x72>
 800b59c:	4620      	mov	r0, r4
 800b59e:	f000 f86f 	bl	800b680 <_free_r>
 800b5a2:	6a23      	ldr	r3, [r4, #32]
 800b5a4:	b1b3      	cbz	r3, 800b5d4 <_reclaim_reent+0xa4>
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5ac:	4718      	bx	r3
 800b5ae:	5949      	ldr	r1, [r1, r5]
 800b5b0:	b941      	cbnz	r1, 800b5c4 <_reclaim_reent+0x94>
 800b5b2:	3504      	adds	r5, #4
 800b5b4:	69e3      	ldr	r3, [r4, #28]
 800b5b6:	2d80      	cmp	r5, #128	; 0x80
 800b5b8:	68d9      	ldr	r1, [r3, #12]
 800b5ba:	d1f8      	bne.n	800b5ae <_reclaim_reent+0x7e>
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f000 f85f 	bl	800b680 <_free_r>
 800b5c2:	e7c0      	b.n	800b546 <_reclaim_reent+0x16>
 800b5c4:	680e      	ldr	r6, [r1, #0]
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f000 f85a 	bl	800b680 <_free_r>
 800b5cc:	4631      	mov	r1, r6
 800b5ce:	e7ef      	b.n	800b5b0 <_reclaim_reent+0x80>
 800b5d0:	2500      	movs	r5, #0
 800b5d2:	e7ef      	b.n	800b5b4 <_reclaim_reent+0x84>
 800b5d4:	bd70      	pop	{r4, r5, r6, pc}
 800b5d6:	bf00      	nop
 800b5d8:	200003ac 	.word	0x200003ac

0800b5dc <_sbrk_r>:
 800b5dc:	b538      	push	{r3, r4, r5, lr}
 800b5de:	4d06      	ldr	r5, [pc, #24]	; (800b5f8 <_sbrk_r+0x1c>)
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	4608      	mov	r0, r1
 800b5e6:	602b      	str	r3, [r5, #0]
 800b5e8:	f7f6 fc86 	bl	8001ef8 <_sbrk>
 800b5ec:	1c43      	adds	r3, r0, #1
 800b5ee:	d102      	bne.n	800b5f6 <_sbrk_r+0x1a>
 800b5f0:	682b      	ldr	r3, [r5, #0]
 800b5f2:	b103      	cbz	r3, 800b5f6 <_sbrk_r+0x1a>
 800b5f4:	6023      	str	r3, [r4, #0]
 800b5f6:	bd38      	pop	{r3, r4, r5, pc}
 800b5f8:	200040bc 	.word	0x200040bc

0800b5fc <__errno>:
 800b5fc:	4b01      	ldr	r3, [pc, #4]	; (800b604 <__errno+0x8>)
 800b5fe:	6818      	ldr	r0, [r3, #0]
 800b600:	4770      	bx	lr
 800b602:	bf00      	nop
 800b604:	200003ac 	.word	0x200003ac

0800b608 <__libc_init_array>:
 800b608:	b570      	push	{r4, r5, r6, lr}
 800b60a:	4d0d      	ldr	r5, [pc, #52]	; (800b640 <__libc_init_array+0x38>)
 800b60c:	4c0d      	ldr	r4, [pc, #52]	; (800b644 <__libc_init_array+0x3c>)
 800b60e:	1b64      	subs	r4, r4, r5
 800b610:	10a4      	asrs	r4, r4, #2
 800b612:	2600      	movs	r6, #0
 800b614:	42a6      	cmp	r6, r4
 800b616:	d109      	bne.n	800b62c <__libc_init_array+0x24>
 800b618:	4d0b      	ldr	r5, [pc, #44]	; (800b648 <__libc_init_array+0x40>)
 800b61a:	4c0c      	ldr	r4, [pc, #48]	; (800b64c <__libc_init_array+0x44>)
 800b61c:	f000 fbfe 	bl	800be1c <_init>
 800b620:	1b64      	subs	r4, r4, r5
 800b622:	10a4      	asrs	r4, r4, #2
 800b624:	2600      	movs	r6, #0
 800b626:	42a6      	cmp	r6, r4
 800b628:	d105      	bne.n	800b636 <__libc_init_array+0x2e>
 800b62a:	bd70      	pop	{r4, r5, r6, pc}
 800b62c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b630:	4798      	blx	r3
 800b632:	3601      	adds	r6, #1
 800b634:	e7ee      	b.n	800b614 <__libc_init_array+0xc>
 800b636:	f855 3b04 	ldr.w	r3, [r5], #4
 800b63a:	4798      	blx	r3
 800b63c:	3601      	adds	r6, #1
 800b63e:	e7f2      	b.n	800b626 <__libc_init_array+0x1e>
 800b640:	0800c458 	.word	0x0800c458
 800b644:	0800c458 	.word	0x0800c458
 800b648:	0800c458 	.word	0x0800c458
 800b64c:	0800c45c 	.word	0x0800c45c

0800b650 <__retarget_lock_acquire_recursive>:
 800b650:	4770      	bx	lr

0800b652 <__retarget_lock_release_recursive>:
 800b652:	4770      	bx	lr

0800b654 <strcpy>:
 800b654:	4603      	mov	r3, r0
 800b656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b65a:	f803 2b01 	strb.w	r2, [r3], #1
 800b65e:	2a00      	cmp	r2, #0
 800b660:	d1f9      	bne.n	800b656 <strcpy+0x2>
 800b662:	4770      	bx	lr

0800b664 <memcpy>:
 800b664:	440a      	add	r2, r1
 800b666:	4291      	cmp	r1, r2
 800b668:	f100 33ff 	add.w	r3, r0, #4294967295
 800b66c:	d100      	bne.n	800b670 <memcpy+0xc>
 800b66e:	4770      	bx	lr
 800b670:	b510      	push	{r4, lr}
 800b672:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b67a:	4291      	cmp	r1, r2
 800b67c:	d1f9      	bne.n	800b672 <memcpy+0xe>
 800b67e:	bd10      	pop	{r4, pc}

0800b680 <_free_r>:
 800b680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b682:	2900      	cmp	r1, #0
 800b684:	d044      	beq.n	800b710 <_free_r+0x90>
 800b686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b68a:	9001      	str	r0, [sp, #4]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f1a1 0404 	sub.w	r4, r1, #4
 800b692:	bfb8      	it	lt
 800b694:	18e4      	addlt	r4, r4, r3
 800b696:	f7ff fe71 	bl	800b37c <__malloc_lock>
 800b69a:	4a1e      	ldr	r2, [pc, #120]	; (800b714 <_free_r+0x94>)
 800b69c:	9801      	ldr	r0, [sp, #4]
 800b69e:	6813      	ldr	r3, [r2, #0]
 800b6a0:	b933      	cbnz	r3, 800b6b0 <_free_r+0x30>
 800b6a2:	6063      	str	r3, [r4, #4]
 800b6a4:	6014      	str	r4, [r2, #0]
 800b6a6:	b003      	add	sp, #12
 800b6a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6ac:	f7ff be6c 	b.w	800b388 <__malloc_unlock>
 800b6b0:	42a3      	cmp	r3, r4
 800b6b2:	d908      	bls.n	800b6c6 <_free_r+0x46>
 800b6b4:	6825      	ldr	r5, [r4, #0]
 800b6b6:	1961      	adds	r1, r4, r5
 800b6b8:	428b      	cmp	r3, r1
 800b6ba:	bf01      	itttt	eq
 800b6bc:	6819      	ldreq	r1, [r3, #0]
 800b6be:	685b      	ldreq	r3, [r3, #4]
 800b6c0:	1949      	addeq	r1, r1, r5
 800b6c2:	6021      	streq	r1, [r4, #0]
 800b6c4:	e7ed      	b.n	800b6a2 <_free_r+0x22>
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	b10b      	cbz	r3, 800b6d0 <_free_r+0x50>
 800b6cc:	42a3      	cmp	r3, r4
 800b6ce:	d9fa      	bls.n	800b6c6 <_free_r+0x46>
 800b6d0:	6811      	ldr	r1, [r2, #0]
 800b6d2:	1855      	adds	r5, r2, r1
 800b6d4:	42a5      	cmp	r5, r4
 800b6d6:	d10b      	bne.n	800b6f0 <_free_r+0x70>
 800b6d8:	6824      	ldr	r4, [r4, #0]
 800b6da:	4421      	add	r1, r4
 800b6dc:	1854      	adds	r4, r2, r1
 800b6de:	42a3      	cmp	r3, r4
 800b6e0:	6011      	str	r1, [r2, #0]
 800b6e2:	d1e0      	bne.n	800b6a6 <_free_r+0x26>
 800b6e4:	681c      	ldr	r4, [r3, #0]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	6053      	str	r3, [r2, #4]
 800b6ea:	440c      	add	r4, r1
 800b6ec:	6014      	str	r4, [r2, #0]
 800b6ee:	e7da      	b.n	800b6a6 <_free_r+0x26>
 800b6f0:	d902      	bls.n	800b6f8 <_free_r+0x78>
 800b6f2:	230c      	movs	r3, #12
 800b6f4:	6003      	str	r3, [r0, #0]
 800b6f6:	e7d6      	b.n	800b6a6 <_free_r+0x26>
 800b6f8:	6825      	ldr	r5, [r4, #0]
 800b6fa:	1961      	adds	r1, r4, r5
 800b6fc:	428b      	cmp	r3, r1
 800b6fe:	bf04      	itt	eq
 800b700:	6819      	ldreq	r1, [r3, #0]
 800b702:	685b      	ldreq	r3, [r3, #4]
 800b704:	6063      	str	r3, [r4, #4]
 800b706:	bf04      	itt	eq
 800b708:	1949      	addeq	r1, r1, r5
 800b70a:	6021      	streq	r1, [r4, #0]
 800b70c:	6054      	str	r4, [r2, #4]
 800b70e:	e7ca      	b.n	800b6a6 <_free_r+0x26>
 800b710:	b003      	add	sp, #12
 800b712:	bd30      	pop	{r4, r5, pc}
 800b714:	20003f7c 	.word	0x20003f7c

0800b718 <__ssputs_r>:
 800b718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b71c:	688e      	ldr	r6, [r1, #8]
 800b71e:	461f      	mov	r7, r3
 800b720:	42be      	cmp	r6, r7
 800b722:	680b      	ldr	r3, [r1, #0]
 800b724:	4682      	mov	sl, r0
 800b726:	460c      	mov	r4, r1
 800b728:	4690      	mov	r8, r2
 800b72a:	d82c      	bhi.n	800b786 <__ssputs_r+0x6e>
 800b72c:	898a      	ldrh	r2, [r1, #12]
 800b72e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b732:	d026      	beq.n	800b782 <__ssputs_r+0x6a>
 800b734:	6965      	ldr	r5, [r4, #20]
 800b736:	6909      	ldr	r1, [r1, #16]
 800b738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b73c:	eba3 0901 	sub.w	r9, r3, r1
 800b740:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b744:	1c7b      	adds	r3, r7, #1
 800b746:	444b      	add	r3, r9
 800b748:	106d      	asrs	r5, r5, #1
 800b74a:	429d      	cmp	r5, r3
 800b74c:	bf38      	it	cc
 800b74e:	461d      	movcc	r5, r3
 800b750:	0553      	lsls	r3, r2, #21
 800b752:	d527      	bpl.n	800b7a4 <__ssputs_r+0x8c>
 800b754:	4629      	mov	r1, r5
 800b756:	f7ff fd91 	bl	800b27c <_malloc_r>
 800b75a:	4606      	mov	r6, r0
 800b75c:	b360      	cbz	r0, 800b7b8 <__ssputs_r+0xa0>
 800b75e:	6921      	ldr	r1, [r4, #16]
 800b760:	464a      	mov	r2, r9
 800b762:	f7ff ff7f 	bl	800b664 <memcpy>
 800b766:	89a3      	ldrh	r3, [r4, #12]
 800b768:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b76c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b770:	81a3      	strh	r3, [r4, #12]
 800b772:	6126      	str	r6, [r4, #16]
 800b774:	6165      	str	r5, [r4, #20]
 800b776:	444e      	add	r6, r9
 800b778:	eba5 0509 	sub.w	r5, r5, r9
 800b77c:	6026      	str	r6, [r4, #0]
 800b77e:	60a5      	str	r5, [r4, #8]
 800b780:	463e      	mov	r6, r7
 800b782:	42be      	cmp	r6, r7
 800b784:	d900      	bls.n	800b788 <__ssputs_r+0x70>
 800b786:	463e      	mov	r6, r7
 800b788:	6820      	ldr	r0, [r4, #0]
 800b78a:	4632      	mov	r2, r6
 800b78c:	4641      	mov	r1, r8
 800b78e:	f000 faab 	bl	800bce8 <memmove>
 800b792:	68a3      	ldr	r3, [r4, #8]
 800b794:	1b9b      	subs	r3, r3, r6
 800b796:	60a3      	str	r3, [r4, #8]
 800b798:	6823      	ldr	r3, [r4, #0]
 800b79a:	4433      	add	r3, r6
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	2000      	movs	r0, #0
 800b7a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7a4:	462a      	mov	r2, r5
 800b7a6:	f000 fab9 	bl	800bd1c <_realloc_r>
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	d1e0      	bne.n	800b772 <__ssputs_r+0x5a>
 800b7b0:	6921      	ldr	r1, [r4, #16]
 800b7b2:	4650      	mov	r0, sl
 800b7b4:	f7ff ff64 	bl	800b680 <_free_r>
 800b7b8:	230c      	movs	r3, #12
 800b7ba:	f8ca 3000 	str.w	r3, [sl]
 800b7be:	89a3      	ldrh	r3, [r4, #12]
 800b7c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7c4:	81a3      	strh	r3, [r4, #12]
 800b7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ca:	e7e9      	b.n	800b7a0 <__ssputs_r+0x88>

0800b7cc <_svfiprintf_r>:
 800b7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d0:	4698      	mov	r8, r3
 800b7d2:	898b      	ldrh	r3, [r1, #12]
 800b7d4:	061b      	lsls	r3, r3, #24
 800b7d6:	b09d      	sub	sp, #116	; 0x74
 800b7d8:	4607      	mov	r7, r0
 800b7da:	460d      	mov	r5, r1
 800b7dc:	4614      	mov	r4, r2
 800b7de:	d50e      	bpl.n	800b7fe <_svfiprintf_r+0x32>
 800b7e0:	690b      	ldr	r3, [r1, #16]
 800b7e2:	b963      	cbnz	r3, 800b7fe <_svfiprintf_r+0x32>
 800b7e4:	2140      	movs	r1, #64	; 0x40
 800b7e6:	f7ff fd49 	bl	800b27c <_malloc_r>
 800b7ea:	6028      	str	r0, [r5, #0]
 800b7ec:	6128      	str	r0, [r5, #16]
 800b7ee:	b920      	cbnz	r0, 800b7fa <_svfiprintf_r+0x2e>
 800b7f0:	230c      	movs	r3, #12
 800b7f2:	603b      	str	r3, [r7, #0]
 800b7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f8:	e0d0      	b.n	800b99c <_svfiprintf_r+0x1d0>
 800b7fa:	2340      	movs	r3, #64	; 0x40
 800b7fc:	616b      	str	r3, [r5, #20]
 800b7fe:	2300      	movs	r3, #0
 800b800:	9309      	str	r3, [sp, #36]	; 0x24
 800b802:	2320      	movs	r3, #32
 800b804:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b808:	f8cd 800c 	str.w	r8, [sp, #12]
 800b80c:	2330      	movs	r3, #48	; 0x30
 800b80e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b9b4 <_svfiprintf_r+0x1e8>
 800b812:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b816:	f04f 0901 	mov.w	r9, #1
 800b81a:	4623      	mov	r3, r4
 800b81c:	469a      	mov	sl, r3
 800b81e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b822:	b10a      	cbz	r2, 800b828 <_svfiprintf_r+0x5c>
 800b824:	2a25      	cmp	r2, #37	; 0x25
 800b826:	d1f9      	bne.n	800b81c <_svfiprintf_r+0x50>
 800b828:	ebba 0b04 	subs.w	fp, sl, r4
 800b82c:	d00b      	beq.n	800b846 <_svfiprintf_r+0x7a>
 800b82e:	465b      	mov	r3, fp
 800b830:	4622      	mov	r2, r4
 800b832:	4629      	mov	r1, r5
 800b834:	4638      	mov	r0, r7
 800b836:	f7ff ff6f 	bl	800b718 <__ssputs_r>
 800b83a:	3001      	adds	r0, #1
 800b83c:	f000 80a9 	beq.w	800b992 <_svfiprintf_r+0x1c6>
 800b840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b842:	445a      	add	r2, fp
 800b844:	9209      	str	r2, [sp, #36]	; 0x24
 800b846:	f89a 3000 	ldrb.w	r3, [sl]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	f000 80a1 	beq.w	800b992 <_svfiprintf_r+0x1c6>
 800b850:	2300      	movs	r3, #0
 800b852:	f04f 32ff 	mov.w	r2, #4294967295
 800b856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b85a:	f10a 0a01 	add.w	sl, sl, #1
 800b85e:	9304      	str	r3, [sp, #16]
 800b860:	9307      	str	r3, [sp, #28]
 800b862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b866:	931a      	str	r3, [sp, #104]	; 0x68
 800b868:	4654      	mov	r4, sl
 800b86a:	2205      	movs	r2, #5
 800b86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b870:	4850      	ldr	r0, [pc, #320]	; (800b9b4 <_svfiprintf_r+0x1e8>)
 800b872:	f7f4 fcb5 	bl	80001e0 <memchr>
 800b876:	9a04      	ldr	r2, [sp, #16]
 800b878:	b9d8      	cbnz	r0, 800b8b2 <_svfiprintf_r+0xe6>
 800b87a:	06d0      	lsls	r0, r2, #27
 800b87c:	bf44      	itt	mi
 800b87e:	2320      	movmi	r3, #32
 800b880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b884:	0711      	lsls	r1, r2, #28
 800b886:	bf44      	itt	mi
 800b888:	232b      	movmi	r3, #43	; 0x2b
 800b88a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b88e:	f89a 3000 	ldrb.w	r3, [sl]
 800b892:	2b2a      	cmp	r3, #42	; 0x2a
 800b894:	d015      	beq.n	800b8c2 <_svfiprintf_r+0xf6>
 800b896:	9a07      	ldr	r2, [sp, #28]
 800b898:	4654      	mov	r4, sl
 800b89a:	2000      	movs	r0, #0
 800b89c:	f04f 0c0a 	mov.w	ip, #10
 800b8a0:	4621      	mov	r1, r4
 800b8a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8a6:	3b30      	subs	r3, #48	; 0x30
 800b8a8:	2b09      	cmp	r3, #9
 800b8aa:	d94d      	bls.n	800b948 <_svfiprintf_r+0x17c>
 800b8ac:	b1b0      	cbz	r0, 800b8dc <_svfiprintf_r+0x110>
 800b8ae:	9207      	str	r2, [sp, #28]
 800b8b0:	e014      	b.n	800b8dc <_svfiprintf_r+0x110>
 800b8b2:	eba0 0308 	sub.w	r3, r0, r8
 800b8b6:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	9304      	str	r3, [sp, #16]
 800b8be:	46a2      	mov	sl, r4
 800b8c0:	e7d2      	b.n	800b868 <_svfiprintf_r+0x9c>
 800b8c2:	9b03      	ldr	r3, [sp, #12]
 800b8c4:	1d19      	adds	r1, r3, #4
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	9103      	str	r1, [sp, #12]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	bfbb      	ittet	lt
 800b8ce:	425b      	neglt	r3, r3
 800b8d0:	f042 0202 	orrlt.w	r2, r2, #2
 800b8d4:	9307      	strge	r3, [sp, #28]
 800b8d6:	9307      	strlt	r3, [sp, #28]
 800b8d8:	bfb8      	it	lt
 800b8da:	9204      	strlt	r2, [sp, #16]
 800b8dc:	7823      	ldrb	r3, [r4, #0]
 800b8de:	2b2e      	cmp	r3, #46	; 0x2e
 800b8e0:	d10c      	bne.n	800b8fc <_svfiprintf_r+0x130>
 800b8e2:	7863      	ldrb	r3, [r4, #1]
 800b8e4:	2b2a      	cmp	r3, #42	; 0x2a
 800b8e6:	d134      	bne.n	800b952 <_svfiprintf_r+0x186>
 800b8e8:	9b03      	ldr	r3, [sp, #12]
 800b8ea:	1d1a      	adds	r2, r3, #4
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	9203      	str	r2, [sp, #12]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	bfb8      	it	lt
 800b8f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8f8:	3402      	adds	r4, #2
 800b8fa:	9305      	str	r3, [sp, #20]
 800b8fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b9c4 <_svfiprintf_r+0x1f8>
 800b900:	7821      	ldrb	r1, [r4, #0]
 800b902:	2203      	movs	r2, #3
 800b904:	4650      	mov	r0, sl
 800b906:	f7f4 fc6b 	bl	80001e0 <memchr>
 800b90a:	b138      	cbz	r0, 800b91c <_svfiprintf_r+0x150>
 800b90c:	9b04      	ldr	r3, [sp, #16]
 800b90e:	eba0 000a 	sub.w	r0, r0, sl
 800b912:	2240      	movs	r2, #64	; 0x40
 800b914:	4082      	lsls	r2, r0
 800b916:	4313      	orrs	r3, r2
 800b918:	3401      	adds	r4, #1
 800b91a:	9304      	str	r3, [sp, #16]
 800b91c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b920:	4825      	ldr	r0, [pc, #148]	; (800b9b8 <_svfiprintf_r+0x1ec>)
 800b922:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b926:	2206      	movs	r2, #6
 800b928:	f7f4 fc5a 	bl	80001e0 <memchr>
 800b92c:	2800      	cmp	r0, #0
 800b92e:	d038      	beq.n	800b9a2 <_svfiprintf_r+0x1d6>
 800b930:	4b22      	ldr	r3, [pc, #136]	; (800b9bc <_svfiprintf_r+0x1f0>)
 800b932:	bb1b      	cbnz	r3, 800b97c <_svfiprintf_r+0x1b0>
 800b934:	9b03      	ldr	r3, [sp, #12]
 800b936:	3307      	adds	r3, #7
 800b938:	f023 0307 	bic.w	r3, r3, #7
 800b93c:	3308      	adds	r3, #8
 800b93e:	9303      	str	r3, [sp, #12]
 800b940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b942:	4433      	add	r3, r6
 800b944:	9309      	str	r3, [sp, #36]	; 0x24
 800b946:	e768      	b.n	800b81a <_svfiprintf_r+0x4e>
 800b948:	fb0c 3202 	mla	r2, ip, r2, r3
 800b94c:	460c      	mov	r4, r1
 800b94e:	2001      	movs	r0, #1
 800b950:	e7a6      	b.n	800b8a0 <_svfiprintf_r+0xd4>
 800b952:	2300      	movs	r3, #0
 800b954:	3401      	adds	r4, #1
 800b956:	9305      	str	r3, [sp, #20]
 800b958:	4619      	mov	r1, r3
 800b95a:	f04f 0c0a 	mov.w	ip, #10
 800b95e:	4620      	mov	r0, r4
 800b960:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b964:	3a30      	subs	r2, #48	; 0x30
 800b966:	2a09      	cmp	r2, #9
 800b968:	d903      	bls.n	800b972 <_svfiprintf_r+0x1a6>
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d0c6      	beq.n	800b8fc <_svfiprintf_r+0x130>
 800b96e:	9105      	str	r1, [sp, #20]
 800b970:	e7c4      	b.n	800b8fc <_svfiprintf_r+0x130>
 800b972:	fb0c 2101 	mla	r1, ip, r1, r2
 800b976:	4604      	mov	r4, r0
 800b978:	2301      	movs	r3, #1
 800b97a:	e7f0      	b.n	800b95e <_svfiprintf_r+0x192>
 800b97c:	ab03      	add	r3, sp, #12
 800b97e:	9300      	str	r3, [sp, #0]
 800b980:	462a      	mov	r2, r5
 800b982:	4b0f      	ldr	r3, [pc, #60]	; (800b9c0 <_svfiprintf_r+0x1f4>)
 800b984:	a904      	add	r1, sp, #16
 800b986:	4638      	mov	r0, r7
 800b988:	f3af 8000 	nop.w
 800b98c:	1c42      	adds	r2, r0, #1
 800b98e:	4606      	mov	r6, r0
 800b990:	d1d6      	bne.n	800b940 <_svfiprintf_r+0x174>
 800b992:	89ab      	ldrh	r3, [r5, #12]
 800b994:	065b      	lsls	r3, r3, #25
 800b996:	f53f af2d 	bmi.w	800b7f4 <_svfiprintf_r+0x28>
 800b99a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b99c:	b01d      	add	sp, #116	; 0x74
 800b99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a2:	ab03      	add	r3, sp, #12
 800b9a4:	9300      	str	r3, [sp, #0]
 800b9a6:	462a      	mov	r2, r5
 800b9a8:	4b05      	ldr	r3, [pc, #20]	; (800b9c0 <_svfiprintf_r+0x1f4>)
 800b9aa:	a904      	add	r1, sp, #16
 800b9ac:	4638      	mov	r0, r7
 800b9ae:	f000 f879 	bl	800baa4 <_printf_i>
 800b9b2:	e7eb      	b.n	800b98c <_svfiprintf_r+0x1c0>
 800b9b4:	0800c41d 	.word	0x0800c41d
 800b9b8:	0800c427 	.word	0x0800c427
 800b9bc:	00000000 	.word	0x00000000
 800b9c0:	0800b719 	.word	0x0800b719
 800b9c4:	0800c423 	.word	0x0800c423

0800b9c8 <_printf_common>:
 800b9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9cc:	4616      	mov	r6, r2
 800b9ce:	4699      	mov	r9, r3
 800b9d0:	688a      	ldr	r2, [r1, #8]
 800b9d2:	690b      	ldr	r3, [r1, #16]
 800b9d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	bfb8      	it	lt
 800b9dc:	4613      	movlt	r3, r2
 800b9de:	6033      	str	r3, [r6, #0]
 800b9e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b9e4:	4607      	mov	r7, r0
 800b9e6:	460c      	mov	r4, r1
 800b9e8:	b10a      	cbz	r2, 800b9ee <_printf_common+0x26>
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	6033      	str	r3, [r6, #0]
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	0699      	lsls	r1, r3, #26
 800b9f2:	bf42      	ittt	mi
 800b9f4:	6833      	ldrmi	r3, [r6, #0]
 800b9f6:	3302      	addmi	r3, #2
 800b9f8:	6033      	strmi	r3, [r6, #0]
 800b9fa:	6825      	ldr	r5, [r4, #0]
 800b9fc:	f015 0506 	ands.w	r5, r5, #6
 800ba00:	d106      	bne.n	800ba10 <_printf_common+0x48>
 800ba02:	f104 0a19 	add.w	sl, r4, #25
 800ba06:	68e3      	ldr	r3, [r4, #12]
 800ba08:	6832      	ldr	r2, [r6, #0]
 800ba0a:	1a9b      	subs	r3, r3, r2
 800ba0c:	42ab      	cmp	r3, r5
 800ba0e:	dc26      	bgt.n	800ba5e <_printf_common+0x96>
 800ba10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba14:	1e13      	subs	r3, r2, #0
 800ba16:	6822      	ldr	r2, [r4, #0]
 800ba18:	bf18      	it	ne
 800ba1a:	2301      	movne	r3, #1
 800ba1c:	0692      	lsls	r2, r2, #26
 800ba1e:	d42b      	bmi.n	800ba78 <_printf_common+0xb0>
 800ba20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba24:	4649      	mov	r1, r9
 800ba26:	4638      	mov	r0, r7
 800ba28:	47c0      	blx	r8
 800ba2a:	3001      	adds	r0, #1
 800ba2c:	d01e      	beq.n	800ba6c <_printf_common+0xa4>
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	6922      	ldr	r2, [r4, #16]
 800ba32:	f003 0306 	and.w	r3, r3, #6
 800ba36:	2b04      	cmp	r3, #4
 800ba38:	bf02      	ittt	eq
 800ba3a:	68e5      	ldreq	r5, [r4, #12]
 800ba3c:	6833      	ldreq	r3, [r6, #0]
 800ba3e:	1aed      	subeq	r5, r5, r3
 800ba40:	68a3      	ldr	r3, [r4, #8]
 800ba42:	bf0c      	ite	eq
 800ba44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba48:	2500      	movne	r5, #0
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	bfc4      	itt	gt
 800ba4e:	1a9b      	subgt	r3, r3, r2
 800ba50:	18ed      	addgt	r5, r5, r3
 800ba52:	2600      	movs	r6, #0
 800ba54:	341a      	adds	r4, #26
 800ba56:	42b5      	cmp	r5, r6
 800ba58:	d11a      	bne.n	800ba90 <_printf_common+0xc8>
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	e008      	b.n	800ba70 <_printf_common+0xa8>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	4652      	mov	r2, sl
 800ba62:	4649      	mov	r1, r9
 800ba64:	4638      	mov	r0, r7
 800ba66:	47c0      	blx	r8
 800ba68:	3001      	adds	r0, #1
 800ba6a:	d103      	bne.n	800ba74 <_printf_common+0xac>
 800ba6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba74:	3501      	adds	r5, #1
 800ba76:	e7c6      	b.n	800ba06 <_printf_common+0x3e>
 800ba78:	18e1      	adds	r1, r4, r3
 800ba7a:	1c5a      	adds	r2, r3, #1
 800ba7c:	2030      	movs	r0, #48	; 0x30
 800ba7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ba82:	4422      	add	r2, r4
 800ba84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ba88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba8c:	3302      	adds	r3, #2
 800ba8e:	e7c7      	b.n	800ba20 <_printf_common+0x58>
 800ba90:	2301      	movs	r3, #1
 800ba92:	4622      	mov	r2, r4
 800ba94:	4649      	mov	r1, r9
 800ba96:	4638      	mov	r0, r7
 800ba98:	47c0      	blx	r8
 800ba9a:	3001      	adds	r0, #1
 800ba9c:	d0e6      	beq.n	800ba6c <_printf_common+0xa4>
 800ba9e:	3601      	adds	r6, #1
 800baa0:	e7d9      	b.n	800ba56 <_printf_common+0x8e>
	...

0800baa4 <_printf_i>:
 800baa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800baa8:	7e0f      	ldrb	r7, [r1, #24]
 800baaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800baac:	2f78      	cmp	r7, #120	; 0x78
 800baae:	4691      	mov	r9, r2
 800bab0:	4680      	mov	r8, r0
 800bab2:	460c      	mov	r4, r1
 800bab4:	469a      	mov	sl, r3
 800bab6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800baba:	d807      	bhi.n	800bacc <_printf_i+0x28>
 800babc:	2f62      	cmp	r7, #98	; 0x62
 800babe:	d80a      	bhi.n	800bad6 <_printf_i+0x32>
 800bac0:	2f00      	cmp	r7, #0
 800bac2:	f000 80d4 	beq.w	800bc6e <_printf_i+0x1ca>
 800bac6:	2f58      	cmp	r7, #88	; 0x58
 800bac8:	f000 80c0 	beq.w	800bc4c <_printf_i+0x1a8>
 800bacc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bad0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bad4:	e03a      	b.n	800bb4c <_printf_i+0xa8>
 800bad6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bada:	2b15      	cmp	r3, #21
 800badc:	d8f6      	bhi.n	800bacc <_printf_i+0x28>
 800bade:	a101      	add	r1, pc, #4	; (adr r1, 800bae4 <_printf_i+0x40>)
 800bae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bae4:	0800bb3d 	.word	0x0800bb3d
 800bae8:	0800bb51 	.word	0x0800bb51
 800baec:	0800bacd 	.word	0x0800bacd
 800baf0:	0800bacd 	.word	0x0800bacd
 800baf4:	0800bacd 	.word	0x0800bacd
 800baf8:	0800bacd 	.word	0x0800bacd
 800bafc:	0800bb51 	.word	0x0800bb51
 800bb00:	0800bacd 	.word	0x0800bacd
 800bb04:	0800bacd 	.word	0x0800bacd
 800bb08:	0800bacd 	.word	0x0800bacd
 800bb0c:	0800bacd 	.word	0x0800bacd
 800bb10:	0800bc55 	.word	0x0800bc55
 800bb14:	0800bb7d 	.word	0x0800bb7d
 800bb18:	0800bc0f 	.word	0x0800bc0f
 800bb1c:	0800bacd 	.word	0x0800bacd
 800bb20:	0800bacd 	.word	0x0800bacd
 800bb24:	0800bc77 	.word	0x0800bc77
 800bb28:	0800bacd 	.word	0x0800bacd
 800bb2c:	0800bb7d 	.word	0x0800bb7d
 800bb30:	0800bacd 	.word	0x0800bacd
 800bb34:	0800bacd 	.word	0x0800bacd
 800bb38:	0800bc17 	.word	0x0800bc17
 800bb3c:	682b      	ldr	r3, [r5, #0]
 800bb3e:	1d1a      	adds	r2, r3, #4
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	602a      	str	r2, [r5, #0]
 800bb44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e09f      	b.n	800bc90 <_printf_i+0x1ec>
 800bb50:	6820      	ldr	r0, [r4, #0]
 800bb52:	682b      	ldr	r3, [r5, #0]
 800bb54:	0607      	lsls	r7, r0, #24
 800bb56:	f103 0104 	add.w	r1, r3, #4
 800bb5a:	6029      	str	r1, [r5, #0]
 800bb5c:	d501      	bpl.n	800bb62 <_printf_i+0xbe>
 800bb5e:	681e      	ldr	r6, [r3, #0]
 800bb60:	e003      	b.n	800bb6a <_printf_i+0xc6>
 800bb62:	0646      	lsls	r6, r0, #25
 800bb64:	d5fb      	bpl.n	800bb5e <_printf_i+0xba>
 800bb66:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bb6a:	2e00      	cmp	r6, #0
 800bb6c:	da03      	bge.n	800bb76 <_printf_i+0xd2>
 800bb6e:	232d      	movs	r3, #45	; 0x2d
 800bb70:	4276      	negs	r6, r6
 800bb72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb76:	485a      	ldr	r0, [pc, #360]	; (800bce0 <_printf_i+0x23c>)
 800bb78:	230a      	movs	r3, #10
 800bb7a:	e012      	b.n	800bba2 <_printf_i+0xfe>
 800bb7c:	682b      	ldr	r3, [r5, #0]
 800bb7e:	6820      	ldr	r0, [r4, #0]
 800bb80:	1d19      	adds	r1, r3, #4
 800bb82:	6029      	str	r1, [r5, #0]
 800bb84:	0605      	lsls	r5, r0, #24
 800bb86:	d501      	bpl.n	800bb8c <_printf_i+0xe8>
 800bb88:	681e      	ldr	r6, [r3, #0]
 800bb8a:	e002      	b.n	800bb92 <_printf_i+0xee>
 800bb8c:	0641      	lsls	r1, r0, #25
 800bb8e:	d5fb      	bpl.n	800bb88 <_printf_i+0xe4>
 800bb90:	881e      	ldrh	r6, [r3, #0]
 800bb92:	4853      	ldr	r0, [pc, #332]	; (800bce0 <_printf_i+0x23c>)
 800bb94:	2f6f      	cmp	r7, #111	; 0x6f
 800bb96:	bf0c      	ite	eq
 800bb98:	2308      	moveq	r3, #8
 800bb9a:	230a      	movne	r3, #10
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bba2:	6865      	ldr	r5, [r4, #4]
 800bba4:	60a5      	str	r5, [r4, #8]
 800bba6:	2d00      	cmp	r5, #0
 800bba8:	bfa2      	ittt	ge
 800bbaa:	6821      	ldrge	r1, [r4, #0]
 800bbac:	f021 0104 	bicge.w	r1, r1, #4
 800bbb0:	6021      	strge	r1, [r4, #0]
 800bbb2:	b90e      	cbnz	r6, 800bbb8 <_printf_i+0x114>
 800bbb4:	2d00      	cmp	r5, #0
 800bbb6:	d04b      	beq.n	800bc50 <_printf_i+0x1ac>
 800bbb8:	4615      	mov	r5, r2
 800bbba:	fbb6 f1f3 	udiv	r1, r6, r3
 800bbbe:	fb03 6711 	mls	r7, r3, r1, r6
 800bbc2:	5dc7      	ldrb	r7, [r0, r7]
 800bbc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bbc8:	4637      	mov	r7, r6
 800bbca:	42bb      	cmp	r3, r7
 800bbcc:	460e      	mov	r6, r1
 800bbce:	d9f4      	bls.n	800bbba <_printf_i+0x116>
 800bbd0:	2b08      	cmp	r3, #8
 800bbd2:	d10b      	bne.n	800bbec <_printf_i+0x148>
 800bbd4:	6823      	ldr	r3, [r4, #0]
 800bbd6:	07de      	lsls	r6, r3, #31
 800bbd8:	d508      	bpl.n	800bbec <_printf_i+0x148>
 800bbda:	6923      	ldr	r3, [r4, #16]
 800bbdc:	6861      	ldr	r1, [r4, #4]
 800bbde:	4299      	cmp	r1, r3
 800bbe0:	bfde      	ittt	le
 800bbe2:	2330      	movle	r3, #48	; 0x30
 800bbe4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bbe8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bbec:	1b52      	subs	r2, r2, r5
 800bbee:	6122      	str	r2, [r4, #16]
 800bbf0:	f8cd a000 	str.w	sl, [sp]
 800bbf4:	464b      	mov	r3, r9
 800bbf6:	aa03      	add	r2, sp, #12
 800bbf8:	4621      	mov	r1, r4
 800bbfa:	4640      	mov	r0, r8
 800bbfc:	f7ff fee4 	bl	800b9c8 <_printf_common>
 800bc00:	3001      	adds	r0, #1
 800bc02:	d14a      	bne.n	800bc9a <_printf_i+0x1f6>
 800bc04:	f04f 30ff 	mov.w	r0, #4294967295
 800bc08:	b004      	add	sp, #16
 800bc0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc0e:	6823      	ldr	r3, [r4, #0]
 800bc10:	f043 0320 	orr.w	r3, r3, #32
 800bc14:	6023      	str	r3, [r4, #0]
 800bc16:	4833      	ldr	r0, [pc, #204]	; (800bce4 <_printf_i+0x240>)
 800bc18:	2778      	movs	r7, #120	; 0x78
 800bc1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bc1e:	6823      	ldr	r3, [r4, #0]
 800bc20:	6829      	ldr	r1, [r5, #0]
 800bc22:	061f      	lsls	r7, r3, #24
 800bc24:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc28:	d402      	bmi.n	800bc30 <_printf_i+0x18c>
 800bc2a:	065f      	lsls	r7, r3, #25
 800bc2c:	bf48      	it	mi
 800bc2e:	b2b6      	uxthmi	r6, r6
 800bc30:	07df      	lsls	r7, r3, #31
 800bc32:	bf48      	it	mi
 800bc34:	f043 0320 	orrmi.w	r3, r3, #32
 800bc38:	6029      	str	r1, [r5, #0]
 800bc3a:	bf48      	it	mi
 800bc3c:	6023      	strmi	r3, [r4, #0]
 800bc3e:	b91e      	cbnz	r6, 800bc48 <_printf_i+0x1a4>
 800bc40:	6823      	ldr	r3, [r4, #0]
 800bc42:	f023 0320 	bic.w	r3, r3, #32
 800bc46:	6023      	str	r3, [r4, #0]
 800bc48:	2310      	movs	r3, #16
 800bc4a:	e7a7      	b.n	800bb9c <_printf_i+0xf8>
 800bc4c:	4824      	ldr	r0, [pc, #144]	; (800bce0 <_printf_i+0x23c>)
 800bc4e:	e7e4      	b.n	800bc1a <_printf_i+0x176>
 800bc50:	4615      	mov	r5, r2
 800bc52:	e7bd      	b.n	800bbd0 <_printf_i+0x12c>
 800bc54:	682b      	ldr	r3, [r5, #0]
 800bc56:	6826      	ldr	r6, [r4, #0]
 800bc58:	6961      	ldr	r1, [r4, #20]
 800bc5a:	1d18      	adds	r0, r3, #4
 800bc5c:	6028      	str	r0, [r5, #0]
 800bc5e:	0635      	lsls	r5, r6, #24
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	d501      	bpl.n	800bc68 <_printf_i+0x1c4>
 800bc64:	6019      	str	r1, [r3, #0]
 800bc66:	e002      	b.n	800bc6e <_printf_i+0x1ca>
 800bc68:	0670      	lsls	r0, r6, #25
 800bc6a:	d5fb      	bpl.n	800bc64 <_printf_i+0x1c0>
 800bc6c:	8019      	strh	r1, [r3, #0]
 800bc6e:	2300      	movs	r3, #0
 800bc70:	6123      	str	r3, [r4, #16]
 800bc72:	4615      	mov	r5, r2
 800bc74:	e7bc      	b.n	800bbf0 <_printf_i+0x14c>
 800bc76:	682b      	ldr	r3, [r5, #0]
 800bc78:	1d1a      	adds	r2, r3, #4
 800bc7a:	602a      	str	r2, [r5, #0]
 800bc7c:	681d      	ldr	r5, [r3, #0]
 800bc7e:	6862      	ldr	r2, [r4, #4]
 800bc80:	2100      	movs	r1, #0
 800bc82:	4628      	mov	r0, r5
 800bc84:	f7f4 faac 	bl	80001e0 <memchr>
 800bc88:	b108      	cbz	r0, 800bc8e <_printf_i+0x1ea>
 800bc8a:	1b40      	subs	r0, r0, r5
 800bc8c:	6060      	str	r0, [r4, #4]
 800bc8e:	6863      	ldr	r3, [r4, #4]
 800bc90:	6123      	str	r3, [r4, #16]
 800bc92:	2300      	movs	r3, #0
 800bc94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc98:	e7aa      	b.n	800bbf0 <_printf_i+0x14c>
 800bc9a:	6923      	ldr	r3, [r4, #16]
 800bc9c:	462a      	mov	r2, r5
 800bc9e:	4649      	mov	r1, r9
 800bca0:	4640      	mov	r0, r8
 800bca2:	47d0      	blx	sl
 800bca4:	3001      	adds	r0, #1
 800bca6:	d0ad      	beq.n	800bc04 <_printf_i+0x160>
 800bca8:	6823      	ldr	r3, [r4, #0]
 800bcaa:	079b      	lsls	r3, r3, #30
 800bcac:	d413      	bmi.n	800bcd6 <_printf_i+0x232>
 800bcae:	68e0      	ldr	r0, [r4, #12]
 800bcb0:	9b03      	ldr	r3, [sp, #12]
 800bcb2:	4298      	cmp	r0, r3
 800bcb4:	bfb8      	it	lt
 800bcb6:	4618      	movlt	r0, r3
 800bcb8:	e7a6      	b.n	800bc08 <_printf_i+0x164>
 800bcba:	2301      	movs	r3, #1
 800bcbc:	4632      	mov	r2, r6
 800bcbe:	4649      	mov	r1, r9
 800bcc0:	4640      	mov	r0, r8
 800bcc2:	47d0      	blx	sl
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	d09d      	beq.n	800bc04 <_printf_i+0x160>
 800bcc8:	3501      	adds	r5, #1
 800bcca:	68e3      	ldr	r3, [r4, #12]
 800bccc:	9903      	ldr	r1, [sp, #12]
 800bcce:	1a5b      	subs	r3, r3, r1
 800bcd0:	42ab      	cmp	r3, r5
 800bcd2:	dcf2      	bgt.n	800bcba <_printf_i+0x216>
 800bcd4:	e7eb      	b.n	800bcae <_printf_i+0x20a>
 800bcd6:	2500      	movs	r5, #0
 800bcd8:	f104 0619 	add.w	r6, r4, #25
 800bcdc:	e7f5      	b.n	800bcca <_printf_i+0x226>
 800bcde:	bf00      	nop
 800bce0:	0800c42e 	.word	0x0800c42e
 800bce4:	0800c43f 	.word	0x0800c43f

0800bce8 <memmove>:
 800bce8:	4288      	cmp	r0, r1
 800bcea:	b510      	push	{r4, lr}
 800bcec:	eb01 0402 	add.w	r4, r1, r2
 800bcf0:	d902      	bls.n	800bcf8 <memmove+0x10>
 800bcf2:	4284      	cmp	r4, r0
 800bcf4:	4623      	mov	r3, r4
 800bcf6:	d807      	bhi.n	800bd08 <memmove+0x20>
 800bcf8:	1e43      	subs	r3, r0, #1
 800bcfa:	42a1      	cmp	r1, r4
 800bcfc:	d008      	beq.n	800bd10 <memmove+0x28>
 800bcfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd06:	e7f8      	b.n	800bcfa <memmove+0x12>
 800bd08:	4402      	add	r2, r0
 800bd0a:	4601      	mov	r1, r0
 800bd0c:	428a      	cmp	r2, r1
 800bd0e:	d100      	bne.n	800bd12 <memmove+0x2a>
 800bd10:	bd10      	pop	{r4, pc}
 800bd12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd1a:	e7f7      	b.n	800bd0c <memmove+0x24>

0800bd1c <_realloc_r>:
 800bd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd20:	4680      	mov	r8, r0
 800bd22:	4614      	mov	r4, r2
 800bd24:	460e      	mov	r6, r1
 800bd26:	b921      	cbnz	r1, 800bd32 <_realloc_r+0x16>
 800bd28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd2c:	4611      	mov	r1, r2
 800bd2e:	f7ff baa5 	b.w	800b27c <_malloc_r>
 800bd32:	b92a      	cbnz	r2, 800bd40 <_realloc_r+0x24>
 800bd34:	f7ff fca4 	bl	800b680 <_free_r>
 800bd38:	4625      	mov	r5, r4
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd40:	f000 f81b 	bl	800bd7a <_malloc_usable_size_r>
 800bd44:	4284      	cmp	r4, r0
 800bd46:	4607      	mov	r7, r0
 800bd48:	d802      	bhi.n	800bd50 <_realloc_r+0x34>
 800bd4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd4e:	d812      	bhi.n	800bd76 <_realloc_r+0x5a>
 800bd50:	4621      	mov	r1, r4
 800bd52:	4640      	mov	r0, r8
 800bd54:	f7ff fa92 	bl	800b27c <_malloc_r>
 800bd58:	4605      	mov	r5, r0
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	d0ed      	beq.n	800bd3a <_realloc_r+0x1e>
 800bd5e:	42bc      	cmp	r4, r7
 800bd60:	4622      	mov	r2, r4
 800bd62:	4631      	mov	r1, r6
 800bd64:	bf28      	it	cs
 800bd66:	463a      	movcs	r2, r7
 800bd68:	f7ff fc7c 	bl	800b664 <memcpy>
 800bd6c:	4631      	mov	r1, r6
 800bd6e:	4640      	mov	r0, r8
 800bd70:	f7ff fc86 	bl	800b680 <_free_r>
 800bd74:	e7e1      	b.n	800bd3a <_realloc_r+0x1e>
 800bd76:	4635      	mov	r5, r6
 800bd78:	e7df      	b.n	800bd3a <_realloc_r+0x1e>

0800bd7a <_malloc_usable_size_r>:
 800bd7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd7e:	1f18      	subs	r0, r3, #4
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	bfbc      	itt	lt
 800bd84:	580b      	ldrlt	r3, [r1, r0]
 800bd86:	18c0      	addlt	r0, r0, r3
 800bd88:	4770      	bx	lr
	...

0800bd8c <round>:
 800bd8c:	ec53 2b10 	vmov	r2, r3, d0
 800bd90:	b570      	push	{r4, r5, r6, lr}
 800bd92:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800bd96:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800bd9a:	2813      	cmp	r0, #19
 800bd9c:	ee10 5a10 	vmov	r5, s0
 800bda0:	4619      	mov	r1, r3
 800bda2:	dc18      	bgt.n	800bdd6 <round+0x4a>
 800bda4:	2800      	cmp	r0, #0
 800bda6:	da09      	bge.n	800bdbc <round+0x30>
 800bda8:	3001      	adds	r0, #1
 800bdaa:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800bdae:	d103      	bne.n	800bdb8 <round+0x2c>
 800bdb0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800bdb4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bdb8:	2300      	movs	r3, #0
 800bdba:	e02a      	b.n	800be12 <round+0x86>
 800bdbc:	4c16      	ldr	r4, [pc, #88]	; (800be18 <round+0x8c>)
 800bdbe:	4104      	asrs	r4, r0
 800bdc0:	ea03 0604 	and.w	r6, r3, r4
 800bdc4:	4316      	orrs	r6, r2
 800bdc6:	d011      	beq.n	800bdec <round+0x60>
 800bdc8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bdcc:	4103      	asrs	r3, r0
 800bdce:	440b      	add	r3, r1
 800bdd0:	ea23 0104 	bic.w	r1, r3, r4
 800bdd4:	e7f0      	b.n	800bdb8 <round+0x2c>
 800bdd6:	2833      	cmp	r0, #51	; 0x33
 800bdd8:	dd0b      	ble.n	800bdf2 <round+0x66>
 800bdda:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800bdde:	d105      	bne.n	800bdec <round+0x60>
 800bde0:	ee10 0a10 	vmov	r0, s0
 800bde4:	f7f4 fa52 	bl	800028c <__adddf3>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	ec43 2b10 	vmov	d0, r2, r3
 800bdf0:	bd70      	pop	{r4, r5, r6, pc}
 800bdf2:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800bdf6:	f04f 34ff 	mov.w	r4, #4294967295
 800bdfa:	40f4      	lsrs	r4, r6
 800bdfc:	4214      	tst	r4, r2
 800bdfe:	d0f5      	beq.n	800bdec <round+0x60>
 800be00:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800be04:	2301      	movs	r3, #1
 800be06:	4083      	lsls	r3, r0
 800be08:	195b      	adds	r3, r3, r5
 800be0a:	bf28      	it	cs
 800be0c:	3101      	addcs	r1, #1
 800be0e:	ea23 0304 	bic.w	r3, r3, r4
 800be12:	461a      	mov	r2, r3
 800be14:	460b      	mov	r3, r1
 800be16:	e7e9      	b.n	800bdec <round+0x60>
 800be18:	000fffff 	.word	0x000fffff

0800be1c <_init>:
 800be1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be1e:	bf00      	nop
 800be20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be22:	bc08      	pop	{r3}
 800be24:	469e      	mov	lr, r3
 800be26:	4770      	bx	lr

0800be28 <_fini>:
 800be28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2a:	bf00      	nop
 800be2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be2e:	bc08      	pop	{r3}
 800be30:	469e      	mov	lr, r3
 800be32:	4770      	bx	lr
