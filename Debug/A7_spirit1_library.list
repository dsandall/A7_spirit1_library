
A7_spirit1_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  0800bdf4  0800bdf4  0001bdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c410  0800c410  000203a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c410  0800c410  0001c410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c418  0800c418  000203a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c418  0800c418  0001c418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c41c  0800c41c  0001c41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a8  20000000  0800c420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004114  200003a8  0800c7c8  000203a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044bc  0800c7c8  000244bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002680e  00000000  00000000  0002041b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000059dc  00000000  00000000  00046c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002310  00000000  00000000  0004c608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ade  00000000  00000000  0004e918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d929  00000000  00000000  000503f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000277f6  00000000  00000000  0007dd1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f9a7  00000000  00000000  000a5515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009800  00000000  00000000  001b4ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001be6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003a8 	.word	0x200003a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bddc 	.word	0x0800bddc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003ac 	.word	0x200003ac
 80001cc:	0800bddc 	.word	0x0800bddc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
return 0;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4b3e      	ldr	r3, [pc, #248]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a3d      	ldr	r2, [pc, #244]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b38      	ldr	r3, [pc, #224]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a37      	ldr	r2, [pc, #220]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b32      	ldr	r3, [pc, #200]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a31      	ldr	r2, [pc, #196]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_onboard_Pin|SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de0:	f003 ff62 	bl	8004ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SPI_CSn_GPIO_Port, SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2140      	movs	r1, #64	; 0x40
 8000de8:	4828      	ldr	r0, [pc, #160]	; (8000e8c <MX_GPIO_Init+0x114>)
 8000dea:	f003 ff5d 	bl	8004ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4619      	mov	r1, r3
 8000e04:	4822      	ldr	r0, [pc, #136]	; (8000e90 <MX_GPIO_Init+0x118>)
 8000e06:	f003 fda5 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Green_LED_onboard_Pin|SPIRIT1_SDN_Pin;
 8000e0a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4619      	mov	r1, r3
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e26:	f003 fd95 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e2e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4814      	ldr	r0, [pc, #80]	; (8000e90 <MX_GPIO_Init+0x118>)
 8000e40:	f003 fd88 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SPI_CSn_Pin;
 8000e44:	2340      	movs	r3, #64	; 0x40
 8000e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT1_SPI_CSn_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480c      	ldr	r0, [pc, #48]	; (8000e8c <MX_GPIO_Init+0x114>)
 8000e5c:	f003 fd7a 	bl	8004954 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2106      	movs	r1, #6
 8000e64:	2017      	movs	r0, #23
 8000e66:	f003 fd3d 	bl	80048e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e6a:	2017      	movs	r0, #23
 8000e6c:	f003 fd56 	bl	800491c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2107      	movs	r1, #7
 8000e74:	2028      	movs	r0, #40	; 0x28
 8000e76:	f003 fd35 	bl	80048e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e7a:	2028      	movs	r0, #40	; 0x28
 8000e7c:	f003 fd4e 	bl	800491c <HAL_NVIC_EnableIRQ>

}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	48000400 	.word	0x48000400
 8000e90:	48000800 	.word	0x48000800

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	; (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <RTOS_ISR_setPriority>:
void Task_RX(void *argument);

TaskHandle_t Task_TXHandler, Task_printUsersHandler, Task_RXHandler, Task_HBHandler;
SemaphoreHandle_t FLAG_SPIRIT;

void RTOS_ISR_setPriority(uint32_t IRQn){
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	HAL_NVIC_SetPriorityGrouping(0);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f003 fcb9 	bl	80048ce <HAL_NVIC_SetPriorityGrouping>
	uint32_t lowPriority = NVIC_EncodePriority(0, 10, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	210a      	movs	r1, #10
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff ffc1 	bl	8000ee8 <NVIC_EncodePriority>
 8000f66:	60f8      	str	r0, [r7, #12]
	//DMA1_Channel3_IRQn
	NVIC_SetPriority(IRQn, lowPriority);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	68f9      	ldr	r1, [r7, #12]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff90 	bl	8000e94 <__NVIC_SetPriority>
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]
  SpiritIrqs xIrqStatus;
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]

  if (GPIO_Pin != SPIRIT1_GPIO3_Pin){return;}
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	2b80      	cmp	r3, #128	; 0x80
 8000f8e:	d13b      	bne.n	8001008 <HAL_GPIO_EXTI_Callback+0x8c>

  SpiritIrqGetStatus(&xIrqStatus);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 fa3b 	bl	8002410 <SpiritIrqGetStatus>


  if (xIrqStatus.IRQ_TX_DATA_SENT)
 8000f9a:	7b3b      	ldrb	r3, [r7, #12]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d009      	beq.n	8000fba <HAL_GPIO_EXTI_Callback+0x3e>
  {
	  confirm_TX();
 8000fa6:	f000 f839 	bl	800101c <confirm_TX>
	  xSemaphoreGiveFromISR(FLAG_SPIRIT, &xHigherPriorityTaskWoken);
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f107 0208 	add.w	r2, r7, #8
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f007 fd50 	bl	8008a5a <xQueueGiveFromISR>
  }

  if (xIrqStatus.IRQ_RX_DATA_READY)
 8000fba:	7b3b      	ldrb	r3, [r7, #12]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d009      	beq.n	8000fda <HAL_GPIO_EXTI_Callback+0x5e>
  {
	  get_RX();
 8000fc6:	f000 f999 	bl	80012fc <get_RX>
	  xSemaphoreGiveFromISR(FLAG_SPIRIT, &xHigherPriorityTaskWoken);
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f107 0208 	add.w	r2, r7, #8
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f007 fd40 	bl	8008a5a <xQueueGiveFromISR>
  if (xIrqStatus.IRQ_RX_DATA_DISC)
  {
//	myHAL_UART_printf("  | || || |_\r\n");
  }

  if (xIrqStatus.IRQ_RX_TIMEOUT){
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	f003 0320 	and.w	r3, r3, #32
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <HAL_GPIO_EXTI_Callback+0x70>
	myHAL_UART_printf("timeout\r\n");
 8000fe6:	480b      	ldr	r0, [pc, #44]	; (8001014 <HAL_GPIO_EXTI_Callback+0x98>)
 8000fe8:	f000 fc22 	bl	8001830 <myHAL_UART_printf>
  }

  SpiritIrqClearStatus();
 8000fec:	f001 fa42 	bl	8002474 <SpiritIrqClearStatus>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d009      	beq.n	800100a <HAL_GPIO_EXTI_Callback+0x8e>
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	f3bf 8f4f 	dsb	sy
 8001002:	f3bf 8f6f 	isb	sy
 8001006:	e000      	b.n	800100a <HAL_GPIO_EXTI_Callback+0x8e>
  if (GPIO_Pin != SPIRIT1_GPIO3_Pin){return;}
 8001008:	bf00      	nop
}
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200023d4 	.word	0x200023d4
 8001014:	0800bf7c 	.word	0x0800bf7c
 8001018:	e000ed04 	.word	0xe000ed04

0800101c <confirm_TX>:

Payload TXq[TX_Q_SIZE];
int currentReadTX;
int currentWriteTX;

void confirm_TX(){
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0

	if(TXq[currentReadTX].type == 4){
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <confirm_TX+0x7c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a1d      	ldr	r2, [pc, #116]	; (800109c <confirm_TX+0x80>)
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	4413      	add	r3, r2
 800102a:	3301      	adds	r3, #1
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b04      	cmp	r3, #4
 8001030:	d10b      	bne.n	800104a <confirm_TX+0x2e>
	    myHAL_UART_printf("message sent: %s \r\n", TXq[currentReadTX].message);
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <confirm_TX+0x7c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a19      	ldr	r2, [pc, #100]	; (800109c <confirm_TX+0x80>)
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	4413      	add	r3, r2
 800103c:	3308      	adds	r3, #8
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	4817      	ldr	r0, [pc, #92]	; (80010a0 <confirm_TX+0x84>)
 8001044:	f000 fbf4 	bl	8001830 <myHAL_UART_printf>
 8001048:	e012      	b.n	8001070 <confirm_TX+0x54>
	} else {
	    myHAL_UART_printf("payload sent: type(%d) %s \r\n", TXq[currentReadTX].type, TXq[currentReadTX].user);
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <confirm_TX+0x7c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a13      	ldr	r2, [pc, #76]	; (800109c <confirm_TX+0x80>)
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	4413      	add	r3, r2
 8001054:	3301      	adds	r3, #1
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <confirm_TX+0x7c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a0f      	ldr	r2, [pc, #60]	; (800109c <confirm_TX+0x80>)
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	4413      	add	r3, r2
 8001064:	3304      	adds	r3, #4
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	480e      	ldr	r0, [pc, #56]	; (80010a4 <confirm_TX+0x88>)
 800106c:	f000 fbe0 	bl	8001830 <myHAL_UART_printf>
	}

	currentReadTX = (++currentReadTX) %TX_Q_SIZE;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <confirm_TX+0x7c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	4a08      	ldr	r2, [pc, #32]	; (8001098 <confirm_TX+0x7c>)
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <confirm_TX+0x7c>)
 800107c:	6819      	ldr	r1, [r3, #0]
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <confirm_TX+0x8c>)
 8001080:	fb83 3201 	smull	r3, r2, r3, r1
 8001084:	17cb      	asrs	r3, r1, #31
 8001086:	1ad2      	subs	r2, r2, r3
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	1aca      	subs	r2, r1, r3
 8001090:	4b01      	ldr	r3, [pc, #4]	; (8001098 <confirm_TX+0x7c>)
 8001092:	601a      	str	r2, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20002408 	.word	0x20002408
 800109c:	200023d8 	.word	0x200023d8
 80010a0:	0800bf88 	.word	0x0800bf88
 80010a4:	0800bf9c 	.word	0x0800bf9c
 80010a8:	55555556 	.word	0x55555556

080010ac <Task_TX>:





void Task_TX(void *argument){
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b09d      	sub	sp, #116	; 0x74
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	char loadString[100]; //NOT a string
	while (1)
	{


		  if(TXq[currentReadTX].valid){
 80010b4:	4b3c      	ldr	r3, [pc, #240]	; (80011a8 <Task_TX+0xfc>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a3c      	ldr	r2, [pc, #240]	; (80011ac <Task_TX+0x100>)
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	4413      	add	r3, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d06c      	beq.n	800119e <Task_TX+0xf2>

			  SpiritGotoReadyState(); //interrupt any other thang going down
 80010c4:	f000 fbf8 	bl	80018b8 <SpiritGotoReadyState>
			  if(xSemaphoreTake(FLAG_SPIRIT, 10) == 1){
 80010c8:	4b39      	ldr	r3, [pc, #228]	; (80011b0 <Task_TX+0x104>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	210a      	movs	r1, #10
 80010ce:	4618      	mov	r0, r3
 80010d0:	f007 fe30 	bl	8008d34 <xQueueSemaphoreTake>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d161      	bne.n	800119e <Task_TX+0xf2>

				SpiritPktStackSetDestinationAddress(TXq[currentReadTX].dest);
 80010da:	4b33      	ldr	r3, [pc, #204]	; (80011a8 <Task_TX+0xfc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a33      	ldr	r2, [pc, #204]	; (80011ac <Task_TX+0x100>)
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	4413      	add	r3, r2
 80010e4:	330c      	adds	r3, #12
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fc9b 	bl	8002a24 <SpiritPktCommonSetDestinationAddress>


				uint8_t type = TXq[currentReadTX].type;
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <Task_TX+0xfc>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <Task_TX+0x100>)
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	4413      	add	r3, r2
 80010f8:	3301      	adds	r3, #1
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				uint16_t len = 1+strlen(myUsername)+1;
 8001100:	482c      	ldr	r0, [pc, #176]	; (80011b4 <Task_TX+0x108>)
 8001102:	f7ff f865 	bl	80001d0 <strlen>
 8001106:	4603      	mov	r3, r0
 8001108:	b29b      	uxth	r3, r3
 800110a:	3302      	adds	r3, #2
 800110c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
				loadString[0] = type;
 8001110:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001114:	723b      	strb	r3, [r7, #8]
				strcpy(&loadString[1], myUsername);
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	3301      	adds	r3, #1
 800111c:	4925      	ldr	r1, [pc, #148]	; (80011b4 <Task_TX+0x108>)
 800111e:	4618      	mov	r0, r3
 8001120:	f00a f9bc 	bl	800b49c <strcpy>
				if (type == 4){
 8001124:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001128:	2b04      	cmp	r3, #4
 800112a:	d128      	bne.n	800117e <Task_TX+0xd2>
					strcpy(&loadString[strlen(myUsername)+1+1], TXq[currentReadTX].message);
 800112c:	4821      	ldr	r0, [pc, #132]	; (80011b4 <Task_TX+0x108>)
 800112e:	f7ff f84f 	bl	80001d0 <strlen>
 8001132:	4603      	mov	r3, r0
 8001134:	3302      	adds	r3, #2
 8001136:	f107 0208 	add.w	r2, r7, #8
 800113a:	441a      	add	r2, r3
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <Task_TX+0xfc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	491a      	ldr	r1, [pc, #104]	; (80011ac <Task_TX+0x100>)
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	440b      	add	r3, r1
 8001146:	3308      	adds	r3, #8
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	4610      	mov	r0, r2
 800114e:	f00a f9a5 	bl	800b49c <strcpy>
					len = 1+ strlen(myUsername)+1+1+strlen(TXq[currentReadTX].message);
 8001152:	4818      	ldr	r0, [pc, #96]	; (80011b4 <Task_TX+0x108>)
 8001154:	f7ff f83c 	bl	80001d0 <strlen>
 8001158:	4603      	mov	r3, r0
 800115a:	b29c      	uxth	r4, r3
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <Task_TX+0xfc>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <Task_TX+0x100>)
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	4413      	add	r3, r2
 8001166:	3308      	adds	r3, #8
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f830 	bl	80001d0 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29b      	uxth	r3, r3
 8001174:	4423      	add	r3, r4
 8001176:	b29b      	uxth	r3, r3
 8001178:	3303      	adds	r3, #3
 800117a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
				}
				TXq[currentReadTX].valid = 0;
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <Task_TX+0xfc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <Task_TX+0x100>)
 8001184:	011b      	lsls	r3, r3, #4
 8001186:	4413      	add	r3, r2
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
				SPSGRF_StartTx(loadString, len);
 800118c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001190:	b2da      	uxtb	r2, r3
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f000 fd85 	bl	8001ca8 <SPSGRF_StartTx>
			  }
		//			  vTaskDelay(1000);
		  }

		  vTaskDelay(50);
 800119e:	2032      	movs	r0, #50	; 0x32
 80011a0:	f008 fa16 	bl	80095d0 <vTaskDelay>
		  if(TXq[currentReadTX].valid){
 80011a4:	e786      	b.n	80010b4 <Task_TX+0x8>
 80011a6:	bf00      	nop
 80011a8:	20002408 	.word	0x20002408
 80011ac:	200023d8 	.word	0x200023d8
 80011b0:	200023d4 	.word	0x200023d4
 80011b4:	20000000 	.word	0x20000000

080011b8 <printUsersOnline>:
}


//USERS//////////////

void printUsersOnline(){
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af02      	add	r7, sp, #8
	TickType_t currentTime = xTaskGetTickCount();
 80011be:	f008 fb59 	bl	8009874 <xTaskGetTickCount>
 80011c2:	6038      	str	r0, [r7, #0]
	myHAL_UART_printf("--- Users Online @t=%d:\r\n", (currentTime-startTime)/1000);
 80011c4:	4b24      	ldr	r3, [pc, #144]	; (8001258 <printUsersOnline+0xa0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	4a23      	ldr	r2, [pc, #140]	; (800125c <printUsersOnline+0xa4>)
 80011ce:	fba2 2303 	umull	r2, r3, r2, r3
 80011d2:	099b      	lsrs	r3, r3, #6
 80011d4:	4619      	mov	r1, r3
 80011d6:	4822      	ldr	r0, [pc, #136]	; (8001260 <printUsersOnline+0xa8>)
 80011d8:	f000 fb2a 	bl	8001830 <myHAL_UART_printf>
	for (int i = 0; i < MAX_USERS; i++){
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	e031      	b.n	8001246 <printUsersOnline+0x8e>
		if (usersOnline[i].address != 0){
 80011e2:	4a20      	ldr	r2, [pc, #128]	; (8001264 <printUsersOnline+0xac>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	015b      	lsls	r3, r3, #5
 80011e8:	4413      	add	r3, r2
 80011ea:	3318      	adds	r3, #24
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d026      	beq.n	8001240 <printUsersOnline+0x88>
			myHAL_UART_printf("- 0x%x(%d)(%s) seen %d s ago\r\n", usersOnline[i].address, usersOnline[i].address, names[usersOnline[i].address], (currentTime - usersOnline[i].timeLastSeen)/1000);
 80011f2:	4a1c      	ldr	r2, [pc, #112]	; (8001264 <printUsersOnline+0xac>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	015b      	lsls	r3, r3, #5
 80011f8:	4413      	add	r3, r2
 80011fa:	3318      	adds	r3, #24
 80011fc:	6819      	ldr	r1, [r3, #0]
 80011fe:	4a19      	ldr	r2, [pc, #100]	; (8001264 <printUsersOnline+0xac>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	015b      	lsls	r3, r3, #5
 8001204:	4413      	add	r3, r2
 8001206:	3318      	adds	r3, #24
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4816      	ldr	r0, [pc, #88]	; (8001264 <printUsersOnline+0xac>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	015b      	lsls	r3, r3, #5
 8001210:	4403      	add	r3, r0
 8001212:	3318      	adds	r3, #24
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4814      	ldr	r0, [pc, #80]	; (8001268 <printUsersOnline+0xb0>)
 8001218:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800121c:	4c11      	ldr	r4, [pc, #68]	; (8001264 <printUsersOnline+0xac>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	015b      	lsls	r3, r3, #5
 8001222:	4423      	add	r3, r4
 8001224:	331c      	adds	r3, #28
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	461c      	mov	r4, r3
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	1b1b      	subs	r3, r3, r4
 800122e:	4c0b      	ldr	r4, [pc, #44]	; (800125c <printUsersOnline+0xa4>)
 8001230:	fba4 4303 	umull	r4, r3, r4, r3
 8001234:	099b      	lsrs	r3, r3, #6
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	4603      	mov	r3, r0
 800123a:	480c      	ldr	r0, [pc, #48]	; (800126c <printUsersOnline+0xb4>)
 800123c:	f000 faf8 	bl	8001830 <myHAL_UART_printf>
	for (int i = 0; i < MAX_USERS; i++){
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3301      	adds	r3, #1
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2bff      	cmp	r3, #255	; 0xff
 800124a:	ddca      	ble.n	80011e2 <printUsersOnline+0x2a>
		}
	}
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bd90      	pop	{r4, r7, pc}
 8001256:	bf00      	nop
 8001258:	200003c4 	.word	0x200003c4
 800125c:	10624dd3 	.word	0x10624dd3
 8001260:	0800bfbc 	.word	0x0800bfbc
 8001264:	200003c8 	.word	0x200003c8
 8001268:	20000018 	.word	0x20000018
 800126c:	0800bfd8 	.word	0x0800bfd8

08001270 <reapUsers>:

#define USER_DEAD_TIME 110

void reapUsers(){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
	TickType_t currentTime = xTaskGetTickCount();
 8001276:	f008 fafd 	bl	8009874 <xTaskGetTickCount>
 800127a:	6038      	str	r0, [r7, #0]
	for (int i = 0; i < MAX_USERS; i++){
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	e02e      	b.n	80012e0 <reapUsers+0x70>
		if ((usersOnline[i].address != 0)){
 8001282:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <reapUsers+0x80>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	015b      	lsls	r3, r3, #5
 8001288:	4413      	add	r3, r2
 800128a:	3318      	adds	r3, #24
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d023      	beq.n	80012da <reapUsers+0x6a>
			if((currentTime-usersOnline[i].timeLastSeen)/1000 > USER_DEAD_TIME){
 8001292:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <reapUsers+0x80>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	015b      	lsls	r3, r3, #5
 8001298:	4413      	add	r3, r2
 800129a:	331c      	adds	r3, #28
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	1a9b      	subs	r3, r3, r2
 80012a4:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <reapUsers+0x84>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d917      	bls.n	80012da <reapUsers+0x6a>
				myHAL_UART_printf("reaping user 0x%x\r\n", usersOnline[i].address);
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <reapUsers+0x80>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	015b      	lsls	r3, r3, #5
 80012b0:	4413      	add	r3, r2
 80012b2:	3318      	adds	r3, #24
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4619      	mov	r1, r3
 80012b8:	480f      	ldr	r0, [pc, #60]	; (80012f8 <reapUsers+0x88>)
 80012ba:	f000 fab9 	bl	8001830 <myHAL_UART_printf>
				usersOnline[i].address = 0;
 80012be:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <reapUsers+0x80>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	015b      	lsls	r3, r3, #5
 80012c4:	4413      	add	r3, r2
 80012c6:	3318      	adds	r3, #24
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
				usersOnline[i].timeLastSeen = 0;
 80012cc:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <reapUsers+0x80>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	015b      	lsls	r3, r3, #5
 80012d2:	4413      	add	r3, r2
 80012d4:	331c      	adds	r3, #28
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_USERS; i++){
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3301      	adds	r3, #1
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2bff      	cmp	r3, #255	; 0xff
 80012e4:	ddcd      	ble.n	8001282 <reapUsers+0x12>
//				usersOnline[i].username = 0;
			}
		}
	}
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200003c8 	.word	0x200003c8
 80012f4:	0001b197 	.word	0x0001b197
 80012f8:	0800bff8 	.word	0x0800bff8

080012fc <get_RX>:
}

//RX//////////////
// This should: determine type of recieved packet, add node to onlinelist, send ACKS, print if message

void get_RX(){
 80012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fe:	b0a1      	sub	sp, #132	; 0x84
 8001300:	af04      	add	r7, sp, #16


	uint8_t sadd = SpiritPktStackGetReceivedSourceAddress();
 8001302:	f001 fba9 	bl	8002a58 <SpiritPktCommonGetReceivedSourceAddress>
 8001306:	4603      	mov	r3, r0
 8001308:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	uint8_t RXpayload[100];

	//for all cases, update node info
	usersOnline[sadd].timeLastSeen = xTaskGetTickCount();
 800130c:	f008 fab2 	bl	8009874 <xTaskGetTickCount>
 8001310:	4602      	mov	r2, r0
 8001312:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001316:	4611      	mov	r1, r2
 8001318:	4a40      	ldr	r2, [pc, #256]	; (800141c <get_RX+0x120>)
 800131a:	015b      	lsls	r3, r3, #5
 800131c:	4413      	add	r3, r2
 800131e:	331c      	adds	r3, #28
 8001320:	6019      	str	r1, [r3, #0]
	usersOnline[sadd].address = sadd;
 8001322:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001326:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 800132a:	493c      	ldr	r1, [pc, #240]	; (800141c <get_RX+0x120>)
 800132c:	015b      	lsls	r3, r3, #5
 800132e:	440b      	add	r3, r1
 8001330:	3318      	adds	r3, #24
 8001332:	601a      	str	r2, [r3, #0]


	//get payload info and sanitize payloads
	int rxLen = SPSGRF_GetRxData(&RXpayload);
 8001334:	463b      	mov	r3, r7
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fce0 	bl	8001cfc <SPSGRF_GetRxData>
 800133c:	4603      	mov	r3, r0
 800133e:	667b      	str	r3, [r7, #100]	; 0x64
	RXpayload[rxLen+1] = '\0'; //ensure null termination for bad little nodes
 8001340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001342:	3301      	adds	r3, #1
 8001344:	3370      	adds	r3, #112	; 0x70
 8001346:	443b      	add	r3, r7
 8001348:	2200      	movs	r2, #0
 800134a:	f803 2c70 	strb.w	r2, [r3, #-112]
	//if ack, do nothing
	//if heartbeat, do nothing
	//if message, print message
	//and check for bad payloads

	if(RXpayload[0] == PACKET_ANNOUNCEMENT){
 800134e:	783b      	ldrb	r3, [r7, #0]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d107      	bne.n	8001364 <get_RX+0x68>
		// send ack
		createPayload(PACKET_ANNOUNCEMENT_RESP, myUsername, NULL, sadd);
 8001354:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001358:	2200      	movs	r2, #0
 800135a:	4931      	ldr	r1, [pc, #196]	; (8001420 <get_RX+0x124>)
 800135c:	2002      	movs	r0, #2
 800135e:	f000 f897 	bl	8001490 <createPayload>
	}


//	HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY);

}
 8001362:	e057      	b.n	8001414 <get_RX+0x118>
	} else if (RXpayload[0] == PACKET_MESSAGE) {
 8001364:	783b      	ldrb	r3, [r7, #0]
 8001366:	2b04      	cmp	r3, #4
 8001368:	d118      	bne.n	800139c <get_RX+0xa0>
		char* i = (char*)RXpayload;
 800136a:	463b      	mov	r3, r7
 800136c:	66fb      	str	r3, [r7, #108]	; 0x6c
		while(*i != '\0'){i++;}
 800136e:	e002      	b.n	8001376 <get_RX+0x7a>
 8001370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001372:	3301      	adds	r3, #1
 8001374:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f8      	bne.n	8001370 <get_RX+0x74>
		i++;
 800137e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001380:	3301      	adds	r3, #1
 8001382:	66fb      	str	r3, [r7, #108]	; 0x6c
		myHAL_UART_printf("Message from 0x%x(%s): %s", sadd, names[sadd], i);
 8001384:	f897 106b 	ldrb.w	r1, [r7, #107]	; 0x6b
 8001388:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800138c:	4a25      	ldr	r2, [pc, #148]	; (8001424 <get_RX+0x128>)
 800138e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001394:	4824      	ldr	r0, [pc, #144]	; (8001428 <get_RX+0x12c>)
 8001396:	f000 fa4b 	bl	8001830 <myHAL_UART_printf>
}
 800139a:	e03b      	b.n	8001414 <get_RX+0x118>
	} else if ((RXpayload[0] == PACKET_ANNOUNCEMENT_RESP) | (RXpayload[0] == PACKET_HEARTBEAT)){
 800139c:	783b      	ldrb	r3, [r7, #0]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	bf0c      	ite	eq
 80013a2:	2301      	moveq	r3, #1
 80013a4:	2300      	movne	r3, #0
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	783b      	ldrb	r3, [r7, #0]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	bf0c      	ite	eq
 80013ae:	2301      	moveq	r3, #1
 80013b0:	2300      	movne	r3, #0
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d010      	beq.n	80013de <get_RX+0xe2>
		if(RXpayload[0] == PACKET_HEARTBEAT){
 80013bc:	783b      	ldrb	r3, [r7, #0]
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d106      	bne.n	80013d0 <get_RX+0xd4>
			myHAL_UART_printf("<3beat from 0x%x\r\n", sadd);
 80013c2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80013c6:	4619      	mov	r1, r3
 80013c8:	4818      	ldr	r0, [pc, #96]	; (800142c <get_RX+0x130>)
 80013ca:	f000 fa31 	bl	8001830 <myHAL_UART_printf>
}
 80013ce:	e021      	b.n	8001414 <get_RX+0x118>
			myHAL_UART_printf("ACK by 0x%x\r\n", sadd);
 80013d0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80013d4:	4619      	mov	r1, r3
 80013d6:	4816      	ldr	r0, [pc, #88]	; (8001430 <get_RX+0x134>)
 80013d8:	f000 fa2a 	bl	8001830 <myHAL_UART_printf>
}
 80013dc:	e01a      	b.n	8001414 <get_RX+0x118>
				RXpayload[0], RXpayload[1], RXpayload[2], RXpayload[3],
 80013de:	783b      	ldrb	r3, [r7, #0]
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%x(%d)(%s)\r\n",
 80013e0:	461d      	mov	r5, r3
				RXpayload[0], RXpayload[1], RXpayload[2], RXpayload[3],
 80013e2:	787b      	ldrb	r3, [r7, #1]
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%x(%d)(%s)\r\n",
 80013e4:	461e      	mov	r6, r3
				RXpayload[0], RXpayload[1], RXpayload[2], RXpayload[3],
 80013e6:	78bb      	ldrb	r3, [r7, #2]
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%x(%d)(%s)\r\n",
 80013e8:	469c      	mov	ip, r3
				RXpayload[0], RXpayload[1], RXpayload[2], RXpayload[3],
 80013ea:	78fb      	ldrb	r3, [r7, #3]
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%x(%d)(%s)\r\n",
 80013ec:	461c      	mov	r4, r3
 80013ee:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80013f2:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 80013f6:	f897 106b 	ldrb.w	r1, [r7, #107]	; 0x6b
 80013fa:	480a      	ldr	r0, [pc, #40]	; (8001424 <get_RX+0x128>)
 80013fc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8001400:	9103      	str	r1, [sp, #12]
 8001402:	9202      	str	r2, [sp, #8]
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	9400      	str	r4, [sp, #0]
 8001408:	4663      	mov	r3, ip
 800140a:	4632      	mov	r2, r6
 800140c:	4629      	mov	r1, r5
 800140e:	4809      	ldr	r0, [pc, #36]	; (8001434 <get_RX+0x138>)
 8001410:	f000 fa0e 	bl	8001830 <myHAL_UART_printf>
}
 8001414:	bf00      	nop
 8001416:	3774      	adds	r7, #116	; 0x74
 8001418:	46bd      	mov	sp, r7
 800141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141c:	200003c8 	.word	0x200003c8
 8001420:	20000000 	.word	0x20000000
 8001424:	20000018 	.word	0x20000018
 8001428:	0800c00c 	.word	0x0800c00c
 800142c:	0800c028 	.word	0x0800c028
 8001430:	0800c03c 	.word	0x0800c03c
 8001434:	0800c04c 	.word	0x0800c04c

08001438 <Task_RX>:


void Task_RX(void *argument){
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	while(1){
		if(xSemaphoreTake(FLAG_SPIRIT, 10) == 1){
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <Task_RX+0x28>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	210a      	movs	r1, #10
 8001446:	4618      	mov	r0, r3
 8001448:	f007 fc74 	bl	8008d34 <xQueueSemaphoreTake>
 800144c:	4603      	mov	r3, r0
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <Task_RX+0x1e>
		  SPSGRF_StartRx();
 8001452:	f000 fc4a 	bl	8001cea <SPSGRF_StartRx>
		}
		vTaskDelay(10);
 8001456:	200a      	movs	r0, #10
 8001458:	f008 f8ba 	bl	80095d0 <vTaskDelay>
		if(xSemaphoreTake(FLAG_SPIRIT, 10) == 1){
 800145c:	e7f0      	b.n	8001440 <Task_RX+0x8>
 800145e:	bf00      	nop
 8001460:	200023d4 	.word	0x200023d4

08001464 <Task_BeatHeart>:
	}
}
/* USER CODE END 0 */


void Task_BeatHeart(void *argument){
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	vTaskDelay(5000);
 800146c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001470:	f008 f8ae 	bl	80095d0 <vTaskDelay>
	while(1){
		createPayload(PACKET_HEARTBEAT, myUsername, NULL, 0xFF);
 8001474:	23ff      	movs	r3, #255	; 0xff
 8001476:	2200      	movs	r2, #0
 8001478:	4904      	ldr	r1, [pc, #16]	; (800148c <Task_BeatHeart+0x28>)
 800147a:	2003      	movs	r0, #3
 800147c:	f000 f808 	bl	8001490 <createPayload>
		vTaskDelay(5000);
 8001480:	f241 3088 	movw	r0, #5000	; 0x1388
 8001484:	f008 f8a4 	bl	80095d0 <vTaskDelay>
	while(1){
 8001488:	e7f4      	b.n	8001474 <Task_BeatHeart+0x10>
 800148a:	bf00      	nop
 800148c:	20000000 	.word	0x20000000

08001490 <createPayload>:
	}
}

void createPayload(int type, char* username, char* message, uint8_t dest){
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	70fb      	strb	r3, [r7, #3]

	int myWriteTX = currentWriteTX;
 800149e:	4b21      	ldr	r3, [pc, #132]	; (8001524 <createPayload+0x94>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	617b      	str	r3, [r7, #20]
	currentWriteTX = (++currentWriteTX) %TX_Q_SIZE;
 80014a4:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <createPayload+0x94>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	3301      	adds	r3, #1
 80014aa:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <createPayload+0x94>)
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <createPayload+0x94>)
 80014b0:	6819      	ldr	r1, [r3, #0]
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <createPayload+0x98>)
 80014b4:	fb83 3201 	smull	r3, r2, r3, r1
 80014b8:	17cb      	asrs	r3, r1, #31
 80014ba:	1ad2      	subs	r2, r2, r3
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	1aca      	subs	r2, r1, r3
 80014c4:	4b17      	ldr	r3, [pc, #92]	; (8001524 <createPayload+0x94>)
 80014c6:	601a      	str	r2, [r3, #0]

	TXq[myWriteTX].type = type;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	b2d9      	uxtb	r1, r3
 80014cc:	4a17      	ldr	r2, [pc, #92]	; (800152c <createPayload+0x9c>)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	011b      	lsls	r3, r3, #4
 80014d2:	4413      	add	r3, r2
 80014d4:	3301      	adds	r3, #1
 80014d6:	460a      	mov	r2, r1
 80014d8:	701a      	strb	r2, [r3, #0]
	TXq[myWriteTX].user = username;
 80014da:	4a14      	ldr	r2, [pc, #80]	; (800152c <createPayload+0x9c>)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	4413      	add	r3, r2
 80014e2:	3304      	adds	r3, #4
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	601a      	str	r2, [r3, #0]

	if(type == 4){
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d106      	bne.n	80014fc <createPayload+0x6c>
		TXq[myWriteTX].message = message;
 80014ee:	4a0f      	ldr	r2, [pc, #60]	; (800152c <createPayload+0x9c>)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4413      	add	r3, r2
 80014f6:	3308      	adds	r3, #8
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	601a      	str	r2, [r3, #0]
	}

	TXq[myWriteTX].dest = dest;
 80014fc:	4a0b      	ldr	r2, [pc, #44]	; (800152c <createPayload+0x9c>)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	4413      	add	r3, r2
 8001504:	330c      	adds	r3, #12
 8001506:	78fa      	ldrb	r2, [r7, #3]
 8001508:	701a      	strb	r2, [r3, #0]
	TXq[myWriteTX].valid = 1;
 800150a:	4a08      	ldr	r2, [pc, #32]	; (800152c <createPayload+0x9c>)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	4413      	add	r3, r2
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
}
 8001516:	bf00      	nop
 8001518:	371c      	adds	r7, #28
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	2000240c 	.word	0x2000240c
 8001528:	55555556 	.word	0x55555556
 800152c:	200023d8 	.word	0x200023d8

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001536:	f003 f8c1 	bl	80046bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153a:	f000 f9f3 	bl	8001924 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */



  RTOS_ISR_setPriority(EXTI9_5_IRQn);
 800153e:	2017      	movs	r0, #23
 8001540:	f7ff fd05 	bl	8000f4e <RTOS_ISR_setPriority>


  /* Create the tasks */
  BaseType_t retVal = xTaskCreate(Task_TX, "Task_TX", configMINIMAL_STACK_SIZE,
 8001544:	4b39      	ldr	r3, [pc, #228]	; (800162c <main+0xfc>)
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	2304      	movs	r3, #4
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2300      	movs	r3, #0
 800154e:	2280      	movs	r2, #128	; 0x80
 8001550:	4937      	ldr	r1, [pc, #220]	; (8001630 <main+0x100>)
 8001552:	4838      	ldr	r0, [pc, #224]	; (8001634 <main+0x104>)
 8001554:	f007 fedd 	bl	8009312 <xTaskCreate>
 8001558:	6078      	str	r0, [r7, #4]
  		NULL, tskIDLE_PRIORITY + 4, &Task_TXHandler);
  if (retVal != 1) { while(1);}	// check if task creation failed
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d000      	beq.n	8001562 <main+0x32>
 8001560:	e7fe      	b.n	8001560 <main+0x30>

//  retVal = xTaskCreate(Task_printUsers, "Task_printUsers", configMINIMAL_STACK_SIZE,
//  		NULL, tskIDLE_PRIORITY + 2, &Task_printUsersHandler);
//  if (retVal != 1) { while(1);}	// check if task creation failed

  retVal = xTaskCreate(Task_RX, "Task_RX", configMINIMAL_STACK_SIZE,
 8001562:	4b35      	ldr	r3, [pc, #212]	; (8001638 <main+0x108>)
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	2303      	movs	r3, #3
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2300      	movs	r3, #0
 800156c:	2280      	movs	r2, #128	; 0x80
 800156e:	4933      	ldr	r1, [pc, #204]	; (800163c <main+0x10c>)
 8001570:	4833      	ldr	r0, [pc, #204]	; (8001640 <main+0x110>)
 8001572:	f007 fece 	bl	8009312 <xTaskCreate>
 8001576:	6078      	str	r0, [r7, #4]
  		NULL, tskIDLE_PRIORITY + 3, &Task_RXHandler);
  if (retVal != 1) { while(1);}	// check if task creation failed
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d000      	beq.n	8001580 <main+0x50>
 800157e:	e7fe      	b.n	800157e <main+0x4e>

  retVal = xTaskCreate(Task_BeatHeart, "Task_BeatHeart", configMINIMAL_STACK_SIZE,
 8001580:	4b30      	ldr	r3, [pc, #192]	; (8001644 <main+0x114>)
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	2303      	movs	r3, #3
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2300      	movs	r3, #0
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	492e      	ldr	r1, [pc, #184]	; (8001648 <main+0x118>)
 800158e:	482f      	ldr	r0, [pc, #188]	; (800164c <main+0x11c>)
 8001590:	f007 febf 	bl	8009312 <xTaskCreate>
 8001594:	6078      	str	r0, [r7, #4]
  		NULL, tskIDLE_PRIORITY + 3, &Task_HBHandler);
  if (retVal != 1) { while(1);}	// check if task creation failed
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d000      	beq.n	800159e <main+0x6e>
 800159c:	e7fe      	b.n	800159c <main+0x6c>


  // Create Semaphores for task2 and task3
  FLAG_SPIRIT = xSemaphoreCreateBinary();
 800159e:	2203      	movs	r2, #3
 80015a0:	2100      	movs	r1, #0
 80015a2:	2001      	movs	r0, #1
 80015a4:	f007 f862 	bl	800866c <xQueueGenericCreate>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4a29      	ldr	r2, [pc, #164]	; (8001650 <main+0x120>)
 80015ac:	6013      	str	r3, [r2, #0]
  if (FLAG_SPIRIT == NULL) { while(1); }
 80015ae:	4b28      	ldr	r3, [pc, #160]	; (8001650 <main+0x120>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <main+0x88>
 80015b6:	e7fe      	b.n	80015b6 <main+0x86>



//  //Initialization transmissisons

  createPayload(PACKET_ANNOUNCEMENT, myUsername, NULL, 0xFF);
 80015b8:	23ff      	movs	r3, #255	; 0xff
 80015ba:	2200      	movs	r2, #0
 80015bc:	4925      	ldr	r1, [pc, #148]	; (8001654 <main+0x124>)
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff ff66 	bl	8001490 <createPayload>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c4:	f7ff fbd8 	bl	8000d78 <MX_GPIO_Init>
  MX_SPI1_Init();
 80015c8:	f000 fa16 	bl	80019f8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80015cc:	f000 fcb6 	bl	8001f3c <MX_USART2_UART_Init>

	//	enable interrupts for USART2 receive
	USART2->CR1 |= USART_CR1_RXNEIE;					// enable RXNE interrupt on USART2
 80015d0:	4b21      	ldr	r3, [pc, #132]	; (8001658 <main+0x128>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a20      	ldr	r2, [pc, #128]	; (8001658 <main+0x128>)
 80015d6:	f043 0320 	orr.w	r3, r3, #32
 80015da:	6013      	str	r3, [r2, #0]
	USART2->ISR &= ~(USART_ISR_RXNE);					// clear interrupt flagwhile (message[i] != 0)
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <main+0x128>)
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	4a1d      	ldr	r2, [pc, #116]	; (8001658 <main+0x128>)
 80015e2:	f023 0320 	bic.w	r3, r3, #32
 80015e6:	61d3      	str	r3, [r2, #28]

	NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));		// enable USART2 ISR
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <main+0x12c>)
 80015ea:	2240      	movs	r2, #64	; 0x40
 80015ec:	605a      	str	r2, [r3, #4]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80015ee:	b662      	cpsie	i
}
 80015f0:	bf00      	nop
	__enable_irq();

  /* USER CODE BEGIN 2 */
  startTime = xTaskGetTickCount();
 80015f2:	f008 f93f 	bl	8009874 <xTaskGetTickCount>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a19      	ldr	r2, [pc, #100]	; (8001660 <main+0x130>)
 80015fa:	6013      	str	r3, [r2, #0]

  myHAL_UART_clear();
 80015fc:	f000 f940 	bl	8001880 <myHAL_UART_clear>
  myHAL_UART_printf("let's goooo \r\n");
 8001600:	4818      	ldr	r0, [pc, #96]	; (8001664 <main+0x134>)
 8001602:	f000 f915 	bl	8001830 <myHAL_UART_printf>

  SPSGRF_Init();
 8001606:	f000 fa95 	bl	8001b34 <SPSGRF_Init>

  SpiritPktStackSetDestinationAddress(0xFF);
 800160a:	20ff      	movs	r0, #255	; 0xff
 800160c:	f001 fa0a 	bl	8002a24 <SpiritPktCommonSetDestinationAddress>

  xSemaphoreGive(FLAG_SPIRIT);
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <main+0x120>)
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	2300      	movs	r3, #0
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	f007 f885 	bl	8008728 <xQueueGenericSend>

  vTaskStartScheduler();
 800161e:	f008 f80b 	bl	8009638 <vTaskStartScheduler>
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200023c8 	.word	0x200023c8
 8001630:	0800c080 	.word	0x0800c080
 8001634:	080010ad 	.word	0x080010ad
 8001638:	200023cc 	.word	0x200023cc
 800163c:	0800c088 	.word	0x0800c088
 8001640:	08001439 	.word	0x08001439
 8001644:	200023d0 	.word	0x200023d0
 8001648:	0800c090 	.word	0x0800c090
 800164c:	08001465 	.word	0x08001465
 8001650:	200023d4 	.word	0x200023d4
 8001654:	20000000 	.word	0x20000000
 8001658:	40004400 	.word	0x40004400
 800165c:	e000e100 	.word	0xe000e100
 8001660:	200003c4 	.word	0x200003c4
 8001664:	0800c0a0 	.word	0x0800c0a0

08001668 <USART2_IRQHandler>:


char userInput[100];
int userInputPos = 0;
void USART2_IRQHandler(void){
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
	char r;

	if (USART2->ISR & USART_ISR_RXNE){
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <USART2_IRQHandler+0x7c>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f003 0320 	and.w	r3, r3, #32
 8001676:	2b00      	cmp	r3, #0
 8001678:	d02f      	beq.n	80016da <USART2_IRQHandler+0x72>

		r = USART2->RDR; // copy received char
 800167a:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <USART2_IRQHandler+0x7c>)
 800167c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800167e:	b29b      	uxth	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	71fb      	strb	r3, [r7, #7]

		if (r != 13){
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2b0d      	cmp	r3, #13
 8001688:	d00f      	beq.n	80016aa <USART2_IRQHandler+0x42>
			//NOT enter
			userInput[userInputPos++] = r;
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <USART2_IRQHandler+0x80>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	4915      	ldr	r1, [pc, #84]	; (80016e8 <USART2_IRQHandler+0x80>)
 8001692:	600a      	str	r2, [r1, #0]
 8001694:	79f9      	ldrb	r1, [r7, #7]
 8001696:	4a15      	ldr	r2, [pc, #84]	; (80016ec <USART2_IRQHandler+0x84>)
 8001698:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, &r, 1, HAL_MAX_DELAY);
 800169a:	1df9      	adds	r1, r7, #7
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
 80016a0:	2201      	movs	r2, #1
 80016a2:	4813      	ldr	r0, [pc, #76]	; (80016f0 <USART2_IRQHandler+0x88>)
 80016a4:	f006 f8b2 	bl	800780c <HAL_UART_Transmit>
 80016a8:	e011      	b.n	80016ce <USART2_IRQHandler+0x66>

		} else {
			//enter
			userInput[userInputPos] = '\0';
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <USART2_IRQHandler+0x80>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <USART2_IRQHandler+0x84>)
 80016b0:	2100      	movs	r1, #0
 80016b2:	54d1      	strb	r1, [r2, r3]
			userInputPos = 0;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <USART2_IRQHandler+0x80>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, &r, 1, HAL_MAX_DELAY);
 80016ba:	1df9      	adds	r1, r7, #7
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
 80016c0:	2201      	movs	r2, #1
 80016c2:	480b      	ldr	r0, [pc, #44]	; (80016f0 <USART2_IRQHandler+0x88>)
 80016c4:	f006 f8a2 	bl	800780c <HAL_UART_Transmit>

			handleCommand(userInput);
 80016c8:	4808      	ldr	r0, [pc, #32]	; (80016ec <USART2_IRQHandler+0x84>)
 80016ca:	f000 f835 	bl	8001738 <handleCommand>

		}

		USART2->ISR &= ~(USART_ISR_RXNE); // clear the flag
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <USART2_IRQHandler+0x7c>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <USART2_IRQHandler+0x7c>)
 80016d4:	f023 0320 	bic.w	r3, r3, #32
 80016d8:	61d3      	str	r3, [r2, #28]
	}
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40004400 	.word	0x40004400
 80016e8:	20002474 	.word	0x20002474
 80016ec:	20002410 	.word	0x20002410
 80016f0:	20002930 	.word	0x20002930

080016f4 <impersonate>:

void impersonate(uint8_t skin){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
	//change username and address to a desired person's

	SpiritGotoReadyState();
 80016fe:	f000 f8db 	bl	80018b8 <SpiritGotoReadyState>
//
//	  /* Writes value on the register */
//	  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);

	  /* Fills array with the addresses passed in the structure */
	  tempRegValue[0] = BROADCAST_ADDRESS;
 8001702:	23ff      	movs	r3, #255	; 0xff
 8001704:	733b      	strb	r3, [r7, #12]
	  tempRegValue[1] = MULTICAST_ADDRESS;
 8001706:	23ee      	movs	r3, #238	; 0xee
 8001708:	737b      	strb	r3, [r7, #13]
	  tempRegValue[2] = skin;
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	73bb      	strb	r3, [r7, #14]

	  /* Writes them on the addresses registers */
	  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	461a      	mov	r2, r3
 8001714:	2103      	movs	r1, #3
 8001716:	204c      	movs	r0, #76	; 0x4c
 8001718:	f002 fe52 	bl	80043c0 <RadioSpiWriteRegisters>
 800171c:	4602      	mov	r2, r0
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <impersonate+0x40>)
 8001720:	b212      	sxth	r2, r2
 8001722:	4611      	mov	r1, r2
 8001724:	7019      	strb	r1, [r3, #0]
 8001726:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800172a:	705a      	strb	r2, [r3, #1]

}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200029c0 	.word	0x200029c0

08001738 <handleCommand>:

void handleCommand(char* input){
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	//this is after the string has been entered and the user hits enter
	myHAL_UART_printf("                              entered: (%s) \r\n", userInput);
 8001740:	4937      	ldr	r1, [pc, #220]	; (8001820 <handleCommand+0xe8>)
 8001742:	4838      	ldr	r0, [pc, #224]	; (8001824 <handleCommand+0xec>)
 8001744:	f000 f874 	bl	8001830 <myHAL_UART_printf>


	if (userInput[0] == '/'){
 8001748:	4b35      	ldr	r3, [pc, #212]	; (8001820 <handleCommand+0xe8>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b2f      	cmp	r3, #47	; 0x2f
 800174e:	d15c      	bne.n	800180a <handleCommand+0xd2>

		switch (userInput[1]) {
 8001750:	4b33      	ldr	r3, [pc, #204]	; (8001820 <handleCommand+0xe8>)
 8001752:	785b      	ldrb	r3, [r3, #1]
 8001754:	3b62      	subs	r3, #98	; 0x62
 8001756:	2b13      	cmp	r3, #19
 8001758:	d852      	bhi.n	8001800 <handleCommand+0xc8>
 800175a:	a201      	add	r2, pc, #4	; (adr r2, 8001760 <handleCommand+0x28>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	080017bb 	.word	0x080017bb
 8001764:	08001801 	.word	0x08001801
 8001768:	08001801 	.word	0x08001801
 800176c:	08001801 	.word	0x08001801
 8001770:	08001801 	.word	0x08001801
 8001774:	08001801 	.word	0x08001801
 8001778:	08001801 	.word	0x08001801
 800177c:	080017d7 	.word	0x080017d7
 8001780:	08001801 	.word	0x08001801
 8001784:	08001801 	.word	0x08001801
 8001788:	08001801 	.word	0x08001801
 800178c:	08001801 	.word	0x08001801
 8001790:	08001801 	.word	0x08001801
 8001794:	08001801 	.word	0x08001801
 8001798:	080017c9 	.word	0x080017c9
 800179c:	08001801 	.word	0x08001801
 80017a0:	08001801 	.word	0x08001801
 80017a4:	08001801 	.word	0x08001801
 80017a8:	08001801 	.word	0x08001801
 80017ac:	080017b1 	.word	0x080017b1

			case 'u': 	//list online users
				printUsersOnline();
 80017b0:	f7ff fd02 	bl	80011b8 <printUsersOnline>
				reapUsers();
 80017b4:	f7ff fd5c 	bl	8001270 <reapUsers>
				break;
 80017b8:	e02e      	b.n	8001818 <handleCommand+0xe0>

			case 'b':	//broadcast message
				createPayload(PACKET_MESSAGE, myUsername, userInput, 0xFF);
 80017ba:	23ff      	movs	r3, #255	; 0xff
 80017bc:	4a18      	ldr	r2, [pc, #96]	; (8001820 <handleCommand+0xe8>)
 80017be:	491a      	ldr	r1, [pc, #104]	; (8001828 <handleCommand+0xf0>)
 80017c0:	2004      	movs	r0, #4
 80017c2:	f7ff fe65 	bl	8001490 <createPayload>
				break;
 80017c6:	e027      	b.n	8001818 <handleCommand+0xe0>

			case 'p':	//private message
				//TODO:get address from command and pass it here
				createPayload(PACKET_MESSAGE, myUsername, userInput, 0xFF);
 80017c8:	23ff      	movs	r3, #255	; 0xff
 80017ca:	4a15      	ldr	r2, [pc, #84]	; (8001820 <handleCommand+0xe8>)
 80017cc:	4916      	ldr	r1, [pc, #88]	; (8001828 <handleCommand+0xf0>)
 80017ce:	2004      	movs	r0, #4
 80017d0:	f7ff fe5e 	bl	8001490 <createPayload>
				break;
 80017d4:	e020      	b.n	8001818 <handleCommand+0xe0>

			case 'i':	//impersonate
				char hexStr[3];
				hexStr[0] = userInput[2]; hexStr[1] = userInput[3]; hexStr[2] = '\0';
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <handleCommand+0xe8>)
 80017d8:	789b      	ldrb	r3, [r3, #2]
 80017da:	733b      	strb	r3, [r7, #12]
 80017dc:	4b10      	ldr	r3, [pc, #64]	; (8001820 <handleCommand+0xe8>)
 80017de:	78db      	ldrb	r3, [r3, #3]
 80017e0:	737b      	strb	r3, [r7, #13]
 80017e2:	2300      	movs	r3, #0
 80017e4:	73bb      	strb	r3, [r7, #14]
				impersonate((uint8_t)strtol(hexStr, NULL, 16));
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	2210      	movs	r2, #16
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f009 fd86 	bl	800b300 <strtol>
 80017f4:	4603      	mov	r3, r0
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff7b 	bl	80016f4 <impersonate>
				break;
 80017fe:	e00b      	b.n	8001818 <handleCommand+0xe0>

			default: 	//Bad command
				myHAL_UART_printf("                              Bad command: (%s) \r\n", userInput);
 8001800:	4907      	ldr	r1, [pc, #28]	; (8001820 <handleCommand+0xe8>)
 8001802:	480a      	ldr	r0, [pc, #40]	; (800182c <handleCommand+0xf4>)
 8001804:	f000 f814 	bl	8001830 <myHAL_UART_printf>
				break;
 8001808:	e006      	b.n	8001818 <handleCommand+0xe0>
		}

	} else {
		//else just assume it's a broadcast message
		createPayload(PACKET_MESSAGE, myUsername, userInput, 0xFF);
 800180a:	23ff      	movs	r3, #255	; 0xff
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <handleCommand+0xe8>)
 800180e:	4906      	ldr	r1, [pc, #24]	; (8001828 <handleCommand+0xf0>)
 8001810:	2004      	movs	r0, #4
 8001812:	f7ff fe3d 	bl	8001490 <createPayload>
	}

}
 8001816:	bf00      	nop
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20002410 	.word	0x20002410
 8001824:	0800c0b0 	.word	0x0800c0b0
 8001828:	20000000 	.word	0x20000000
 800182c:	0800c0e0 	.word	0x0800c0e0

08001830 <myHAL_UART_printf>:





void myHAL_UART_printf(const char* format, ...) {
 8001830:	b40f      	push	{r0, r1, r2, r3}
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, format);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	603b      	str	r3, [r7, #0]

	// Allocate temporary buffer for formatted string
	static char buffer[1024]; // Adjust buffer size as needed
	int formatted_length = vsnprintf(buffer, sizeof(buffer), format, args);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001846:	480c      	ldr	r0, [pc, #48]	; (8001878 <myHAL_UART_printf+0x48>)
 8001848:	f009 fd90 	bl	800b36c <vsniprintf>
 800184c:	6078      	str	r0, [r7, #4]

	// Check for potential buffer overflow (optional)
	if (formatted_length >= sizeof(buffer)) {
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001854:	d300      	bcc.n	8001858 <myHAL_UART_printf+0x28>
		// Handle buffer overflow (e.g., print error message)
		while(1);
 8001856:	e7fe      	b.n	8001856 <myHAL_UART_printf+0x26>
	} else {
		// Print the formatted string
		HAL_UART_Transmit(&huart2, buffer, formatted_length, HAL_MAX_DELAY);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	b29a      	uxth	r2, r3
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	4905      	ldr	r1, [pc, #20]	; (8001878 <myHAL_UART_printf+0x48>)
 8001862:	4806      	ldr	r0, [pc, #24]	; (800187c <myHAL_UART_printf+0x4c>)
 8001864:	f005 ffd2 	bl	800780c <HAL_UART_Transmit>
	}

	va_end(args);
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001872:	b004      	add	sp, #16
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20002478 	.word	0x20002478
 800187c:	20002930 	.word	0x20002930

08001880 <myHAL_UART_clear>:

void myHAL_UART_clear(){
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
	char clear[] = "\x1B[2J\x1B[0m\x1B[H"; // clear
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <myHAL_UART_clear+0x30>)
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	ca07      	ldmia	r2, {r0, r1, r2}
 800188c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart2, clear, strlen(clear), 100);
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fc9c 	bl	80001d0 <strlen>
 8001898:	4603      	mov	r3, r0
 800189a:	b29a      	uxth	r2, r3
 800189c:	1d39      	adds	r1, r7, #4
 800189e:	2364      	movs	r3, #100	; 0x64
 80018a0:	4804      	ldr	r0, [pc, #16]	; (80018b4 <myHAL_UART_clear+0x34>)
 80018a2:	f005 ffb3 	bl	800780c <HAL_UART_Transmit>

}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	0800c114 	.word	0x0800c114
 80018b4:	20002930 	.word	0x20002930

080018b8 <SpiritGotoReadyState>:

void SpiritGotoReadyState(void) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  static unsigned int i;
  /* Wait for the radio to enter the ready state */
  do {
    /* Go to the ready state */
    if (g_xStatus.MC_STATE == MC_STATE_LOCK) {
 80018bc:	4b16      	ldr	r3, [pc, #88]	; (8001918 <SpiritGotoReadyState+0x60>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b0f      	cmp	r3, #15
 80018c8:	d103      	bne.n	80018d2 <SpiritGotoReadyState+0x1a>
      SpiritCmdStrobeReady();
 80018ca:	2062      	movs	r0, #98	; 0x62
 80018cc:	f000 fcd2 	bl	8002274 <SpiritCmdStrobeCommand>
 80018d0:	e002      	b.n	80018d8 <SpiritGotoReadyState+0x20>
    } else {
      SpiritCmdStrobeSabort();
 80018d2:	2067      	movs	r0, #103	; 0x67
 80018d4:	f000 fcce 	bl	8002274 <SpiritCmdStrobeCommand>
    }
    /* Delay for state transition */
    for (i = 0; i != 0xFF; i++)
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <SpiritGotoReadyState+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e004      	b.n	80018ea <SpiritGotoReadyState+0x32>
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <SpiritGotoReadyState+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	4a0d      	ldr	r2, [pc, #52]	; (800191c <SpiritGotoReadyState+0x64>)
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <SpiritGotoReadyState+0x64>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2bff      	cmp	r3, #255	; 0xff
 80018f0:	d1f6      	bne.n	80018e0 <SpiritGotoReadyState+0x28>
      ;
    /* Update the global status register variable */
    SpiritRefreshStatus();
 80018f2:	f002 fd33 	bl	800435c <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <SpiritGotoReadyState+0x60>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b03      	cmp	r3, #3
 8001902:	d1db      	bne.n	80018bc <SpiritGotoReadyState+0x4>

  xSemaphoreGive(FLAG_SPIRIT);
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <SpiritGotoReadyState+0x68>)
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	2300      	movs	r3, #0
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	f006 ff0b 	bl	8008728 <xQueueGenericSend>
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200029c0 	.word	0x200029c0
 800191c:	20002878 	.word	0x20002878
 8001920:	200023d4 	.word	0x200023d4

08001924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b096      	sub	sp, #88	; 0x58
 8001928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	2244      	movs	r2, #68	; 0x44
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f009 fd28 	bl	800b388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001938:	463b      	mov	r3, r7
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001946:	f44f 7000 	mov.w	r0, #512	; 0x200
 800194a:	f003 f9eb 	bl	8004d24 <HAL_PWREx_ControlVoltageScaling>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001954:	f000 f84a 	bl	80019ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001958:	2310      	movs	r3, #16
 800195a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800195c:	2301      	movs	r3, #1
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001964:	2360      	movs	r3, #96	; 0x60
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001968:	2302      	movs	r3, #2
 800196a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800196c:	2301      	movs	r3, #1
 800196e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001970:	2301      	movs	r3, #1
 8001972:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001974:	2328      	movs	r3, #40	; 0x28
 8001976:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001978:	2307      	movs	r3, #7
 800197a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800197c:	2302      	movs	r3, #2
 800197e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001980:	2302      	movs	r3, #2
 8001982:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4618      	mov	r0, r3
 800198a:	f003 fa21 	bl	8004dd0 <HAL_RCC_OscConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001994:	f000 f82a 	bl	80019ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001998:	230f      	movs	r3, #15
 800199a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800199c:	2303      	movs	r3, #3
 800199e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019ac:	463b      	mov	r3, r7
 80019ae:	2104      	movs	r1, #4
 80019b0:	4618      	mov	r0, r3
 80019b2:	f003 fde9 	bl	8005588 <HAL_RCC_ClockConfig>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80019bc:	f000 f816 	bl	80019ec <Error_Handler>
  }
}
 80019c0:	bf00      	nop
 80019c2:	3758      	adds	r7, #88	; 0x58
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019da:	f002 fe87 	bl	80046ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40014400 	.word	0x40014400

080019ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
}
 80019f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <Error_Handler+0x8>
	...

080019f8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <MX_SPI1_Init+0x74>)
 80019fe:	4a1c      	ldr	r2, [pc, #112]	; (8001a70 <MX_SPI1_Init+0x78>)
 8001a00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a12:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a2e:	2210      	movs	r2, #16
 8001a30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a46:	2207      	movs	r2, #7
 8001a48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a52:	2208      	movs	r2, #8
 8001a54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a56:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_SPI1_Init+0x74>)
 8001a58:	f004 fca8 	bl	80063ac <HAL_SPI_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a62:	f7ff ffc3 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	2000287c 	.word	0x2000287c
 8001a70:	40013000 	.word	0x40013000

08001a74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a25      	ldr	r2, [pc, #148]	; (8001b28 <HAL_SPI_MspInit+0xb4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d144      	bne.n	8001b20 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <HAL_SPI_MspInit+0xb8>)
 8001a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9a:	4a24      	ldr	r2, [pc, #144]	; (8001b2c <HAL_SPI_MspInit+0xb8>)
 8001a9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aa0:	6613      	str	r3, [r2, #96]	; 0x60
 8001aa2:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <HAL_SPI_MspInit+0xb8>)
 8001aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <HAL_SPI_MspInit+0xb8>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab2:	4a1e      	ldr	r2, [pc, #120]	; (8001b2c <HAL_SPI_MspInit+0xb8>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <HAL_SPI_MspInit+0xb8>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_SPI_MspInit+0xb8>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <HAL_SPI_MspInit+0xb8>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <HAL_SPI_MspInit+0xb8>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ade:	23c0      	movs	r3, #192	; 0xc0
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aee:	2305      	movs	r3, #5
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afc:	f002 ff2a 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b00:	2308      	movs	r3, #8
 8001b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b10:	2305      	movs	r3, #5
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <HAL_SPI_MspInit+0xbc>)
 8001b1c:	f002 ff1a 	bl	8004954 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b20:	bf00      	nop
 8001b22:	3728      	adds	r7, #40	; 0x28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40013000 	.word	0x40013000
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	48000400 	.word	0x48000400

08001b34 <SPSGRF_Init>:
* @brief  Initialize the SPIRIT1 transceiver in the SPSGRF module.
* @param  None
* @retval None
*/
void SPSGRF_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b096      	sub	sp, #88	; 0x58
 8001b38:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktBasicInit xBasicInit;
  PktBasicAddressesInit xBasicAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 8001b3a:	f002 fc31 	bl	80043a0 <RadioSpiInit>

  // restart the radio
  SpiritEnterShutdown();
 8001b3e:	f002 fda7 	bl	8004690 <RadioEnterShutdown>
  SpiritExitShutdown();
 8001b42:	f002 fdb0 	bl	80046a6 <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 8001b46:	f000 fef3 	bl	8002930 <SpiritManagementWaExtraCurrent>

  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	70fb      	strb	r3, [r7, #3]
 8001b4e:	e004      	b.n	8001b5a <SPSGRF_Init+0x26>
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	3301      	adds	r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	70fb      	strb	r3, [r7, #3]
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2bff      	cmp	r3, #255	; 0xff
 8001b60:	d1f6      	bne.n	8001b50 <SPSGRF_Init+0x1c>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 8001b62:	f002 fbfb 	bl	800435c <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 8001b66:	4b4b      	ldr	r3, [pc, #300]	; (8001c94 <SPSGRF_Init+0x160>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d1ea      	bne.n	8001b4a <SPSGRF_Init+0x16>

  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 8001b74:	2300      	movs	r3, #0
 8001b76:	87bb      	strh	r3, [r7, #60]	; 0x3c
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 8001b78:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <SPSGRF_Init+0x164>)
 8001b7a:	643b      	str	r3, [r7, #64]	; 0x40
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 8001b7c:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <SPSGRF_Init+0x168>)
 8001b7e:	647b      	str	r3, [r7, #68]	; 0x44
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  xRadioInit.lDatarate = DATARATE;
 8001b8c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001b90:	64fb      	str	r3, [r7, #76]	; 0x4c
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 8001b92:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001b96:	653b      	str	r3, [r7, #80]	; 0x50
  xRadioInit.lBandwidth = BANDWIDTH;
 8001b98:	4b40      	ldr	r3, [pc, #256]	; (8001c9c <SPSGRF_Init+0x168>)
 8001b9a:	657b      	str	r3, [r7, #84]	; 0x54
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 8001b9c:	4840      	ldr	r0, [pc, #256]	; (8001ca0 <SPSGRF_Init+0x16c>)
 8001b9e:	f002 fb6b 	bl	8004278 <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 8001ba2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f001 f9b8 	bl	8002f1c <SpiritRadioInit>

  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 8001bac:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8001ca4 <SPSGRF_Init+0x170>
 8001bb0:	2007      	movs	r0, #7
 8001bb2:	f002 f9fd 	bl	8003fb0 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 8001bb6:	2007      	movs	r0, #7
 8001bb8:	f002 fa50 	bl	800405c <SpiritRadioSetPALevelMaxIndex>
	PktStackInit xSTackInit;
	PktStackAddressesInit xSTackAddress;
	PktStackLlpInit xSTackLlp;

//	xSTackInit.xPreambleLength = PREAMBLE_LENGTH;
	xSTackInit.xPreambleLength = PKT_PREAMBLE_LENGTH_04BYTES;
 8001bbc:	2318      	movs	r3, #24
 8001bbe:	743b      	strb	r3, [r7, #16]
	xSTackInit.xSyncLength = SYNC_LENGTH;
 8001bc0:	2306      	movs	r3, #6
 8001bc2:	747b      	strb	r3, [r7, #17]
	xSTackInit.lSyncWords = SYNC_WORD; //double check this one?
 8001bc4:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 8001bc8:	617b      	str	r3, [r7, #20]
	xSTackInit.xFixVarLength = LENGTH_TYPE;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	763b      	strb	r3, [r7, #24]
	xSTackInit.cPktLengthWidth = LENGTH_WIDTH;
 8001bce:	2307      	movs	r3, #7
 8001bd0:	767b      	strb	r3, [r7, #25]
	xSTackInit.xCrcMode = CRC_MODE; //todo:set to 8 bit CRC? is this right?
 8001bd2:	2320      	movs	r3, #32
 8001bd4:	76bb      	strb	r3, [r7, #26]
	xSTackInit.xControlLength = CONTROL_LENGTH;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	76fb      	strb	r3, [r7, #27]
	xSTackInit.xFec = S_DISABLE; //todo: what is FEN?
 8001bda:	2300      	movs	r3, #0
 8001bdc:	773b      	strb	r3, [r7, #28]
	xSTackInit.xDataWhitening = EN_WHITENING;
 8001bde:	2301      	movs	r3, #1
 8001be0:	777b      	strb	r3, [r7, #29]
	SpiritPktStackInit(&xSTackInit);
 8001be2:	f107 0310 	add.w	r3, r7, #16
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 ff4e 	bl	8002a88 <SpiritPktStackInit>

	xSTackAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 8001bec:	2301      	movs	r3, #1
 8001bee:	723b      	strb	r3, [r7, #8]
	xSTackAddress.cMyAddress = MY_ADDRESS;
 8001bf0:	23b0      	movs	r3, #176	; 0xb0
 8001bf2:	727b      	strb	r3, [r7, #9]
	xSTackAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	72bb      	strb	r3, [r7, #10]
	xSTackAddress.cMulticastAddress = MULTICAST_ADDRESS;
 8001bf8:	23ee      	movs	r3, #238	; 0xee
 8001bfa:	72fb      	strb	r3, [r7, #11]
	xSTackAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	733b      	strb	r3, [r7, #12]
	xSTackAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 8001c00:	23ff      	movs	r3, #255	; 0xff
 8001c02:	737b      	strb	r3, [r7, #13]
	SpiritPktStackAddressesInit(&xSTackAddress);
 8001c04:	f107 0308 	add.w	r3, r7, #8
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f001 f80d 	bl	8002c28 <SpiritPktStackAddressesInit>

	xSTackLlp.xAutoAck = S_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	713b      	strb	r3, [r7, #4]
	xSTackLlp.xPiggybacking = S_ENABLE;
 8001c12:	2301      	movs	r3, #1
 8001c14:	717b      	strb	r3, [r7, #5]
	xSTackLlp.xNMaxRetx = PKT_DISABLE_RETX; //todo?
 8001c16:	2300      	movs	r3, #0
 8001c18:	71bb      	strb	r3, [r7, #6]

	SpiritPktStackLlpInit(&xSTackLlp);
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f001 f871 	bl	8002d04 <SpiritPktStackLlpInit>




  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 8001c22:	2302      	movs	r3, #2
 8001c24:	f887 3020 	strb.w	r3, [r7, #32]
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  SpiritGpioInit(&xGpioInit);
 8001c34:	f107 0320 	add.w	r3, r7, #32
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 fb33 	bl	80022a4 <SpiritGpioInit>

  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f000 fb54 	bl	80022ec <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 8001c44:	2101      	movs	r1, #1
 8001c46:	2004      	movs	r0, #4
 8001c48:	f000 fb7c 	bl	8002344 <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f000 fb78 	bl	8002344 <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 8001c54:	2101      	movs	r1, #1
 8001c56:	2002      	movs	r0, #2
 8001c58:	f000 fb74 	bl	8002344 <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001c62:	f000 fb6f 	bl	8002344 <SpiritIrq>
  SpiritIrqClearStatus();
 8001c66:	f000 fc05 	bl	8002474 <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f001 f902 	bl	8002e74 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f001 f8c7 	bl	8002e04 <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8001c76:	f06f 0077 	mvn.w	r0, #119	; 0x77
 8001c7a:	f001 f92f 	bl	8002edc <SpiritQiSetRssiThresholddBm>

  // Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
  SpiritTimerSetRxTimeoutMs(RECEIVE_TIMEOUT);
#else
  SET_INFINITE_RX_TIMEOUT();
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f002 fb0a 	bl	8004298 <SpiritTimerSetRxTimeoutCounter>
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 8001c84:	2002      	movs	r0, #2
 8001c86:	f002 fb21 	bl	80042cc <SpiritTimerSetRxTimeoutStopCondition>
}
 8001c8a:	bf00      	nop
 8001c8c:	3758      	adds	r7, #88	; 0x58
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200029c0 	.word	0x200029c0
 8001c98:	3689cac0 	.word	0x3689cac0
 8001c9c:	000186a0 	.word	0x000186a0
 8001ca0:	02faf080 	.word	0x02faf080
 8001ca4:	4139999a 	.word	0x4139999a

08001ca8 <SPSGRF_StartTx>:
* @param  txBuff: pointer to the data to transmit
* @param  txLen: number of bytes to transmit
* @retval None
*/
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
  // flush the TX FIFO
  SpiritCmdStrobeFlushTxFifo();
 8001cb4:	2072      	movs	r0, #114	; 0x72
 8001cb6:	f000 fadd 	bl	8002274 <SpiritCmdStrobeCommand>

  // Avoid TX FIFO overflow
  txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	2b60      	cmp	r3, #96	; 0x60
 8001cbe:	bf28      	it	cs
 8001cc0:	2360      	movcs	r3, #96	; 0x60
 8001cc2:	70fb      	strb	r3, [r7, #3]

  // start TX operation
  SpiritSpiWriteLinearFifo(txLen, txBuff);
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f002 fc51 	bl	8004570 <RadioSpiWriteFifo>
  SpiritPktStackSetPayloadLength(txLen);
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f001 f868 	bl	8002da8 <SpiritPktStackSetPayloadLength>
  SpiritCmdStrobeTx();
 8001cd8:	f000 fdc2 	bl	8002860 <SpiritManagementWaCmdStrobeTx>
 8001cdc:	2060      	movs	r0, #96	; 0x60
 8001cde:	f000 fac9 	bl	8002274 <SpiritCmdStrobeCommand>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <SPSGRF_StartRx>:
* @brief  Enter the receive state.
* @param  None
* @retval None
*/
void SPSGRF_StartRx(void)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	af00      	add	r7, sp, #0
  SpiritCmdStrobeRx();
 8001cee:	f000 fdef 	bl	80028d0 <SpiritManagementWaCmdStrobeRx>
 8001cf2:	2061      	movs	r0, #97	; 0x61
 8001cf4:	f000 fabe 	bl	8002274 <SpiritCmdStrobeCommand>
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <SPSGRF_GetRxData>:
* @brief  To be called after a reception is complete
* @param  rxBuff: pointer to a buffer to hold the received data
* @retval Number of bytes received
*/
uint8_t SPSGRF_GetRxData(uint8_t *rxBuff)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint8_t len;

  len = SpiritLinearFifoReadNumElementsRxFifo();
 8001d04:	f000 fbce 	bl	80024a4 <SpiritLinearFifoReadNumElementsRxFifo>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	73fb      	strb	r3, [r7, #15]
  SpiritSpiReadLinearFifo(len, rxBuff);
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f002 fc75 	bl	8004600 <RadioSpiReadFifo>

  return len;
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2a:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6613      	str	r3, [r2, #96]	; 0x60
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d48:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	210f      	movs	r1, #15
 8001d5a:	f06f 0001 	mvn.w	r0, #1
 8001d5e:	f002 fdc1 	bl	80048e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000

08001d70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08c      	sub	sp, #48	; 0x30
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <HAL_InitTick+0xc8>)
 8001d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d82:	4a2d      	ldr	r2, [pc, #180]	; (8001e38 <HAL_InitTick+0xc8>)
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d88:	6613      	str	r3, [r2, #96]	; 0x60
 8001d8a:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <HAL_InitTick+0xc8>)
 8001d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d96:	f107 020c 	add.w	r2, r7, #12
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f003 fdb5 	bl	8005910 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001da6:	f003 fd9d 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8001daa:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dae:	4a23      	ldr	r2, [pc, #140]	; (8001e3c <HAL_InitTick+0xcc>)
 8001db0:	fba2 2303 	umull	r2, r3, r2, r3
 8001db4:	0c9b      	lsrs	r3, r3, #18
 8001db6:	3b01      	subs	r3, #1
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <HAL_InitTick+0xd0>)
 8001dbc:	4a21      	ldr	r2, [pc, #132]	; (8001e44 <HAL_InitTick+0xd4>)
 8001dbe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001dc0:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <HAL_InitTick+0xd0>)
 8001dc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dc6:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001dc8:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <HAL_InitTick+0xd0>)
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <HAL_InitTick+0xd0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_InitTick+0xd0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_InitTick+0xd0>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8001de0:	4817      	ldr	r0, [pc, #92]	; (8001e40 <HAL_InitTick+0xd0>)
 8001de2:	f005 fa11 	bl	8007208 <HAL_TIM_Base_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001dec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d11b      	bne.n	8001e2c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8001df4:	4812      	ldr	r0, [pc, #72]	; (8001e40 <HAL_InitTick+0xd0>)
 8001df6:	f005 fa69 	bl	80072cc <HAL_TIM_Base_Start_IT>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001e00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d111      	bne.n	8001e2c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e08:	2019      	movs	r0, #25
 8001e0a:	f002 fd87 	bl	800491c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b0f      	cmp	r3, #15
 8001e12:	d808      	bhi.n	8001e26 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001e14:	2200      	movs	r2, #0
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	2019      	movs	r0, #25
 8001e1a:	f002 fd63 	bl	80048e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <HAL_InitTick+0xd8>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e002      	b.n	8001e2c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3730      	adds	r7, #48	; 0x30
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	431bde83 	.word	0x431bde83
 8001e40:	200028e0 	.word	0x200028e0
 8001e44:	40014400 	.word	0x40014400
 8001e48:	2000034c 	.word	0x2000034c

08001e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e50:	e7fe      	b.n	8001e50 <NMI_Handler+0x4>

08001e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <HardFault_Handler+0x4>

08001e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <MemManage_Handler+0x4>

08001e5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <BusFault_Handler+0x4>

08001e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <UsageFault_Handler+0x4>

08001e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 8001e7c:	2080      	movs	r0, #128	; 0x80
 8001e7e:	f002 ff2b 	bl	8004cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e8e:	f005 fa8d 	bl	80073ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200028e0 	.word	0x200028e0

08001e9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ea0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ea4:	f002 ff18 	bl	8004cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <_sbrk+0x5c>)
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <_sbrk+0x60>)
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <_sbrk+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d102      	bne.n	8001ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <_sbrk+0x64>)
 8001eca:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <_sbrk+0x68>)
 8001ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d207      	bcs.n	8001eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001edc:	f009 fab2 	bl	800b444 <__errno>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	e009      	b.n	8001f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <_sbrk+0x64>)
 8001efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20018000 	.word	0x20018000
 8001f0c:	00000400 	.word	0x00000400
 8001f10:	2000292c 	.word	0x2000292c
 8001f14:	200044c0 	.word	0x200044c0

08001f18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <SystemInit+0x20>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <SystemInit+0x20>)
 8001f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f40:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <MX_USART2_UART_Init+0x58>)
 8001f42:	4a15      	ldr	r2, [pc, #84]	; (8001f98 <MX_USART2_UART_Init+0x5c>)
 8001f44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f46:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <MX_USART2_UART_Init+0x58>)
 8001f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <MX_USART2_UART_Init+0x58>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f54:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <MX_USART2_UART_Init+0x58>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <MX_USART2_UART_Init+0x58>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <MX_USART2_UART_Init+0x58>)
 8001f62:	220c      	movs	r2, #12
 8001f64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <MX_USART2_UART_Init+0x58>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <MX_USART2_UART_Init+0x58>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <MX_USART2_UART_Init+0x58>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <MX_USART2_UART_Init+0x58>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f7e:	4805      	ldr	r0, [pc, #20]	; (8001f94 <MX_USART2_UART_Init+0x58>)
 8001f80:	f005 fbf6 	bl	8007770 <HAL_UART_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f8a:	f7ff fd2f 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20002930 	.word	0x20002930
 8001f98:	40004400 	.word	0x40004400

08001f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b0ac      	sub	sp, #176	; 0xb0
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2288      	movs	r2, #136	; 0x88
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f009 f9e3 	bl	800b388 <memset>
  if(uartHandle->Instance==USART2)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a21      	ldr	r2, [pc, #132]	; (800204c <HAL_UART_MspInit+0xb0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d13b      	bne.n	8002044 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f003 fd2b 	bl	8005a34 <HAL_RCCEx_PeriphCLKConfig>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fe4:	f7ff fd02 	bl	80019ec <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_UART_MspInit+0xb4>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	4a18      	ldr	r2, [pc, #96]	; (8002050 <HAL_UART_MspInit+0xb4>)
 8001fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff4:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_UART_MspInit+0xb4>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_UART_MspInit+0xb4>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002004:	4a12      	ldr	r2, [pc, #72]	; (8002050 <HAL_UART_MspInit+0xb4>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_UART_MspInit+0xb4>)
 800200e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002018:	230c      	movs	r3, #12
 800201a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002030:	2307      	movs	r3, #7
 8002032:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800203a:	4619      	mov	r1, r3
 800203c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002040:	f002 fc88 	bl	8004954 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002044:	bf00      	nop
 8002046:	37b0      	adds	r7, #176	; 0xb0
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40004400 	.word	0x40004400
 8002050:	40021000 	.word	0x40021000

08002054 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800208c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002058:	f7ff ff5e 	bl	8001f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800205c:	480c      	ldr	r0, [pc, #48]	; (8002090 <LoopForever+0x6>)
  ldr r1, =_edata
 800205e:	490d      	ldr	r1, [pc, #52]	; (8002094 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002060:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <LoopForever+0xe>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002064:	e002      	b.n	800206c <LoopCopyDataInit>

08002066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206a:	3304      	adds	r3, #4

0800206c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800206c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800206e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002070:	d3f9      	bcc.n	8002066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002074:	4c0a      	ldr	r4, [pc, #40]	; (80020a0 <LoopForever+0x16>)
  movs r3, #0
 8002076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002078:	e001      	b.n	800207e <LoopFillZerobss>

0800207a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800207c:	3204      	adds	r2, #4

0800207e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800207e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002080:	d3fb      	bcc.n	800207a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002082:	f009 f9e5 	bl	800b450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002086:	f7ff fa53 	bl	8001530 <main>

0800208a <LoopForever>:

LoopForever:
    b LoopForever
 800208a:	e7fe      	b.n	800208a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800208c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002094:	200003a8 	.word	0x200003a8
  ldr r2, =_sidata
 8002098:	0800c420 	.word	0x0800c420
  ldr r2, =_sbss
 800209c:	200003a8 	.word	0x200003a8
  ldr r4, =_ebss
 80020a0:	200044bc 	.word	0x200044bc

080020a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020a4:	e7fe      	b.n	80020a4 <ADC1_2_IRQHandler>
	...

080020a8 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 80020b2:	f107 030f 	add.w	r3, r7, #15
 80020b6:	461a      	mov	r2, r3
 80020b8:	2101      	movs	r1, #1
 80020ba:	2050      	movs	r0, #80	; 0x50
 80020bc:	f002 f9cc 	bl	8004458 <RadioSpiReadRegisters>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <SpiritCalibrationVco+0x6c>)
 80020c4:	b212      	sxth	r2, r2
 80020c6:	4611      	mov	r1, r2
 80020c8:	7019      	strb	r1, [r3, #0]
 80020ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80020ce:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d105      	bne.n	80020e2 <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	73fb      	strb	r3, [r7, #15]
 80020e0:	e004      	b.n	80020ec <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	f023 0302 	bic.w	r3, r3, #2
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 80020ec:	f107 030f 	add.w	r3, r7, #15
 80020f0:	461a      	mov	r2, r3
 80020f2:	2101      	movs	r1, #1
 80020f4:	2050      	movs	r0, #80	; 0x50
 80020f6:	f002 f963 	bl	80043c0 <RadioSpiWriteRegisters>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <SpiritCalibrationVco+0x6c>)
 80020fe:	b212      	sxth	r2, r2
 8002100:	4611      	mov	r1, r2
 8002102:	7019      	strb	r1, [r3, #0]
 8002104:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002108:	705a      	strb	r2, [r3, #1]

}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200029c0 	.word	0x200029c0

08002118 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	461a      	mov	r2, r3
 8002122:	2101      	movs	r1, #1
 8002124:	20e5      	movs	r0, #229	; 0xe5
 8002126:	f002 f997 	bl	8004458 <RadioSpiReadRegisters>
 800212a:	4602      	mov	r2, r0
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <SpiritCalibrationGetVcoCalData+0x34>)
 800212e:	b212      	sxth	r2, r2
 8002130:	4611      	mov	r1, r2
 8002132:	7019      	strb	r1, [r3, #0]
 8002134:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002138:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002140:	b2db      	uxtb	r3, r3

}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200029c0 	.word	0x200029c0

08002150 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 800215a:	f107 030f 	add.w	r3, r7, #15
 800215e:	461a      	mov	r2, r3
 8002160:	2101      	movs	r1, #1
 8002162:	206e      	movs	r0, #110	; 0x6e
 8002164:	f002 f978 	bl	8004458 <RadioSpiReadRegisters>
 8002168:	4602      	mov	r2, r0
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 800216c:	b212      	sxth	r2, r2
 800216e:	4611      	mov	r1, r2
 8002170:	7019      	strb	r1, [r3, #0]
 8002172:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002176:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800217e:	b2db      	uxtb	r3, r3
 8002180:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	4313      	orrs	r3, r2
 8002188:	b2db      	uxtb	r3, r3
 800218a:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 800218c:	f107 030f 	add.w	r3, r7, #15
 8002190:	461a      	mov	r2, r3
 8002192:	2101      	movs	r1, #1
 8002194:	206e      	movs	r0, #110	; 0x6e
 8002196:	f002 f913 	bl	80043c0 <RadioSpiWriteRegisters>
 800219a:	4602      	mov	r2, r0
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 800219e:	b212      	sxth	r2, r2
 80021a0:	4611      	mov	r1, r2
 80021a2:	7019      	strb	r1, [r3, #0]
 80021a4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80021a8:	705a      	strb	r2, [r3, #1]

}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200029c0 	.word	0x200029c0

080021b8 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 80021c2:	f107 030f 	add.w	r3, r7, #15
 80021c6:	461a      	mov	r2, r3
 80021c8:	2101      	movs	r1, #1
 80021ca:	206f      	movs	r0, #111	; 0x6f
 80021cc:	f002 f944 	bl	8004458 <RadioSpiReadRegisters>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <SpiritCalibrationSetVcoCalDataRx+0x64>)
 80021d4:	b212      	sxth	r2, r2
 80021d6:	4611      	mov	r1, r2
 80021d8:	7019      	strb	r1, [r3, #0]
 80021da:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80021de:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 80021ea:	7bfa      	ldrb	r2, [r7, #15]
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 80021f4:	f107 030f 	add.w	r3, r7, #15
 80021f8:	461a      	mov	r2, r3
 80021fa:	2101      	movs	r1, #1
 80021fc:	206f      	movs	r0, #111	; 0x6f
 80021fe:	f002 f8df 	bl	80043c0 <RadioSpiWriteRegisters>
 8002202:	4602      	mov	r2, r0
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8002206:	b212      	sxth	r2, r2
 8002208:	4611      	mov	r1, r2
 800220a:	7019      	strb	r1, [r3, #0]
 800220c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002210:	705a      	strb	r2, [r3, #1]

}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200029c0 	.word	0x200029c0

08002220 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800222a:	f107 030f 	add.w	r3, r7, #15
 800222e:	461a      	mov	r2, r3
 8002230:	2101      	movs	r1, #1
 8002232:	209e      	movs	r0, #158	; 0x9e
 8002234:	f002 f910 	bl	8004458 <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	f023 0306 	bic.w	r3, r3, #6
 800223e:	b2db      	uxtb	r3, r3
 8002240:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	f043 0302 	orr.w	r3, r3, #2
 800224e:	b2db      	uxtb	r3, r3
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	e004      	b.n	800225e <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	f043 0304 	orr.w	r3, r3, #4
 800225a:	b2db      	uxtb	r3, r3
 800225c:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 800225e:	f107 030f 	add.w	r3, r7, #15
 8002262:	461a      	mov	r2, r3
 8002264:	2101      	movs	r1, #1
 8002266:	209e      	movs	r0, #158	; 0x9e
 8002268:	f002 f8aa 	bl	80043c0 <RadioSpiWriteRegisters>
  
}
 800226c:	bf00      	nop
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	4618      	mov	r0, r3
 8002282:	f002 f935 	bl	80044f0 <RadioSpiCommandStrobes>
 8002286:	4602      	mov	r2, r0
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <SpiritCmdStrobeCommand+0x2c>)
 800228a:	b212      	sxth	r2, r2
 800228c:	4611      	mov	r1, r2
 800228e:	7019      	strb	r1, [r3, #0]
 8002290:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002294:	705a      	strb	r2, [r3, #1]
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200029c0 	.word	0x200029c0

080022a4 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	785a      	ldrb	r2, [r3, #1]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	789b      	ldrb	r3, [r3, #2]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	f107 020f 	add.w	r2, r7, #15
 80022c6:	2101      	movs	r1, #1
 80022c8:	4618      	mov	r0, r3
 80022ca:	f002 f879 	bl	80043c0 <RadioSpiWriteRegisters>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <SpiritGpioInit+0x44>)
 80022d2:	b212      	sxth	r2, r2
 80022d4:	4611      	mov	r1, r2
 80022d6:	7019      	strb	r1, [r3, #0]
 80022d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022dc:	705a      	strb	r2, [r3, #1]

}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200029c0 	.word	0x200029c0

080022ec <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00c      	beq.n	8002318 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 80022fe:	f107 0308 	add.w	r3, r7, #8
 8002302:	2204      	movs	r2, #4
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f009 f83e 	bl	800b388 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	461a      	mov	r2, r3
 8002310:	f107 0308 	add.w	r3, r7, #8
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002318:	f107 030c 	add.w	r3, r7, #12
 800231c:	461a      	mov	r2, r3
 800231e:	2104      	movs	r1, #4
 8002320:	2090      	movs	r0, #144	; 0x90
 8002322:	f002 f84d 	bl	80043c0 <RadioSpiWriteRegisters>
 8002326:	4602      	mov	r2, r0
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <SpiritIrqDeInit+0x54>)
 800232a:	b212      	sxth	r2, r2
 800232c:	4611      	mov	r1, r2
 800232e:	7019      	strb	r1, [r3, #0]
 8002330:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002334:	705a      	strb	r2, [r3, #1]
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	200029c0 	.word	0x200029c0

08002344 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	461a      	mov	r2, r3
 800235a:	2104      	movs	r1, #4
 800235c:	2090      	movs	r0, #144	; 0x90
 800235e:	f002 f87b 	bl	8004458 <RadioSpiReadRegisters>
 8002362:	4602      	mov	r2, r0
 8002364:	4b29      	ldr	r3, [pc, #164]	; (800240c <SpiritIrq+0xc8>)
 8002366:	b212      	sxth	r2, r2
 8002368:	4611      	mov	r1, r2
 800236a:	7019      	strb	r1, [r3, #0]
 800236c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002370:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8002372:	2300      	movs	r3, #0
 8002374:	74fb      	strb	r3, [r7, #19]
 8002376:	e011      	b.n	800239c <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	3318      	adds	r3, #24
 800237c:	443b      	add	r3, r7
 800237e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002382:	461a      	mov	r2, r3
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	f1c3 0303 	rsb	r3, r3, #3
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	4413      	add	r3, r2
 8002394:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8002396:	7cfb      	ldrb	r3, [r7, #19]
 8002398:	3301      	adds	r3, #1
 800239a:	74fb      	strb	r3, [r7, #19]
 800239c:	7cfb      	ldrb	r3, [r7, #19]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d9ea      	bls.n	8002378 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d105      	bne.n	80023b4 <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	4013      	ands	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	e003      	b.n	80023bc <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 80023bc:	2300      	movs	r3, #0
 80023be:	74bb      	strb	r3, [r7, #18]
 80023c0:	e00e      	b.n	80023e0 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 80023c2:	7cbb      	ldrb	r3, [r7, #18]
 80023c4:	f1c3 0303 	rsb	r3, r3, #3
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	40da      	lsrs	r2, r3
 80023ce:	7cbb      	ldrb	r3, [r7, #18]
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	3318      	adds	r3, #24
 80023d4:	443b      	add	r3, r7
 80023d6:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 80023da:	7cbb      	ldrb	r3, [r7, #18]
 80023dc:	3301      	adds	r3, #1
 80023de:	74bb      	strb	r3, [r7, #18]
 80023e0:	7cbb      	ldrb	r3, [r7, #18]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d9ed      	bls.n	80023c2 <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	461a      	mov	r2, r3
 80023ec:	2104      	movs	r1, #4
 80023ee:	2090      	movs	r0, #144	; 0x90
 80023f0:	f001 ffe6 	bl	80043c0 <RadioSpiWriteRegisters>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <SpiritIrq+0xc8>)
 80023f8:	b212      	sxth	r2, r2
 80023fa:	4611      	mov	r1, r2
 80023fc:	7019      	strb	r1, [r3, #0]
 80023fe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002402:	705a      	strb	r2, [r3, #1]

}
 8002404:	bf00      	nop
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	200029c0 	.word	0x200029c0

08002410 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	461a      	mov	r2, r3
 8002422:	2104      	movs	r1, #4
 8002424:	20fa      	movs	r0, #250	; 0xfa
 8002426:	f002 f817 	bl	8004458 <RadioSpiReadRegisters>
 800242a:	4602      	mov	r2, r0
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <SpiritIrqGetStatus+0x60>)
 800242e:	b212      	sxth	r2, r2
 8002430:	4611      	mov	r1, r2
 8002432:	7019      	strb	r1, [r3, #0]
 8002434:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002438:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 800243a:	2300      	movs	r3, #0
 800243c:	74fb      	strb	r3, [r7, #19]
 800243e:	e00e      	b.n	800245e <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	f1c3 0303 	rsb	r3, r3, #3
 8002446:	3318      	adds	r3, #24
 8002448:	443b      	add	r3, r7
 800244a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	3301      	adds	r3, #1
 8002456:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	3301      	adds	r3, #1
 800245c:	74fb      	strb	r3, [r7, #19]
 800245e:	7cfb      	ldrb	r3, [r7, #19]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d9ed      	bls.n	8002440 <SpiritIrqGetStatus+0x30>
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200029c0 	.word	0x200029c0

08002474 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	461a      	mov	r2, r3
 800247e:	2104      	movs	r1, #4
 8002480:	20fa      	movs	r0, #250	; 0xfa
 8002482:	f001 ffe9 	bl	8004458 <RadioSpiReadRegisters>
 8002486:	4602      	mov	r2, r0
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <SpiritIrqClearStatus+0x2c>)
 800248a:	b212      	sxth	r2, r2
 800248c:	4611      	mov	r1, r2
 800248e:	7019      	strb	r1, [r3, #0]
 8002490:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002494:	705a      	strb	r2, [r3, #1]

}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200029c0 	.word	0x200029c0

080024a4 <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	461a      	mov	r2, r3
 80024ae:	2101      	movs	r1, #1
 80024b0:	20e7      	movs	r0, #231	; 0xe7
 80024b2:	f001 ffd1 	bl	8004458 <RadioSpiReadRegisters>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 80024ba:	b212      	sxth	r2, r2
 80024bc:	4611      	mov	r1, r2
 80024be:	7019      	strb	r1, [r3, #0]
 80024c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80024c4:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024cc:	b2db      	uxtb	r3, r3

}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200029c0 	.word	0x200029c0

080024dc <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 80024dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024e0:	b08a      	sub	sp, #40	; 0x28
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a70      	ldr	r2, [pc, #448]	; (80026ac <SpiritManagementSetFrequencyBase+0x1d0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d307      	bcc.n	80024fe <SpiritManagementSetFrequencyBase+0x22>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a6f      	ldr	r2, [pc, #444]	; (80026b0 <SpiritManagementSetFrequencyBase+0x1d4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d803      	bhi.n	80024fe <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80024fc:	e01a      	b.n	8002534 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a6c      	ldr	r2, [pc, #432]	; (80026b4 <SpiritManagementSetFrequencyBase+0x1d8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d907      	bls.n	8002516 <SpiritManagementSetFrequencyBase+0x3a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a6b      	ldr	r2, [pc, #428]	; (80026b8 <SpiritManagementSetFrequencyBase+0x1dc>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d803      	bhi.n	8002516 <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 800250e:	2301      	movs	r3, #1
 8002510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002514:	e00e      	b.n	8002534 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a68      	ldr	r2, [pc, #416]	; (80026bc <SpiritManagementSetFrequencyBase+0x1e0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d907      	bls.n	800252e <SpiritManagementSetFrequencyBase+0x52>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a67      	ldr	r2, [pc, #412]	; (80026c0 <SpiritManagementSetFrequencyBase+0x1e4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d803      	bhi.n	800252e <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 8002526:	2302      	movs	r3, #2
 8002528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800252c:	e002      	b.n	8002534 <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 800252e:	2303      	movs	r3, #3
 8002530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8002534:	f001 f830 	bl	8003598 <SpiritRadioGetFrequencyOffset>
 8002538:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 800253a:	f001 f80d 	bl	8003558 <SpiritRadioGetChannelSpace>
 800253e:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8002540:	f000 fff2 	bl	8003528 <SpiritRadioGetChannel>
 8002544:	4603      	mov	r3, r0
 8002546:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8002548:	6a3a      	ldr	r2, [r7, #32]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	441a      	add	r2, r3
 800254e:	7efb      	ldrb	r3, [r7, #27]
 8002550:	69f9      	ldr	r1, [r7, #28]
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 800255a:	f001 fe0d 	bl	8004178 <SpiritRadioGetRefDiv>
 800255e:	4603      	mov	r3, r0
 8002560:	3301      	adds	r3, #1
 8002562:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 8002564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002568:	2b03      	cmp	r3, #3
 800256a:	d83a      	bhi.n	80025e2 <SpiritManagementSetFrequencyBase+0x106>
 800256c:	a201      	add	r2, pc, #4	; (adr r2, 8002574 <SpiritManagementSetFrequencyBase+0x98>)
 800256e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002572:	bf00      	nop
 8002574:	080025cd 	.word	0x080025cd
 8002578:	080025b5 	.word	0x080025b5
 800257c:	0800259d 	.word	0x0800259d
 8002580:	08002585 	.word	0x08002585
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	4a4f      	ldr	r2, [pc, #316]	; (80026c4 <SpiritManagementSetFrequencyBase+0x1e8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d803      	bhi.n	8002594 <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800258c:	2000      	movs	r0, #0
 800258e:	f7ff fe47 	bl	8002220 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002592:	e026      	b.n	80025e2 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002594:	2001      	movs	r0, #1
 8002596:	f7ff fe43 	bl	8002220 <SpiritCalibrationSelectVco>
    break;
 800259a:	e022      	b.n	80025e2 <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	4a4a      	ldr	r2, [pc, #296]	; (80026c8 <SpiritManagementSetFrequencyBase+0x1ec>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d803      	bhi.n	80025ac <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80025a4:	2000      	movs	r0, #0
 80025a6:	f7ff fe3b 	bl	8002220 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80025aa:	e01a      	b.n	80025e2 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80025ac:	2001      	movs	r0, #1
 80025ae:	f7ff fe37 	bl	8002220 <SpiritCalibrationSelectVco>
    break;
 80025b2:	e016      	b.n	80025e2 <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	4a45      	ldr	r2, [pc, #276]	; (80026cc <SpiritManagementSetFrequencyBase+0x1f0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d803      	bhi.n	80025c4 <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7ff fe2f 	bl	8002220 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80025c2:	e00e      	b.n	80025e2 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80025c4:	2001      	movs	r0, #1
 80025c6:	f7ff fe2b 	bl	8002220 <SpiritCalibrationSelectVco>
    break;
 80025ca:	e00a      	b.n	80025e2 <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	4a40      	ldr	r2, [pc, #256]	; (80026d0 <SpiritManagementSetFrequencyBase+0x1f4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d803      	bhi.n	80025dc <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7ff fe23 	bl	8002220 <SpiritCalibrationSelectVco>
 80025da:	e002      	b.n	80025e2 <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 80025dc:	2001      	movs	r0, #1
 80025de:	f7ff fe1f 	bl	8002220 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 80025e2:	6978      	ldr	r0, [r7, #20]
 80025e4:	f000 feb8 	bl	8003358 <SpiritRadioSearchWCP>
 80025e8:	4603      	mov	r3, r0
 80025ea:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7fd ff89 	bl	8000504 <__aeabi_ui2d>
 80025f2:	4604      	mov	r4, r0
 80025f4:	460d      	mov	r5, r1
 80025f6:	7cfb      	ldrb	r3, [r7, #19]
 80025f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80025fc:	4935      	ldr	r1, [pc, #212]	; (80026d4 <SpiritManagementSetFrequencyBase+0x1f8>)
 80025fe:	5c8a      	ldrb	r2, [r1, r2]
 8002600:	fb02 f303 	mul.w	r3, r2, r3
 8002604:	049b      	lsls	r3, r3, #18
 8002606:	4618      	mov	r0, r3
 8002608:	f7fd ff8c 	bl	8000524 <__aeabi_i2d>
 800260c:	4680      	mov	r8, r0
 800260e:	4689      	mov	r9, r1
 8002610:	f001 fe26 	bl	8004260 <SpiritRadioGetXtalFrequency>
 8002614:	4603      	mov	r3, r0
 8002616:	4618      	mov	r0, r3
 8002618:	f7fd ff74 	bl	8000504 <__aeabi_ui2d>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4640      	mov	r0, r8
 8002622:	4649      	mov	r1, r9
 8002624:	f7fe f912 	bl	800084c <__aeabi_ddiv>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4620      	mov	r0, r4
 800262e:	4629      	mov	r1, r5
 8002630:	f7fd ffe2 	bl	80005f8 <__aeabi_dmul>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	f7fe f9ee 	bl	8000a1c <__aeabi_d2uiz>
 8002640:	4603      	mov	r3, r0
 8002642:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	0d5b      	lsrs	r3, r3, #21
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	b2da      	uxtb	r2, r3
 8002650:	7cbb      	ldrb	r3, [r7, #18]
 8002652:	015b      	lsls	r3, r3, #5
 8002654:	b2db      	uxtb	r3, r3
 8002656:	4313      	orrs	r3, r2
 8002658:	b2db      	uxtb	r3, r3
 800265a:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	0b5b      	lsrs	r3, r3, #13
 8002660:	b2db      	uxtb	r3, r3
 8002662:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	b2db      	uxtb	r3, r3
 800266a:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	b2da      	uxtb	r2, r3
 8002674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002678:	4917      	ldr	r1, [pc, #92]	; (80026d8 <SpiritManagementSetFrequencyBase+0x1fc>)
 800267a:	5ccb      	ldrb	r3, [r1, r3]
 800267c:	4313      	orrs	r3, r2
 800267e:	b2db      	uxtb	r3, r3
 8002680:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8002682:	f107 0308 	add.w	r3, r7, #8
 8002686:	461a      	mov	r2, r3
 8002688:	2104      	movs	r1, #4
 800268a:	2008      	movs	r0, #8
 800268c:	f001 fe98 	bl	80043c0 <RadioSpiWriteRegisters>
 8002690:	4602      	mov	r2, r0
 8002692:	4b12      	ldr	r3, [pc, #72]	; (80026dc <SpiritManagementSetFrequencyBase+0x200>)
 8002694:	b212      	sxth	r2, r2
 8002696:	4611      	mov	r1, r2
 8002698:	7019      	strb	r1, [r3, #0]
 800269a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800269e:	705a      	strb	r2, [r3, #1]
}
 80026a0:	bf00      	nop
 80026a2:	3728      	adds	r7, #40	; 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026aa:	bf00      	nop
 80026ac:	2e5f5680 	.word	0x2e5f5680
 80026b0:	390c2fe0 	.word	0x390c2fe0
 80026b4:	1701e47f 	.word	0x1701e47f
 80026b8:	1c146a60 	.word	0x1c146a60
 80026bc:	11d260bf 	.word	0x11d260bf
 80026c0:	14ced7e0 	.word	0x14ced7e0
 80026c4:	099cf4e1 	.word	0x099cf4e1
 80026c8:	1339e9c3 	.word	0x1339e9c3
 80026cc:	19a28d05 	.word	0x19a28d05
 80026d0:	33451a0a 	.word	0x33451a0a
 80026d4:	0800c184 	.word	0x0800c184
 80026d8:	0800c180 	.word	0x0800c180
 80026dc:	200029c0 	.word	0x200029c0

080026e0 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 80026ee:	f001 fdb7 	bl	8004260 <SpiritRadioGetXtalFrequency>
 80026f2:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4a57      	ldr	r2, [pc, #348]	; (8002858 <SpiritManagementWaVcoCalibration+0x178>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d90f      	bls.n	8002720 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8002700:	f001 fd3a 	bl	8004178 <SpiritRadioGetRefDiv>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10a      	bne.n	8002720 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 800270a:	2301      	movs	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 800270e:	f001 f8a5 	bl	800385c <SpiritRadioGetFrequencyBase>
 8002712:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 8002714:	2001      	movs	r0, #1
 8002716:	f001 fcff 	bl	8004118 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff fede 	bl	80024dc <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8002720:	f001 f89c 	bl	800385c <SpiritRadioGetFrequencyBase>
 8002724:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 8002726:	2325      	movs	r3, #37	; 0x25
 8002728:	707b      	strb	r3, [r7, #1]
 800272a:	1c7b      	adds	r3, r7, #1
 800272c:	461a      	mov	r2, r3
 800272e:	2101      	movs	r1, #1
 8002730:	20a1      	movs	r0, #161	; 0xa1
 8002732:	f001 fe45 	bl	80043c0 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 8002736:	2001      	movs	r0, #1
 8002738:	f7ff fcb6 	bl	80020a8 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 800273c:	f001 fe0e 	bl	800435c <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 8002740:	4b46      	ldr	r3, [pc, #280]	; (800285c <SpiritManagementWaVcoCalibration+0x17c>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b40      	cmp	r3, #64	; 0x40
 800274c:	d10d      	bne.n	800276a <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 800274e:	2301      	movs	r3, #1
 8002750:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 8002752:	2062      	movs	r0, #98	; 0x62
 8002754:	f7ff fd8e 	bl	8002274 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 8002758:	f001 fe00 	bl	800435c <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 800275c:	4b3f      	ldr	r3, [pc, #252]	; (800285c <SpiritManagementWaVcoCalibration+0x17c>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b03      	cmp	r3, #3
 8002768:	d1f6      	bne.n	8002758 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 800276a:	2066      	movs	r0, #102	; 0x66
 800276c:	f7ff fd82 	bl	8002274 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002770:	2300      	movs	r3, #0
 8002772:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002774:	f001 fdf2 	bl	800435c <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002778:	4b38      	ldr	r3, [pc, #224]	; (800285c <SpiritManagementWaVcoCalibration+0x17c>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b13      	cmp	r3, #19
 8002784:	d106      	bne.n	8002794 <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 8002786:	7b7b      	ldrb	r3, [r7, #13]
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	737a      	strb	r2, [r7, #13]
 800278c:	2b05      	cmp	r3, #5
 800278e:	d101      	bne.n	8002794 <SpiritManagementWaVcoCalibration+0xb4>
 8002790:	2301      	movs	r3, #1
 8002792:	e05d      	b.n	8002850 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002794:	4b31      	ldr	r3, [pc, #196]	; (800285c <SpiritManagementWaVcoCalibration+0x17c>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b0f      	cmp	r3, #15
 80027a0:	d1e8      	bne.n	8002774 <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 80027a2:	f7ff fcb9 	bl	8002118 <SpiritCalibrationGetVcoCalData>
 80027a6:	4603      	mov	r3, r0
 80027a8:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 80027aa:	2062      	movs	r0, #98	; 0x62
 80027ac:	f7ff fd62 	bl	8002274 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 80027b0:	f001 fdd4 	bl	800435c <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80027b4:	4b29      	ldr	r3, [pc, #164]	; (800285c <SpiritManagementWaVcoCalibration+0x17c>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d1f6      	bne.n	80027b0 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 80027c2:	2065      	movs	r0, #101	; 0x65
 80027c4:	f7ff fd56 	bl	8002274 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80027cc:	f001 fdc6 	bl	800435c <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80027d0:	4b22      	ldr	r3, [pc, #136]	; (800285c <SpiritManagementWaVcoCalibration+0x17c>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b13      	cmp	r3, #19
 80027dc:	d106      	bne.n	80027ec <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 80027de:	7b7b      	ldrb	r3, [r7, #13]
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	737a      	strb	r2, [r7, #13]
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d101      	bne.n	80027ec <SpiritManagementWaVcoCalibration+0x10c>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e031      	b.n	8002850 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <SpiritManagementWaVcoCalibration+0x17c>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b0f      	cmp	r3, #15
 80027f8:	d1e8      	bne.n	80027cc <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 80027fa:	f7ff fc8d 	bl	8002118 <SpiritCalibrationGetVcoCalData>
 80027fe:	4603      	mov	r3, r0
 8002800:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 8002802:	2062      	movs	r0, #98	; 0x62
 8002804:	f7ff fd36 	bl	8002274 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002808:	f001 fda8 	bl	800435c <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 800280c:	4b13      	ldr	r3, [pc, #76]	; (800285c <SpiritManagementWaVcoCalibration+0x17c>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b03      	cmp	r3, #3
 8002818:	d1f6      	bne.n	8002808 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 800281a:	7bbb      	ldrb	r3, [r7, #14]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d102      	bne.n	8002826 <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8002820:	2063      	movs	r0, #99	; 0x63
 8002822:	f7ff fd27 	bl	8002274 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 8002826:	2000      	movs	r0, #0
 8002828:	f7ff fc3e 	bl	80020a8 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 8002832:	2000      	movs	r0, #0
 8002834:	f001 fc70 	bl	8004118 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff fe4f 	bl	80024dc <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fc85 	bl	8002150 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 8002846:	78bb      	ldrb	r3, [r7, #2]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fcb5 	bl	80021b8 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	01c9c380 	.word	0x01c9c380
 800285c:	200029c0 	.word	0x200029c0

08002860 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <SpiritManagementWaCmdStrobeTx+0x60>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d023      	beq.n	80028b8 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <SpiritManagementWaCmdStrobeTx+0x64>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <SpiritManagementWaCmdStrobeTx+0x68>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d908      	bls.n	800288c <SpiritManagementWaCmdStrobeTx+0x2c>
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <SpiritManagementWaCmdStrobeTx+0x64>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a13      	ldr	r2, [pc, #76]	; (80028cc <SpiritManagementWaCmdStrobeTx+0x6c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d803      	bhi.n	800288c <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 8002884:	20c0      	movs	r0, #192	; 0xc0
 8002886:	f001 fbbd 	bl	8004004 <SpiritRadioSetPACwc>
 800288a:	e002      	b.n	8002892 <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 800288c:	2000      	movs	r0, #0
 800288e:	f001 fbb9 	bl	8004004 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 8002892:	2311      	movs	r3, #17
 8002894:	71fb      	strb	r3, [r7, #7]
 8002896:	1dfb      	adds	r3, r7, #7
 8002898:	461a      	mov	r2, r3
 800289a:	2101      	movs	r1, #1
 800289c:	20a9      	movs	r0, #169	; 0xa9
 800289e:	f001 fd8f 	bl	80043c0 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 80028a2:	2320      	movs	r3, #32
 80028a4:	71fb      	strb	r3, [r7, #7]
 80028a6:	1dfb      	adds	r3, r7, #7
 80028a8:	461a      	mov	r2, r3
 80028aa:	2101      	movs	r1, #1
 80028ac:	20a5      	movs	r0, #165	; 0xa5
 80028ae:	f001 fd87 	bl	80043c0 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 80028b2:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <SpiritManagementWaCmdStrobeTx+0x60>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
  }
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20000344 	.word	0x20000344
 80028c4:	200029b8 	.word	0x200029b8
 80028c8:	08f0d17f 	.word	0x08f0d17f
 80028cc:	1c03a180 	.word	0x1c03a180

080028d0 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 80028d6:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <SpiritManagementWaCmdStrobeRx+0x34>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d00d      	beq.n	80028fc <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 80028e0:	2398      	movs	r3, #152	; 0x98
 80028e2:	71fb      	strb	r3, [r7, #7]
 80028e4:	1dfb      	adds	r3, r7, #7
 80028e6:	461a      	mov	r2, r3
 80028e8:	2101      	movs	r1, #1
 80028ea:	20a5      	movs	r0, #165	; 0xa5
 80028ec:	f001 fd68 	bl	80043c0 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 80028f0:	2000      	movs	r0, #0
 80028f2:	f001 fb87 	bl	8004004 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 80028f6:	4b03      	ldr	r3, [pc, #12]	; (8002904 <SpiritManagementWaCmdStrobeRx+0x34>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
  }
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000344 	.word	0x20000344

08002908 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <SpiritManagementWaTRxFcMem+0x20>)
 8002912:	2202      	movs	r2, #2
 8002914:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 8002916:	4a05      	ldr	r2, [pc, #20]	; (800292c <SpiritManagementWaTRxFcMem+0x24>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6013      	str	r3, [r2, #0]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	20000344 	.word	0x20000344
 800292c:	200029b8 	.word	0x200029b8

08002930 <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 8002936:	23ca      	movs	r3, #202	; 0xca
 8002938:	71fb      	strb	r3, [r7, #7]
 800293a:	1dfb      	adds	r3, r7, #7
 800293c:	461a      	mov	r2, r3
 800293e:	2101      	movs	r1, #1
 8002940:	20b2      	movs	r0, #178	; 0xb2
 8002942:	f001 fd3d 	bl	80043c0 <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8002946:	2304      	movs	r3, #4
 8002948:	71fb      	strb	r3, [r7, #7]
 800294a:	1dfb      	adds	r3, r7, #7
 800294c:	461a      	mov	r2, r3
 800294e:	2101      	movs	r1, #1
 8002950:	20a8      	movs	r0, #168	; 0xa8
 8002952:	f001 fd35 	bl	80043c0 <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 8002956:	1dfb      	adds	r3, r7, #7
 8002958:	461a      	mov	r2, r3
 800295a:	2101      	movs	r1, #1
 800295c:	20a8      	movs	r0, #168	; 0xa8
 800295e:	f001 fd7b 	bl	8004458 <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8002962:	2300      	movs	r3, #0
 8002964:	71fb      	strb	r3, [r7, #7]
 8002966:	1dfb      	adds	r3, r7, #7
 8002968:	461a      	mov	r2, r3
 800296a:	2101      	movs	r1, #1
 800296c:	20a8      	movs	r0, #168	; 0xa8
 800296e:	f001 fd27 	bl	80043c0 <RadioSpiWriteRegisters>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002982:	1dfb      	adds	r3, r7, #7
 8002984:	461a      	mov	r2, r3
 8002986:	2101      	movs	r1, #1
 8002988:	2030      	movs	r0, #48	; 0x30
 800298a:	f001 fd65 	bl	8004458 <RadioSpiReadRegisters>
 800298e:	4602      	mov	r2, r0
 8002990:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <SpiritPktCommonGetControlLength+0x34>)
 8002992:	b212      	sxth	r2, r2
 8002994:	4611      	mov	r1, r2
 8002996:	7019      	strb	r1, [r3, #0]
 8002998:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800299c:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	b2db      	uxtb	r3, r3

}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200029c0 	.word	0x200029c0

080029b4 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 80029be:	f107 030f 	add.w	r3, r7, #15
 80029c2:	461a      	mov	r2, r3
 80029c4:	2101      	movs	r1, #1
 80029c6:	204f      	movs	r0, #79	; 0x4f
 80029c8:	f001 fd46 	bl	8004458 <RadioSpiReadRegisters>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <SpiritPktCommonFilterOnCrc+0x6c>)
 80029d0:	b212      	sxth	r2, r2
 80029d2:	4611      	mov	r1, r2
 80029d4:	7019      	strb	r1, [r3, #0]
 80029d6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029da:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d105      	bne.n	80029ee <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	73fb      	strb	r3, [r7, #15]
 80029ec:	e004      	b.n	80029f8 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 80029f8:	f107 030f 	add.w	r3, r7, #15
 80029fc:	461a      	mov	r2, r3
 80029fe:	2101      	movs	r1, #1
 8002a00:	204f      	movs	r0, #79	; 0x4f
 8002a02:	f001 fcdd 	bl	80043c0 <RadioSpiWriteRegisters>
 8002a06:	4602      	mov	r2, r0
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002a0a:	b212      	sxth	r2, r2
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	7019      	strb	r1, [r3, #0]
 8002a10:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a14:	705a      	strb	r2, [r3, #1]

}
 8002a16:	bf00      	nop
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	200029c0 	.word	0x200029c0

08002a24 <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8002a2e:	1dfb      	adds	r3, r7, #7
 8002a30:	461a      	mov	r2, r3
 8002a32:	2101      	movs	r1, #1
 8002a34:	204b      	movs	r0, #75	; 0x4b
 8002a36:	f001 fcc3 	bl	80043c0 <RadioSpiWriteRegisters>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <SpiritPktCommonSetDestinationAddress+0x30>)
 8002a3e:	b212      	sxth	r2, r2
 8002a40:	4611      	mov	r1, r2
 8002a42:	7019      	strb	r1, [r3, #0]
 8002a44:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a48:	705a      	strb	r2, [r3, #1]

}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200029c0 	.word	0x200029c0

08002a58 <SpiritPktCommonGetReceivedSourceAddress>:
 * @brief  Returns the source address of the received packet.
 * @param  None.
 * @retval uint8_t Source address of the received packet.
 */
uint8_t SpiritPktCommonGetReceivedSourceAddress(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD1 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD1_BASE, 1, &tempRegValue);
 8002a5e:	1dfb      	adds	r3, r7, #7
 8002a60:	461a      	mov	r2, r3
 8002a62:	2101      	movs	r1, #1
 8002a64:	20d2      	movs	r0, #210	; 0xd2
 8002a66:	f001 fcf7 	bl	8004458 <RadioSpiReadRegisters>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <SpiritPktCommonGetReceivedSourceAddress+0x2c>)
 8002a6e:	b212      	sxth	r2, r2
 8002a70:	4611      	mov	r1, r2
 8002a72:	7019      	strb	r1, [r3, #0]
 8002a74:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a78:	705a      	strb	r2, [r3, #1]

  /* Returns value */
  return tempRegValue;
 8002a7a:	79fb      	ldrb	r3, [r7, #7]

}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	200029c0 	.word	0x200029c0

08002a88 <SpiritPktStackInit>:
 * @param  pxPktStackInit STack packet init structure.
 *         This parameter is a pointer to @ref PktStackInit.
 * @retval None.
 */
void SpiritPktStackInit(PktStackInit* pxPktStackInit)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackInit->xDataWhitening));
  s_assert_param(IS_STACK_CONTROL_LENGTH(pxPktStackInit->xControlLength));


  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002a90:	f107 0308 	add.w	r3, r7, #8
 8002a94:	461a      	mov	r2, r3
 8002a96:	2101      	movs	r1, #1
 8002a98:	2051      	movs	r0, #81	; 0x51
 8002a9a:	f001 fcdd 	bl	8004458 <RadioSpiReadRegisters>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b60      	ldr	r3, [pc, #384]	; (8002c24 <SpiritPktStackInit+0x19c>)
 8002aa2:	b212      	sxth	r2, r2
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	7019      	strb	r1, [r3, #0]
 8002aa8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002aac:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 8002aae:	7a3b      	ldrb	r3, [r7, #8]
 8002ab0:	f023 0320 	bic.w	r3, r3, #32
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	723b      	strb	r3, [r7, #8]

  /* Always (!) set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8002ab8:	7a3b      	ldrb	r3, [r7, #8]
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002ac2:	f107 0308 	add.w	r3, r7, #8
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2101      	movs	r1, #1
 8002aca:	2051      	movs	r0, #81	; 0x51
 8002acc:	f001 fc78 	bl	80043c0 <RadioSpiWriteRegisters>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b54      	ldr	r3, [pc, #336]	; (8002c24 <SpiritPktStackInit+0x19c>)
 8002ad4:	b212      	sxth	r2, r2
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	7019      	strb	r1, [r3, #0]
 8002ada:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ade:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002ae0:	f107 0308 	add.w	r3, r7, #8
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	204f      	movs	r0, #79	; 0x4f
 8002aea:	f001 fcb5 	bl	8004458 <RadioSpiReadRegisters>
 8002aee:	4602      	mov	r2, r0
 8002af0:	4b4c      	ldr	r3, [pc, #304]	; (8002c24 <SpiritPktStackInit+0x19c>)
 8002af2:	b212      	sxth	r2, r2
 8002af4:	4611      	mov	r1, r2
 8002af6:	7019      	strb	r1, [r3, #0]
 8002af8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002afc:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 8002afe:	7a3b      	ldrb	r3, [r7, #8]
 8002b00:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002b08:	f107 0308 	add.w	r3, r7, #8
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2101      	movs	r1, #1
 8002b10:	204f      	movs	r0, #79	; 0x4f
 8002b12:	f001 fc55 	bl	80043c0 <RadioSpiWriteRegisters>
 8002b16:	4602      	mov	r2, r0
 8002b18:	4b42      	ldr	r3, [pc, #264]	; (8002c24 <SpiritPktStackInit+0x19c>)
 8002b1a:	b212      	sxth	r2, r2
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	7019      	strb	r1, [r3, #0]
 8002b20:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b24:	705a      	strb	r2, [r3, #1]


  /* Address and control length setting: source and destination address are always present so ADDRESS_LENGTH=2 */
  tempRegValue[0] = 0x10 | ((uint8_t) pxPktStackInit->xControlLength);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7adb      	ldrb	r3, [r3, #11]
 8002b2a:	f043 0310 	orr.w	r3, r3, #16
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	723b      	strb	r3, [r7, #8]


  /* Packet format and width length setting */
  pxPktStackInit->cPktLengthWidth == 0 ? pxPktStackInit->cPktLengthWidth=1 : pxPktStackInit->cPktLengthWidth;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	7a5b      	ldrb	r3, [r3, #9]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d102      	bne.n	8002b40 <SpiritPktStackInit+0xb8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_STACK) | ((uint8_t)(pxPktStackInit->cPktLengthWidth-1));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7a5b      	ldrb	r3, [r3, #9]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	781a      	ldrb	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	785b      	ldrb	r3, [r3, #1]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktStackInit->xFixVarLength);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 8002b60:	4313      	orrs	r3, r2
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktStackInit->xCrcMode;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	7a9b      	ldrb	r3, [r3, #10]
 8002b6a:	72fb      	strb	r3, [r7, #11]

  if(pxPktStackInit->xDataWhitening == S_ENABLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	7b5b      	ldrb	r3, [r3, #13]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d104      	bne.n	8002b7e <SpiritPktStackInit+0xf6>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8002b74:	7afb      	ldrb	r3, [r7, #11]
 8002b76:	f043 0310 	orr.w	r3, r3, #16
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktStackInit->xFec == S_ENABLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	7b1b      	ldrb	r3, [r3, #12]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d104      	bne.n	8002b90 <SpiritPktStackInit+0x108>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8002b86:	7afb      	ldrb	r3, [r7, #11]
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 8002b90:	f107 0308 	add.w	r3, r7, #8
 8002b94:	461a      	mov	r2, r3
 8002b96:	2104      	movs	r1, #4
 8002b98:	2030      	movs	r0, #48	; 0x30
 8002b9a:	f001 fc11 	bl	80043c0 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73fb      	strb	r3, [r7, #15]
 8002ba2:	e01d      	b.n	8002be0 <SpiritPktStackInit+0x158>
  {
    if(i<3-(pxPktStackInit->xSyncLength >>1))
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	785b      	ldrb	r3, [r3, #1]
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f1c3 0303 	rsb	r3, r3, #3
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	da06      	bge.n	8002bc4 <SpiritPktStackInit+0x13c>
    {
      tempRegValue[i]=0;
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	3310      	adds	r3, #16
 8002bba:	443b      	add	r3, r7
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002bc2:	e00a      	b.n	8002bda <SpiritPktStackInit+0x152>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktStackInit->lSyncWords>>(8*i));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	40da      	lsrs	r2, r3
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	3310      	adds	r3, #16
 8002bd4:	443b      	add	r3, r7
 8002bd6:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d9de      	bls.n	8002ba4 <SpiritPktStackInit+0x11c>
    }
  }

  /* Enables or disables the CRC check */
  if(pxPktStackInit->xCrcMode == PKT_NO_CRC)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	7a9b      	ldrb	r3, [r3, #10]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d103      	bne.n	8002bf6 <SpiritPktStackInit+0x16e>
  {
    SpiritPktStackFilterOnCrc(S_DISABLE);
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7ff fee0 	bl	80029b4 <SpiritPktCommonFilterOnCrc>
 8002bf4:	e002      	b.n	8002bfc <SpiritPktStackInit+0x174>
  }
  else
  {
    SpiritPktStackFilterOnCrc(S_ENABLE);
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	f7ff fedc 	bl	80029b4 <SpiritPktCommonFilterOnCrc>
  }

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002bfc:	f107 0308 	add.w	r3, r7, #8
 8002c00:	461a      	mov	r2, r3
 8002c02:	2104      	movs	r1, #4
 8002c04:	2036      	movs	r0, #54	; 0x36
 8002c06:	f001 fbdb 	bl	80043c0 <RadioSpiWriteRegisters>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <SpiritPktStackInit+0x19c>)
 8002c0e:	b212      	sxth	r2, r2
 8002c10:	4611      	mov	r1, r2
 8002c12:	7019      	strb	r1, [r3, #0]
 8002c14:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c18:	705a      	strb	r2, [r3, #1]

}
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200029c0 	.word	0x200029c0

08002c28 <SpiritPktStackAddressesInit>:
 * @param  pxPktStackAddresses STack packet addresses init structure.
 *         This parameter is a pointer to @ref PktStackAddressesInit .
 * @retval None.
 */
void SpiritPktStackAddressesInit(PktStackAddressesInit* pxPktStackAddresses)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMyAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnBroadcastAddress));
  
  /* Reads the filtering options ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002c30:	f107 030c 	add.w	r3, r7, #12
 8002c34:	461a      	mov	r2, r3
 8002c36:	2101      	movs	r1, #1
 8002c38:	204f      	movs	r0, #79	; 0x4f
 8002c3a:	f001 fc0d 	bl	8004458 <RadioSpiReadRegisters>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <SpiritPktStackAddressesInit+0xd8>)
 8002c42:	b212      	sxth	r2, r2
 8002c44:	4611      	mov	r1, r2
 8002c46:	7019      	strb	r1, [r3, #0]
 8002c48:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c4c:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktStackAddresses->xFilterOnMyAddress == S_ENABLE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d105      	bne.n	8002c62 <SpiritPktStackAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002c56:	7b3b      	ldrb	r3, [r7, #12]
 8002c58:	f043 0308 	orr.w	r3, r3, #8
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	733b      	strb	r3, [r7, #12]
 8002c60:	e004      	b.n	8002c6c <SpiritPktStackAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002c62:	7b3b      	ldrb	r3, [r7, #12]
 8002c64:	f023 0308 	bic.w	r3, r3, #8
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktStackAddresses->xFilterOnMulticastAddress == S_ENABLE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	789b      	ldrb	r3, [r3, #2]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d105      	bne.n	8002c80 <SpiritPktStackAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002c74:	7b3b      	ldrb	r3, [r7, #12]
 8002c76:	f043 0304 	orr.w	r3, r3, #4
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	733b      	strb	r3, [r7, #12]
 8002c7e:	e004      	b.n	8002c8a <SpiritPktStackAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002c80:	7b3b      	ldrb	r3, [r7, #12]
 8002c82:	f023 0304 	bic.w	r3, r3, #4
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktStackAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	791b      	ldrb	r3, [r3, #4]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d105      	bne.n	8002c9e <SpiritPktStackAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002c92:	7b3b      	ldrb	r3, [r7, #12]
 8002c94:	f043 0302 	orr.w	r3, r3, #2
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	733b      	strb	r3, [r7, #12]
 8002c9c:	e004      	b.n	8002ca8 <SpiritPktStackAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002c9e:	7b3b      	ldrb	r3, [r7, #12]
 8002ca0:	f023 0302 	bic.w	r3, r3, #2
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes value on the register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002ca8:	f107 030c 	add.w	r3, r7, #12
 8002cac:	461a      	mov	r2, r3
 8002cae:	2101      	movs	r1, #1
 8002cb0:	204f      	movs	r0, #79	; 0x4f
 8002cb2:	f001 fb85 	bl	80043c0 <RadioSpiWriteRegisters>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <SpiritPktStackAddressesInit+0xd8>)
 8002cba:	b212      	sxth	r2, r2
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	7019      	strb	r1, [r3, #0]
 8002cc0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002cc4:	705a      	strb	r2, [r3, #1]
  
  /* Fills array with the addresses passed in the structure */
  tempRegValue[0] = pxPktStackAddresses->cBroadcastAddress;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	795b      	ldrb	r3, [r3, #5]
 8002cca:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktStackAddresses->cMulticastAddress;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	78db      	ldrb	r3, [r3, #3]
 8002cd0:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktStackAddresses->cMyAddress;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	785b      	ldrb	r3, [r3, #1]
 8002cd6:	73bb      	strb	r3, [r7, #14]
  
  /* Writes them on the addresses registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002cd8:	f107 030c 	add.w	r3, r7, #12
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2103      	movs	r1, #3
 8002ce0:	204c      	movs	r0, #76	; 0x4c
 8002ce2:	f001 fb6d 	bl	80043c0 <RadioSpiWriteRegisters>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <SpiritPktStackAddressesInit+0xd8>)
 8002cea:	b212      	sxth	r2, r2
 8002cec:	4611      	mov	r1, r2
 8002cee:	7019      	strb	r1, [r3, #0]
 8002cf0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002cf4:	705a      	strb	r2, [r3, #1]
  
}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	200029c0 	.word	0x200029c0

08002d04 <SpiritPktStackLlpInit>:
* @param  pxPktStackLlpInit STack packet LLP init structure.
*         This parameter is a pointer to @ref PktStackLlpInit.
* @retval None.
*/
void SpiritPktStackLlpInit(PktStackLlpInit* pxPktStackLlpInit)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_STACK_NMAX_RETX(pxPktStackLlpInit->xNMaxRetx));
  /* check if piggybacking is enabled and autoack is disabled */
  s_assert_param(!(pxPktStackLlpInit->xPiggybacking==S_ENABLE && pxPktStackLlpInit->xAutoAck==S_DISABLE));

  /* Piggybacking mechanism setting on the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 8002d0c:	f107 030c 	add.w	r3, r7, #12
 8002d10:	461a      	mov	r2, r3
 8002d12:	2102      	movs	r1, #2
 8002d14:	2051      	movs	r0, #81	; 0x51
 8002d16:	f001 fb9f 	bl	8004458 <RadioSpiReadRegisters>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <SpiritPktStackLlpInit+0xa0>)
 8002d1e:	b212      	sxth	r2, r2
 8002d20:	4611      	mov	r1, r2
 8002d22:	7019      	strb	r1, [r3, #0]
 8002d24:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d28:	705a      	strb	r2, [r3, #1]
  if(pxPktStackLlpInit->xPiggybacking == S_ENABLE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	785b      	ldrb	r3, [r3, #1]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d105      	bne.n	8002d3e <SpiritPktStackLlpInit+0x3a>
  {
    tempRegValue[0] |= PROTOCOL1_PIGGYBACKING_MASK;
 8002d32:	7b3b      	ldrb	r3, [r7, #12]
 8002d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	733b      	strb	r3, [r7, #12]
 8002d3c:	e004      	b.n	8002d48 <SpiritPktStackLlpInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PROTOCOL1_PIGGYBACKING_MASK;
 8002d3e:	7b3b      	ldrb	r3, [r7, #12]
 8002d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	733b      	strb	r3, [r7, #12]
  }

  /* RX and TX autoack mechanisms setting on the PROTOCOL0 register */
  if(pxPktStackLlpInit->xAutoAck == S_ENABLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d105      	bne.n	8002d5c <SpiritPktStackLlpInit+0x58>
  {
    tempRegValue[1] |= PROTOCOL0_AUTO_ACK_MASK;
 8002d50:	7b7b      	ldrb	r3, [r7, #13]
 8002d52:	f043 0304 	orr.w	r3, r3, #4
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	737b      	strb	r3, [r7, #13]
 8002d5a:	e004      	b.n	8002d66 <SpiritPktStackLlpInit+0x62>
  }
  else
  {
    tempRegValue[1] &= ~PROTOCOL0_AUTO_ACK_MASK;
 8002d5c:	7b7b      	ldrb	r3, [r7, #13]
 8002d5e:	f023 0304 	bic.w	r3, r3, #4
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	737b      	strb	r3, [r7, #13]
  }

  /* Max number of retransmission setting */
  tempRegValue[1] &= ~PROTOCOL0_NMAX_RETX_MASK;
 8002d66:	7b7b      	ldrb	r3, [r7, #13]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= pxPktStackLlpInit->xNMaxRetx;
 8002d70:	7b7a      	ldrb	r2, [r7, #13]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	789b      	ldrb	r3, [r3, #2]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	737b      	strb	r3, [r7, #13]

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 8002d7c:	f107 030c 	add.w	r3, r7, #12
 8002d80:	461a      	mov	r2, r3
 8002d82:	2102      	movs	r1, #2
 8002d84:	2051      	movs	r0, #81	; 0x51
 8002d86:	f001 fb1b 	bl	80043c0 <RadioSpiWriteRegisters>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <SpiritPktStackLlpInit+0xa0>)
 8002d8e:	b212      	sxth	r2, r2
 8002d90:	4611      	mov	r1, r2
 8002d92:	7019      	strb	r1, [r3, #0]
 8002d94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d98:	705a      	strb	r2, [r3, #1]

}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	200029c0 	.word	0x200029c0

08002da8 <SpiritPktStackSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter can be any value of uint16_t.
 * @retval None.
 */
void SpiritPktStackSetPayloadLength(uint16_t nPayloadLength)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];

  /* Computes the oversize (address + control) size */
  uint16_t overSize = 2 + (uint16_t) SpiritPktStackGetControlLength();
 8002db2:	f7ff fde3 	bl	800297c <SpiritPktCommonGetControlLength>
 8002db6:	4603      	mov	r3, r0
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3302      	adds	r3, #2
 8002dbc:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from lPayloadLength */
  tempRegValue[1]=STACK_BUILD_PCKTLEN0(nPayloadLength+overSize);
 8002dbe:	88fb      	ldrh	r3, [r7, #6]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	89fb      	ldrh	r3, [r7, #14]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from lPayloadLength */
  tempRegValue[0]=STACK_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8002dcc:	88fa      	ldrh	r2, [r7, #6]
 8002dce:	89fb      	ldrh	r3, [r7, #14]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	121b      	asrs	r3, r3, #8
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	733b      	strb	r3, [r7, #12]

  /* Writes the value on the PCKTLENx registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8002dd8:	f107 030c 	add.w	r3, r7, #12
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2102      	movs	r1, #2
 8002de0:	2034      	movs	r0, #52	; 0x34
 8002de2:	f001 faed 	bl	80043c0 <RadioSpiWriteRegisters>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <SpiritPktStackSetPayloadLength+0x58>)
 8002dea:	b212      	sxth	r2, r2
 8002dec:	4611      	mov	r1, r2
 8002dee:	7019      	strb	r1, [r3, #0]
 8002df0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002df4:	705a      	strb	r2, [r3, #1]

}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	200029c0 	.word	0x200029c0

08002e04 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002e0e:	f107 030f 	add.w	r3, r7, #15
 8002e12:	461a      	mov	r2, r3
 8002e14:	2101      	movs	r1, #1
 8002e16:	203a      	movs	r0, #58	; 0x3a
 8002e18:	f001 fb1e 	bl	8004458 <RadioSpiReadRegisters>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <SpiritQiSqiCheck+0x6c>)
 8002e20:	b212      	sxth	r2, r2
 8002e22:	4611      	mov	r1, r2
 8002e24:	7019      	strb	r1, [r3, #0]
 8002e26:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e2a:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d105      	bne.n	8002e3e <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	73fb      	strb	r3, [r7, #15]
 8002e3c:	e004      	b.n	8002e48 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	f023 0302 	bic.w	r3, r3, #2
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002e48:	f107 030f 	add.w	r3, r7, #15
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2101      	movs	r1, #1
 8002e50:	203a      	movs	r0, #58	; 0x3a
 8002e52:	f001 fab5 	bl	80043c0 <RadioSpiWriteRegisters>
 8002e56:	4602      	mov	r2, r0
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <SpiritQiSqiCheck+0x6c>)
 8002e5a:	b212      	sxth	r2, r2
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	7019      	strb	r1, [r3, #0]
 8002e60:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e64:	705a      	strb	r2, [r3, #1]

}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200029c0 	.word	0x200029c0

08002e74 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002e7e:	f107 030f 	add.w	r3, r7, #15
 8002e82:	461a      	mov	r2, r3
 8002e84:	2101      	movs	r1, #1
 8002e86:	203a      	movs	r0, #58	; 0x3a
 8002e88:	f001 fae6 	bl	8004458 <RadioSpiReadRegisters>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <SpiritQiSetSqiThreshold+0x64>)
 8002e90:	b212      	sxth	r2, r2
 8002e92:	4611      	mov	r1, r2
 8002e94:	7019      	strb	r1, [r3, #0]
 8002e96:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e9a:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 8002ea6:	7bfa      	ldrb	r2, [r7, #15]
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002eb0:	f107 030f 	add.w	r3, r7, #15
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	203a      	movs	r0, #58	; 0x3a
 8002eba:	f001 fa81 	bl	80043c0 <RadioSpiWriteRegisters>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <SpiritQiSetSqiThreshold+0x64>)
 8002ec2:	b212      	sxth	r2, r2
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	7019      	strb	r1, [r3, #0]
 8002ec8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ecc:	705a      	strb	r2, [r3, #1]

}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200029c0 	.word	0x200029c0

08002edc <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3382      	adds	r3, #130	; 0x82
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8002ef0:	f107 030f 	add.w	r3, r7, #15
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	2022      	movs	r0, #34	; 0x22
 8002efa:	f001 fa61 	bl	80043c0 <RadioSpiWriteRegisters>
 8002efe:	4602      	mov	r2, r0
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <SpiritQiSetRssiThresholddBm+0x3c>)
 8002f02:	b212      	sxth	r2, r2
 8002f04:	4611      	mov	r1, r2
 8002f06:	7019      	strb	r1, [r3, #0]
 8002f08:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f0c:	705a      	strb	r2, [r3, #1]

}
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	200029c0 	.word	0x200029c0

08002f1c <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08c      	sub	sp, #48	; 0x30
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8002f24:	23a0      	movs	r3, #160	; 0xa0
 8002f26:	747b      	strb	r3, [r7, #17]
 8002f28:	f107 0311 	add.w	r3, r7, #17
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2101      	movs	r1, #1
 8002f30:	209f      	movs	r0, #159	; 0x9f
 8002f32:	f001 fa45 	bl	80043c0 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f3c:	ee07 3a90 	vmov	s15, r3
 8002f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	ee07 3a90 	vmov	s15, r3
 8002f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f54:	eddf 6aae 	vldr	s13, [pc, #696]	; 8003210 <SpiritRadioInit+0x2f4>
 8002f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f60:	ee17 3a90 	vmov	r3, s15
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8002f66:	2063      	movs	r0, #99	; 0x63
 8002f68:	f001 fac2 	bl	80044f0 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	73bb      	strb	r3, [r7, #14]
 8002f70:	e004      	b.n	8002f7c <SpiritRadioInit+0x60>
 8002f72:	7bbb      	ldrb	r3, [r7, #14]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	3301      	adds	r3, #1
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	73bb      	strb	r3, [r7, #14]
 8002f7c:	7bbb      	ldrb	r3, [r7, #14]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2bff      	cmp	r3, #255	; 0xff
 8002f82:	d1f6      	bne.n	8002f72 <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002f84:	f001 f9ea 	bl	800435c <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8002f88:	4ba2      	ldr	r3, [pc, #648]	; (8003214 <SpiritRadioInit+0x2f8>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b40      	cmp	r3, #64	; 0x40
 8002f94:	d1ea      	bne.n	8002f6c <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002f96:	4ba0      	ldr	r3, [pc, #640]	; (8003218 <SpiritRadioInit+0x2fc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4aa0      	ldr	r2, [pc, #640]	; (800321c <SpiritRadioInit+0x300>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d803      	bhi.n	8002fa8 <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f001 f90b 	bl	80041bc <SpiritRadioSetDigDiv>
 8002fa6:	e002      	b.n	8002fae <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002fa8:	2001      	movs	r0, #1
 8002faa:	f001 f907 	bl	80041bc <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8002fae:	2062      	movs	r0, #98	; 0x62
 8002fb0:	f001 fa9e 	bl	80044f0 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	737b      	strb	r3, [r7, #13]
 8002fb8:	e004      	b.n	8002fc4 <SpiritRadioInit+0xa8>
 8002fba:	7b7b      	ldrb	r3, [r7, #13]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	737b      	strb	r3, [r7, #13]
 8002fc4:	7b7b      	ldrb	r3, [r7, #13]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2bff      	cmp	r3, #255	; 0xff
 8002fca:	d1f6      	bne.n	8002fba <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002fcc:	f001 f9c6 	bl	800435c <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8002fd0:	4b90      	ldr	r3, [pc, #576]	; (8003214 <SpiritRadioInit+0x2f8>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d1ea      	bne.n	8002fb4 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	ee07 3a90 	vmov	s15, r3
 8002fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fe8:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8003220 <SpiritRadioInit+0x304>
 8002fec:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002ff0:	4b89      	ldr	r3, [pc, #548]	; (8003218 <SpiritRadioInit+0x2fc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	ee07 3a90 	vmov	s15, r3
 8002ff8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003004:	ee17 3a90 	vmov	r3, s15
 8003008:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 800300a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800300c:	0a1b      	lsrs	r3, r3, #8
 800300e:	b29b      	uxth	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	b2db      	uxtb	r3, r3
 8003018:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 800301a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800301c:	b2db      	uxtb	r3, r3
 800301e:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	025a      	lsls	r2, r3, #9
 8003026:	4b7c      	ldr	r3, [pc, #496]	; (8003218 <SpiritRadioInit+0x2fc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	099b      	lsrs	r3, r3, #6
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	b2db      	uxtb	r3, r3
 8003032:	3301      	adds	r3, #1
 8003034:	b2db      	uxtb	r3, r3
 8003036:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fc63 	bl	8002908 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8003042:	f107 0310 	add.w	r3, r7, #16
 8003046:	461a      	mov	r2, r3
 8003048:	2101      	movs	r1, #1
 800304a:	20a3      	movs	r0, #163	; 0xa3
 800304c:	f001 fa04 	bl	8004458 <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8003050:	7c3b      	ldrb	r3, [r7, #16]
 8003052:	f023 0302 	bic.w	r3, r3, #2
 8003056:	b2db      	uxtb	r3, r3
 8003058:	743b      	strb	r3, [r7, #16]
 800305a:	f107 0310 	add.w	r3, r7, #16
 800305e:	461a      	mov	r2, r3
 8003060:	2101      	movs	r1, #1
 8003062:	20a3      	movs	r0, #163	; 0xa3
 8003064:	f001 f9ac 	bl	80043c0 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f107 0216 	add.w	r2, r7, #22
 8003070:	f107 0117 	add.w	r1, r7, #23
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fc3d 	bl	80038f4 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 800307a:	7dfb      	ldrb	r3, [r7, #23]
 800307c:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	7b5a      	ldrb	r2, [r3, #13]
 8003082:	7dbb      	ldrb	r3, [r7, #22]
 8003084:	4313      	orrs	r3, r2
 8003086:	b2db      	uxtb	r3, r3
 8003088:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 800308a:	f107 0310 	add.w	r3, r7, #16
 800308e:	461a      	mov	r2, r3
 8003090:	2101      	movs	r1, #1
 8003092:	201c      	movs	r0, #28
 8003094:	f001 f9e0 	bl	8004458 <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	f107 0214 	add.w	r2, r7, #20
 80030a0:	f107 0115 	add.w	r1, r7, #21
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fdbd 	bl	8003c24 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 80030aa:	7d3b      	ldrb	r3, [r7, #20]
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	b25a      	sxtb	r2, r3
 80030b0:	7c3b      	ldrb	r3, [r7, #16]
 80030b2:	b25b      	sxtb	r3, r3
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	b25b      	sxtb	r3, r3
 80030ba:	4313      	orrs	r3, r2
 80030bc:	b25a      	sxtb	r2, r3
 80030be:	7d7b      	ldrb	r3, [r7, #21]
 80030c0:	b25b      	sxtb	r3, r3
 80030c2:	4313      	orrs	r3, r2
 80030c4:	b25b      	sxtb	r3, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f107 0212 	add.w	r2, r7, #18
 80030d2:	f107 0113 	add.w	r1, r7, #19
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 fcbe 	bl	8003a58 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 80030dc:	7cfb      	ldrb	r3, [r7, #19]
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	b25a      	sxtb	r2, r3
 80030e2:	7cbb      	ldrb	r3, [r7, #18]
 80030e4:	b25b      	sxtb	r3, r3
 80030e6:	4313      	orrs	r3, r2
 80030e8:	b25b      	sxtb	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 80030ee:	4b4a      	ldr	r3, [pc, #296]	; (8003218 <SpiritRadioInit+0x2fc>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	0b1b      	lsrs	r3, r3, #12
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030fc:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003224 <SpiritRadioInit+0x308>
 8003100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003104:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003228 <SpiritRadioInit+0x30c>
 8003108:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800310c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8003110:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003124:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800312c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003130:	dd09      	ble.n	8003146 <SpiritRadioInit+0x22a>
 8003132:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800313a:	edc7 7a00 	vstr	s15, [r7]
 800313e:	783b      	ldrb	r3, [r7, #0]
 8003140:	3301      	adds	r3, #1
 8003142:	b2db      	uxtb	r3, r3
 8003144:	e006      	b.n	8003154 <SpiritRadioInit+0x238>
 8003146:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800314a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800314e:	edc7 7a00 	vstr	s15, [r7]
 8003152:	783b      	ldrb	r3, [r7, #0]
 8003154:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8003156:	4b30      	ldr	r3, [pc, #192]	; (8003218 <SpiritRadioInit+0x2fc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a30      	ldr	r2, [pc, #192]	; (800321c <SpiritRadioInit+0x300>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d802      	bhi.n	8003166 <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	777b      	strb	r3, [r7, #29]
 8003164:	e033      	b.n	80031ce <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8003166:	4b2c      	ldr	r3, [pc, #176]	; (8003218 <SpiritRadioInit+0x2fc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	0b5b      	lsrs	r3, r3, #13
 800316c:	ee07 3a90 	vmov	s15, r3
 8003170:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003174:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003224 <SpiritRadioInit+0x308>
 8003178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800317c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003228 <SpiritRadioInit+0x30c>
 8003180:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003184:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8003188:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800318c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003194:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800319c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80031a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a8:	dd09      	ble.n	80031be <SpiritRadioInit+0x2a2>
 80031aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031b2:	edc7 7a00 	vstr	s15, [r7]
 80031b6:	783b      	ldrb	r3, [r7, #0]
 80031b8:	3301      	adds	r3, #1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	e006      	b.n	80031cc <SpiritRadioInit+0x2b0>
 80031be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031c6:	edc7 7a00 	vstr	s15, [r7]
 80031ca:	783b      	ldrb	r3, [r7, #0]
 80031cc:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 80031ce:	f107 030f 	add.w	r3, r7, #15
 80031d2:	461a      	mov	r2, r3
 80031d4:	2101      	movs	r1, #1
 80031d6:	2007      	movs	r0, #7
 80031d8:	f001 f8f2 	bl	80043c0 <RadioSpiWriteRegisters>
 80031dc:	4602      	mov	r2, r0
 80031de:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <SpiritRadioInit+0x2f8>)
 80031e0:	b212      	sxth	r2, r2
 80031e2:	4611      	mov	r1, r2
 80031e4:	7019      	strb	r1, [r3, #0]
 80031e6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80031ea:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 80031ec:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <SpiritRadioInit+0x2fc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0e      	ldr	r2, [pc, #56]	; (800322c <SpiritRadioInit+0x310>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d91e      	bls.n	8003234 <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 80031f6:	4b08      	ldr	r3, [pc, #32]	; (8003218 <SpiritRadioInit+0x2fc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a0d      	ldr	r2, [pc, #52]	; (8003230 <SpiritRadioInit+0x314>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	bf8c      	ite	hi
 8003200:	2301      	movhi	r3, #1
 8003202:	2300      	movls	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f86c 	bl	80032e4 <SpiritRadioSetXtalFlag>
 800320c:	e01d      	b.n	800324a <SpiritRadioInit+0x32e>
 800320e:	bf00      	nop
 8003210:	49742400 	.word	0x49742400
 8003214:	200029c0 	.word	0x200029c0
 8003218:	200029bc 	.word	0x200029bc
 800321c:	01c9c37f 	.word	0x01c9c37f
 8003220:	48800000 	.word	0x48800000
 8003224:	49afd520 	.word	0x49afd520
 8003228:	42800000 	.word	0x42800000
 800322c:	01c9c380 	.word	0x01c9c380
 8003230:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8003234:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <SpiritRadioInit+0x3bc>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a28      	ldr	r2, [pc, #160]	; (80032dc <SpiritRadioInit+0x3c0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	bf8c      	ite	hi
 800323e:	2301      	movhi	r3, #1
 8003240:	2300      	movls	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	4618      	mov	r0, r3
 8003246:	f000 f84d 	bl	80032e4 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	330c      	adds	r3, #12
 800324e:	461a      	mov	r2, r3
 8003250:	2101      	movs	r1, #1
 8003252:	206c      	movs	r0, #108	; 0x6c
 8003254:	f001 f8b4 	bl	80043c0 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8003258:	f107 031c 	add.w	r3, r7, #28
 800325c:	461a      	mov	r2, r3
 800325e:	2104      	movs	r1, #4
 8003260:	200c      	movs	r0, #12
 8003262:	f001 f8ad 	bl	80043c0 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8003266:	f107 0318 	add.w	r3, r7, #24
 800326a:	461a      	mov	r2, r3
 800326c:	2104      	movs	r1, #4
 800326e:	201a      	movs	r0, #26
 8003270:	f001 f8a6 	bl	80043c0 <RadioSpiWriteRegisters>
 8003274:	4602      	mov	r2, r0
 8003276:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <SpiritRadioInit+0x3c4>)
 8003278:	b212      	sxth	r2, r2
 800327a:	4611      	mov	r1, r2
 800327c:	7019      	strb	r1, [r3, #0]
 800327e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003282:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8003284:	2001      	movs	r0, #1
 8003286:	f000 ff15 	bl	80040b4 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 800328e:	23e3      	movs	r3, #227	; 0xe3
 8003290:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8003292:	f107 031c 	add.w	r3, r7, #28
 8003296:	461a      	mov	r2, r3
 8003298:	2102      	movs	r1, #2
 800329a:	2099      	movs	r0, #153	; 0x99
 800329c:	f001 f890 	bl	80043c0 <RadioSpiWriteRegisters>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <SpiritRadioInit+0x3c4>)
 80032a4:	b212      	sxth	r2, r2
 80032a6:	4611      	mov	r1, r2
 80032a8:	7019      	strb	r1, [r3, #0]
 80032aa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80032ae:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 80032b0:	2322      	movs	r3, #34	; 0x22
 80032b2:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 80032b4:	f107 031c 	add.w	r3, r7, #28
 80032b8:	461a      	mov	r2, r3
 80032ba:	2101      	movs	r1, #1
 80032bc:	20bc      	movs	r0, #188	; 0xbc
 80032be:	f001 f87f 	bl	80043c0 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f9aa 	bl	8003620 <SpiritRadioSetFrequencyBase>
 80032cc:	4603      	mov	r3, r0
  
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3730      	adds	r7, #48	; 0x30
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200029bc 	.word	0x200029bc
 80032dc:	017d783f 	.word	0x017d783f
 80032e0:	200029c0 	.word	0x200029c0

080032e4 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 80032ee:	2300      	movs	r3, #0
 80032f0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 80032f2:	f107 030f 	add.w	r3, r7, #15
 80032f6:	461a      	mov	r2, r3
 80032f8:	2101      	movs	r1, #1
 80032fa:	2001      	movs	r0, #1
 80032fc:	f001 f8ac 	bl	8004458 <RadioSpiReadRegisters>
 8003300:	4602      	mov	r2, r0
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <SpiritRadioSetXtalFlag+0x70>)
 8003304:	b212      	sxth	r2, r2
 8003306:	4611      	mov	r1, r2
 8003308:	7019      	strb	r1, [r3, #0]
 800330a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800330e:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d105      	bne.n	8003322 <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800331c:	b2db      	uxtb	r3, r3
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	e004      	b.n	800332c <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003328:	b2db      	uxtb	r3, r3
 800332a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 800332c:	f107 030f 	add.w	r3, r7, #15
 8003330:	461a      	mov	r2, r3
 8003332:	2101      	movs	r1, #1
 8003334:	2001      	movs	r0, #1
 8003336:	f001 f843 	bl	80043c0 <RadioSpiWriteRegisters>
 800333a:	4602      	mov	r2, r0
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <SpiritRadioSetXtalFlag+0x70>)
 800333e:	b212      	sxth	r2, r2
 8003340:	4611      	mov	r1, r2
 8003342:	7019      	strb	r1, [r3, #0]
 8003344:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003348:	705a      	strb	r2, [r3, #1]
  
}
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	200029c0 	.word	0x200029c0

08003358 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8003360:	2300      	movs	r3, #0
 8003362:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8003364:	2300      	movs	r3, #0
 8003366:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8003368:	2300      	movs	r3, #0
 800336a:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a3a      	ldr	r2, [pc, #232]	; (8003458 <SpiritRadioSearchWCP+0x100>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d306      	bcc.n	8003382 <SpiritRadioSearchWCP+0x2a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a39      	ldr	r2, [pc, #228]	; (800345c <SpiritRadioSearchWCP+0x104>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d802      	bhi.n	8003382 <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 800337c:	2306      	movs	r3, #6
 800337e:	73bb      	strb	r3, [r7, #14]
 8003380:	e01f      	b.n	80033c2 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a36      	ldr	r2, [pc, #216]	; (8003460 <SpiritRadioSearchWCP+0x108>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d906      	bls.n	8003398 <SpiritRadioSearchWCP+0x40>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a35      	ldr	r2, [pc, #212]	; (8003464 <SpiritRadioSearchWCP+0x10c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d802      	bhi.n	8003398 <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8003392:	230c      	movs	r3, #12
 8003394:	73bb      	strb	r3, [r7, #14]
 8003396:	e014      	b.n	80033c2 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a33      	ldr	r2, [pc, #204]	; (8003468 <SpiritRadioSearchWCP+0x110>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d906      	bls.n	80033ae <SpiritRadioSearchWCP+0x56>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a32      	ldr	r2, [pc, #200]	; (800346c <SpiritRadioSearchWCP+0x114>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d802      	bhi.n	80033ae <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 80033a8:	2310      	movs	r3, #16
 80033aa:	73bb      	strb	r3, [r7, #14]
 80033ac:	e009      	b.n	80033c2 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a2f      	ldr	r2, [pc, #188]	; (8003470 <SpiritRadioSearchWCP+0x118>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d905      	bls.n	80033c2 <SpiritRadioSearchWCP+0x6a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a2e      	ldr	r2, [pc, #184]	; (8003474 <SpiritRadioSearchWCP+0x11c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d801      	bhi.n	80033c2 <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 80033be:	2320      	movs	r3, #32
 80033c0:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a2c      	ldr	r2, [pc, #176]	; (8003478 <SpiritRadioSearchWCP+0x120>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	099b      	lsrs	r3, r3, #6
 80033cc:	7bba      	ldrb	r2, [r7, #14]
 80033ce:	fb02 f303 	mul.w	r3, r2, r3
 80033d2:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 80033d4:	f241 631f 	movw	r3, #5663	; 0x161f
 80033d8:	461a      	mov	r2, r3
 80033da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033de:	fb02 f303 	mul.w	r3, r2, r3
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d302      	bcc.n	80033ee <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 80033e8:	230f      	movs	r3, #15
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	e023      	b.n	8003436 <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
 80033f2:	e005      	b.n	8003400 <SpiritRadioSearchWCP+0xa8>
 80033f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	3301      	adds	r3, #1
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	73fb      	strb	r3, [r7, #15]
 8003400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003404:	2b0e      	cmp	r3, #14
 8003406:	dc0c      	bgt.n	8003422 <SpiritRadioSearchWCP+0xca>
 8003408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340c:	4a1b      	ldr	r2, [pc, #108]	; (800347c <SpiritRadioSearchWCP+0x124>)
 800340e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003412:	461a      	mov	r2, r3
 8003414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003418:	fb02 f303 	mul.w	r3, r2, r3
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	429a      	cmp	r2, r3
 8003420:	d8e8      	bhi.n	80033f4 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 8003422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <SpiritRadioSearchWCP+0xde>
      i--;
 800342a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b2db      	uxtb	r3, r3
 8003434:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8003436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800343a:	425a      	negs	r2, r3
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	f002 0207 	and.w	r2, r2, #7
 8003444:	bf58      	it	pl
 8003446:	4253      	negpl	r3, r2
 8003448:	b25b      	sxtb	r3, r3
 800344a:	b2db      	uxtb	r3, r3
  
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	2e5f5680 	.word	0x2e5f5680
 800345c:	390c2fe0 	.word	0x390c2fe0
 8003460:	1701e47f 	.word	0x1701e47f
 8003464:	1c146a60 	.word	0x1c146a60
 8003468:	11d260bf 	.word	0x11d260bf
 800346c:	14ced7e0 	.word	0x14ced7e0
 8003470:	08e18f3f 	.word	0x08e18f3f
 8003474:	0a6fd060 	.word	0x0a6fd060
 8003478:	10624dd3 	.word	0x10624dd3
 800347c:	0800c244 	.word	0x0800c244

08003480 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 8003486:	1d3b      	adds	r3, r7, #4
 8003488:	461a      	mov	r2, r3
 800348a:	2104      	movs	r1, #4
 800348c:	2008      	movs	r0, #8
 800348e:	f000 ffe3 	bl	8004458 <RadioSpiReadRegisters>
 8003492:	4602      	mov	r2, r0
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <SpiritRadioGetSynthWord+0x48>)
 8003496:	b212      	sxth	r2, r2
 8003498:	4611      	mov	r1, r2
 800349a:	7019      	strb	r1, [r3, #0]
 800349c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80034a0:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80034a2:	793b      	ldrb	r3, [r7, #4]
 80034a4:	055b      	lsls	r3, r3, #21
 80034a6:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 80034aa:	797b      	ldrb	r3, [r7, #5]
 80034ac:	035b      	lsls	r3, r3, #13
 80034ae:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80034b0:	79bb      	ldrb	r3, [r7, #6]
 80034b2:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80034b4:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80034b6:	79fa      	ldrb	r2, [r7, #7]
 80034b8:	08d2      	lsrs	r2, r2, #3
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	4413      	add	r3, r2
  
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	200029c0 	.word	0x200029c0

080034cc <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 80034d2:	1dfb      	adds	r3, r7, #7
 80034d4:	461a      	mov	r2, r3
 80034d6:	2101      	movs	r1, #1
 80034d8:	200b      	movs	r0, #11
 80034da:	f000 ffbd 	bl	8004458 <RadioSpiReadRegisters>
 80034de:	4602      	mov	r2, r0
 80034e0:	4b10      	ldr	r3, [pc, #64]	; (8003524 <SpiritRadioGetBand+0x58>)
 80034e2:	b212      	sxth	r2, r2
 80034e4:	4611      	mov	r1, r2
 80034e6:	7019      	strb	r1, [r3, #0]
 80034e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80034ec:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e00e      	b.n	800351a <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	2b03      	cmp	r3, #3
 8003504:	d101      	bne.n	800350a <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8003506:	2301      	movs	r3, #1
 8003508:	e007      	b.n	800351a <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	2b04      	cmp	r3, #4
 8003512:	d101      	bne.n	8003518 <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8003514:	2302      	movs	r3, #2
 8003516:	e000      	b.n	800351a <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8003518:	2303      	movs	r3, #3
  }
  
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200029c0 	.word	0x200029c0

08003528 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 800352e:	1dfb      	adds	r3, r7, #7
 8003530:	461a      	mov	r2, r3
 8003532:	2101      	movs	r1, #1
 8003534:	206c      	movs	r0, #108	; 0x6c
 8003536:	f000 ff8f 	bl	8004458 <RadioSpiReadRegisters>
 800353a:	4602      	mov	r2, r0
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <SpiritRadioGetChannel+0x2c>)
 800353e:	b212      	sxth	r2, r2
 8003540:	4611      	mov	r1, r2
 8003542:	7019      	strb	r1, [r3, #0]
 8003544:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003548:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 800354a:	79fb      	ldrb	r3, [r7, #7]
  
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	200029c0 	.word	0x200029c0

08003558 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 800355e:	1dfb      	adds	r3, r7, #7
 8003560:	461a      	mov	r2, r3
 8003562:	2101      	movs	r1, #1
 8003564:	200c      	movs	r0, #12
 8003566:	f000 ff77 	bl	8004458 <RadioSpiReadRegisters>
 800356a:	4602      	mov	r2, r0
 800356c:	4b08      	ldr	r3, [pc, #32]	; (8003590 <SpiritRadioGetChannelSpace+0x38>)
 800356e:	b212      	sxth	r2, r2
 8003570:	4611      	mov	r1, r2
 8003572:	7019      	strb	r1, [r3, #0]
 8003574:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003578:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	461a      	mov	r2, r3
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <SpiritRadioGetChannelSpace+0x3c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	0bdb      	lsrs	r3, r3, #15
  
}
 8003588:	4618      	mov	r0, r3
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	200029c0 	.word	0x200029c0
 8003594:	200029bc 	.word	0x200029bc

08003598 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 800359e:	1d3b      	adds	r3, r7, #4
 80035a0:	461a      	mov	r2, r3
 80035a2:	2102      	movs	r1, #2
 80035a4:	200e      	movs	r0, #14
 80035a6:	f000 ff57 	bl	8004458 <RadioSpiReadRegisters>
 80035aa:	4602      	mov	r2, r0
 80035ac:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <SpiritRadioGetFrequencyOffset+0x80>)
 80035ae:	b212      	sxth	r2, r2
 80035b0:	4611      	mov	r1, r2
 80035b2:	7019      	strb	r1, [r3, #0]
 80035b4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80035b8:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 80035ba:	793b      	ldrb	r3, [r7, #4]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	797b      	ldrb	r3, [r7, #5]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	4413      	add	r3, r2
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 80035cc:	887b      	ldrh	r3, [r7, #2]
 80035ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 80035d6:	887b      	ldrh	r3, [r7, #2]
 80035d8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80035dc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	807b      	strh	r3, [r7, #2]
 80035e4:	e004      	b.n	80035f0 <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 80035e6:	887b      	ldrh	r3, [r7, #2]
 80035e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 80035f0:	1cbb      	adds	r3, r7, #2
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 80035f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035fa:	4a08      	ldr	r2, [pc, #32]	; (800361c <SpiritRadioGetFrequencyOffset+0x84>)
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	da03      	bge.n	800360e <SpiritRadioGetFrequencyOffset+0x76>
 8003606:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800360a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800360e:	149b      	asrs	r3, r3, #18
  
}
 8003610:	4618      	mov	r0, r3
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	200029c0 	.word	0x200029c0
 800361c:	200029bc 	.word	0x200029bc

08003620 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 8003620:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003624:	b08a      	sub	sp, #40	; 0x28
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 800362a:	2300      	movs	r3, #0
 800362c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a79      	ldr	r2, [pc, #484]	; (8003818 <SpiritRadioSetFrequencyBase+0x1f8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d307      	bcc.n	8003648 <SpiritRadioSetFrequencyBase+0x28>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a78      	ldr	r2, [pc, #480]	; (800381c <SpiritRadioSetFrequencyBase+0x1fc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d803      	bhi.n	8003648 <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8003640:	2300      	movs	r3, #0
 8003642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003646:	e022      	b.n	800368e <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a75      	ldr	r2, [pc, #468]	; (8003820 <SpiritRadioSetFrequencyBase+0x200>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d907      	bls.n	8003660 <SpiritRadioSetFrequencyBase+0x40>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a74      	ldr	r2, [pc, #464]	; (8003824 <SpiritRadioSetFrequencyBase+0x204>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d803      	bhi.n	8003660 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 8003658:	2301      	movs	r3, #1
 800365a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800365e:	e016      	b.n	800368e <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a71      	ldr	r2, [pc, #452]	; (8003828 <SpiritRadioSetFrequencyBase+0x208>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d907      	bls.n	8003678 <SpiritRadioSetFrequencyBase+0x58>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a70      	ldr	r2, [pc, #448]	; (800382c <SpiritRadioSetFrequencyBase+0x20c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d803      	bhi.n	8003678 <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8003670:	2302      	movs	r3, #2
 8003672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003676:	e00a      	b.n	800368e <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a6d      	ldr	r2, [pc, #436]	; (8003830 <SpiritRadioSetFrequencyBase+0x210>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d906      	bls.n	800368e <SpiritRadioSetFrequencyBase+0x6e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a6c      	ldr	r2, [pc, #432]	; (8003834 <SpiritRadioSetFrequencyBase+0x214>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d802      	bhi.n	800368e <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 8003688:	2303      	movs	r3, #3
 800368a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 800368e:	f7ff ff83 	bl	8003598 <SpiritRadioGetFrequencyOffset>
 8003692:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8003694:	f7ff ff60 	bl	8003558 <SpiritRadioGetChannelSpace>
 8003698:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 800369a:	f7ff ff45 	bl	8003528 <SpiritRadioGetChannel>
 800369e:	4603      	mov	r3, r0
 80036a0:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80036a2:	6a3a      	ldr	r2, [r7, #32]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	441a      	add	r2, r3
 80036a8:	7efb      	ldrb	r3, [r7, #27]
 80036aa:	69f9      	ldr	r1, [r7, #28]
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	4413      	add	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80036b4:	f000 fd60 	bl	8004178 <SpiritRadioGetRefDiv>
 80036b8:	4603      	mov	r3, r0
 80036ba:	3301      	adds	r3, #1
 80036bc:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 80036be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d839      	bhi.n	800373a <SpiritRadioSetFrequencyBase+0x11a>
 80036c6:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <SpiritRadioSetFrequencyBase+0xac>)
 80036c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036cc:	08003725 	.word	0x08003725
 80036d0:	0800370d 	.word	0x0800370d
 80036d4:	080036f5 	.word	0x080036f5
 80036d8:	080036dd 	.word	0x080036dd
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	4a56      	ldr	r2, [pc, #344]	; (8003838 <SpiritRadioSetFrequencyBase+0x218>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d803      	bhi.n	80036ec <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80036e4:	2000      	movs	r0, #0
 80036e6:	f7fe fd9b 	bl	8002220 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80036ea:	e026      	b.n	800373a <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80036ec:	2001      	movs	r0, #1
 80036ee:	f7fe fd97 	bl	8002220 <SpiritCalibrationSelectVco>
    break;
 80036f2:	e022      	b.n	800373a <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	4a51      	ldr	r2, [pc, #324]	; (800383c <SpiritRadioSetFrequencyBase+0x21c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d803      	bhi.n	8003704 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80036fc:	2000      	movs	r0, #0
 80036fe:	f7fe fd8f 	bl	8002220 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003702:	e01a      	b.n	800373a <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003704:	2001      	movs	r0, #1
 8003706:	f7fe fd8b 	bl	8002220 <SpiritCalibrationSelectVco>
    break;
 800370a:	e016      	b.n	800373a <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	4a4c      	ldr	r2, [pc, #304]	; (8003840 <SpiritRadioSetFrequencyBase+0x220>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d803      	bhi.n	800371c <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003714:	2000      	movs	r0, #0
 8003716:	f7fe fd83 	bl	8002220 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800371a:	e00e      	b.n	800373a <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 800371c:	2001      	movs	r0, #1
 800371e:	f7fe fd7f 	bl	8002220 <SpiritCalibrationSelectVco>
    break;
 8003722:	e00a      	b.n	800373a <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	4a47      	ldr	r2, [pc, #284]	; (8003844 <SpiritRadioSetFrequencyBase+0x224>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d803      	bhi.n	8003734 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800372c:	2000      	movs	r0, #0
 800372e:	f7fe fd77 	bl	8002220 <SpiritCalibrationSelectVco>
 8003732:	e002      	b.n	800373a <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8003734:	2001      	movs	r0, #1
 8003736:	f7fe fd73 	bl	8002220 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800373a:	6978      	ldr	r0, [r7, #20]
 800373c:	f7ff fe0c 	bl	8003358 <SpiritRadioSearchWCP>
 8003740:	4603      	mov	r3, r0
 8003742:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8003744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003748:	4a3f      	ldr	r2, [pc, #252]	; (8003848 <SpiritRadioSetFrequencyBase+0x228>)
 800374a:	5cd3      	ldrb	r3, [r2, r3]
 800374c:	461a      	mov	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	fb02 f303 	mul.w	r3, r2, r3
 8003754:	4618      	mov	r0, r3
 8003756:	f7fc fed5 	bl	8000504 <__aeabi_ui2d>
 800375a:	4604      	mov	r4, r0
 800375c:	460d      	mov	r5, r1
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	049b      	lsls	r3, r3, #18
 8003762:	4618      	mov	r0, r3
 8003764:	f7fc fede 	bl	8000524 <__aeabi_i2d>
 8003768:	4680      	mov	r8, r0
 800376a:	4689      	mov	r9, r1
 800376c:	4b37      	ldr	r3, [pc, #220]	; (800384c <SpiritRadioSetFrequencyBase+0x22c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7fc fec7 	bl	8000504 <__aeabi_ui2d>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4640      	mov	r0, r8
 800377c:	4649      	mov	r1, r9
 800377e:	f7fd f865 	bl	800084c <__aeabi_ddiv>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4620      	mov	r0, r4
 8003788:	4629      	mov	r1, r5
 800378a:	f7fc ff35 	bl	80005f8 <__aeabi_dmul>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4610      	mov	r0, r2
 8003794:	4619      	mov	r1, r3
 8003796:	f7fd f941 	bl	8000a1c <__aeabi_d2uiz>
 800379a:	4603      	mov	r3, r0
 800379c:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	0d5b      	lsrs	r3, r3, #21
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	7cbb      	ldrb	r3, [r7, #18]
 80037ac:	015b      	lsls	r3, r3, #5
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	4313      	orrs	r3, r2
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	0b5b      	lsrs	r3, r3, #13
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	095b      	lsrs	r3, r3, #5
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037d2:	491f      	ldr	r1, [pc, #124]	; (8003850 <SpiritRadioSetFrequencyBase+0x230>)
 80037d4:	5ccb      	ldrb	r3, [r1, r3]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80037dc:	f107 0308 	add.w	r3, r7, #8
 80037e0:	461a      	mov	r2, r3
 80037e2:	2104      	movs	r1, #4
 80037e4:	2008      	movs	r0, #8
 80037e6:	f000 fdeb 	bl	80043c0 <RadioSpiWriteRegisters>
 80037ea:	4602      	mov	r2, r0
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <SpiritRadioSetFrequencyBase+0x234>)
 80037ee:	b212      	sxth	r2, r2
 80037f0:	4611      	mov	r1, r2
 80037f2:	7019      	strb	r1, [r3, #0]
 80037f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80037f8:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 80037fa:	4b17      	ldr	r3, [pc, #92]	; (8003858 <SpiritRadioSetFrequencyBase+0x238>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d103      	bne.n	800380a <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 8003802:	f7fe ff6d 	bl	80026e0 <SpiritManagementWaVcoCalibration>
 8003806:	4603      	mov	r3, r0
 8003808:	e000      	b.n	800380c <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3728      	adds	r7, #40	; 0x28
 8003810:	46bd      	mov	sp, r7
 8003812:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003816:	bf00      	nop
 8003818:	2e5f5680 	.word	0x2e5f5680
 800381c:	390c2fe0 	.word	0x390c2fe0
 8003820:	1701e47f 	.word	0x1701e47f
 8003824:	1c146a60 	.word	0x1c146a60
 8003828:	11d260bf 	.word	0x11d260bf
 800382c:	14ced7e0 	.word	0x14ced7e0
 8003830:	08e18f3f 	.word	0x08e18f3f
 8003834:	0a6fd060 	.word	0x0a6fd060
 8003838:	099cf4e1 	.word	0x099cf4e1
 800383c:	1339e9c3 	.word	0x1339e9c3
 8003840:	19a28d05 	.word	0x19a28d05
 8003844:	33451a0a 	.word	0x33451a0a
 8003848:	0800c188 	.word	0x0800c188
 800384c:	200029bc 	.word	0x200029bc
 8003850:	0800c18c 	.word	0x0800c18c
 8003854:	200029c0 	.word	0x200029c0
 8003858:	20000345 	.word	0x20000345

0800385c <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 800385c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003860:	b082      	sub	sp, #8
 8003862:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8003864:	f7ff fe0c 	bl	8003480 <SpiritRadioGetSynthWord>
 8003868:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 800386a:	f7ff fe2f 	bl	80034cc <SpiritRadioGetBand>
 800386e:	4603      	mov	r3, r0
 8003870:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 8003872:	f000 fc81 	bl	8004178 <SpiritRadioGetRefDiv>
 8003876:	4603      	mov	r3, r0
 8003878:	3301      	adds	r3, #1
 800387a:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7fc fe41 	bl	8000504 <__aeabi_ui2d>
 8003882:	4604      	mov	r4, r0
 8003884:	460d      	mov	r5, r1
 8003886:	4b19      	ldr	r3, [pc, #100]	; (80038ec <SpiritRadioGetFrequencyBase+0x90>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fc fe3a 	bl	8000504 <__aeabi_ui2d>
 8003890:	4680      	mov	r8, r0
 8003892:	4689      	mov	r9, r1
 8003894:	78bb      	ldrb	r3, [r7, #2]
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	4915      	ldr	r1, [pc, #84]	; (80038f0 <SpiritRadioGetFrequencyBase+0x94>)
 800389a:	5c8a      	ldrb	r2, [r1, r2]
 800389c:	fb02 f303 	mul.w	r3, r2, r3
 80038a0:	049b      	lsls	r3, r3, #18
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fc fe3e 	bl	8000524 <__aeabi_i2d>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4640      	mov	r0, r8
 80038ae:	4649      	mov	r1, r9
 80038b0:	f7fc ffcc 	bl	800084c <__aeabi_ddiv>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4620      	mov	r0, r4
 80038ba:	4629      	mov	r1, r5
 80038bc:	f7fc fe9c 	bl	80005f8 <__aeabi_dmul>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	ec43 2b17 	vmov	d7, r2, r3
 80038c8:	eeb0 0a47 	vmov.f32	s0, s14
 80038cc:	eef0 0a67 	vmov.f32	s1, s15
 80038d0:	f008 fa3c 	bl	800bd4c <round>
 80038d4:	ec53 2b10 	vmov	r2, r3, d0
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	f7fd f89e 	bl	8000a1c <__aeabi_d2uiz>
 80038e0:	4603      	mov	r3, r0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038ec:	200029bc 	.word	0x200029bc
 80038f0:	0800c188 	.word	0x0800c188

080038f4 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 8003900:	2300      	movs	r3, #0
 8003902:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 8003904:	230f      	movs	r3, #15
 8003906:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 8003908:	2300      	movs	r3, #0
 800390a:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 800390c:	f000 fc86 	bl	800421c <SpiritRadioGetDigDiv>
 8003910:	4603      	mov	r3, r0
 8003912:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 8003914:	e015      	b.n	8003942 <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 8003916:	4b4f      	ldr	r3, [pc, #316]	; (8003a54 <SpiritRadioSearchDatarateME+0x160>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800391e:	f1c3 0114 	rsb	r1, r3, #20
 8003922:	7ebb      	ldrb	r3, [r7, #26]
 8003924:	440b      	add	r3, r1
 8003926:	fa22 f303 	lsr.w	r3, r2, r3
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	429a      	cmp	r2, r3
 800392e:	d302      	bcc.n	8003936 <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 8003930:	2301      	movs	r3, #1
 8003932:	763b      	strb	r3, [r7, #24]
 8003934:	e005      	b.n	8003942 <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 8003936:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b2db      	uxtb	r3, r3
 8003940:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 8003942:	7e3b      	ldrb	r3, [r7, #24]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d103      	bne.n	8003952 <SpiritRadioSearchDatarateME+0x5e>
 800394a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800394e:	2b00      	cmp	r3, #0
 8003950:	dae1      	bge.n	8003916 <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 8003952:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003956:	2b00      	cmp	r3, #0
 8003958:	da01      	bge.n	800395e <SpiritRadioSearchDatarateME+0x6a>
 800395a:	2300      	movs	r3, #0
 800395c:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 800395e:	7ffa      	ldrb	r2, [r7, #31]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8003964:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003968:	f1c3 0317 	rsb	r3, r3, #23
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	409a      	lsls	r2, r3
 8003970:	4b38      	ldr	r3, [pc, #224]	; (8003a54 <SpiritRadioSearchDatarateME+0x160>)
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	7ebb      	ldrb	r3, [r7, #26]
 8003976:	3305      	adds	r3, #5
 8003978:	fa21 f303 	lsr.w	r3, r1, r3
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8003982:	2300      	movs	r3, #0
 8003984:	77bb      	strb	r3, [r7, #30]
 8003986:	e031      	b.n	80039ec <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 8003988:	7e7a      	ldrb	r2, [r7, #25]
 800398a:	7fbb      	ldrb	r3, [r7, #30]
 800398c:	4413      	add	r3, r2
 800398e:	2b01      	cmp	r3, #1
 8003990:	d021      	beq.n	80039d6 <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	b29a      	uxth	r2, r3
 8003996:	7e7b      	ldrb	r3, [r7, #25]
 8003998:	f503 7180 	add.w	r1, r3, #256	; 0x100
 800399c:	7fbb      	ldrb	r3, [r7, #30]
 800399e:	440b      	add	r3, r1
 80039a0:	3b01      	subs	r3, #1
 80039a2:	4618      	mov	r0, r3
 80039a4:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <SpiritRadioSearchDatarateME+0x160>)
 80039a6:	6819      	ldr	r1, [r3, #0]
 80039a8:	7ebb      	ldrb	r3, [r7, #26]
 80039aa:	3305      	adds	r3, #5
 80039ac:	fa21 f303 	lsr.w	r3, r1, r3
 80039b0:	fb03 f100 	mul.w	r1, r3, r0
 80039b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80039b8:	f1c3 0317 	rsb	r3, r3, #23
 80039bc:	fa21 f303 	lsr.w	r3, r1, r3
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	7fbb      	ldrb	r3, [r7, #30]
 80039c8:	b212      	sxth	r2, r2
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	3320      	adds	r3, #32
 80039ce:	443b      	add	r3, r7
 80039d0:	f823 2c10 	strh.w	r2, [r3, #-16]
 80039d4:	e007      	b.n	80039e6 <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 80039d6:	7fbb      	ldrb	r3, [r7, #30]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	3320      	adds	r3, #32
 80039dc:	443b      	add	r3, r7
 80039de:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80039e2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 80039e6:	7fbb      	ldrb	r3, [r7, #30]
 80039e8:	3301      	adds	r3, #1
 80039ea:	77bb      	strb	r3, [r7, #30]
 80039ec:	7fbb      	ldrb	r3, [r7, #30]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d9ca      	bls.n	8003988 <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 80039f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039f6:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 80039f8:	2300      	movs	r3, #0
 80039fa:	76fb      	strb	r3, [r7, #27]
 80039fc:	e021      	b.n	8003a42 <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 80039fe:	7efb      	ldrb	r3, [r7, #27]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	3320      	adds	r3, #32
 8003a04:	443b      	add	r3, r7
 8003a06:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	bfb8      	it	lt
 8003a0e:	425b      	neglt	r3, r3
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	8bba      	ldrh	r2, [r7, #28]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d911      	bls.n	8003a3c <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 8003a18:	7efb      	ldrb	r3, [r7, #27]
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	3320      	adds	r3, #32
 8003a1e:	443b      	add	r3, r7
 8003a20:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bfb8      	it	lt
 8003a28:	425b      	neglt	r3, r3
 8003a2a:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 8003a2c:	7e7a      	ldrb	r2, [r7, #25]
 8003a2e:	7efb      	ldrb	r3, [r7, #27]
 8003a30:	4413      	add	r3, r2
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003a3c:	7efb      	ldrb	r3, [r7, #27]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	76fb      	strb	r3, [r7, #27]
 8003a42:	7efb      	ldrb	r3, [r7, #27]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d9da      	bls.n	80039fe <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	3720      	adds	r7, #32
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	200029bc 	.word	0x200029bc

08003a58 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	; 0x28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8003a64:	2301      	movs	r3, #1
 8003a66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8003a6a:	f000 fbd7 	bl	800421c <SpiritRadioGetDigDiv>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8003a74:	2302      	movs	r3, #2
 8003a76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003a7a:	e002      	b.n	8003a82 <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8003a82:	4b63      	ldr	r3, [pc, #396]	; (8003c10 <SpiritRadioSearchChannelBwME+0x1b8>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8e:	4a61      	ldr	r2, [pc, #388]	; (8003c14 <SpiritRadioSearchChannelBwME+0x1bc>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a9e:	e006      	b.n	8003aae <SpiritRadioSearchChannelBwME+0x56>
 8003aa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003aae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ab2:	2b59      	cmp	r3, #89	; 0x59
 8003ab4:	dc0f      	bgt.n	8003ad6 <SpiritRadioSearchChannelBwME+0x7e>
 8003ab6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003aba:	4a57      	ldr	r2, [pc, #348]	; (8003c18 <SpiritRadioSearchChannelBwME+0x1c0>)
 8003abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	fb02 f303 	mul.w	r3, r2, r3
 8003ac8:	4a54      	ldr	r2, [pc, #336]	; (8003c1c <SpiritRadioSearchChannelBwME+0x1c4>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	0adb      	lsrs	r3, r3, #11
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d3e4      	bcc.n	8003aa0 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 8003ad6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d077      	beq.n	8003bce <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 8003ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ae2:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003aea:	e03a      	b.n	8003b62 <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8003aec:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003af0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003af4:	4413      	add	r3, r2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	dc06      	bgt.n	8003b08 <SpiritRadioSearchChannelBwME+0xb0>
 8003afa:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003afe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b02:	4413      	add	r3, r2
 8003b04:	2b5a      	cmp	r3, #90	; 0x5a
 8003b06:	dc1e      	bgt.n	8003b46 <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8003b10:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b14:	440b      	add	r3, r1
 8003b16:	3b01      	subs	r3, #1
 8003b18:	493f      	ldr	r1, [pc, #252]	; (8003c18 <SpiritRadioSearchChannelBwME+0x1c0>)
 8003b1a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	493d      	ldr	r1, [pc, #244]	; (8003c1c <SpiritRadioSearchChannelBwME+0x1c4>)
 8003b28:	fba1 1303 	umull	r1, r3, r1, r3
 8003b2c:	0adb      	lsrs	r3, r3, #11
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b38:	b212      	sxth	r2, r2
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	3328      	adds	r3, #40	; 0x28
 8003b3e:	443b      	add	r3, r7
 8003b40:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003b44:	e008      	b.n	8003b58 <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 8003b46:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	3328      	adds	r3, #40	; 0x28
 8003b4e:	443b      	add	r3, r7
 8003b50:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003b54:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 8003b58:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003b62:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d9c0      	bls.n	8003aec <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8003b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b6e:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003b70:	2300      	movs	r3, #0
 8003b72:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003b76:	e026      	b.n	8003bc6 <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8003b78:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	3328      	adds	r3, #40	; 0x28
 8003b80:	443b      	add	r3, r7
 8003b82:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bfb8      	it	lt
 8003b8a:	425b      	neglt	r3, r3
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d913      	bls.n	8003bbc <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8003b94:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	3328      	adds	r3, #40	; 0x28
 8003b9c:	443b      	add	r3, r7
 8003b9e:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	bfb8      	it	lt
 8003ba6:	425b      	neglt	r3, r3
 8003ba8:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 8003baa:	7efa      	ldrb	r2, [r7, #27]
 8003bac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003bb0:	4413      	add	r3, r2
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 8003bbc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003bc6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d9d4      	bls.n	8003b78 <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 8003bce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003bd2:	4a13      	ldr	r2, [pc, #76]	; (8003c20 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003bd4:	fb82 1203 	smull	r1, r2, r2, r3
 8003bd8:	1052      	asrs	r2, r2, #1
 8003bda:	17db      	asrs	r3, r3, #31
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	b25b      	sxtb	r3, r3
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 8003be6:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8003bea:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003bec:	fb83 1302 	smull	r1, r3, r3, r2
 8003bf0:	1059      	asrs	r1, r3, #1
 8003bf2:	17d3      	asrs	r3, r2, #31
 8003bf4:	1ac9      	subs	r1, r1, r3
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	440b      	add	r3, r1
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	b25b      	sxtb	r3, r3
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	701a      	strb	r2, [r3, #0]
  
}
 8003c06:	bf00      	nop
 8003c08:	3728      	adds	r7, #40	; 0x28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	200029bc 	.word	0x200029bc
 8003c14:	51eb851f 	.word	0x51eb851f
 8003c18:	0800c190 	.word	0x0800c190
 8003c1c:	c9a633fd 	.word	0xc9a633fd
 8003c20:	38e38e39 	.word	0x38e38e39

08003c24 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003c24:	b5b0      	push	{r4, r5, r7, lr}
 8003c26:	b08a      	sub	sp, #40	; 0x28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003c34:	4b53      	ldr	r3, [pc, #332]	; (8003d84 <SpiritRadioSearchFreqDevME+0x160>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	ee07 3a90 	vmov	s15, r3
 8003c3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c40:	eddf 6a51 	vldr	s13, [pc, #324]	; 8003d88 <SpiritRadioSearchFreqDevME+0x164>
 8003c44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c48:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c52:	e028      	b.n	8003ca6 <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8003c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c58:	2201      	movs	r2, #1
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fc fc60 	bl	8000524 <__aeabi_i2d>
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	4b48      	ldr	r3, [pc, #288]	; (8003d8c <SpiritRadioSearchFreqDevME+0x168>)
 8003c6a:	f7fc fcc5 	bl	80005f8 <__aeabi_dmul>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4610      	mov	r0, r2
 8003c74:	4619      	mov	r1, r3
 8003c76:	f7fc fed1 	bl	8000a1c <__aeabi_d2uiz>
 8003c7a:	ee07 0a90 	vmov	s15, r0
 8003c7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c82:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c8e:	ee17 3a90 	vmov	r3, s15
 8003c92:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d309      	bcc.n	8003cb0 <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 8003c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003caa:	2b09      	cmp	r3, #9
 8003cac:	d9d2      	bls.n	8003c54 <SpiritRadioSearchFreqDevME+0x30>
 8003cae:	e000      	b.n	8003cb2 <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8003cb0:	bf00      	nop
  }
  (*pcE) = i;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003cb8:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003cc0:	e043      	b.n	8003d4a <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 8003cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fc fc2a 	bl	8000524 <__aeabi_i2d>
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	4b2e      	ldr	r3, [pc, #184]	; (8003d90 <SpiritRadioSearchFreqDevME+0x16c>)
 8003cd6:	f7fc fad9 	bl	800028c <__adddf3>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cea:	f7fc fdaf 	bl	800084c <__aeabi_ddiv>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4614      	mov	r4, r2
 8003cf4:	461d      	mov	r5, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	4093      	lsls	r3, r2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fc fc0f 	bl	8000524 <__aeabi_i2d>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	f7fc fc73 	bl	80005f8 <__aeabi_dmul>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f7fc fe7f 	bl	8000a1c <__aeabi_d2uiz>
 8003d1e:	ee07 0a90 	vmov	s15, r0
 8003d22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d26:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d32:	ee17 3a90 	vmov	r3, s15
 8003d36:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d309      	bcc.n	8003d54 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 8003d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d44:	3301      	adds	r3, #1
 8003d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d4e:	2b07      	cmp	r3, #7
 8003d50:	d9b7      	bls.n	8003cc2 <SpiritRadioSearchFreqDevME+0x9e>
 8003d52:	e000      	b.n	8003d56 <SpiritRadioSearchFreqDevME+0x132>
      break;
 8003d54:	bf00      	nop
  }
  
  (*pcM)=i;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003d5c:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	1ad2      	subs	r2, r2, r3
 8003d64:	69f9      	ldr	r1, [r7, #28]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1acb      	subs	r3, r1, r3
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d205      	bcs.n	8003d7a <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	701a      	strb	r2, [r3, #0]
  
}
 8003d7a:	bf00      	nop
 8003d7c:	3728      	adds	r7, #40	; 0x28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bdb0      	pop	{r4, r5, r7, pc}
 8003d82:	bf00      	nop
 8003d84:	200029bc 	.word	0x200029bc
 8003d88:	48800000 	.word	0x48800000
 8003d8c:	401e0000 	.word	0x401e0000
 8003d90:	40200000 	.word	0x40200000

08003d94 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4a74      	ldr	r2, [pc, #464]	; (8003f7c <SpiritRadioGetdBm2Reg+0x1e8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d30c      	bcc.n	8003dca <SpiritRadioGetdBm2Reg+0x36>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a73      	ldr	r2, [pc, #460]	; (8003f80 <SpiritRadioGetdBm2Reg+0x1ec>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d808      	bhi.n	8003dca <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a71      	ldr	r2, [pc, #452]	; (8003f84 <SpiritRadioGetdBm2Reg+0x1f0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d822      	bhi.n	8003e0a <SpiritRadioGetdBm2Reg+0x76>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	75fb      	strb	r3, [r7, #23]
 8003dc8:	e01f      	b.n	8003e0a <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4a6e      	ldr	r2, [pc, #440]	; (8003f88 <SpiritRadioGetdBm2Reg+0x1f4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d906      	bls.n	8003de0 <SpiritRadioGetdBm2Reg+0x4c>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4a6d      	ldr	r2, [pc, #436]	; (8003f8c <SpiritRadioGetdBm2Reg+0x1f8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d802      	bhi.n	8003de0 <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	75fb      	strb	r3, [r7, #23]
 8003dde:	e014      	b.n	8003e0a <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4a6b      	ldr	r2, [pc, #428]	; (8003f90 <SpiritRadioGetdBm2Reg+0x1fc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d906      	bls.n	8003df6 <SpiritRadioGetdBm2Reg+0x62>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4a6a      	ldr	r2, [pc, #424]	; (8003f94 <SpiritRadioGetdBm2Reg+0x200>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d802      	bhi.n	8003df6 <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 8003df0:	2303      	movs	r3, #3
 8003df2:	75fb      	strb	r3, [r7, #23]
 8003df4:	e009      	b.n	8003e0a <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4a67      	ldr	r2, [pc, #412]	; (8003f98 <SpiritRadioGetdBm2Reg+0x204>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d905      	bls.n	8003e0a <SpiritRadioGetdBm2Reg+0x76>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4a66      	ldr	r2, [pc, #408]	; (8003f9c <SpiritRadioGetdBm2Reg+0x208>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d801      	bhi.n	8003e0a <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 8003e06:	2304      	movs	r3, #4
 8003e08:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8003e0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1a:	dd2f      	ble.n	8003e7c <SpiritRadioGetdBm2Reg+0xe8>
 8003e1c:	7dfa      	ldrb	r2, [r7, #23]
 8003e1e:	4960      	ldr	r1, [pc, #384]	; (8003fa0 <SpiritRadioGetdBm2Reg+0x20c>)
 8003e20:	4613      	mov	r3, r2
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	4413      	add	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	440b      	add	r3, r1
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	edd3 7a00 	vldr	s15, [r3]
 8003e30:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8003e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e38:	7dfa      	ldrb	r2, [r7, #23]
 8003e3a:	4959      	ldr	r1, [pc, #356]	; (8003fa0 <SpiritRadioGetdBm2Reg+0x20c>)
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4413      	add	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	440b      	add	r3, r1
 8003e46:	330c      	adds	r3, #12
 8003e48:	ed93 6a00 	vldr	s12, [r3]
 8003e4c:	7dfa      	ldrb	r2, [r7, #23]
 8003e4e:	4954      	ldr	r1, [pc, #336]	; (8003fa0 <SpiritRadioGetdBm2Reg+0x20c>)
 8003e50:	4613      	mov	r3, r2
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	4413      	add	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	440b      	add	r3, r1
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	edd3 6a00 	vldr	s13, [r3]
 8003e60:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003e64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e68:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e74:	dd02      	ble.n	8003e7c <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	75bb      	strb	r3, [r7, #22]
 8003e7a:	e035      	b.n	8003ee8 <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003e7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e88:	d82e      	bhi.n	8003ee8 <SpiritRadioGetdBm2Reg+0x154>
 8003e8a:	7dfa      	ldrb	r2, [r7, #23]
 8003e8c:	4944      	ldr	r1, [pc, #272]	; (8003fa0 <SpiritRadioGetdBm2Reg+0x20c>)
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	440b      	add	r3, r1
 8003e98:	3308      	adds	r3, #8
 8003e9a:	edd3 7a00 	vldr	s15, [r3]
 8003e9e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003fa4 <SpiritRadioGetdBm2Reg+0x210>
 8003ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ea6:	7dfa      	ldrb	r2, [r7, #23]
 8003ea8:	493d      	ldr	r1, [pc, #244]	; (8003fa0 <SpiritRadioGetdBm2Reg+0x20c>)
 8003eaa:	4613      	mov	r3, r2
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	4413      	add	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	440b      	add	r3, r1
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	ed93 6a00 	vldr	s12, [r3]
 8003eba:	7dfa      	ldrb	r2, [r7, #23]
 8003ebc:	4938      	ldr	r1, [pc, #224]	; (8003fa0 <SpiritRadioGetdBm2Reg+0x20c>)
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4413      	add	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	440b      	add	r3, r1
 8003ec8:	3308      	adds	r3, #8
 8003eca:	edd3 6a00 	vldr	s13, [r3]
 8003ece:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ed6:	ed97 7a02 	vldr	s14, [r7, #8]
 8003eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee2:	d501      	bpl.n	8003ee8 <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 8003ee8:	7dfa      	ldrb	r2, [r7, #23]
 8003eea:	7dbb      	ldrb	r3, [r7, #22]
 8003eec:	0059      	lsls	r1, r3, #1
 8003eee:	482c      	ldr	r0, [pc, #176]	; (8003fa0 <SpiritRadioGetdBm2Reg+0x20c>)
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4413      	add	r3, r2
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	440b      	add	r3, r1
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4403      	add	r3, r0
 8003efe:	ed93 7a00 	vldr	s14, [r3]
 8003f02:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f0a:	7dfa      	ldrb	r2, [r7, #23]
 8003f0c:	7dbb      	ldrb	r3, [r7, #22]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	1c59      	adds	r1, r3, #1
 8003f12:	4823      	ldr	r0, [pc, #140]	; (8003fa0 <SpiritRadioGetdBm2Reg+0x20c>)
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	440b      	add	r3, r1
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4403      	add	r3, r0
 8003f22:	edd3 7a00 	vldr	s15, [r3]
 8003f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f2a:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 8003f2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3e:	d503      	bpl.n	8003f48 <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 8003f40:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	e00a      	b.n	8003f5e <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 8003f48:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f4c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003fa8 <SpiritRadioGetdBm2Reg+0x214>
 8003f50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f58:	dd01      	ble.n	8003f5e <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 8003f5a:	4b14      	ldr	r3, [pc, #80]	; (8003fac <SpiritRadioGetdBm2Reg+0x218>)
 8003f5c:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 8003f5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f66:	edc7 7a01 	vstr	s15, [r7, #4]
 8003f6a:	793b      	ldrb	r3, [r7, #4]
 8003f6c:	b2db      	uxtb	r3, r3
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	2e5f5680 	.word	0x2e5f5680
 8003f80:	390c2fe0 	.word	0x390c2fe0
 8003f84:	35a4e8ff 	.word	0x35a4e8ff
 8003f88:	1701e47f 	.word	0x1701e47f
 8003f8c:	1c146a60 	.word	0x1c146a60
 8003f90:	11d260bf 	.word	0x11d260bf
 8003f94:	14ced7e0 	.word	0x14ced7e0
 8003f98:	08e18f3f 	.word	0x08e18f3f
 8003f9c:	0a6fd060 	.word	0x0a6fd060
 8003fa0:	0800c264 	.word	0x0800c264
 8003fa4:	42200000 	.word	0x42200000
 8003fa8:	42b40000 	.word	0x42b40000
 8003fac:	42b40000 	.word	0x42b40000

08003fb0 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	ed87 0a00 	vstr	s0, [r7]
 8003fbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8003fbe:	f7ff fc4d 	bl	800385c <SpiritRadioGetFrequencyBase>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	ed97 0a00 	vldr	s0, [r7]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fee3 	bl	8003d94 <SpiritRadioGetdBm2Reg>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	f1c3 0317 	rsb	r3, r3, #23
 8003fd8:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 8003fda:	f107 020e 	add.w	r2, r7, #14
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f9ec 	bl	80043c0 <RadioSpiWriteRegisters>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <SpiritRadioSetPALeveldBm+0x50>)
 8003fec:	b212      	sxth	r2, r2
 8003fee:	4611      	mov	r1, r2
 8003ff0:	7019      	strb	r1, [r3, #0]
 8003ff2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ff6:	705a      	strb	r2, [r3, #1]
  
}
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	200029c0 	.word	0x200029c0

08004004 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800400e:	f107 030f 	add.w	r3, r7, #15
 8004012:	461a      	mov	r2, r3
 8004014:	2101      	movs	r1, #1
 8004016:	2018      	movs	r0, #24
 8004018:	f000 fa1e 	bl	8004458 <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004022:	b2db      	uxtb	r3, r3
 8004024:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8004026:	7bfa      	ldrb	r2, [r7, #15]
 8004028:	79fb      	ldrb	r3, [r7, #7]
 800402a:	4313      	orrs	r3, r2
 800402c:	b2db      	uxtb	r3, r3
 800402e:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8004030:	f107 030f 	add.w	r3, r7, #15
 8004034:	461a      	mov	r2, r3
 8004036:	2101      	movs	r1, #1
 8004038:	2018      	movs	r0, #24
 800403a:	f000 f9c1 	bl	80043c0 <RadioSpiWriteRegisters>
 800403e:	4602      	mov	r2, r0
 8004040:	4b05      	ldr	r3, [pc, #20]	; (8004058 <SpiritRadioSetPACwc+0x54>)
 8004042:	b212      	sxth	r2, r2
 8004044:	4611      	mov	r1, r2
 8004046:	7019      	strb	r1, [r3, #0]
 8004048:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800404c:	705a      	strb	r2, [r3, #1]
  
}
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	200029c0 	.word	0x200029c0

0800405c <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8004066:	f107 030f 	add.w	r3, r7, #15
 800406a:	461a      	mov	r2, r3
 800406c:	2101      	movs	r1, #1
 800406e:	2018      	movs	r0, #24
 8004070:	f000 f9f2 	bl	8004458 <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	f023 0307 	bic.w	r3, r3, #7
 800407a:	b2db      	uxtb	r3, r3
 800407c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 800407e:	7bfa      	ldrb	r2, [r7, #15]
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	4313      	orrs	r3, r2
 8004084:	b2db      	uxtb	r3, r3
 8004086:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8004088:	f107 030f 	add.w	r3, r7, #15
 800408c:	461a      	mov	r2, r3
 800408e:	2101      	movs	r1, #1
 8004090:	2018      	movs	r0, #24
 8004092:	f000 f995 	bl	80043c0 <RadioSpiWriteRegisters>
 8004096:	4602      	mov	r2, r0
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <SpiritRadioSetPALevelMaxIndex+0x54>)
 800409a:	b212      	sxth	r2, r2
 800409c:	4611      	mov	r1, r2
 800409e:	7019      	strb	r1, [r3, #0]
 80040a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80040a4:	705a      	strb	r2, [r3, #1]
  
}
 80040a6:	bf00      	nop
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200029c0 	.word	0x200029c0

080040b4 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 80040be:	2300      	movs	r3, #0
 80040c0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 80040c2:	f107 030f 	add.w	r3, r7, #15
 80040c6:	461a      	mov	r2, r3
 80040c8:	2101      	movs	r1, #1
 80040ca:	201e      	movs	r0, #30
 80040cc:	f000 f9c4 	bl	8004458 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d105      	bne.n	80040e2 <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
 80040d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	73fb      	strb	r3, [r7, #15]
 80040e0:	e004      	b.n	80040ec <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
 80040e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 80040ec:	f107 030f 	add.w	r3, r7, #15
 80040f0:	461a      	mov	r2, r3
 80040f2:	2101      	movs	r1, #1
 80040f4:	201e      	movs	r0, #30
 80040f6:	f000 f963 	bl	80043c0 <RadioSpiWriteRegisters>
 80040fa:	4602      	mov	r2, r0
 80040fc:	4b05      	ldr	r3, [pc, #20]	; (8004114 <SpiritRadioAFCFreezeOnSync+0x60>)
 80040fe:	b212      	sxth	r2, r2
 8004100:	4611      	mov	r1, r2
 8004102:	7019      	strb	r1, [r3, #0]
 8004104:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004108:	705a      	strb	r2, [r3, #1]
  
}
 800410a:	bf00      	nop
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	200029c0 	.word	0x200029c0

08004118 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8004122:	f107 030f 	add.w	r3, r7, #15
 8004126:	461a      	mov	r2, r3
 8004128:	2101      	movs	r1, #1
 800412a:	209e      	movs	r0, #158	; 0x9e
 800412c:	f000 f994 	bl	8004458 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d105      	bne.n	8004142 <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800413c:	b2db      	uxtb	r3, r3
 800413e:	73fb      	strb	r3, [r7, #15]
 8004140:	e004      	b.n	800414c <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004148:	b2db      	uxtb	r3, r3
 800414a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800414c:	f107 030f 	add.w	r3, r7, #15
 8004150:	461a      	mov	r2, r3
 8004152:	2101      	movs	r1, #1
 8004154:	209e      	movs	r0, #158	; 0x9e
 8004156:	f000 f933 	bl	80043c0 <RadioSpiWriteRegisters>
 800415a:	4602      	mov	r2, r0
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <SpiritRadioSetRefDiv+0x5c>)
 800415e:	b212      	sxth	r2, r2
 8004160:	4611      	mov	r1, r2
 8004162:	7019      	strb	r1, [r3, #0]
 8004164:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004168:	705a      	strb	r2, [r3, #1]
  
}
 800416a:	bf00      	nop
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	200029c0 	.word	0x200029c0

08004178 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800417e:	1dfb      	adds	r3, r7, #7
 8004180:	461a      	mov	r2, r3
 8004182:	2101      	movs	r1, #1
 8004184:	209e      	movs	r0, #158	; 0x9e
 8004186:	f000 f967 	bl	8004458 <RadioSpiReadRegisters>
 800418a:	4602      	mov	r2, r0
 800418c:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <SpiritRadioGetRefDiv+0x40>)
 800418e:	b212      	sxth	r2, r2
 8004190:	4611      	mov	r1, r2
 8004192:	7019      	strb	r1, [r3, #0]
 8004194:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004198:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 800419a:	79fb      	ldrb	r3, [r7, #7]
 800419c:	09db      	lsrs	r3, r3, #7
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 80041ac:	2300      	movs	r3, #0
  }
  
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	200029c0 	.word	0x200029c0

080041bc <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80041c6:	f107 030f 	add.w	r3, r7, #15
 80041ca:	461a      	mov	r2, r3
 80041cc:	2101      	movs	r1, #1
 80041ce:	20b4      	movs	r0, #180	; 0xb4
 80041d0:	f000 f942 	bl	8004458 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d105      	bne.n	80041e6 <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	f023 0308 	bic.w	r3, r3, #8
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	73fb      	strb	r3, [r7, #15]
 80041e4:	e004      	b.n	80041f0 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	f043 0308 	orr.w	r3, r3, #8
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80041f0:	f107 030f 	add.w	r3, r7, #15
 80041f4:	461a      	mov	r2, r3
 80041f6:	2101      	movs	r1, #1
 80041f8:	20b4      	movs	r0, #180	; 0xb4
 80041fa:	f000 f8e1 	bl	80043c0 <RadioSpiWriteRegisters>
 80041fe:	4602      	mov	r2, r0
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <SpiritRadioSetDigDiv+0x5c>)
 8004202:	b212      	sxth	r2, r2
 8004204:	4611      	mov	r1, r2
 8004206:	7019      	strb	r1, [r3, #0]
 8004208:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800420c:	705a      	strb	r2, [r3, #1]
  
}
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	200029c0 	.word	0x200029c0

0800421c <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8004222:	1dfb      	adds	r3, r7, #7
 8004224:	461a      	mov	r2, r3
 8004226:	2101      	movs	r1, #1
 8004228:	20b4      	movs	r0, #180	; 0xb4
 800422a:	f000 f915 	bl	8004458 <RadioSpiReadRegisters>
 800422e:	4602      	mov	r2, r0
 8004230:	4b0a      	ldr	r3, [pc, #40]	; (800425c <SpiritRadioGetDigDiv+0x40>)
 8004232:	b212      	sxth	r2, r2
 8004234:	4611      	mov	r1, r2
 8004236:	7019      	strb	r1, [r3, #0]
 8004238:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800423c:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	08db      	lsrs	r3, r3, #3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 800424c:	2300      	movs	r3, #0
 800424e:	e000      	b.n	8004252 <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8004250:	2301      	movs	r3, #1
  }
  
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	200029c0 	.word	0x200029c0

08004260 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8004264:	4b03      	ldr	r3, [pc, #12]	; (8004274 <SpiritRadioGetXtalFrequency+0x14>)
 8004266:	681b      	ldr	r3, [r3, #0]
}
 8004268:	4618      	mov	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	200029bc 	.word	0x200029bc

08004278 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8004280:	4a04      	ldr	r2, [pc, #16]	; (8004294 <SpiritRadioSetXtalFrequency+0x1c>)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6013      	str	r3, [r2, #0]
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	200029bc 	.word	0x200029bc

08004298 <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	71fb      	strb	r3, [r7, #7]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 80042a2:	1dfb      	adds	r3, r7, #7
 80042a4:	461a      	mov	r2, r3
 80042a6:	2101      	movs	r1, #1
 80042a8:	2054      	movs	r0, #84	; 0x54
 80042aa:	f000 f889 	bl	80043c0 <RadioSpiWriteRegisters>
 80042ae:	4602      	mov	r2, r0
 80042b0:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <SpiritTimerSetRxTimeoutCounter+0x30>)
 80042b2:	b212      	sxth	r2, r2
 80042b4:	4611      	mov	r1, r2
 80042b6:	7019      	strb	r1, [r3, #0]
 80042b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80042bc:	705a      	strb	r2, [r3, #1]

}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	200029c0 	.word	0x200029c0

080042cc <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 80042d6:	f107 030c 	add.w	r3, r7, #12
 80042da:	461a      	mov	r2, r3
 80042dc:	2102      	movs	r1, #2
 80042de:	204f      	movs	r0, #79	; 0x4f
 80042e0:	f000 f8ba 	bl	8004458 <RadioSpiReadRegisters>
 80042e4:	4602      	mov	r2, r0
 80042e6:	4b1c      	ldr	r3, [pc, #112]	; (8004358 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 80042e8:	b212      	sxth	r2, r2
 80042ea:	4611      	mov	r1, r2
 80042ec:	7019      	strb	r1, [r3, #0]
 80042ee:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80042f2:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 80042f4:	7b3b      	ldrb	r3, [r7, #12]
 80042f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 80042fe:	7b3b      	ldrb	r3, [r7, #12]
 8004300:	b25a      	sxtb	r2, r3
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	b25b      	sxtb	r3, r3
 8004308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430c:	b25b      	sxtb	r3, r3
 800430e:	4313      	orrs	r3, r2
 8004310:	b25b      	sxtb	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 8004316:	7b7b      	ldrb	r3, [r7, #13]
 8004318:	f003 031f 	and.w	r3, r3, #31
 800431c:	b2db      	uxtb	r3, r3
 800431e:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8004320:	7b7b      	ldrb	r3, [r7, #13]
 8004322:	b25a      	sxtb	r2, r3
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	015b      	lsls	r3, r3, #5
 8004328:	b25b      	sxtb	r3, r3
 800432a:	4313      	orrs	r3, r2
 800432c:	b25b      	sxtb	r3, r3
 800432e:	b2db      	uxtb	r3, r3
 8004330:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8004332:	f107 030c 	add.w	r3, r7, #12
 8004336:	461a      	mov	r2, r3
 8004338:	2102      	movs	r1, #2
 800433a:	204f      	movs	r0, #79	; 0x4f
 800433c:	f000 f840 	bl	80043c0 <RadioSpiWriteRegisters>
 8004340:	4602      	mov	r2, r0
 8004342:	4b05      	ldr	r3, [pc, #20]	; (8004358 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8004344:	b212      	sxth	r2, r2
 8004346:	4611      	mov	r1, r2
 8004348:	7019      	strb	r1, [r3, #0]
 800434a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800434e:	705a      	strb	r2, [r3, #1]

}
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	200029c0 	.word	0x200029c0

0800435c <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 8004362:	1d3b      	adds	r3, r7, #4
 8004364:	461a      	mov	r2, r3
 8004366:	2102      	movs	r1, #2
 8004368:	20c0      	movs	r0, #192	; 0xc0
 800436a:	f000 f875 	bl	8004458 <RadioSpiReadRegisters>
 800436e:	4603      	mov	r3, r0
 8004370:	4a09      	ldr	r2, [pc, #36]	; (8004398 <SpiritRefreshStatus+0x3c>)
 8004372:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8004374:	4b08      	ldr	r3, [pc, #32]	; (8004398 <SpiritRefreshStatus+0x3c>)
 8004376:	781a      	ldrb	r2, [r3, #0]
 8004378:	797b      	ldrb	r3, [r7, #5]
 800437a:	429a      	cmp	r2, r3
 800437c:	d1f1      	bne.n	8004362 <SpiritRefreshStatus+0x6>
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 800437e:	4b07      	ldr	r3, [pc, #28]	; (800439c <SpiritRefreshStatus+0x40>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8004388:	4293      	cmp	r3, r2
 800438a:	d1ea      	bne.n	8004362 <SpiritRefreshStatus+0x6>

}
 800438c:	bf00      	nop
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	200029c0 	.word	0x200029c0
 800439c:	200029c1 	.word	0x200029c1

080043a0 <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <RadioSpiInit+0x1c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <RadioSpiInit+0x16>
  {
    Error_Handler();
 80043b2:	f7fd fb1b 	bl	80019ec <Error_Handler>
  }
}
 80043b6:	bf00      	nop
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000348 	.word	0x20000348

080043c0 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	4603      	mov	r3, r0
 80043c8:	603a      	str	r2, [r7, #0]
 80043ca:	71fb      	strb	r3, [r7, #7]
 80043cc:	460b      	mov	r3, r1
 80043ce:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 80043d0:	2300      	movs	r3, #0
 80043d2:	743b      	strb	r3, [r7, #16]
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80043d8:	2017      	movs	r0, #23
 80043da:	f000 faad 	bl	8004938 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 80043de:	2200      	movs	r2, #0
 80043e0:	2140      	movs	r1, #64	; 0x40
 80043e2:	481b      	ldr	r0, [pc, #108]	; (8004450 <RadioSpiWriteRegisters+0x90>)
 80043e4:	f000 fc60 	bl	8004ca8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80043e8:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <RadioSpiWriteRegisters+0x94>)
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	f107 020c 	add.w	r2, r7, #12
 80043f0:	f107 0110 	add.w	r1, r7, #16
 80043f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	2302      	movs	r3, #2
 80043fc:	f002 fb25 	bl	8006a4a <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004400:	4b14      	ldr	r3, [pc, #80]	; (8004454 <RadioSpiWriteRegisters+0x94>)
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	79bb      	ldrb	r3, [r7, #6]
 8004406:	b29a      	uxth	r2, r3
 8004408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800440c:	6839      	ldr	r1, [r7, #0]
 800440e:	f002 f870 	bl	80064f2 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004412:	2201      	movs	r2, #1
 8004414:	2140      	movs	r1, #64	; 0x40
 8004416:	480e      	ldr	r0, [pc, #56]	; (8004450 <RadioSpiWriteRegisters+0x90>)
 8004418:	f000 fc46 	bl	8004ca8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 800441c:	2017      	movs	r0, #23
 800441e:	f000 fa7d 	bl	800491c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004422:	f107 0308 	add.w	r3, r7, #8
 8004426:	3301      	adds	r3, #1
 8004428:	7b3a      	ldrb	r2, [r7, #12]
 800442a:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 800442c:	f107 0308 	add.w	r3, r7, #8
 8004430:	7b7a      	ldrb	r2, [r7, #13]
 8004432:	701a      	strb	r2, [r3, #0]

  return status;
 8004434:	893b      	ldrh	r3, [r7, #8]
 8004436:	82bb      	strh	r3, [r7, #20]
 8004438:	2300      	movs	r3, #0
 800443a:	7d3a      	ldrb	r2, [r7, #20]
 800443c:	f362 0307 	bfi	r3, r2, #0, #8
 8004440:	7d7a      	ldrb	r2, [r7, #21]
 8004442:	f362 230f 	bfi	r3, r2, #8, #8

}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	48000400 	.word	0x48000400
 8004454:	20000348 	.word	0x20000348

08004458 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af02      	add	r7, sp, #8
 800445e:	4603      	mov	r3, r0
 8004460:	603a      	str	r2, [r7, #0]
 8004462:	71fb      	strb	r3, [r7, #7]
 8004464:	460b      	mov	r3, r1
 8004466:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 8004468:	2301      	movs	r3, #1
 800446a:	743b      	strb	r3, [r7, #16]
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004470:	2017      	movs	r0, #23
 8004472:	f000 fa61 	bl	8004938 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004476:	2200      	movs	r2, #0
 8004478:	2140      	movs	r1, #64	; 0x40
 800447a:	481b      	ldr	r0, [pc, #108]	; (80044e8 <RadioSpiReadRegisters+0x90>)
 800447c:	f000 fc14 	bl	8004ca8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004480:	4b1a      	ldr	r3, [pc, #104]	; (80044ec <RadioSpiReadRegisters+0x94>)
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	f107 020c 	add.w	r2, r7, #12
 8004488:	f107 0110 	add.w	r1, r7, #16
 800448c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	2302      	movs	r3, #2
 8004494:	f002 fad9 	bl	8006a4a <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004498:	4b14      	ldr	r3, [pc, #80]	; (80044ec <RadioSpiReadRegisters+0x94>)
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	79bb      	ldrb	r3, [r7, #6]
 800449e:	b29a      	uxth	r2, r3
 80044a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044a4:	6839      	ldr	r1, [r7, #0]
 80044a6:	f002 f999 	bl	80067dc <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80044aa:	2201      	movs	r2, #1
 80044ac:	2140      	movs	r1, #64	; 0x40
 80044ae:	480e      	ldr	r0, [pc, #56]	; (80044e8 <RadioSpiReadRegisters+0x90>)
 80044b0:	f000 fbfa 	bl	8004ca8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80044b4:	2017      	movs	r0, #23
 80044b6:	f000 fa31 	bl	800491c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80044ba:	f107 0308 	add.w	r3, r7, #8
 80044be:	3301      	adds	r3, #1
 80044c0:	7b3a      	ldrb	r2, [r7, #12]
 80044c2:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80044c4:	f107 0308 	add.w	r3, r7, #8
 80044c8:	7b7a      	ldrb	r2, [r7, #13]
 80044ca:	701a      	strb	r2, [r3, #0]

  return status;
 80044cc:	893b      	ldrh	r3, [r7, #8]
 80044ce:	82bb      	strh	r3, [r7, #20]
 80044d0:	2300      	movs	r3, #0
 80044d2:	7d3a      	ldrb	r2, [r7, #20]
 80044d4:	f362 0307 	bfi	r3, r2, #0, #8
 80044d8:	7d7a      	ldrb	r2, [r7, #21]
 80044da:	f362 230f 	bfi	r3, r2, #8, #8
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	48000400 	.word	0x48000400
 80044ec:	20000348 	.word	0x20000348

080044f0 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	4603      	mov	r3, r0
 80044f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 80044fa:	2380      	movs	r3, #128	; 0x80
 80044fc:	743b      	strb	r3, [r7, #16]
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004502:	2017      	movs	r0, #23
 8004504:	f000 fa18 	bl	8004938 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004508:	2200      	movs	r2, #0
 800450a:	2140      	movs	r1, #64	; 0x40
 800450c:	4816      	ldr	r0, [pc, #88]	; (8004568 <RadioSpiCommandStrobes+0x78>)
 800450e:	f000 fbcb 	bl	8004ca8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004512:	4b16      	ldr	r3, [pc, #88]	; (800456c <RadioSpiCommandStrobes+0x7c>)
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	f107 020c 	add.w	r2, r7, #12
 800451a:	f107 0110 	add.w	r1, r7, #16
 800451e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	2302      	movs	r3, #2
 8004526:	f002 fa90 	bl	8006a4a <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800452a:	2201      	movs	r2, #1
 800452c:	2140      	movs	r1, #64	; 0x40
 800452e:	480e      	ldr	r0, [pc, #56]	; (8004568 <RadioSpiCommandStrobes+0x78>)
 8004530:	f000 fbba 	bl	8004ca8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004534:	2017      	movs	r0, #23
 8004536:	f000 f9f1 	bl	800491c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800453a:	f107 0308 	add.w	r3, r7, #8
 800453e:	3301      	adds	r3, #1
 8004540:	7b3a      	ldrb	r2, [r7, #12]
 8004542:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004544:	f107 0308 	add.w	r3, r7, #8
 8004548:	7b7a      	ldrb	r2, [r7, #13]
 800454a:	701a      	strb	r2, [r3, #0]

  return status;
 800454c:	893b      	ldrh	r3, [r7, #8]
 800454e:	82bb      	strh	r3, [r7, #20]
 8004550:	2300      	movs	r3, #0
 8004552:	7d3a      	ldrb	r2, [r7, #20]
 8004554:	f362 0307 	bfi	r3, r2, #0, #8
 8004558:	7d7a      	ldrb	r2, [r7, #21]
 800455a:	f362 230f 	bfi	r3, r2, #8, #8
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	48000400 	.word	0x48000400
 800456c:	20000348 	.word	0x20000348

08004570 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af02      	add	r7, sp, #8
 8004576:	4603      	mov	r3, r0
 8004578:	6039      	str	r1, [r7, #0]
 800457a:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 800457c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004580:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004582:	2017      	movs	r0, #23
 8004584:	f000 f9d8 	bl	8004938 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004588:	2200      	movs	r2, #0
 800458a:	2140      	movs	r1, #64	; 0x40
 800458c:	481a      	ldr	r0, [pc, #104]	; (80045f8 <RadioSpiWriteFifo+0x88>)
 800458e:	f000 fb8b 	bl	8004ca8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004592:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <RadioSpiWriteFifo+0x8c>)
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	f107 020c 	add.w	r2, r7, #12
 800459a:	f107 0110 	add.w	r1, r7, #16
 800459e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	2302      	movs	r3, #2
 80045a6:	f002 fa50 	bl	8006a4a <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80045aa:	4b14      	ldr	r3, [pc, #80]	; (80045fc <RadioSpiWriteFifo+0x8c>)
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045b6:	6839      	ldr	r1, [r7, #0]
 80045b8:	f001 ff9b 	bl	80064f2 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80045bc:	2201      	movs	r2, #1
 80045be:	2140      	movs	r1, #64	; 0x40
 80045c0:	480d      	ldr	r0, [pc, #52]	; (80045f8 <RadioSpiWriteFifo+0x88>)
 80045c2:	f000 fb71 	bl	8004ca8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80045c6:	2017      	movs	r0, #23
 80045c8:	f000 f9a8 	bl	800491c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80045cc:	f107 0308 	add.w	r3, r7, #8
 80045d0:	3301      	adds	r3, #1
 80045d2:	7b3a      	ldrb	r2, [r7, #12]
 80045d4:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80045d6:	f107 0308 	add.w	r3, r7, #8
 80045da:	7b7a      	ldrb	r2, [r7, #13]
 80045dc:	701a      	strb	r2, [r3, #0]

  return status;
 80045de:	893b      	ldrh	r3, [r7, #8]
 80045e0:	82bb      	strh	r3, [r7, #20]
 80045e2:	2300      	movs	r3, #0
 80045e4:	7d3a      	ldrb	r2, [r7, #20]
 80045e6:	f362 0307 	bfi	r3, r2, #0, #8
 80045ea:	7d7a      	ldrb	r2, [r7, #21]
 80045ec:	f362 230f 	bfi	r3, r2, #8, #8
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	48000400 	.word	0x48000400
 80045fc:	20000348 	.word	0x20000348

08004600 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval Device status
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af02      	add	r7, sp, #8
 8004606:	4603      	mov	r3, r0
 8004608:	6039      	str	r1, [r7, #0]
 800460a:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {READ_HEADER, LINEAR_FIFO_ADDRESS};
 800460c:	f64f 7301 	movw	r3, #65281	; 0xff01
 8004610:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004612:	2017      	movs	r0, #23
 8004614:	f000 f990 	bl	8004938 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004618:	2200      	movs	r2, #0
 800461a:	2140      	movs	r1, #64	; 0x40
 800461c:	481a      	ldr	r0, [pc, #104]	; (8004688 <RadioSpiReadFifo+0x88>)
 800461e:	f000 fb43 	bl	8004ca8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004622:	4b1a      	ldr	r3, [pc, #104]	; (800468c <RadioSpiReadFifo+0x8c>)
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	f107 020c 	add.w	r2, r7, #12
 800462a:	f107 0110 	add.w	r1, r7, #16
 800462e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	2302      	movs	r3, #2
 8004636:	f002 fa08 	bl	8006a4a <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800463a:	4b14      	ldr	r3, [pc, #80]	; (800468c <RadioSpiReadFifo+0x8c>)
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	b29a      	uxth	r2, r3
 8004642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004646:	6839      	ldr	r1, [r7, #0]
 8004648:	f002 f8c8 	bl	80067dc <HAL_SPI_Receive>
  RadioSpiCSHigh();  // Puts the SPI chip select high to end the transaction
 800464c:	2201      	movs	r2, #1
 800464e:	2140      	movs	r1, #64	; 0x40
 8004650:	480d      	ldr	r0, [pc, #52]	; (8004688 <RadioSpiReadFifo+0x88>)
 8004652:	f000 fb29 	bl	8004ca8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004656:	2017      	movs	r0, #23
 8004658:	f000 f960 	bl	800491c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800465c:	f107 0308 	add.w	r3, r7, #8
 8004660:	3301      	adds	r3, #1
 8004662:	7b3a      	ldrb	r2, [r7, #12]
 8004664:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004666:	f107 0308 	add.w	r3, r7, #8
 800466a:	7b7a      	ldrb	r2, [r7, #13]
 800466c:	701a      	strb	r2, [r3, #0]

  return status;
 800466e:	893b      	ldrh	r3, [r7, #8]
 8004670:	82bb      	strh	r3, [r7, #20]
 8004672:	2300      	movs	r3, #0
 8004674:	7d3a      	ldrb	r2, [r7, #20]
 8004676:	f362 0307 	bfi	r3, r2, #0, #8
 800467a:	7d7a      	ldrb	r2, [r7, #21]
 800467c:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	48000400 	.word	0x48000400
 800468c:	20000348 	.word	0x20000348

08004690 <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 8004694:	2201      	movs	r2, #1
 8004696:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800469a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800469e:	f000 fb03 	bl	8004ca8 <HAL_GPIO_WritePin>
}
 80046a2:	bf00      	nop
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 80046aa:	2200      	movs	r2, #0
 80046ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046b4:	f000 faf8 	bl	8004ca8 <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
//  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
}
 80046b8:	bf00      	nop
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046c6:	2003      	movs	r0, #3
 80046c8:	f000 f901 	bl	80048ce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046cc:	200f      	movs	r0, #15
 80046ce:	f7fd fb4f 	bl	8001d70 <HAL_InitTick>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	71fb      	strb	r3, [r7, #7]
 80046dc:	e001      	b.n	80046e2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80046de:	f7fd fb1f 	bl	8001d20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80046e2:	79fb      	ldrb	r3, [r7, #7]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_IncTick+0x20>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <HAL_IncTick+0x24>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4413      	add	r3, r2
 80046fc:	4a04      	ldr	r2, [pc, #16]	; (8004710 <HAL_IncTick+0x24>)
 80046fe:	6013      	str	r3, [r2, #0]
}
 8004700:	bf00      	nop
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000350 	.word	0x20000350
 8004710:	200029c4 	.word	0x200029c4

08004714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  return uwTick;
 8004718:	4b03      	ldr	r3, [pc, #12]	; (8004728 <HAL_GetTick+0x14>)
 800471a:	681b      	ldr	r3, [r3, #0]
}
 800471c:	4618      	mov	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	200029c4 	.word	0x200029c4

0800472c <__NVIC_SetPriorityGrouping>:
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800473c:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <__NVIC_SetPriorityGrouping+0x44>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004748:	4013      	ands	r3, r2
 800474a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800475c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800475e:	4a04      	ldr	r2, [pc, #16]	; (8004770 <__NVIC_SetPriorityGrouping+0x44>)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	60d3      	str	r3, [r2, #12]
}
 8004764:	bf00      	nop
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	e000ed00 	.word	0xe000ed00

08004774 <__NVIC_GetPriorityGrouping>:
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004778:	4b04      	ldr	r3, [pc, #16]	; (800478c <__NVIC_GetPriorityGrouping+0x18>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	0a1b      	lsrs	r3, r3, #8
 800477e:	f003 0307 	and.w	r3, r3, #7
}
 8004782:	4618      	mov	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	e000ed00 	.word	0xe000ed00

08004790 <__NVIC_EnableIRQ>:
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800479a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	db0b      	blt.n	80047ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	f003 021f 	and.w	r2, r3, #31
 80047a8:	4907      	ldr	r1, [pc, #28]	; (80047c8 <__NVIC_EnableIRQ+0x38>)
 80047aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	2001      	movs	r0, #1
 80047b2:	fa00 f202 	lsl.w	r2, r0, r2
 80047b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	e000e100 	.word	0xe000e100

080047cc <__NVIC_DisableIRQ>:
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	db12      	blt.n	8004804 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	f003 021f 	and.w	r2, r3, #31
 80047e4:	490a      	ldr	r1, [pc, #40]	; (8004810 <__NVIC_DisableIRQ+0x44>)
 80047e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	2001      	movs	r0, #1
 80047ee:	fa00 f202 	lsl.w	r2, r0, r2
 80047f2:	3320      	adds	r3, #32
 80047f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80047f8:	f3bf 8f4f 	dsb	sy
}
 80047fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80047fe:	f3bf 8f6f 	isb	sy
}
 8004802:	bf00      	nop
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	e000e100 	.word	0xe000e100

08004814 <__NVIC_SetPriority>:
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	6039      	str	r1, [r7, #0]
 800481e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004824:	2b00      	cmp	r3, #0
 8004826:	db0a      	blt.n	800483e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	b2da      	uxtb	r2, r3
 800482c:	490c      	ldr	r1, [pc, #48]	; (8004860 <__NVIC_SetPriority+0x4c>)
 800482e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004832:	0112      	lsls	r2, r2, #4
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	440b      	add	r3, r1
 8004838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800483c:	e00a      	b.n	8004854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	b2da      	uxtb	r2, r3
 8004842:	4908      	ldr	r1, [pc, #32]	; (8004864 <__NVIC_SetPriority+0x50>)
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	3b04      	subs	r3, #4
 800484c:	0112      	lsls	r2, r2, #4
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	440b      	add	r3, r1
 8004852:	761a      	strb	r2, [r3, #24]
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	e000e100 	.word	0xe000e100
 8004864:	e000ed00 	.word	0xe000ed00

08004868 <NVIC_EncodePriority>:
{
 8004868:	b480      	push	{r7}
 800486a:	b089      	sub	sp, #36	; 0x24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f1c3 0307 	rsb	r3, r3, #7
 8004882:	2b04      	cmp	r3, #4
 8004884:	bf28      	it	cs
 8004886:	2304      	movcs	r3, #4
 8004888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3304      	adds	r3, #4
 800488e:	2b06      	cmp	r3, #6
 8004890:	d902      	bls.n	8004898 <NVIC_EncodePriority+0x30>
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	3b03      	subs	r3, #3
 8004896:	e000      	b.n	800489a <NVIC_EncodePriority+0x32>
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800489c:	f04f 32ff 	mov.w	r2, #4294967295
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43da      	mvns	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	401a      	ands	r2, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048b0:	f04f 31ff 	mov.w	r1, #4294967295
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ba:	43d9      	mvns	r1, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c0:	4313      	orrs	r3, r2
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3724      	adds	r7, #36	; 0x24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff ff28 	bl	800472c <__NVIC_SetPriorityGrouping>
}
 80048dc:	bf00      	nop
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048f6:	f7ff ff3d 	bl	8004774 <__NVIC_GetPriorityGrouping>
 80048fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	6978      	ldr	r0, [r7, #20]
 8004902:	f7ff ffb1 	bl	8004868 <NVIC_EncodePriority>
 8004906:	4602      	mov	r2, r0
 8004908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800490c:	4611      	mov	r1, r2
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff ff80 	bl	8004814 <__NVIC_SetPriority>
}
 8004914:	bf00      	nop
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	4603      	mov	r3, r0
 8004924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff ff30 	bl	8004790 <__NVIC_EnableIRQ>
}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff ff40 	bl	80047cc <__NVIC_DisableIRQ>
}
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004962:	e17f      	b.n	8004c64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	2101      	movs	r1, #1
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	fa01 f303 	lsl.w	r3, r1, r3
 8004970:	4013      	ands	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 8171 	beq.w	8004c5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d005      	beq.n	8004994 <HAL_GPIO_Init+0x40>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d130      	bne.n	80049f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	2203      	movs	r2, #3
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4013      	ands	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049ca:	2201      	movs	r2, #1
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4013      	ands	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	091b      	lsrs	r3, r3, #4
 80049e0:	f003 0201 	and.w	r2, r3, #1
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d118      	bne.n	8004a34 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004a08:	2201      	movs	r2, #1
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4013      	ands	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	08db      	lsrs	r3, r3, #3
 8004a1e:	f003 0201 	and.w	r2, r3, #1
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d017      	beq.n	8004a70 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	2203      	movs	r2, #3
 8004a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a50:	43db      	mvns	r3, r3
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4013      	ands	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d123      	bne.n	8004ac4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	08da      	lsrs	r2, r3, #3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3208      	adds	r2, #8
 8004a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	220f      	movs	r2, #15
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	08da      	lsrs	r2, r3, #3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3208      	adds	r2, #8
 8004abe:	6939      	ldr	r1, [r7, #16]
 8004ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	2203      	movs	r2, #3
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f003 0203 	and.w	r2, r3, #3
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80ac 	beq.w	8004c5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b06:	4b5f      	ldr	r3, [pc, #380]	; (8004c84 <HAL_GPIO_Init+0x330>)
 8004b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0a:	4a5e      	ldr	r2, [pc, #376]	; (8004c84 <HAL_GPIO_Init+0x330>)
 8004b0c:	f043 0301 	orr.w	r3, r3, #1
 8004b10:	6613      	str	r3, [r2, #96]	; 0x60
 8004b12:	4b5c      	ldr	r3, [pc, #368]	; (8004c84 <HAL_GPIO_Init+0x330>)
 8004b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004b1e:	4a5a      	ldr	r2, [pc, #360]	; (8004c88 <HAL_GPIO_Init+0x334>)
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	089b      	lsrs	r3, r3, #2
 8004b24:	3302      	adds	r3, #2
 8004b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	220f      	movs	r2, #15
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b48:	d025      	beq.n	8004b96 <HAL_GPIO_Init+0x242>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a4f      	ldr	r2, [pc, #316]	; (8004c8c <HAL_GPIO_Init+0x338>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d01f      	beq.n	8004b92 <HAL_GPIO_Init+0x23e>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a4e      	ldr	r2, [pc, #312]	; (8004c90 <HAL_GPIO_Init+0x33c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d019      	beq.n	8004b8e <HAL_GPIO_Init+0x23a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a4d      	ldr	r2, [pc, #308]	; (8004c94 <HAL_GPIO_Init+0x340>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d013      	beq.n	8004b8a <HAL_GPIO_Init+0x236>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a4c      	ldr	r2, [pc, #304]	; (8004c98 <HAL_GPIO_Init+0x344>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00d      	beq.n	8004b86 <HAL_GPIO_Init+0x232>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a4b      	ldr	r2, [pc, #300]	; (8004c9c <HAL_GPIO_Init+0x348>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d007      	beq.n	8004b82 <HAL_GPIO_Init+0x22e>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a4a      	ldr	r2, [pc, #296]	; (8004ca0 <HAL_GPIO_Init+0x34c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d101      	bne.n	8004b7e <HAL_GPIO_Init+0x22a>
 8004b7a:	2306      	movs	r3, #6
 8004b7c:	e00c      	b.n	8004b98 <HAL_GPIO_Init+0x244>
 8004b7e:	2307      	movs	r3, #7
 8004b80:	e00a      	b.n	8004b98 <HAL_GPIO_Init+0x244>
 8004b82:	2305      	movs	r3, #5
 8004b84:	e008      	b.n	8004b98 <HAL_GPIO_Init+0x244>
 8004b86:	2304      	movs	r3, #4
 8004b88:	e006      	b.n	8004b98 <HAL_GPIO_Init+0x244>
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e004      	b.n	8004b98 <HAL_GPIO_Init+0x244>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e002      	b.n	8004b98 <HAL_GPIO_Init+0x244>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <HAL_GPIO_Init+0x244>
 8004b96:	2300      	movs	r3, #0
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	f002 0203 	and.w	r2, r2, #3
 8004b9e:	0092      	lsls	r2, r2, #2
 8004ba0:	4093      	lsls	r3, r2
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ba8:	4937      	ldr	r1, [pc, #220]	; (8004c88 <HAL_GPIO_Init+0x334>)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	089b      	lsrs	r3, r3, #2
 8004bae:	3302      	adds	r3, #2
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bb6:	4b3b      	ldr	r3, [pc, #236]	; (8004ca4 <HAL_GPIO_Init+0x350>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004bda:	4a32      	ldr	r2, [pc, #200]	; (8004ca4 <HAL_GPIO_Init+0x350>)
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004be0:	4b30      	ldr	r3, [pc, #192]	; (8004ca4 <HAL_GPIO_Init+0x350>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	43db      	mvns	r3, r3
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4013      	ands	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c04:	4a27      	ldr	r2, [pc, #156]	; (8004ca4 <HAL_GPIO_Init+0x350>)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004c0a:	4b26      	ldr	r3, [pc, #152]	; (8004ca4 <HAL_GPIO_Init+0x350>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	43db      	mvns	r3, r3
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4013      	ands	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ca4 <HAL_GPIO_Init+0x350>)
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004c34:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <HAL_GPIO_Init+0x350>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4013      	ands	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c58:	4a12      	ldr	r2, [pc, #72]	; (8004ca4 <HAL_GPIO_Init+0x350>)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	3301      	adds	r3, #1
 8004c62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f47f ae78 	bne.w	8004964 <HAL_GPIO_Init+0x10>
  }
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	48000400 	.word	0x48000400
 8004c90:	48000800 	.word	0x48000800
 8004c94:	48000c00 	.word	0x48000c00
 8004c98:	48001000 	.word	0x48001000
 8004c9c:	48001400 	.word	0x48001400
 8004ca0:	48001800 	.word	0x48001800
 8004ca4:	40010400 	.word	0x40010400

08004ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	807b      	strh	r3, [r7, #2]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cb8:	787b      	ldrb	r3, [r7, #1]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004cbe:	887a      	ldrh	r2, [r7, #2]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004cc4:	e002      	b.n	8004ccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004cc6:	887a      	ldrh	r2, [r7, #2]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ce4:	695a      	ldr	r2, [r3, #20]
 8004ce6:	88fb      	ldrh	r3, [r7, #6]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d006      	beq.n	8004cfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cee:	4a05      	ldr	r2, [pc, #20]	; (8004d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cf0:	88fb      	ldrh	r3, [r7, #6]
 8004cf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cf4:	88fb      	ldrh	r3, [r7, #6]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fc f940 	bl	8000f7c <HAL_GPIO_EXTI_Callback>
  }
}
 8004cfc:	bf00      	nop
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40010400 	.word	0x40010400

08004d08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004d0c:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <HAL_PWREx_GetVoltageRange+0x18>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40007000 	.word	0x40007000

08004d24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d32:	d130      	bne.n	8004d96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d34:	4b23      	ldr	r3, [pc, #140]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d40:	d038      	beq.n	8004db4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d42:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d4a:	4a1e      	ldr	r2, [pc, #120]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d52:	4b1d      	ldr	r3, [pc, #116]	; (8004dc8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2232      	movs	r2, #50	; 0x32
 8004d58:	fb02 f303 	mul.w	r3, r2, r3
 8004d5c:	4a1b      	ldr	r2, [pc, #108]	; (8004dcc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d62:	0c9b      	lsrs	r3, r3, #18
 8004d64:	3301      	adds	r3, #1
 8004d66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d68:	e002      	b.n	8004d70 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d70:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7c:	d102      	bne.n	8004d84 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f2      	bne.n	8004d6a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d84:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d90:	d110      	bne.n	8004db4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e00f      	b.n	8004db6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da2:	d007      	beq.n	8004db4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004da4:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dac:	4a05      	ldr	r2, [pc, #20]	; (8004dc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004db2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40007000 	.word	0x40007000
 8004dc8:	20000340 	.word	0x20000340
 8004dcc:	431bde83 	.word	0x431bde83

08004dd0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e3ca      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004de2:	4b97      	ldr	r3, [pc, #604]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 030c 	and.w	r3, r3, #12
 8004dea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dec:	4b94      	ldr	r3, [pc, #592]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0310 	and.w	r3, r3, #16
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 80e4 	beq.w	8004fcc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <HAL_RCC_OscConfig+0x4a>
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b0c      	cmp	r3, #12
 8004e0e:	f040 808b 	bne.w	8004f28 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	f040 8087 	bne.w	8004f28 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e1a:	4b89      	ldr	r3, [pc, #548]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d005      	beq.n	8004e32 <HAL_RCC_OscConfig+0x62>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e3a2      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1a      	ldr	r2, [r3, #32]
 8004e36:	4b82      	ldr	r3, [pc, #520]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d004      	beq.n	8004e4c <HAL_RCC_OscConfig+0x7c>
 8004e42:	4b7f      	ldr	r3, [pc, #508]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e4a:	e005      	b.n	8004e58 <HAL_RCC_OscConfig+0x88>
 8004e4c:	4b7c      	ldr	r3, [pc, #496]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e52:	091b      	lsrs	r3, r3, #4
 8004e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d223      	bcs.n	8004ea4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fd87 	bl	8005974 <RCC_SetFlashLatencyFromMSIRange>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e383      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e70:	4b73      	ldr	r3, [pc, #460]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a72      	ldr	r2, [pc, #456]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004e76:	f043 0308 	orr.w	r3, r3, #8
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	4b70      	ldr	r3, [pc, #448]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	496d      	ldr	r1, [pc, #436]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e8e:	4b6c      	ldr	r3, [pc, #432]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	021b      	lsls	r3, r3, #8
 8004e9c:	4968      	ldr	r1, [pc, #416]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	604b      	str	r3, [r1, #4]
 8004ea2:	e025      	b.n	8004ef0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ea4:	4b66      	ldr	r3, [pc, #408]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a65      	ldr	r2, [pc, #404]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004eaa:	f043 0308 	orr.w	r3, r3, #8
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	4b63      	ldr	r3, [pc, #396]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	4960      	ldr	r1, [pc, #384]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ec2:	4b5f      	ldr	r3, [pc, #380]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	021b      	lsls	r3, r3, #8
 8004ed0:	495b      	ldr	r1, [pc, #364]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d109      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fd47 	bl	8005974 <RCC_SetFlashLatencyFromMSIRange>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e343      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ef0:	f000 fc4a 	bl	8005788 <HAL_RCC_GetSysClockFreq>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4b52      	ldr	r3, [pc, #328]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	091b      	lsrs	r3, r3, #4
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	4950      	ldr	r1, [pc, #320]	; (8005044 <HAL_RCC_OscConfig+0x274>)
 8004f02:	5ccb      	ldrb	r3, [r1, r3]
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0c:	4a4e      	ldr	r2, [pc, #312]	; (8005048 <HAL_RCC_OscConfig+0x278>)
 8004f0e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f10:	4b4e      	ldr	r3, [pc, #312]	; (800504c <HAL_RCC_OscConfig+0x27c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fc ff2b 	bl	8001d70 <HAL_InitTick>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d052      	beq.n	8004fca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
 8004f26:	e327      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d032      	beq.n	8004f96 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f30:	4b43      	ldr	r3, [pc, #268]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a42      	ldr	r2, [pc, #264]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f3c:	f7ff fbea 	bl	8004714 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f44:	f7ff fbe6 	bl	8004714 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e310      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f56:	4b3a      	ldr	r3, [pc, #232]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f0      	beq.n	8004f44 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f62:	4b37      	ldr	r3, [pc, #220]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a36      	ldr	r2, [pc, #216]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004f68:	f043 0308 	orr.w	r3, r3, #8
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	4b34      	ldr	r3, [pc, #208]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	4931      	ldr	r1, [pc, #196]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f80:	4b2f      	ldr	r3, [pc, #188]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	492c      	ldr	r1, [pc, #176]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	604b      	str	r3, [r1, #4]
 8004f94:	e01a      	b.n	8004fcc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f96:	4b2a      	ldr	r3, [pc, #168]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a29      	ldr	r2, [pc, #164]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004f9c:	f023 0301 	bic.w	r3, r3, #1
 8004fa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004fa2:	f7ff fbb7 	bl	8004714 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004faa:	f7ff fbb3 	bl	8004714 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e2dd      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004fbc:	4b20      	ldr	r3, [pc, #128]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1f0      	bne.n	8004faa <HAL_RCC_OscConfig+0x1da>
 8004fc8:	e000      	b.n	8004fcc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004fca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d074      	beq.n	80050c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	d005      	beq.n	8004fea <HAL_RCC_OscConfig+0x21a>
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2b0c      	cmp	r3, #12
 8004fe2:	d10e      	bne.n	8005002 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d10b      	bne.n	8005002 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fea:	4b15      	ldr	r3, [pc, #84]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d064      	beq.n	80050c0 <HAL_RCC_OscConfig+0x2f0>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d160      	bne.n	80050c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e2ba      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500a:	d106      	bne.n	800501a <HAL_RCC_OscConfig+0x24a>
 800500c:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a0b      	ldr	r2, [pc, #44]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8005012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	e026      	b.n	8005068 <HAL_RCC_OscConfig+0x298>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005022:	d115      	bne.n	8005050 <HAL_RCC_OscConfig+0x280>
 8005024:	4b06      	ldr	r3, [pc, #24]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a05      	ldr	r2, [pc, #20]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 800502a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	4b03      	ldr	r3, [pc, #12]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a02      	ldr	r2, [pc, #8]	; (8005040 <HAL_RCC_OscConfig+0x270>)
 8005036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	e014      	b.n	8005068 <HAL_RCC_OscConfig+0x298>
 800503e:	bf00      	nop
 8005040:	40021000 	.word	0x40021000
 8005044:	0800c138 	.word	0x0800c138
 8005048:	20000340 	.word	0x20000340
 800504c:	2000034c 	.word	0x2000034c
 8005050:	4ba0      	ldr	r3, [pc, #640]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a9f      	ldr	r2, [pc, #636]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 8005056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	4b9d      	ldr	r3, [pc, #628]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a9c      	ldr	r2, [pc, #624]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 8005062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d013      	beq.n	8005098 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7ff fb50 	bl	8004714 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005078:	f7ff fb4c 	bl	8004714 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b64      	cmp	r3, #100	; 0x64
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e276      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800508a:	4b92      	ldr	r3, [pc, #584]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0f0      	beq.n	8005078 <HAL_RCC_OscConfig+0x2a8>
 8005096:	e014      	b.n	80050c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005098:	f7ff fb3c 	bl	8004714 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a0:	f7ff fb38 	bl	8004714 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b64      	cmp	r3, #100	; 0x64
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e262      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050b2:	4b88      	ldr	r3, [pc, #544]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x2d0>
 80050be:	e000      	b.n	80050c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d060      	beq.n	8005190 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d005      	beq.n	80050e0 <HAL_RCC_OscConfig+0x310>
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	2b0c      	cmp	r3, #12
 80050d8:	d119      	bne.n	800510e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d116      	bne.n	800510e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050e0:	4b7c      	ldr	r3, [pc, #496]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <HAL_RCC_OscConfig+0x328>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e23f      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f8:	4b76      	ldr	r3, [pc, #472]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	061b      	lsls	r3, r3, #24
 8005106:	4973      	ldr	r1, [pc, #460]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 8005108:	4313      	orrs	r3, r2
 800510a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800510c:	e040      	b.n	8005190 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d023      	beq.n	800515e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005116:	4b6f      	ldr	r3, [pc, #444]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a6e      	ldr	r2, [pc, #440]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 800511c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005122:	f7ff faf7 	bl	8004714 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800512a:	f7ff faf3 	bl	8004714 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e21d      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800513c:	4b65      	ldr	r3, [pc, #404]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005148:	4b62      	ldr	r3, [pc, #392]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	061b      	lsls	r3, r3, #24
 8005156:	495f      	ldr	r1, [pc, #380]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 8005158:	4313      	orrs	r3, r2
 800515a:	604b      	str	r3, [r1, #4]
 800515c:	e018      	b.n	8005190 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800515e:	4b5d      	ldr	r3, [pc, #372]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a5c      	ldr	r2, [pc, #368]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 8005164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516a:	f7ff fad3 	bl	8004714 <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005172:	f7ff facf 	bl	8004714 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e1f9      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005184:	4b53      	ldr	r3, [pc, #332]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1f0      	bne.n	8005172 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0308 	and.w	r3, r3, #8
 8005198:	2b00      	cmp	r3, #0
 800519a:	d03c      	beq.n	8005216 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01c      	beq.n	80051de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051a4:	4b4b      	ldr	r3, [pc, #300]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 80051a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051aa:	4a4a      	ldr	r2, [pc, #296]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 80051ac:	f043 0301 	orr.w	r3, r3, #1
 80051b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b4:	f7ff faae 	bl	8004714 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051bc:	f7ff faaa 	bl	8004714 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e1d4      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051ce:	4b41      	ldr	r3, [pc, #260]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 80051d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0ef      	beq.n	80051bc <HAL_RCC_OscConfig+0x3ec>
 80051dc:	e01b      	b.n	8005216 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051de:	4b3d      	ldr	r3, [pc, #244]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 80051e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051e4:	4a3b      	ldr	r2, [pc, #236]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ee:	f7ff fa91 	bl	8004714 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f6:	f7ff fa8d 	bl	8004714 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e1b7      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005208:	4b32      	ldr	r3, [pc, #200]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 800520a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1ef      	bne.n	80051f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 80a6 	beq.w	8005370 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005224:	2300      	movs	r3, #0
 8005226:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005228:	4b2a      	ldr	r3, [pc, #168]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 800522a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10d      	bne.n	8005250 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005234:	4b27      	ldr	r3, [pc, #156]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 8005236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005238:	4a26      	ldr	r2, [pc, #152]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 800523a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800523e:	6593      	str	r3, [r2, #88]	; 0x58
 8005240:	4b24      	ldr	r3, [pc, #144]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 8005242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800524c:	2301      	movs	r3, #1
 800524e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005250:	4b21      	ldr	r3, [pc, #132]	; (80052d8 <HAL_RCC_OscConfig+0x508>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d118      	bne.n	800528e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800525c:	4b1e      	ldr	r3, [pc, #120]	; (80052d8 <HAL_RCC_OscConfig+0x508>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1d      	ldr	r2, [pc, #116]	; (80052d8 <HAL_RCC_OscConfig+0x508>)
 8005262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005266:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005268:	f7ff fa54 	bl	8004714 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005270:	f7ff fa50 	bl	8004714 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e17a      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <HAL_RCC_OscConfig+0x508>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0f0      	beq.n	8005270 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d108      	bne.n	80052a8 <HAL_RCC_OscConfig+0x4d8>
 8005296:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 8005298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529c:	4a0d      	ldr	r2, [pc, #52]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052a6:	e029      	b.n	80052fc <HAL_RCC_OscConfig+0x52c>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	2b05      	cmp	r3, #5
 80052ae:	d115      	bne.n	80052dc <HAL_RCC_OscConfig+0x50c>
 80052b0:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 80052b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b6:	4a07      	ldr	r2, [pc, #28]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 80052b8:	f043 0304 	orr.w	r3, r3, #4
 80052bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052c0:	4b04      	ldr	r3, [pc, #16]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 80052c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c6:	4a03      	ldr	r2, [pc, #12]	; (80052d4 <HAL_RCC_OscConfig+0x504>)
 80052c8:	f043 0301 	orr.w	r3, r3, #1
 80052cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052d0:	e014      	b.n	80052fc <HAL_RCC_OscConfig+0x52c>
 80052d2:	bf00      	nop
 80052d4:	40021000 	.word	0x40021000
 80052d8:	40007000 	.word	0x40007000
 80052dc:	4b9c      	ldr	r3, [pc, #624]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e2:	4a9b      	ldr	r2, [pc, #620]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 80052e4:	f023 0301 	bic.w	r3, r3, #1
 80052e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052ec:	4b98      	ldr	r3, [pc, #608]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 80052ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f2:	4a97      	ldr	r2, [pc, #604]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 80052f4:	f023 0304 	bic.w	r3, r3, #4
 80052f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d016      	beq.n	8005332 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005304:	f7ff fa06 	bl	8004714 <HAL_GetTick>
 8005308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800530a:	e00a      	b.n	8005322 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530c:	f7ff fa02 	bl	8004714 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	f241 3288 	movw	r2, #5000	; 0x1388
 800531a:	4293      	cmp	r3, r2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e12a      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005322:	4b8b      	ldr	r3, [pc, #556]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 8005324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0ed      	beq.n	800530c <HAL_RCC_OscConfig+0x53c>
 8005330:	e015      	b.n	800535e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005332:	f7ff f9ef 	bl	8004714 <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005338:	e00a      	b.n	8005350 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533a:	f7ff f9eb 	bl	8004714 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	f241 3288 	movw	r2, #5000	; 0x1388
 8005348:	4293      	cmp	r3, r2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e113      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005350:	4b7f      	ldr	r3, [pc, #508]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 8005352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1ed      	bne.n	800533a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800535e:	7ffb      	ldrb	r3, [r7, #31]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d105      	bne.n	8005370 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005364:	4b7a      	ldr	r3, [pc, #488]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 8005366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005368:	4a79      	ldr	r2, [pc, #484]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 800536a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800536e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 80fe 	beq.w	8005576 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	2b02      	cmp	r3, #2
 8005380:	f040 80d0 	bne.w	8005524 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005384:	4b72      	ldr	r3, [pc, #456]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f003 0203 	and.w	r2, r3, #3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	429a      	cmp	r2, r3
 8005396:	d130      	bne.n	80053fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	3b01      	subs	r3, #1
 80053a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d127      	bne.n	80053fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d11f      	bne.n	80053fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053c4:	2a07      	cmp	r2, #7
 80053c6:	bf14      	ite	ne
 80053c8:	2201      	movne	r2, #1
 80053ca:	2200      	moveq	r2, #0
 80053cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d113      	bne.n	80053fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053dc:	085b      	lsrs	r3, r3, #1
 80053de:	3b01      	subs	r3, #1
 80053e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d109      	bne.n	80053fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	3b01      	subs	r3, #1
 80053f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d06e      	beq.n	80054d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	2b0c      	cmp	r3, #12
 80053fe:	d069      	beq.n	80054d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005400:	4b53      	ldr	r3, [pc, #332]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d105      	bne.n	8005418 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800540c:	4b50      	ldr	r3, [pc, #320]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e0ad      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800541c:	4b4c      	ldr	r3, [pc, #304]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a4b      	ldr	r2, [pc, #300]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 8005422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005426:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005428:	f7ff f974 	bl	8004714 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005430:	f7ff f970 	bl	8004714 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e09a      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005442:	4b43      	ldr	r3, [pc, #268]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800544e:	4b40      	ldr	r3, [pc, #256]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	4b40      	ldr	r3, [pc, #256]	; (8005554 <HAL_RCC_OscConfig+0x784>)
 8005454:	4013      	ands	r3, r2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800545e:	3a01      	subs	r2, #1
 8005460:	0112      	lsls	r2, r2, #4
 8005462:	4311      	orrs	r1, r2
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005468:	0212      	lsls	r2, r2, #8
 800546a:	4311      	orrs	r1, r2
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005470:	0852      	lsrs	r2, r2, #1
 8005472:	3a01      	subs	r2, #1
 8005474:	0552      	lsls	r2, r2, #21
 8005476:	4311      	orrs	r1, r2
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800547c:	0852      	lsrs	r2, r2, #1
 800547e:	3a01      	subs	r2, #1
 8005480:	0652      	lsls	r2, r2, #25
 8005482:	4311      	orrs	r1, r2
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005488:	0912      	lsrs	r2, r2, #4
 800548a:	0452      	lsls	r2, r2, #17
 800548c:	430a      	orrs	r2, r1
 800548e:	4930      	ldr	r1, [pc, #192]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 8005490:	4313      	orrs	r3, r2
 8005492:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005494:	4b2e      	ldr	r3, [pc, #184]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a2d      	ldr	r2, [pc, #180]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 800549a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800549e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054a0:	4b2b      	ldr	r3, [pc, #172]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	4a2a      	ldr	r2, [pc, #168]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 80054a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054ac:	f7ff f932 	bl	8004714 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b4:	f7ff f92e 	bl	8004714 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e058      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054c6:	4b22      	ldr	r3, [pc, #136]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054d2:	e050      	b.n	8005576 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e04f      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054d8:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d148      	bne.n	8005576 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80054e4:	4b1a      	ldr	r3, [pc, #104]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a19      	ldr	r2, [pc, #100]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 80054ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054f0:	4b17      	ldr	r3, [pc, #92]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4a16      	ldr	r2, [pc, #88]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 80054f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054fc:	f7ff f90a 	bl	8004714 <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005504:	f7ff f906 	bl	8004714 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e030      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005516:	4b0e      	ldr	r3, [pc, #56]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0f0      	beq.n	8005504 <HAL_RCC_OscConfig+0x734>
 8005522:	e028      	b.n	8005576 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	2b0c      	cmp	r3, #12
 8005528:	d023      	beq.n	8005572 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800552a:	4b09      	ldr	r3, [pc, #36]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a08      	ldr	r2, [pc, #32]	; (8005550 <HAL_RCC_OscConfig+0x780>)
 8005530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005536:	f7ff f8ed 	bl	8004714 <HAL_GetTick>
 800553a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800553c:	e00c      	b.n	8005558 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800553e:	f7ff f8e9 	bl	8004714 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d905      	bls.n	8005558 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e013      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
 8005550:	40021000 	.word	0x40021000
 8005554:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005558:	4b09      	ldr	r3, [pc, #36]	; (8005580 <HAL_RCC_OscConfig+0x7b0>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1ec      	bne.n	800553e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005564:	4b06      	ldr	r3, [pc, #24]	; (8005580 <HAL_RCC_OscConfig+0x7b0>)
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	4905      	ldr	r1, [pc, #20]	; (8005580 <HAL_RCC_OscConfig+0x7b0>)
 800556a:	4b06      	ldr	r3, [pc, #24]	; (8005584 <HAL_RCC_OscConfig+0x7b4>)
 800556c:	4013      	ands	r3, r2
 800556e:	60cb      	str	r3, [r1, #12]
 8005570:	e001      	b.n	8005576 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3720      	adds	r7, #32
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40021000 	.word	0x40021000
 8005584:	feeefffc 	.word	0xfeeefffc

08005588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0e7      	b.n	800576c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800559c:	4b75      	ldr	r3, [pc, #468]	; (8005774 <HAL_RCC_ClockConfig+0x1ec>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d910      	bls.n	80055cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055aa:	4b72      	ldr	r3, [pc, #456]	; (8005774 <HAL_RCC_ClockConfig+0x1ec>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f023 0207 	bic.w	r2, r3, #7
 80055b2:	4970      	ldr	r1, [pc, #448]	; (8005774 <HAL_RCC_ClockConfig+0x1ec>)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ba:	4b6e      	ldr	r3, [pc, #440]	; (8005774 <HAL_RCC_ClockConfig+0x1ec>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d001      	beq.n	80055cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e0cf      	b.n	800576c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d010      	beq.n	80055fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	4b66      	ldr	r3, [pc, #408]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d908      	bls.n	80055fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e8:	4b63      	ldr	r3, [pc, #396]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	4960      	ldr	r1, [pc, #384]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d04c      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b03      	cmp	r3, #3
 800560c:	d107      	bne.n	800561e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800560e:	4b5a      	ldr	r3, [pc, #360]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d121      	bne.n	800565e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e0a6      	b.n	800576c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d107      	bne.n	8005636 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005626:	4b54      	ldr	r3, [pc, #336]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d115      	bne.n	800565e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e09a      	b.n	800576c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d107      	bne.n	800564e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800563e:	4b4e      	ldr	r3, [pc, #312]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d109      	bne.n	800565e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e08e      	b.n	800576c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800564e:	4b4a      	ldr	r3, [pc, #296]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e086      	b.n	800576c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800565e:	4b46      	ldr	r3, [pc, #280]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f023 0203 	bic.w	r2, r3, #3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	4943      	ldr	r1, [pc, #268]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 800566c:	4313      	orrs	r3, r2
 800566e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005670:	f7ff f850 	bl	8004714 <HAL_GetTick>
 8005674:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005676:	e00a      	b.n	800568e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005678:	f7ff f84c 	bl	8004714 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	f241 3288 	movw	r2, #5000	; 0x1388
 8005686:	4293      	cmp	r3, r2
 8005688:	d901      	bls.n	800568e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e06e      	b.n	800576c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800568e:	4b3a      	ldr	r3, [pc, #232]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f003 020c 	and.w	r2, r3, #12
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	429a      	cmp	r2, r3
 800569e:	d1eb      	bne.n	8005678 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d010      	beq.n	80056ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	4b31      	ldr	r3, [pc, #196]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d208      	bcs.n	80056ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056bc:	4b2e      	ldr	r3, [pc, #184]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	492b      	ldr	r1, [pc, #172]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056ce:	4b29      	ldr	r3, [pc, #164]	; (8005774 <HAL_RCC_ClockConfig+0x1ec>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d210      	bcs.n	80056fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056dc:	4b25      	ldr	r3, [pc, #148]	; (8005774 <HAL_RCC_ClockConfig+0x1ec>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f023 0207 	bic.w	r2, r3, #7
 80056e4:	4923      	ldr	r1, [pc, #140]	; (8005774 <HAL_RCC_ClockConfig+0x1ec>)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ec:	4b21      	ldr	r3, [pc, #132]	; (8005774 <HAL_RCC_ClockConfig+0x1ec>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d001      	beq.n	80056fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e036      	b.n	800576c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b00      	cmp	r3, #0
 8005708:	d008      	beq.n	800571c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800570a:	4b1b      	ldr	r3, [pc, #108]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	4918      	ldr	r1, [pc, #96]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 8005718:	4313      	orrs	r3, r2
 800571a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b00      	cmp	r3, #0
 8005726:	d009      	beq.n	800573c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005728:	4b13      	ldr	r3, [pc, #76]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	4910      	ldr	r1, [pc, #64]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 8005738:	4313      	orrs	r3, r2
 800573a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800573c:	f000 f824 	bl	8005788 <HAL_RCC_GetSysClockFreq>
 8005740:	4602      	mov	r2, r0
 8005742:	4b0d      	ldr	r3, [pc, #52]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	091b      	lsrs	r3, r3, #4
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	490b      	ldr	r1, [pc, #44]	; (800577c <HAL_RCC_ClockConfig+0x1f4>)
 800574e:	5ccb      	ldrb	r3, [r1, r3]
 8005750:	f003 031f 	and.w	r3, r3, #31
 8005754:	fa22 f303 	lsr.w	r3, r2, r3
 8005758:	4a09      	ldr	r2, [pc, #36]	; (8005780 <HAL_RCC_ClockConfig+0x1f8>)
 800575a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800575c:	4b09      	ldr	r3, [pc, #36]	; (8005784 <HAL_RCC_ClockConfig+0x1fc>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4618      	mov	r0, r3
 8005762:	f7fc fb05 	bl	8001d70 <HAL_InitTick>
 8005766:	4603      	mov	r3, r0
 8005768:	72fb      	strb	r3, [r7, #11]

  return status;
 800576a:	7afb      	ldrb	r3, [r7, #11]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40022000 	.word	0x40022000
 8005778:	40021000 	.word	0x40021000
 800577c:	0800c138 	.word	0x0800c138
 8005780:	20000340 	.word	0x20000340
 8005784:	2000034c 	.word	0x2000034c

08005788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005788:	b480      	push	{r7}
 800578a:	b089      	sub	sp, #36	; 0x24
 800578c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	61fb      	str	r3, [r7, #28]
 8005792:	2300      	movs	r3, #0
 8005794:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005796:	4b3e      	ldr	r3, [pc, #248]	; (8005890 <HAL_RCC_GetSysClockFreq+0x108>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 030c 	and.w	r3, r3, #12
 800579e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057a0:	4b3b      	ldr	r3, [pc, #236]	; (8005890 <HAL_RCC_GetSysClockFreq+0x108>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f003 0303 	and.w	r3, r3, #3
 80057a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <HAL_RCC_GetSysClockFreq+0x34>
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	2b0c      	cmp	r3, #12
 80057b4:	d121      	bne.n	80057fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d11e      	bne.n	80057fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80057bc:	4b34      	ldr	r3, [pc, #208]	; (8005890 <HAL_RCC_GetSysClockFreq+0x108>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d107      	bne.n	80057d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80057c8:	4b31      	ldr	r3, [pc, #196]	; (8005890 <HAL_RCC_GetSysClockFreq+0x108>)
 80057ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ce:	0a1b      	lsrs	r3, r3, #8
 80057d0:	f003 030f 	and.w	r3, r3, #15
 80057d4:	61fb      	str	r3, [r7, #28]
 80057d6:	e005      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80057d8:	4b2d      	ldr	r3, [pc, #180]	; (8005890 <HAL_RCC_GetSysClockFreq+0x108>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	091b      	lsrs	r3, r3, #4
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80057e4:	4a2b      	ldr	r2, [pc, #172]	; (8005894 <HAL_RCC_GetSysClockFreq+0x10c>)
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10d      	bne.n	8005810 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057f8:	e00a      	b.n	8005810 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d102      	bne.n	8005806 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005800:	4b25      	ldr	r3, [pc, #148]	; (8005898 <HAL_RCC_GetSysClockFreq+0x110>)
 8005802:	61bb      	str	r3, [r7, #24]
 8005804:	e004      	b.n	8005810 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	2b08      	cmp	r3, #8
 800580a:	d101      	bne.n	8005810 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800580c:	4b23      	ldr	r3, [pc, #140]	; (800589c <HAL_RCC_GetSysClockFreq+0x114>)
 800580e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	2b0c      	cmp	r3, #12
 8005814:	d134      	bne.n	8005880 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005816:	4b1e      	ldr	r3, [pc, #120]	; (8005890 <HAL_RCC_GetSysClockFreq+0x108>)
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d003      	beq.n	800582e <HAL_RCC_GetSysClockFreq+0xa6>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b03      	cmp	r3, #3
 800582a:	d003      	beq.n	8005834 <HAL_RCC_GetSysClockFreq+0xac>
 800582c:	e005      	b.n	800583a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800582e:	4b1a      	ldr	r3, [pc, #104]	; (8005898 <HAL_RCC_GetSysClockFreq+0x110>)
 8005830:	617b      	str	r3, [r7, #20]
      break;
 8005832:	e005      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005834:	4b19      	ldr	r3, [pc, #100]	; (800589c <HAL_RCC_GetSysClockFreq+0x114>)
 8005836:	617b      	str	r3, [r7, #20]
      break;
 8005838:	e002      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	617b      	str	r3, [r7, #20]
      break;
 800583e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005840:	4b13      	ldr	r3, [pc, #76]	; (8005890 <HAL_RCC_GetSysClockFreq+0x108>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	091b      	lsrs	r3, r3, #4
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	3301      	adds	r3, #1
 800584c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800584e:	4b10      	ldr	r3, [pc, #64]	; (8005890 <HAL_RCC_GetSysClockFreq+0x108>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	0a1b      	lsrs	r3, r3, #8
 8005854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	fb03 f202 	mul.w	r2, r3, r2
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	fbb2 f3f3 	udiv	r3, r2, r3
 8005864:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005866:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <HAL_RCC_GetSysClockFreq+0x108>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	0e5b      	lsrs	r3, r3, #25
 800586c:	f003 0303 	and.w	r3, r3, #3
 8005870:	3301      	adds	r3, #1
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	fbb2 f3f3 	udiv	r3, r2, r3
 800587e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005880:	69bb      	ldr	r3, [r7, #24]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3724      	adds	r7, #36	; 0x24
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40021000 	.word	0x40021000
 8005894:	0800c150 	.word	0x0800c150
 8005898:	00f42400 	.word	0x00f42400
 800589c:	007a1200 	.word	0x007a1200

080058a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058a4:	4b03      	ldr	r3, [pc, #12]	; (80058b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80058a6:	681b      	ldr	r3, [r3, #0]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	20000340 	.word	0x20000340

080058b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80058bc:	f7ff fff0 	bl	80058a0 <HAL_RCC_GetHCLKFreq>
 80058c0:	4602      	mov	r2, r0
 80058c2:	4b06      	ldr	r3, [pc, #24]	; (80058dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	0a1b      	lsrs	r3, r3, #8
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	4904      	ldr	r1, [pc, #16]	; (80058e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058ce:	5ccb      	ldrb	r3, [r1, r3]
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058d8:	4618      	mov	r0, r3
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40021000 	.word	0x40021000
 80058e0:	0800c148 	.word	0x0800c148

080058e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80058e8:	f7ff ffda 	bl	80058a0 <HAL_RCC_GetHCLKFreq>
 80058ec:	4602      	mov	r2, r0
 80058ee:	4b06      	ldr	r3, [pc, #24]	; (8005908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	0adb      	lsrs	r3, r3, #11
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	4904      	ldr	r1, [pc, #16]	; (800590c <HAL_RCC_GetPCLK2Freq+0x28>)
 80058fa:	5ccb      	ldrb	r3, [r1, r3]
 80058fc:	f003 031f 	and.w	r3, r3, #31
 8005900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005904:	4618      	mov	r0, r3
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40021000 	.word	0x40021000
 800590c:	0800c148 	.word	0x0800c148

08005910 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	220f      	movs	r2, #15
 800591e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005920:	4b12      	ldr	r3, [pc, #72]	; (800596c <HAL_RCC_GetClockConfig+0x5c>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 0203 	and.w	r2, r3, #3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800592c:	4b0f      	ldr	r3, [pc, #60]	; (800596c <HAL_RCC_GetClockConfig+0x5c>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005938:	4b0c      	ldr	r3, [pc, #48]	; (800596c <HAL_RCC_GetClockConfig+0x5c>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005944:	4b09      	ldr	r3, [pc, #36]	; (800596c <HAL_RCC_GetClockConfig+0x5c>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	08db      	lsrs	r3, r3, #3
 800594a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005952:	4b07      	ldr	r3, [pc, #28]	; (8005970 <HAL_RCC_GetClockConfig+0x60>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0207 	and.w	r2, r3, #7
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	601a      	str	r2, [r3, #0]
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40021000 	.word	0x40021000
 8005970:	40022000 	.word	0x40022000

08005974 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800597c:	2300      	movs	r3, #0
 800597e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005980:	4b2a      	ldr	r3, [pc, #168]	; (8005a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800598c:	f7ff f9bc 	bl	8004d08 <HAL_PWREx_GetVoltageRange>
 8005990:	6178      	str	r0, [r7, #20]
 8005992:	e014      	b.n	80059be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005994:	4b25      	ldr	r3, [pc, #148]	; (8005a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005998:	4a24      	ldr	r2, [pc, #144]	; (8005a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800599a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800599e:	6593      	str	r3, [r2, #88]	; 0x58
 80059a0:	4b22      	ldr	r3, [pc, #136]	; (8005a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80059ac:	f7ff f9ac 	bl	8004d08 <HAL_PWREx_GetVoltageRange>
 80059b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80059b2:	4b1e      	ldr	r3, [pc, #120]	; (8005a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b6:	4a1d      	ldr	r2, [pc, #116]	; (8005a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c4:	d10b      	bne.n	80059de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b80      	cmp	r3, #128	; 0x80
 80059ca:	d919      	bls.n	8005a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2ba0      	cmp	r3, #160	; 0xa0
 80059d0:	d902      	bls.n	80059d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059d2:	2302      	movs	r3, #2
 80059d4:	613b      	str	r3, [r7, #16]
 80059d6:	e013      	b.n	8005a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059d8:	2301      	movs	r3, #1
 80059da:	613b      	str	r3, [r7, #16]
 80059dc:	e010      	b.n	8005a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b80      	cmp	r3, #128	; 0x80
 80059e2:	d902      	bls.n	80059ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80059e4:	2303      	movs	r3, #3
 80059e6:	613b      	str	r3, [r7, #16]
 80059e8:	e00a      	b.n	8005a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b80      	cmp	r3, #128	; 0x80
 80059ee:	d102      	bne.n	80059f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059f0:	2302      	movs	r3, #2
 80059f2:	613b      	str	r3, [r7, #16]
 80059f4:	e004      	b.n	8005a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b70      	cmp	r3, #112	; 0x70
 80059fa:	d101      	bne.n	8005a00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059fc:	2301      	movs	r3, #1
 80059fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a00:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f023 0207 	bic.w	r2, r3, #7
 8005a08:	4909      	ldr	r1, [pc, #36]	; (8005a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a10:	4b07      	ldr	r3, [pc, #28]	; (8005a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d001      	beq.n	8005a22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	40022000 	.word	0x40022000

08005a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a40:	2300      	movs	r3, #0
 8005a42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d041      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a58:	d02a      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005a5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a5e:	d824      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a64:	d008      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a6a:	d81e      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a74:	d010      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a76:	e018      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a78:	4b86      	ldr	r3, [pc, #536]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	4a85      	ldr	r2, [pc, #532]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a84:	e015      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3304      	adds	r3, #4
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fabb 	bl	8006008 <RCCEx_PLLSAI1_Config>
 8005a92:	4603      	mov	r3, r0
 8005a94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a96:	e00c      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3320      	adds	r3, #32
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fba6 	bl	80061f0 <RCCEx_PLLSAI2_Config>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005aa8:	e003      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	74fb      	strb	r3, [r7, #19]
      break;
 8005aae:	e000      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005ab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ab2:	7cfb      	ldrb	r3, [r7, #19]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10b      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ab8:	4b76      	ldr	r3, [pc, #472]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ac6:	4973      	ldr	r1, [pc, #460]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005ace:	e001      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad0:	7cfb      	ldrb	r3, [r7, #19]
 8005ad2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d041      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ae8:	d02a      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005aea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005aee:	d824      	bhi.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005af0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005af4:	d008      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005af6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005afa:	d81e      	bhi.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b04:	d010      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b06:	e018      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b08:	4b62      	ldr	r3, [pc, #392]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	4a61      	ldr	r2, [pc, #388]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b14:	e015      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 fa73 	bl	8006008 <RCCEx_PLLSAI1_Config>
 8005b22:	4603      	mov	r3, r0
 8005b24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b26:	e00c      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3320      	adds	r3, #32
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fb5e 	bl	80061f0 <RCCEx_PLLSAI2_Config>
 8005b34:	4603      	mov	r3, r0
 8005b36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b38:	e003      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	74fb      	strb	r3, [r7, #19]
      break;
 8005b3e:	e000      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005b40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b42:	7cfb      	ldrb	r3, [r7, #19]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10b      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b48:	4b52      	ldr	r3, [pc, #328]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b56:	494f      	ldr	r1, [pc, #316]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b5e:	e001      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b60:	7cfb      	ldrb	r3, [r7, #19]
 8005b62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 80a0 	beq.w	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b72:	2300      	movs	r3, #0
 8005b74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b76:	4b47      	ldr	r3, [pc, #284]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e000      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005b86:	2300      	movs	r3, #0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00d      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b8c:	4b41      	ldr	r3, [pc, #260]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b90:	4a40      	ldr	r2, [pc, #256]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b96:	6593      	str	r3, [r2, #88]	; 0x58
 8005b98:	4b3e      	ldr	r3, [pc, #248]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba0:	60bb      	str	r3, [r7, #8]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ba8:	4b3b      	ldr	r3, [pc, #236]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a3a      	ldr	r2, [pc, #232]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bb4:	f7fe fdae 	bl	8004714 <HAL_GetTick>
 8005bb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005bba:	e009      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bbc:	f7fe fdaa 	bl	8004714 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d902      	bls.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	74fb      	strb	r3, [r7, #19]
        break;
 8005bce:	e005      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005bd0:	4b31      	ldr	r3, [pc, #196]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0ef      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005bdc:	7cfb      	ldrb	r3, [r7, #19]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d15c      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005be2:	4b2c      	ldr	r3, [pc, #176]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01f      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d019      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c00:	4b24      	ldr	r3, [pc, #144]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c0c:	4b21      	ldr	r3, [pc, #132]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c12:	4a20      	ldr	r2, [pc, #128]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c1c:	4b1d      	ldr	r3, [pc, #116]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c22:	4a1c      	ldr	r2, [pc, #112]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c2c:	4a19      	ldr	r2, [pc, #100]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d016      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3e:	f7fe fd69 	bl	8004714 <HAL_GetTick>
 8005c42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c44:	e00b      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c46:	f7fe fd65 	bl	8004714 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d902      	bls.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	74fb      	strb	r3, [r7, #19]
            break;
 8005c5c:	e006      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c5e:	4b0d      	ldr	r3, [pc, #52]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0ec      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005c6c:	7cfb      	ldrb	r3, [r7, #19]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10c      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c72:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c82:	4904      	ldr	r1, [pc, #16]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c8a:	e009      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c8c:	7cfb      	ldrb	r3, [r7, #19]
 8005c8e:	74bb      	strb	r3, [r7, #18]
 8005c90:	e006      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005c92:	bf00      	nop
 8005c94:	40021000 	.word	0x40021000
 8005c98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c9c:	7cfb      	ldrb	r3, [r7, #19]
 8005c9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ca0:	7c7b      	ldrb	r3, [r7, #17]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d105      	bne.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ca6:	4b9e      	ldr	r3, [pc, #632]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005caa:	4a9d      	ldr	r2, [pc, #628]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cbe:	4b98      	ldr	r3, [pc, #608]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc4:	f023 0203 	bic.w	r2, r3, #3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	4994      	ldr	r1, [pc, #592]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00a      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ce0:	4b8f      	ldr	r3, [pc, #572]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce6:	f023 020c 	bic.w	r2, r3, #12
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cee:	498c      	ldr	r1, [pc, #560]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0304 	and.w	r3, r3, #4
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d02:	4b87      	ldr	r3, [pc, #540]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	4983      	ldr	r1, [pc, #524]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00a      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d24:	4b7e      	ldr	r3, [pc, #504]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d32:	497b      	ldr	r1, [pc, #492]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0310 	and.w	r3, r3, #16
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00a      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d46:	4b76      	ldr	r3, [pc, #472]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d54:	4972      	ldr	r1, [pc, #456]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0320 	and.w	r3, r3, #32
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00a      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d68:	4b6d      	ldr	r3, [pc, #436]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d76:	496a      	ldr	r1, [pc, #424]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d8a:	4b65      	ldr	r3, [pc, #404]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d98:	4961      	ldr	r1, [pc, #388]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dac:	4b5c      	ldr	r3, [pc, #368]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dba:	4959      	ldr	r1, [pc, #356]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dce:	4b54      	ldr	r3, [pc, #336]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ddc:	4950      	ldr	r1, [pc, #320]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00a      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005df0:	4b4b      	ldr	r3, [pc, #300]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfe:	4948      	ldr	r1, [pc, #288]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e12:	4b43      	ldr	r3, [pc, #268]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e20:	493f      	ldr	r1, [pc, #252]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d028      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e34:	4b3a      	ldr	r3, [pc, #232]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e42:	4937      	ldr	r1, [pc, #220]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e52:	d106      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e54:	4b32      	ldr	r3, [pc, #200]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	4a31      	ldr	r2, [pc, #196]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e5e:	60d3      	str	r3, [r2, #12]
 8005e60:	e011      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e6a:	d10c      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	2101      	movs	r1, #1
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 f8c8 	bl	8006008 <RCCEx_PLLSAI1_Config>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005e7c:	7cfb      	ldrb	r3, [r7, #19]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005e82:	7cfb      	ldrb	r3, [r7, #19]
 8005e84:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d028      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e92:	4b23      	ldr	r3, [pc, #140]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea0:	491f      	ldr	r1, [pc, #124]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eb0:	d106      	bne.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eb2:	4b1b      	ldr	r3, [pc, #108]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	4a1a      	ldr	r2, [pc, #104]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ebc:	60d3      	str	r3, [r2, #12]
 8005ebe:	e011      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ec8:	d10c      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	2101      	movs	r1, #1
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 f899 	bl	8006008 <RCCEx_PLLSAI1_Config>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005eda:	7cfb      	ldrb	r3, [r7, #19]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005ee0:	7cfb      	ldrb	r3, [r7, #19]
 8005ee2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d02b      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005efe:	4908      	ldr	r1, [pc, #32]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f0e:	d109      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f10:	4b03      	ldr	r3, [pc, #12]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	4a02      	ldr	r2, [pc, #8]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f1a:	60d3      	str	r3, [r2, #12]
 8005f1c:	e014      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005f1e:	bf00      	nop
 8005f20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f2c:	d10c      	bne.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	3304      	adds	r3, #4
 8005f32:	2101      	movs	r1, #1
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 f867 	bl	8006008 <RCCEx_PLLSAI1_Config>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f3e:	7cfb      	ldrb	r3, [r7, #19]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005f44:	7cfb      	ldrb	r3, [r7, #19]
 8005f46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d02f      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f54:	4b2b      	ldr	r3, [pc, #172]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f62:	4928      	ldr	r1, [pc, #160]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f72:	d10d      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3304      	adds	r3, #4
 8005f78:	2102      	movs	r1, #2
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 f844 	bl	8006008 <RCCEx_PLLSAI1_Config>
 8005f80:	4603      	mov	r3, r0
 8005f82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f84:	7cfb      	ldrb	r3, [r7, #19]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d014      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005f8a:	7cfb      	ldrb	r3, [r7, #19]
 8005f8c:	74bb      	strb	r3, [r7, #18]
 8005f8e:	e011      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f98:	d10c      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3320      	adds	r3, #32
 8005f9e:	2102      	movs	r1, #2
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 f925 	bl	80061f0 <RCCEx_PLLSAI2_Config>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005faa:	7cfb      	ldrb	r3, [r7, #19]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005fb0:	7cfb      	ldrb	r3, [r7, #19]
 8005fb2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00a      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005fc0:	4b10      	ldr	r3, [pc, #64]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fce:	490d      	ldr	r1, [pc, #52]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00b      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005fe2:	4b08      	ldr	r3, [pc, #32]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ff2:	4904      	ldr	r1, [pc, #16]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ffa:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40021000 	.word	0x40021000

08006008 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006016:	4b75      	ldr	r3, [pc, #468]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d018      	beq.n	8006054 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006022:	4b72      	ldr	r3, [pc, #456]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f003 0203 	and.w	r2, r3, #3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	429a      	cmp	r2, r3
 8006030:	d10d      	bne.n	800604e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
       ||
 8006036:	2b00      	cmp	r3, #0
 8006038:	d009      	beq.n	800604e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800603a:	4b6c      	ldr	r3, [pc, #432]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	091b      	lsrs	r3, r3, #4
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
       ||
 800604a:	429a      	cmp	r2, r3
 800604c:	d047      	beq.n	80060de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	73fb      	strb	r3, [r7, #15]
 8006052:	e044      	b.n	80060de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b03      	cmp	r3, #3
 800605a:	d018      	beq.n	800608e <RCCEx_PLLSAI1_Config+0x86>
 800605c:	2b03      	cmp	r3, #3
 800605e:	d825      	bhi.n	80060ac <RCCEx_PLLSAI1_Config+0xa4>
 8006060:	2b01      	cmp	r3, #1
 8006062:	d002      	beq.n	800606a <RCCEx_PLLSAI1_Config+0x62>
 8006064:	2b02      	cmp	r3, #2
 8006066:	d009      	beq.n	800607c <RCCEx_PLLSAI1_Config+0x74>
 8006068:	e020      	b.n	80060ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800606a:	4b60      	ldr	r3, [pc, #384]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d11d      	bne.n	80060b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800607a:	e01a      	b.n	80060b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800607c:	4b5b      	ldr	r3, [pc, #364]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006084:	2b00      	cmp	r3, #0
 8006086:	d116      	bne.n	80060b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800608c:	e013      	b.n	80060b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800608e:	4b57      	ldr	r3, [pc, #348]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10f      	bne.n	80060ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800609a:	4b54      	ldr	r3, [pc, #336]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d109      	bne.n	80060ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060aa:	e006      	b.n	80060ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	73fb      	strb	r3, [r7, #15]
      break;
 80060b0:	e004      	b.n	80060bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060b2:	bf00      	nop
 80060b4:	e002      	b.n	80060bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060b6:	bf00      	nop
 80060b8:	e000      	b.n	80060bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10d      	bne.n	80060de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80060c2:	4b4a      	ldr	r3, [pc, #296]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6819      	ldr	r1, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	430b      	orrs	r3, r1
 80060d8:	4944      	ldr	r1, [pc, #272]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80060de:	7bfb      	ldrb	r3, [r7, #15]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d17d      	bne.n	80061e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80060e4:	4b41      	ldr	r3, [pc, #260]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a40      	ldr	r2, [pc, #256]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060f0:	f7fe fb10 	bl	8004714 <HAL_GetTick>
 80060f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060f6:	e009      	b.n	800610c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060f8:	f7fe fb0c 	bl	8004714 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d902      	bls.n	800610c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	73fb      	strb	r3, [r7, #15]
        break;
 800610a:	e005      	b.n	8006118 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800610c:	4b37      	ldr	r3, [pc, #220]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1ef      	bne.n	80060f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d160      	bne.n	80061e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d111      	bne.n	8006148 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006124:	4b31      	ldr	r3, [pc, #196]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800612c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6892      	ldr	r2, [r2, #8]
 8006134:	0211      	lsls	r1, r2, #8
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	68d2      	ldr	r2, [r2, #12]
 800613a:	0912      	lsrs	r2, r2, #4
 800613c:	0452      	lsls	r2, r2, #17
 800613e:	430a      	orrs	r2, r1
 8006140:	492a      	ldr	r1, [pc, #168]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8006142:	4313      	orrs	r3, r2
 8006144:	610b      	str	r3, [r1, #16]
 8006146:	e027      	b.n	8006198 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d112      	bne.n	8006174 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800614e:	4b27      	ldr	r3, [pc, #156]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006156:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6892      	ldr	r2, [r2, #8]
 800615e:	0211      	lsls	r1, r2, #8
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6912      	ldr	r2, [r2, #16]
 8006164:	0852      	lsrs	r2, r2, #1
 8006166:	3a01      	subs	r2, #1
 8006168:	0552      	lsls	r2, r2, #21
 800616a:	430a      	orrs	r2, r1
 800616c:	491f      	ldr	r1, [pc, #124]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800616e:	4313      	orrs	r3, r2
 8006170:	610b      	str	r3, [r1, #16]
 8006172:	e011      	b.n	8006198 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006174:	4b1d      	ldr	r3, [pc, #116]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800617c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6892      	ldr	r2, [r2, #8]
 8006184:	0211      	lsls	r1, r2, #8
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	6952      	ldr	r2, [r2, #20]
 800618a:	0852      	lsrs	r2, r2, #1
 800618c:	3a01      	subs	r2, #1
 800618e:	0652      	lsls	r2, r2, #25
 8006190:	430a      	orrs	r2, r1
 8006192:	4916      	ldr	r1, [pc, #88]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8006194:	4313      	orrs	r3, r2
 8006196:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006198:	4b14      	ldr	r3, [pc, #80]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a13      	ldr	r2, [pc, #76]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800619e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a4:	f7fe fab6 	bl	8004714 <HAL_GetTick>
 80061a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061aa:	e009      	b.n	80061c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061ac:	f7fe fab2 	bl	8004714 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d902      	bls.n	80061c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	73fb      	strb	r3, [r7, #15]
          break;
 80061be:	e005      	b.n	80061cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061c0:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0ef      	beq.n	80061ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80061d2:	4b06      	ldr	r3, [pc, #24]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80061d4:	691a      	ldr	r2, [r3, #16]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	4904      	ldr	r1, [pc, #16]	; (80061ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	40021000 	.word	0x40021000

080061f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80061fe:	4b6a      	ldr	r3, [pc, #424]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d018      	beq.n	800623c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800620a:	4b67      	ldr	r3, [pc, #412]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f003 0203 	and.w	r2, r3, #3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d10d      	bne.n	8006236 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
       ||
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006222:	4b61      	ldr	r3, [pc, #388]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	091b      	lsrs	r3, r3, #4
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
       ||
 8006232:	429a      	cmp	r2, r3
 8006234:	d047      	beq.n	80062c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	73fb      	strb	r3, [r7, #15]
 800623a:	e044      	b.n	80062c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b03      	cmp	r3, #3
 8006242:	d018      	beq.n	8006276 <RCCEx_PLLSAI2_Config+0x86>
 8006244:	2b03      	cmp	r3, #3
 8006246:	d825      	bhi.n	8006294 <RCCEx_PLLSAI2_Config+0xa4>
 8006248:	2b01      	cmp	r3, #1
 800624a:	d002      	beq.n	8006252 <RCCEx_PLLSAI2_Config+0x62>
 800624c:	2b02      	cmp	r3, #2
 800624e:	d009      	beq.n	8006264 <RCCEx_PLLSAI2_Config+0x74>
 8006250:	e020      	b.n	8006294 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006252:	4b55      	ldr	r3, [pc, #340]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d11d      	bne.n	800629a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006262:	e01a      	b.n	800629a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006264:	4b50      	ldr	r3, [pc, #320]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800626c:	2b00      	cmp	r3, #0
 800626e:	d116      	bne.n	800629e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006274:	e013      	b.n	800629e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006276:	4b4c      	ldr	r3, [pc, #304]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10f      	bne.n	80062a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006282:	4b49      	ldr	r3, [pc, #292]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006292:	e006      	b.n	80062a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	73fb      	strb	r3, [r7, #15]
      break;
 8006298:	e004      	b.n	80062a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800629a:	bf00      	nop
 800629c:	e002      	b.n	80062a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800629e:	bf00      	nop
 80062a0:	e000      	b.n	80062a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80062a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10d      	bne.n	80062c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062aa:	4b3f      	ldr	r3, [pc, #252]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6819      	ldr	r1, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	430b      	orrs	r3, r1
 80062c0:	4939      	ldr	r1, [pc, #228]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d167      	bne.n	800639c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80062cc:	4b36      	ldr	r3, [pc, #216]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a35      	ldr	r2, [pc, #212]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062d8:	f7fe fa1c 	bl	8004714 <HAL_GetTick>
 80062dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062de:	e009      	b.n	80062f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062e0:	f7fe fa18 	bl	8004714 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d902      	bls.n	80062f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	73fb      	strb	r3, [r7, #15]
        break;
 80062f2:	e005      	b.n	8006300 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062f4:	4b2c      	ldr	r3, [pc, #176]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1ef      	bne.n	80062e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d14a      	bne.n	800639c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d111      	bne.n	8006330 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800630c:	4b26      	ldr	r3, [pc, #152]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6892      	ldr	r2, [r2, #8]
 800631c:	0211      	lsls	r1, r2, #8
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	68d2      	ldr	r2, [r2, #12]
 8006322:	0912      	lsrs	r2, r2, #4
 8006324:	0452      	lsls	r2, r2, #17
 8006326:	430a      	orrs	r2, r1
 8006328:	491f      	ldr	r1, [pc, #124]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800632a:	4313      	orrs	r3, r2
 800632c:	614b      	str	r3, [r1, #20]
 800632e:	e011      	b.n	8006354 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006330:	4b1d      	ldr	r3, [pc, #116]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006338:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	6892      	ldr	r2, [r2, #8]
 8006340:	0211      	lsls	r1, r2, #8
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6912      	ldr	r2, [r2, #16]
 8006346:	0852      	lsrs	r2, r2, #1
 8006348:	3a01      	subs	r2, #1
 800634a:	0652      	lsls	r2, r2, #25
 800634c:	430a      	orrs	r2, r1
 800634e:	4916      	ldr	r1, [pc, #88]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006350:	4313      	orrs	r3, r2
 8006352:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006354:	4b14      	ldr	r3, [pc, #80]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a13      	ldr	r2, [pc, #76]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800635a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800635e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006360:	f7fe f9d8 	bl	8004714 <HAL_GetTick>
 8006364:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006366:	e009      	b.n	800637c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006368:	f7fe f9d4 	bl	8004714 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d902      	bls.n	800637c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	73fb      	strb	r3, [r7, #15]
          break;
 800637a:	e005      	b.n	8006388 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d0ef      	beq.n	8006368 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d106      	bne.n	800639c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800638e:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006390:	695a      	ldr	r2, [r3, #20]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	4904      	ldr	r1, [pc, #16]	; (80063a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006398:	4313      	orrs	r3, r2
 800639a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	40021000 	.word	0x40021000

080063ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e095      	b.n	80064ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d108      	bne.n	80063d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063ce:	d009      	beq.n	80063e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	61da      	str	r2, [r3, #28]
 80063d6:	e005      	b.n	80063e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d106      	bne.n	8006404 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7fb fb38 	bl	8001a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800641a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006424:	d902      	bls.n	800642c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006426:	2300      	movs	r3, #0
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	e002      	b.n	8006432 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800642c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006430:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800643a:	d007      	beq.n	800644c <HAL_SPI_Init+0xa0>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006444:	d002      	beq.n	800644c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800645c:	431a      	orrs	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	431a      	orrs	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	431a      	orrs	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800647a:	431a      	orrs	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006484:	431a      	orrs	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648e:	ea42 0103 	orr.w	r1, r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006496:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	0c1b      	lsrs	r3, r3, #16
 80064a8:	f003 0204 	and.w	r2, r3, #4
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	431a      	orrs	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ba:	f003 0308 	and.w	r3, r3, #8
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80064c8:	ea42 0103 	orr.w	r1, r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b088      	sub	sp, #32
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	60f8      	str	r0, [r7, #12]
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	603b      	str	r3, [r7, #0]
 80064fe:	4613      	mov	r3, r2
 8006500:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800650c:	2b01      	cmp	r3, #1
 800650e:	d101      	bne.n	8006514 <HAL_SPI_Transmit+0x22>
 8006510:	2302      	movs	r3, #2
 8006512:	e15f      	b.n	80067d4 <HAL_SPI_Transmit+0x2e2>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800651c:	f7fe f8fa 	bl	8004714 <HAL_GetTick>
 8006520:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006522:	88fb      	ldrh	r3, [r7, #6]
 8006524:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b01      	cmp	r3, #1
 8006530:	d002      	beq.n	8006538 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006532:	2302      	movs	r3, #2
 8006534:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006536:	e148      	b.n	80067ca <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <HAL_SPI_Transmit+0x52>
 800653e:	88fb      	ldrh	r3, [r7, #6]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d102      	bne.n	800654a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006548:	e13f      	b.n	80067ca <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2203      	movs	r2, #3
 800654e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	88fa      	ldrh	r2, [r7, #6]
 8006562:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	88fa      	ldrh	r2, [r7, #6]
 8006568:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006594:	d10f      	bne.n	80065b6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c0:	2b40      	cmp	r3, #64	; 0x40
 80065c2:	d007      	beq.n	80065d4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065dc:	d94f      	bls.n	800667e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <HAL_SPI_Transmit+0xfa>
 80065e6:	8afb      	ldrh	r3, [r7, #22]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d142      	bne.n	8006672 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	881a      	ldrh	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fc:	1c9a      	adds	r2, r3, #2
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006606:	b29b      	uxth	r3, r3
 8006608:	3b01      	subs	r3, #1
 800660a:	b29a      	uxth	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006610:	e02f      	b.n	8006672 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b02      	cmp	r3, #2
 800661e:	d112      	bne.n	8006646 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006624:	881a      	ldrh	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	1c9a      	adds	r2, r3, #2
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006644:	e015      	b.n	8006672 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006646:	f7fe f865 	bl	8004714 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	429a      	cmp	r2, r3
 8006654:	d803      	bhi.n	800665e <HAL_SPI_Transmit+0x16c>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665c:	d102      	bne.n	8006664 <HAL_SPI_Transmit+0x172>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d106      	bne.n	8006672 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006670:	e0ab      	b.n	80067ca <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006676:	b29b      	uxth	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1ca      	bne.n	8006612 <HAL_SPI_Transmit+0x120>
 800667c:	e080      	b.n	8006780 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <HAL_SPI_Transmit+0x19a>
 8006686:	8afb      	ldrh	r3, [r7, #22]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d174      	bne.n	8006776 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006690:	b29b      	uxth	r3, r3
 8006692:	2b01      	cmp	r3, #1
 8006694:	d912      	bls.n	80066bc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	881a      	ldrh	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	1c9a      	adds	r2, r3, #2
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	3b02      	subs	r3, #2
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066ba:	e05c      	b.n	8006776 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	330c      	adds	r3, #12
 80066c6:	7812      	ldrb	r2, [r2, #0]
 80066c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80066e2:	e048      	b.n	8006776 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d12b      	bne.n	800674a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d912      	bls.n	8006722 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	881a      	ldrh	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670c:	1c9a      	adds	r2, r3, #2
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006716:	b29b      	uxth	r3, r3
 8006718:	3b02      	subs	r3, #2
 800671a:	b29a      	uxth	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006720:	e029      	b.n	8006776 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	330c      	adds	r3, #12
 800672c:	7812      	ldrb	r2, [r2, #0]
 800672e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006748:	e015      	b.n	8006776 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800674a:	f7fd ffe3 	bl	8004714 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d803      	bhi.n	8006762 <HAL_SPI_Transmit+0x270>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006760:	d102      	bne.n	8006768 <HAL_SPI_Transmit+0x276>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d106      	bne.n	8006776 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006774:	e029      	b.n	80067ca <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800677a:	b29b      	uxth	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1b1      	bne.n	80066e4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 fcf9 	bl	800717c <SPI_EndRxTxTransaction>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2220      	movs	r2, #32
 8006794:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10a      	bne.n	80067b4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800679e:	2300      	movs	r3, #0
 80067a0:	613b      	str	r3, [r7, #16]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	613b      	str	r3, [r7, #16]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	613b      	str	r3, [r7, #16]
 80067b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	77fb      	strb	r3, [r7, #31]
 80067c0:	e003      	b.n	80067ca <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80067d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3720      	adds	r7, #32
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af02      	add	r7, sp, #8
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	4613      	mov	r3, r2
 80067ea:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d002      	beq.n	8006802 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80067fc:	2302      	movs	r3, #2
 80067fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006800:	e11a      	b.n	8006a38 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800680a:	d112      	bne.n	8006832 <HAL_SPI_Receive+0x56>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10e      	bne.n	8006832 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2204      	movs	r2, #4
 8006818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800681c:	88fa      	ldrh	r2, [r7, #6]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	4613      	mov	r3, r2
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	68b9      	ldr	r1, [r7, #8]
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f000 f90e 	bl	8006a4a <HAL_SPI_TransmitReceive>
 800682e:	4603      	mov	r3, r0
 8006830:	e107      	b.n	8006a42 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006838:	2b01      	cmp	r3, #1
 800683a:	d101      	bne.n	8006840 <HAL_SPI_Receive+0x64>
 800683c:	2302      	movs	r3, #2
 800683e:	e100      	b.n	8006a42 <HAL_SPI_Receive+0x266>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006848:	f7fd ff64 	bl	8004714 <HAL_GetTick>
 800684c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <HAL_SPI_Receive+0x7e>
 8006854:	88fb      	ldrh	r3, [r7, #6]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d102      	bne.n	8006860 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800685e:	e0eb      	b.n	8006a38 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2204      	movs	r2, #4
 8006864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	88fa      	ldrh	r2, [r7, #6]
 8006878:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	88fa      	ldrh	r2, [r7, #6]
 8006880:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068aa:	d908      	bls.n	80068be <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068ba:	605a      	str	r2, [r3, #4]
 80068bc:	e007      	b.n	80068ce <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068cc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068d6:	d10f      	bne.n	80068f8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006902:	2b40      	cmp	r3, #64	; 0x40
 8006904:	d007      	beq.n	8006916 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006914:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800691e:	d86f      	bhi.n	8006a00 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006920:	e034      	b.n	800698c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b01      	cmp	r3, #1
 800692e:	d117      	bne.n	8006960 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f103 020c 	add.w	r2, r3, #12
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693c:	7812      	ldrb	r2, [r2, #0]
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006952:	b29b      	uxth	r3, r3
 8006954:	3b01      	subs	r3, #1
 8006956:	b29a      	uxth	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800695e:	e015      	b.n	800698c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006960:	f7fd fed8 	bl	8004714 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	429a      	cmp	r2, r3
 800696e:	d803      	bhi.n	8006978 <HAL_SPI_Receive+0x19c>
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006976:	d102      	bne.n	800697e <HAL_SPI_Receive+0x1a2>
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d106      	bne.n	800698c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800698a:	e055      	b.n	8006a38 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006992:	b29b      	uxth	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1c4      	bne.n	8006922 <HAL_SPI_Receive+0x146>
 8006998:	e038      	b.n	8006a0c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d115      	bne.n	80069d4 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	b292      	uxth	r2, r2
 80069b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	1c9a      	adds	r2, r3, #2
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80069d2:	e015      	b.n	8006a00 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069d4:	f7fd fe9e 	bl	8004714 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d803      	bhi.n	80069ec <HAL_SPI_Receive+0x210>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ea:	d102      	bne.n	80069f2 <HAL_SPI_Receive+0x216>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d106      	bne.n	8006a00 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80069fe:	e01b      	b.n	8006a38 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1c6      	bne.n	800699a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 fb5b 	bl	80070cc <SPI_EndRxTransaction>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	75fb      	strb	r3, [r7, #23]
 8006a2e:	e003      	b.n	8006a38 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b08a      	sub	sp, #40	; 0x28
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	607a      	str	r2, [r7, #4]
 8006a56:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <HAL_SPI_TransmitReceive+0x26>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e20a      	b.n	8006e86 <HAL_SPI_TransmitReceive+0x43c>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a78:	f7fd fe4c 	bl	8004714 <HAL_GetTick>
 8006a7c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a84:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006a8c:	887b      	ldrh	r3, [r7, #2]
 8006a8e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006a90:	887b      	ldrh	r3, [r7, #2]
 8006a92:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a94:	7efb      	ldrb	r3, [r7, #27]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d00e      	beq.n	8006ab8 <HAL_SPI_TransmitReceive+0x6e>
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aa0:	d106      	bne.n	8006ab0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d102      	bne.n	8006ab0 <HAL_SPI_TransmitReceive+0x66>
 8006aaa:	7efb      	ldrb	r3, [r7, #27]
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d003      	beq.n	8006ab8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ab6:	e1e0      	b.n	8006e7a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <HAL_SPI_TransmitReceive+0x80>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <HAL_SPI_TransmitReceive+0x80>
 8006ac4:	887b      	ldrh	r3, [r7, #2]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d103      	bne.n	8006ad2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ad0:	e1d3      	b.n	8006e7a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d003      	beq.n	8006ae6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2205      	movs	r2, #5
 8006ae2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	887a      	ldrh	r2, [r7, #2]
 8006af6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	887a      	ldrh	r2, [r7, #2]
 8006afe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	887a      	ldrh	r2, [r7, #2]
 8006b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	887a      	ldrh	r2, [r7, #2]
 8006b12:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b28:	d802      	bhi.n	8006b30 <HAL_SPI_TransmitReceive+0xe6>
 8006b2a:	8a3b      	ldrh	r3, [r7, #16]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d908      	bls.n	8006b42 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b3e:	605a      	str	r2, [r3, #4]
 8006b40:	e007      	b.n	8006b52 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b50:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5c:	2b40      	cmp	r3, #64	; 0x40
 8006b5e:	d007      	beq.n	8006b70 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b78:	f240 8081 	bls.w	8006c7e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d002      	beq.n	8006b8a <HAL_SPI_TransmitReceive+0x140>
 8006b84:	8a7b      	ldrh	r3, [r7, #18]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d16d      	bne.n	8006c66 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	881a      	ldrh	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	1c9a      	adds	r2, r3, #2
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bae:	e05a      	b.n	8006c66 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d11b      	bne.n	8006bf6 <HAL_SPI_TransmitReceive+0x1ac>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d016      	beq.n	8006bf6 <HAL_SPI_TransmitReceive+0x1ac>
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d113      	bne.n	8006bf6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd2:	881a      	ldrh	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bde:	1c9a      	adds	r2, r3, #2
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	3b01      	subs	r3, #1
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d11c      	bne.n	8006c3e <HAL_SPI_TransmitReceive+0x1f4>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d016      	beq.n	8006c3e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	b292      	uxth	r2, r2
 8006c1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	1c9a      	adds	r2, r3, #2
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c3e:	f7fd fd69 	bl	8004714 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d80b      	bhi.n	8006c66 <HAL_SPI_TransmitReceive+0x21c>
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c54:	d007      	beq.n	8006c66 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006c64:	e109      	b.n	8006e7a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d19f      	bne.n	8006bb0 <HAL_SPI_TransmitReceive+0x166>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d199      	bne.n	8006bb0 <HAL_SPI_TransmitReceive+0x166>
 8006c7c:	e0e3      	b.n	8006e46 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_SPI_TransmitReceive+0x244>
 8006c86:	8a7b      	ldrh	r3, [r7, #18]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	f040 80cf 	bne.w	8006e2c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d912      	bls.n	8006cbe <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9c:	881a      	ldrh	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca8:	1c9a      	adds	r2, r3, #2
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	3b02      	subs	r3, #2
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cbc:	e0b6      	b.n	8006e2c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	330c      	adds	r3, #12
 8006cc8:	7812      	ldrb	r2, [r2, #0]
 8006cca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ce4:	e0a2      	b.n	8006e2c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d134      	bne.n	8006d5e <HAL_SPI_TransmitReceive+0x314>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d02f      	beq.n	8006d5e <HAL_SPI_TransmitReceive+0x314>
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d12c      	bne.n	8006d5e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d912      	bls.n	8006d34 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d12:	881a      	ldrh	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1e:	1c9a      	adds	r2, r3, #2
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	3b02      	subs	r3, #2
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d32:	e012      	b.n	8006d5a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	330c      	adds	r3, #12
 8006d3e:	7812      	ldrb	r2, [r2, #0]
 8006d40:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	3b01      	subs	r3, #1
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d148      	bne.n	8006dfe <HAL_SPI_TransmitReceive+0x3b4>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d042      	beq.n	8006dfe <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d923      	bls.n	8006dcc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	b292      	uxth	r2, r2
 8006d90:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	1c9a      	adds	r2, r3, #2
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	3b02      	subs	r3, #2
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d81f      	bhi.n	8006dfa <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006dc8:	605a      	str	r2, [r3, #4]
 8006dca:	e016      	b.n	8006dfa <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f103 020c 	add.w	r2, r3, #12
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	7812      	ldrb	r2, [r2, #0]
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	3b01      	subs	r3, #1
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006dfe:	f7fd fc89 	bl	8004714 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d803      	bhi.n	8006e16 <HAL_SPI_TransmitReceive+0x3cc>
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e14:	d102      	bne.n	8006e1c <HAL_SPI_TransmitReceive+0x3d2>
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d107      	bne.n	8006e2c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006e2a:	e026      	b.n	8006e7a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f47f af57 	bne.w	8006ce6 <HAL_SPI_TransmitReceive+0x29c>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f47f af50 	bne.w	8006ce6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e46:	69fa      	ldr	r2, [r7, #28]
 8006e48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f000 f996 	bl	800717c <SPI_EndRxTxTransaction>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d005      	beq.n	8006e62 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d003      	beq.n	8006e72 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e70:	e003      	b.n	8006e7a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3728      	adds	r7, #40	; 0x28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
	...

08006e90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b088      	sub	sp, #32
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ea0:	f7fd fc38 	bl	8004714 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	1a9b      	subs	r3, r3, r2
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	4413      	add	r3, r2
 8006eae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006eb0:	f7fd fc30 	bl	8004714 <HAL_GetTick>
 8006eb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006eb6:	4b39      	ldr	r3, [pc, #228]	; (8006f9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	015b      	lsls	r3, r3, #5
 8006ebc:	0d1b      	lsrs	r3, r3, #20
 8006ebe:	69fa      	ldr	r2, [r7, #28]
 8006ec0:	fb02 f303 	mul.w	r3, r2, r3
 8006ec4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ec6:	e054      	b.n	8006f72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ece:	d050      	beq.n	8006f72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ed0:	f7fd fc20 	bl	8004714 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	69fa      	ldr	r2, [r7, #28]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d902      	bls.n	8006ee6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d13d      	bne.n	8006f62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ef4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006efe:	d111      	bne.n	8006f24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f08:	d004      	beq.n	8006f14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f12:	d107      	bne.n	8006f24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f2c:	d10f      	bne.n	8006f4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e017      	b.n	8006f92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	bf0c      	ite	eq
 8006f82:	2301      	moveq	r3, #1
 8006f84:	2300      	movne	r3, #0
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d19b      	bne.n	8006ec8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3720      	adds	r7, #32
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20000340 	.word	0x20000340

08006fa0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08a      	sub	sp, #40	; 0x28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006fb2:	f7fd fbaf 	bl	8004714 <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	1a9b      	subs	r3, r3, r2
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006fc2:	f7fd fba7 	bl	8004714 <HAL_GetTick>
 8006fc6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	330c      	adds	r3, #12
 8006fce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006fd0:	4b3d      	ldr	r3, [pc, #244]	; (80070c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	00da      	lsls	r2, r3, #3
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	0d1b      	lsrs	r3, r3, #20
 8006fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe2:	fb02 f303 	mul.w	r3, r2, r3
 8006fe6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006fe8:	e060      	b.n	80070ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006ff0:	d107      	bne.n	8007002 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d104      	bne.n	8007002 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007000:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007008:	d050      	beq.n	80070ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800700a:	f7fd fb83 	bl	8004714 <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007016:	429a      	cmp	r2, r3
 8007018:	d902      	bls.n	8007020 <SPI_WaitFifoStateUntilTimeout+0x80>
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	2b00      	cmp	r3, #0
 800701e:	d13d      	bne.n	800709c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800702e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007038:	d111      	bne.n	800705e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007042:	d004      	beq.n	800704e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800704c:	d107      	bne.n	800705e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800705c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007066:	d10f      	bne.n	8007088 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007086:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e010      	b.n	80070be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689a      	ldr	r2, [r3, #8]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	4013      	ands	r3, r2
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d196      	bne.n	8006fea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3728      	adds	r7, #40	; 0x28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20000340 	.word	0x20000340

080070cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af02      	add	r7, sp, #8
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070e0:	d111      	bne.n	8007106 <SPI_EndRxTransaction+0x3a>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ea:	d004      	beq.n	80070f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070f4:	d107      	bne.n	8007106 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007104:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2200      	movs	r2, #0
 800710e:	2180      	movs	r1, #128	; 0x80
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f7ff febd 	bl	8006e90 <SPI_WaitFlagStateUntilTimeout>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d007      	beq.n	800712c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007120:	f043 0220 	orr.w	r2, r3, #32
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e023      	b.n	8007174 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007134:	d11d      	bne.n	8007172 <SPI_EndRxTransaction+0xa6>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800713e:	d004      	beq.n	800714a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007148:	d113      	bne.n	8007172 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2200      	movs	r2, #0
 8007152:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f7ff ff22 	bl	8006fa0 <SPI_WaitFifoStateUntilTimeout>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d007      	beq.n	8007172 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007166:	f043 0220 	orr.w	r2, r3, #32
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e000      	b.n	8007174 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af02      	add	r7, sp, #8
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2200      	movs	r2, #0
 8007190:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f7ff ff03 	bl	8006fa0 <SPI_WaitFifoStateUntilTimeout>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d007      	beq.n	80071b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a4:	f043 0220 	orr.w	r2, r3, #32
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e027      	b.n	8007200 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2200      	movs	r2, #0
 80071b8:	2180      	movs	r1, #128	; 0x80
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f7ff fe68 	bl	8006e90 <SPI_WaitFlagStateUntilTimeout>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d007      	beq.n	80071d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ca:	f043 0220 	orr.w	r2, r3, #32
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e014      	b.n	8007200 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2200      	movs	r2, #0
 80071de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f7ff fedc 	bl	8006fa0 <SPI_WaitFifoStateUntilTimeout>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d007      	beq.n	80071fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071f2:	f043 0220 	orr.w	r2, r3, #32
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e000      	b.n	8007200 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e049      	b.n	80072ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d106      	bne.n	8007234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f841 	bl	80072b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3304      	adds	r3, #4
 8007244:	4619      	mov	r1, r3
 8007246:	4610      	mov	r0, r2
 8007248:	f000 f9da 	bl	8007600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b083      	sub	sp, #12
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80072be:	bf00      	nop
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
	...

080072cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d001      	beq.n	80072e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e04f      	b.n	8007384 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0201 	orr.w	r2, r2, #1
 80072fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a23      	ldr	r2, [pc, #140]	; (8007390 <HAL_TIM_Base_Start_IT+0xc4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d01d      	beq.n	8007342 <HAL_TIM_Base_Start_IT+0x76>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800730e:	d018      	beq.n	8007342 <HAL_TIM_Base_Start_IT+0x76>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a1f      	ldr	r2, [pc, #124]	; (8007394 <HAL_TIM_Base_Start_IT+0xc8>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d013      	beq.n	8007342 <HAL_TIM_Base_Start_IT+0x76>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a1e      	ldr	r2, [pc, #120]	; (8007398 <HAL_TIM_Base_Start_IT+0xcc>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00e      	beq.n	8007342 <HAL_TIM_Base_Start_IT+0x76>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a1c      	ldr	r2, [pc, #112]	; (800739c <HAL_TIM_Base_Start_IT+0xd0>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d009      	beq.n	8007342 <HAL_TIM_Base_Start_IT+0x76>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a1b      	ldr	r2, [pc, #108]	; (80073a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d004      	beq.n	8007342 <HAL_TIM_Base_Start_IT+0x76>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a19      	ldr	r2, [pc, #100]	; (80073a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d115      	bne.n	800736e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	4b17      	ldr	r3, [pc, #92]	; (80073a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800734a:	4013      	ands	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b06      	cmp	r3, #6
 8007352:	d015      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0xb4>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800735a:	d011      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0201 	orr.w	r2, r2, #1
 800736a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800736c:	e008      	b.n	8007380 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f042 0201 	orr.w	r2, r2, #1
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	e000      	b.n	8007382 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007380:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	40012c00 	.word	0x40012c00
 8007394:	40000400 	.word	0x40000400
 8007398:	40000800 	.word	0x40000800
 800739c:	40000c00 	.word	0x40000c00
 80073a0:	40013400 	.word	0x40013400
 80073a4:	40014000 	.word	0x40014000
 80073a8:	00010007 	.word	0x00010007

080073ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d020      	beq.n	8007410 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01b      	beq.n	8007410 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f06f 0202 	mvn.w	r2, #2
 80073e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	f003 0303 	and.w	r3, r3, #3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f8e4 	bl	80075c4 <HAL_TIM_IC_CaptureCallback>
 80073fc:	e005      	b.n	800740a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f8d6 	bl	80075b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f8e7 	bl	80075d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f003 0304 	and.w	r3, r3, #4
 8007416:	2b00      	cmp	r3, #0
 8007418:	d020      	beq.n	800745c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	2b00      	cmp	r3, #0
 8007422:	d01b      	beq.n	800745c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f06f 0204 	mvn.w	r2, #4
 800742c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f8be 	bl	80075c4 <HAL_TIM_IC_CaptureCallback>
 8007448:	e005      	b.n	8007456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f8b0 	bl	80075b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f8c1 	bl	80075d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f003 0308 	and.w	r3, r3, #8
 8007462:	2b00      	cmp	r3, #0
 8007464:	d020      	beq.n	80074a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f003 0308 	and.w	r3, r3, #8
 800746c:	2b00      	cmp	r3, #0
 800746e:	d01b      	beq.n	80074a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f06f 0208 	mvn.w	r2, #8
 8007478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2204      	movs	r2, #4
 800747e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	f003 0303 	and.w	r3, r3, #3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f898 	bl	80075c4 <HAL_TIM_IC_CaptureCallback>
 8007494:	e005      	b.n	80074a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f88a 	bl	80075b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f89b 	bl	80075d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f003 0310 	and.w	r3, r3, #16
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d020      	beq.n	80074f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f003 0310 	and.w	r3, r3, #16
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d01b      	beq.n	80074f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f06f 0210 	mvn.w	r2, #16
 80074c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2208      	movs	r2, #8
 80074ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f872 	bl	80075c4 <HAL_TIM_IC_CaptureCallback>
 80074e0:	e005      	b.n	80074ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f864 	bl	80075b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f875 	bl	80075d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00c      	beq.n	8007518 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d007      	beq.n	8007518 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f06f 0201 	mvn.w	r2, #1
 8007510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7fa fa58 	bl	80019c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00c      	beq.n	800753c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007528:	2b00      	cmp	r3, #0
 800752a:	d007      	beq.n	800753c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f906 	bl	8007748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00c      	beq.n	8007560 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800754c:	2b00      	cmp	r3, #0
 800754e:	d007      	beq.n	8007560 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f8fe 	bl	800775c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00c      	beq.n	8007584 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007570:	2b00      	cmp	r3, #0
 8007572:	d007      	beq.n	8007584 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800757c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f834 	bl	80075ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00c      	beq.n	80075a8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f003 0320 	and.w	r3, r3, #32
 8007594:	2b00      	cmp	r3, #0
 8007596:	d007      	beq.n	80075a8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f06f 0220 	mvn.w	r2, #32
 80075a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f8c6 	bl	8007734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075a8:	bf00      	nop
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a40      	ldr	r2, [pc, #256]	; (8007714 <TIM_Base_SetConfig+0x114>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d013      	beq.n	8007640 <TIM_Base_SetConfig+0x40>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800761e:	d00f      	beq.n	8007640 <TIM_Base_SetConfig+0x40>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a3d      	ldr	r2, [pc, #244]	; (8007718 <TIM_Base_SetConfig+0x118>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d00b      	beq.n	8007640 <TIM_Base_SetConfig+0x40>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a3c      	ldr	r2, [pc, #240]	; (800771c <TIM_Base_SetConfig+0x11c>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d007      	beq.n	8007640 <TIM_Base_SetConfig+0x40>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a3b      	ldr	r2, [pc, #236]	; (8007720 <TIM_Base_SetConfig+0x120>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d003      	beq.n	8007640 <TIM_Base_SetConfig+0x40>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a3a      	ldr	r2, [pc, #232]	; (8007724 <TIM_Base_SetConfig+0x124>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d108      	bne.n	8007652 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a2f      	ldr	r2, [pc, #188]	; (8007714 <TIM_Base_SetConfig+0x114>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d01f      	beq.n	800769a <TIM_Base_SetConfig+0x9a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007660:	d01b      	beq.n	800769a <TIM_Base_SetConfig+0x9a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a2c      	ldr	r2, [pc, #176]	; (8007718 <TIM_Base_SetConfig+0x118>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d017      	beq.n	800769a <TIM_Base_SetConfig+0x9a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a2b      	ldr	r2, [pc, #172]	; (800771c <TIM_Base_SetConfig+0x11c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d013      	beq.n	800769a <TIM_Base_SetConfig+0x9a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a2a      	ldr	r2, [pc, #168]	; (8007720 <TIM_Base_SetConfig+0x120>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d00f      	beq.n	800769a <TIM_Base_SetConfig+0x9a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a29      	ldr	r2, [pc, #164]	; (8007724 <TIM_Base_SetConfig+0x124>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d00b      	beq.n	800769a <TIM_Base_SetConfig+0x9a>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a28      	ldr	r2, [pc, #160]	; (8007728 <TIM_Base_SetConfig+0x128>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d007      	beq.n	800769a <TIM_Base_SetConfig+0x9a>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a27      	ldr	r2, [pc, #156]	; (800772c <TIM_Base_SetConfig+0x12c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d003      	beq.n	800769a <TIM_Base_SetConfig+0x9a>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a26      	ldr	r2, [pc, #152]	; (8007730 <TIM_Base_SetConfig+0x130>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d108      	bne.n	80076ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a10      	ldr	r2, [pc, #64]	; (8007714 <TIM_Base_SetConfig+0x114>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d00f      	beq.n	80076f8 <TIM_Base_SetConfig+0xf8>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a12      	ldr	r2, [pc, #72]	; (8007724 <TIM_Base_SetConfig+0x124>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d00b      	beq.n	80076f8 <TIM_Base_SetConfig+0xf8>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a11      	ldr	r2, [pc, #68]	; (8007728 <TIM_Base_SetConfig+0x128>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d007      	beq.n	80076f8 <TIM_Base_SetConfig+0xf8>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a10      	ldr	r2, [pc, #64]	; (800772c <TIM_Base_SetConfig+0x12c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d003      	beq.n	80076f8 <TIM_Base_SetConfig+0xf8>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a0f      	ldr	r2, [pc, #60]	; (8007730 <TIM_Base_SetConfig+0x130>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d103      	bne.n	8007700 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	691a      	ldr	r2, [r3, #16]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	615a      	str	r2, [r3, #20]
}
 8007706:	bf00      	nop
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	40012c00 	.word	0x40012c00
 8007718:	40000400 	.word	0x40000400
 800771c:	40000800 	.word	0x40000800
 8007720:	40000c00 	.word	0x40000c00
 8007724:	40013400 	.word	0x40013400
 8007728:	40014000 	.word	0x40014000
 800772c:	40014400 	.word	0x40014400
 8007730:	40014800 	.word	0x40014800

08007734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e040      	b.n	8007804 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d106      	bne.n	8007798 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7fa fc02 	bl	8001f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2224      	movs	r2, #36	; 0x24
 800779c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f022 0201 	bic.w	r2, r2, #1
 80077ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fb6a 	bl	8007e90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f8af 	bl	8007920 <UART_SetConfig>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d101      	bne.n	80077cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e01b      	b.n	8007804 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0201 	orr.w	r2, r2, #1
 80077fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fbe9 	bl	8007fd4 <UART_CheckIdleState>
 8007802:	4603      	mov	r3, r0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08a      	sub	sp, #40	; 0x28
 8007810:	af02      	add	r7, sp, #8
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	603b      	str	r3, [r7, #0]
 8007818:	4613      	mov	r3, r2
 800781a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007820:	2b20      	cmp	r3, #32
 8007822:	d178      	bne.n	8007916 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d002      	beq.n	8007830 <HAL_UART_Transmit+0x24>
 800782a:	88fb      	ldrh	r3, [r7, #6]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e071      	b.n	8007918 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2221      	movs	r2, #33	; 0x21
 8007840:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007842:	f7fc ff67 	bl	8004714 <HAL_GetTick>
 8007846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	88fa      	ldrh	r2, [r7, #6]
 800784c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	88fa      	ldrh	r2, [r7, #6]
 8007854:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007860:	d108      	bne.n	8007874 <HAL_UART_Transmit+0x68>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d104      	bne.n	8007874 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800786a:	2300      	movs	r3, #0
 800786c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	61bb      	str	r3, [r7, #24]
 8007872:	e003      	b.n	800787c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007878:	2300      	movs	r3, #0
 800787a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800787c:	e030      	b.n	80078e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2200      	movs	r2, #0
 8007886:	2180      	movs	r1, #128	; 0x80
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 fc4b 	bl	8008124 <UART_WaitOnFlagUntilTimeout>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d004      	beq.n	800789e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2220      	movs	r2, #32
 8007898:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e03c      	b.n	8007918 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10b      	bne.n	80078bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	881a      	ldrh	r2, [r3, #0]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078b0:	b292      	uxth	r2, r2
 80078b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	3302      	adds	r3, #2
 80078b8:	61bb      	str	r3, [r7, #24]
 80078ba:	e008      	b.n	80078ce <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	781a      	ldrb	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	b292      	uxth	r2, r2
 80078c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	3301      	adds	r3, #1
 80078cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	3b01      	subs	r3, #1
 80078d8:	b29a      	uxth	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1c8      	bne.n	800787e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2200      	movs	r2, #0
 80078f4:	2140      	movs	r1, #64	; 0x40
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 fc14 	bl	8008124 <UART_WaitOnFlagUntilTimeout>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d004      	beq.n	800790c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2220      	movs	r2, #32
 8007906:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e005      	b.n	8007918 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2220      	movs	r2, #32
 8007910:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	e000      	b.n	8007918 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007916:	2302      	movs	r3, #2
  }
}
 8007918:	4618      	mov	r0, r3
 800791a:	3720      	adds	r7, #32
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007924:	b08a      	sub	sp, #40	; 0x28
 8007926:	af00      	add	r7, sp, #0
 8007928:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	689a      	ldr	r2, [r3, #8]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	431a      	orrs	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	431a      	orrs	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	4313      	orrs	r3, r2
 8007946:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	4ba4      	ldr	r3, [pc, #656]	; (8007be0 <UART_SetConfig+0x2c0>)
 8007950:	4013      	ands	r3, r2
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	6812      	ldr	r2, [r2, #0]
 8007956:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007958:	430b      	orrs	r3, r1
 800795a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a99      	ldr	r2, [pc, #612]	; (8007be4 <UART_SetConfig+0x2c4>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d004      	beq.n	800798c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007988:	4313      	orrs	r3, r2
 800798a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800799c:	430a      	orrs	r2, r1
 800799e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a90      	ldr	r2, [pc, #576]	; (8007be8 <UART_SetConfig+0x2c8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d126      	bne.n	80079f8 <UART_SetConfig+0xd8>
 80079aa:	4b90      	ldr	r3, [pc, #576]	; (8007bec <UART_SetConfig+0x2cc>)
 80079ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b0:	f003 0303 	and.w	r3, r3, #3
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	d81b      	bhi.n	80079f0 <UART_SetConfig+0xd0>
 80079b8:	a201      	add	r2, pc, #4	; (adr r2, 80079c0 <UART_SetConfig+0xa0>)
 80079ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079be:	bf00      	nop
 80079c0:	080079d1 	.word	0x080079d1
 80079c4:	080079e1 	.word	0x080079e1
 80079c8:	080079d9 	.word	0x080079d9
 80079cc:	080079e9 	.word	0x080079e9
 80079d0:	2301      	movs	r3, #1
 80079d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079d6:	e116      	b.n	8007c06 <UART_SetConfig+0x2e6>
 80079d8:	2302      	movs	r3, #2
 80079da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079de:	e112      	b.n	8007c06 <UART_SetConfig+0x2e6>
 80079e0:	2304      	movs	r3, #4
 80079e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079e6:	e10e      	b.n	8007c06 <UART_SetConfig+0x2e6>
 80079e8:	2308      	movs	r3, #8
 80079ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079ee:	e10a      	b.n	8007c06 <UART_SetConfig+0x2e6>
 80079f0:	2310      	movs	r3, #16
 80079f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079f6:	e106      	b.n	8007c06 <UART_SetConfig+0x2e6>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a7c      	ldr	r2, [pc, #496]	; (8007bf0 <UART_SetConfig+0x2d0>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d138      	bne.n	8007a74 <UART_SetConfig+0x154>
 8007a02:	4b7a      	ldr	r3, [pc, #488]	; (8007bec <UART_SetConfig+0x2cc>)
 8007a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a08:	f003 030c 	and.w	r3, r3, #12
 8007a0c:	2b0c      	cmp	r3, #12
 8007a0e:	d82d      	bhi.n	8007a6c <UART_SetConfig+0x14c>
 8007a10:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <UART_SetConfig+0xf8>)
 8007a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a16:	bf00      	nop
 8007a18:	08007a4d 	.word	0x08007a4d
 8007a1c:	08007a6d 	.word	0x08007a6d
 8007a20:	08007a6d 	.word	0x08007a6d
 8007a24:	08007a6d 	.word	0x08007a6d
 8007a28:	08007a5d 	.word	0x08007a5d
 8007a2c:	08007a6d 	.word	0x08007a6d
 8007a30:	08007a6d 	.word	0x08007a6d
 8007a34:	08007a6d 	.word	0x08007a6d
 8007a38:	08007a55 	.word	0x08007a55
 8007a3c:	08007a6d 	.word	0x08007a6d
 8007a40:	08007a6d 	.word	0x08007a6d
 8007a44:	08007a6d 	.word	0x08007a6d
 8007a48:	08007a65 	.word	0x08007a65
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a52:	e0d8      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007a54:	2302      	movs	r3, #2
 8007a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a5a:	e0d4      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007a5c:	2304      	movs	r3, #4
 8007a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a62:	e0d0      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007a64:	2308      	movs	r3, #8
 8007a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a6a:	e0cc      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007a6c:	2310      	movs	r3, #16
 8007a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a72:	e0c8      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a5e      	ldr	r2, [pc, #376]	; (8007bf4 <UART_SetConfig+0x2d4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d125      	bne.n	8007aca <UART_SetConfig+0x1aa>
 8007a7e:	4b5b      	ldr	r3, [pc, #364]	; (8007bec <UART_SetConfig+0x2cc>)
 8007a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a88:	2b30      	cmp	r3, #48	; 0x30
 8007a8a:	d016      	beq.n	8007aba <UART_SetConfig+0x19a>
 8007a8c:	2b30      	cmp	r3, #48	; 0x30
 8007a8e:	d818      	bhi.n	8007ac2 <UART_SetConfig+0x1a2>
 8007a90:	2b20      	cmp	r3, #32
 8007a92:	d00a      	beq.n	8007aaa <UART_SetConfig+0x18a>
 8007a94:	2b20      	cmp	r3, #32
 8007a96:	d814      	bhi.n	8007ac2 <UART_SetConfig+0x1a2>
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d002      	beq.n	8007aa2 <UART_SetConfig+0x182>
 8007a9c:	2b10      	cmp	r3, #16
 8007a9e:	d008      	beq.n	8007ab2 <UART_SetConfig+0x192>
 8007aa0:	e00f      	b.n	8007ac2 <UART_SetConfig+0x1a2>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aa8:	e0ad      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007aaa:	2302      	movs	r3, #2
 8007aac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ab0:	e0a9      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007ab2:	2304      	movs	r3, #4
 8007ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ab8:	e0a5      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007aba:	2308      	movs	r3, #8
 8007abc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ac0:	e0a1      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007ac2:	2310      	movs	r3, #16
 8007ac4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ac8:	e09d      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a4a      	ldr	r2, [pc, #296]	; (8007bf8 <UART_SetConfig+0x2d8>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d125      	bne.n	8007b20 <UART_SetConfig+0x200>
 8007ad4:	4b45      	ldr	r3, [pc, #276]	; (8007bec <UART_SetConfig+0x2cc>)
 8007ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ada:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ade:	2bc0      	cmp	r3, #192	; 0xc0
 8007ae0:	d016      	beq.n	8007b10 <UART_SetConfig+0x1f0>
 8007ae2:	2bc0      	cmp	r3, #192	; 0xc0
 8007ae4:	d818      	bhi.n	8007b18 <UART_SetConfig+0x1f8>
 8007ae6:	2b80      	cmp	r3, #128	; 0x80
 8007ae8:	d00a      	beq.n	8007b00 <UART_SetConfig+0x1e0>
 8007aea:	2b80      	cmp	r3, #128	; 0x80
 8007aec:	d814      	bhi.n	8007b18 <UART_SetConfig+0x1f8>
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d002      	beq.n	8007af8 <UART_SetConfig+0x1d8>
 8007af2:	2b40      	cmp	r3, #64	; 0x40
 8007af4:	d008      	beq.n	8007b08 <UART_SetConfig+0x1e8>
 8007af6:	e00f      	b.n	8007b18 <UART_SetConfig+0x1f8>
 8007af8:	2300      	movs	r3, #0
 8007afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007afe:	e082      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007b00:	2302      	movs	r3, #2
 8007b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b06:	e07e      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007b08:	2304      	movs	r3, #4
 8007b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b0e:	e07a      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007b10:	2308      	movs	r3, #8
 8007b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b16:	e076      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007b18:	2310      	movs	r3, #16
 8007b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b1e:	e072      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a35      	ldr	r2, [pc, #212]	; (8007bfc <UART_SetConfig+0x2dc>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d12a      	bne.n	8007b80 <UART_SetConfig+0x260>
 8007b2a:	4b30      	ldr	r3, [pc, #192]	; (8007bec <UART_SetConfig+0x2cc>)
 8007b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b38:	d01a      	beq.n	8007b70 <UART_SetConfig+0x250>
 8007b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b3e:	d81b      	bhi.n	8007b78 <UART_SetConfig+0x258>
 8007b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b44:	d00c      	beq.n	8007b60 <UART_SetConfig+0x240>
 8007b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b4a:	d815      	bhi.n	8007b78 <UART_SetConfig+0x258>
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d003      	beq.n	8007b58 <UART_SetConfig+0x238>
 8007b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b54:	d008      	beq.n	8007b68 <UART_SetConfig+0x248>
 8007b56:	e00f      	b.n	8007b78 <UART_SetConfig+0x258>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b5e:	e052      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007b60:	2302      	movs	r3, #2
 8007b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b66:	e04e      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007b68:	2304      	movs	r3, #4
 8007b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b6e:	e04a      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007b70:	2308      	movs	r3, #8
 8007b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b76:	e046      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007b78:	2310      	movs	r3, #16
 8007b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b7e:	e042      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a17      	ldr	r2, [pc, #92]	; (8007be4 <UART_SetConfig+0x2c4>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d13a      	bne.n	8007c00 <UART_SetConfig+0x2e0>
 8007b8a:	4b18      	ldr	r3, [pc, #96]	; (8007bec <UART_SetConfig+0x2cc>)
 8007b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b98:	d01a      	beq.n	8007bd0 <UART_SetConfig+0x2b0>
 8007b9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b9e:	d81b      	bhi.n	8007bd8 <UART_SetConfig+0x2b8>
 8007ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ba4:	d00c      	beq.n	8007bc0 <UART_SetConfig+0x2a0>
 8007ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007baa:	d815      	bhi.n	8007bd8 <UART_SetConfig+0x2b8>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <UART_SetConfig+0x298>
 8007bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bb4:	d008      	beq.n	8007bc8 <UART_SetConfig+0x2a8>
 8007bb6:	e00f      	b.n	8007bd8 <UART_SetConfig+0x2b8>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bbe:	e022      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bc6:	e01e      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007bc8:	2304      	movs	r3, #4
 8007bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bce:	e01a      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007bd0:	2308      	movs	r3, #8
 8007bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bd6:	e016      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007bd8:	2310      	movs	r3, #16
 8007bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bde:	e012      	b.n	8007c06 <UART_SetConfig+0x2e6>
 8007be0:	efff69f3 	.word	0xefff69f3
 8007be4:	40008000 	.word	0x40008000
 8007be8:	40013800 	.word	0x40013800
 8007bec:	40021000 	.word	0x40021000
 8007bf0:	40004400 	.word	0x40004400
 8007bf4:	40004800 	.word	0x40004800
 8007bf8:	40004c00 	.word	0x40004c00
 8007bfc:	40005000 	.word	0x40005000
 8007c00:	2310      	movs	r3, #16
 8007c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a9f      	ldr	r2, [pc, #636]	; (8007e88 <UART_SetConfig+0x568>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d17a      	bne.n	8007d06 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d824      	bhi.n	8007c62 <UART_SetConfig+0x342>
 8007c18:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <UART_SetConfig+0x300>)
 8007c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1e:	bf00      	nop
 8007c20:	08007c45 	.word	0x08007c45
 8007c24:	08007c63 	.word	0x08007c63
 8007c28:	08007c4d 	.word	0x08007c4d
 8007c2c:	08007c63 	.word	0x08007c63
 8007c30:	08007c53 	.word	0x08007c53
 8007c34:	08007c63 	.word	0x08007c63
 8007c38:	08007c63 	.word	0x08007c63
 8007c3c:	08007c63 	.word	0x08007c63
 8007c40:	08007c5b 	.word	0x08007c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c44:	f7fd fe38 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 8007c48:	61f8      	str	r0, [r7, #28]
        break;
 8007c4a:	e010      	b.n	8007c6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c4c:	4b8f      	ldr	r3, [pc, #572]	; (8007e8c <UART_SetConfig+0x56c>)
 8007c4e:	61fb      	str	r3, [r7, #28]
        break;
 8007c50:	e00d      	b.n	8007c6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c52:	f7fd fd99 	bl	8005788 <HAL_RCC_GetSysClockFreq>
 8007c56:	61f8      	str	r0, [r7, #28]
        break;
 8007c58:	e009      	b.n	8007c6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c5e:	61fb      	str	r3, [r7, #28]
        break;
 8007c60:	e005      	b.n	8007c6e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007c6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 80fb 	beq.w	8007e6c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	005b      	lsls	r3, r3, #1
 8007c7e:	4413      	add	r3, r2
 8007c80:	69fa      	ldr	r2, [r7, #28]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d305      	bcc.n	8007c92 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c8c:	69fa      	ldr	r2, [r7, #28]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d903      	bls.n	8007c9a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007c98:	e0e8      	b.n	8007e6c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	461c      	mov	r4, r3
 8007ca0:	4615      	mov	r5, r2
 8007ca2:	f04f 0200 	mov.w	r2, #0
 8007ca6:	f04f 0300 	mov.w	r3, #0
 8007caa:	022b      	lsls	r3, r5, #8
 8007cac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007cb0:	0222      	lsls	r2, r4, #8
 8007cb2:	68f9      	ldr	r1, [r7, #12]
 8007cb4:	6849      	ldr	r1, [r1, #4]
 8007cb6:	0849      	lsrs	r1, r1, #1
 8007cb8:	2000      	movs	r0, #0
 8007cba:	4688      	mov	r8, r1
 8007cbc:	4681      	mov	r9, r0
 8007cbe:	eb12 0a08 	adds.w	sl, r2, r8
 8007cc2:	eb43 0b09 	adc.w	fp, r3, r9
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	603b      	str	r3, [r7, #0]
 8007cce:	607a      	str	r2, [r7, #4]
 8007cd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd4:	4650      	mov	r0, sl
 8007cd6:	4659      	mov	r1, fp
 8007cd8:	f7f8 fec0 	bl	8000a5c <__aeabi_uldivmod>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cea:	d308      	bcc.n	8007cfe <UART_SetConfig+0x3de>
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cf2:	d204      	bcs.n	8007cfe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	60da      	str	r2, [r3, #12]
 8007cfc:	e0b6      	b.n	8007e6c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007d04:	e0b2      	b.n	8007e6c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d0e:	d15e      	bne.n	8007dce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007d10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d828      	bhi.n	8007d6a <UART_SetConfig+0x44a>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <UART_SetConfig+0x400>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007d45 	.word	0x08007d45
 8007d24:	08007d4d 	.word	0x08007d4d
 8007d28:	08007d55 	.word	0x08007d55
 8007d2c:	08007d6b 	.word	0x08007d6b
 8007d30:	08007d5b 	.word	0x08007d5b
 8007d34:	08007d6b 	.word	0x08007d6b
 8007d38:	08007d6b 	.word	0x08007d6b
 8007d3c:	08007d6b 	.word	0x08007d6b
 8007d40:	08007d63 	.word	0x08007d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d44:	f7fd fdb8 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 8007d48:	61f8      	str	r0, [r7, #28]
        break;
 8007d4a:	e014      	b.n	8007d76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d4c:	f7fd fdca 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8007d50:	61f8      	str	r0, [r7, #28]
        break;
 8007d52:	e010      	b.n	8007d76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d54:	4b4d      	ldr	r3, [pc, #308]	; (8007e8c <UART_SetConfig+0x56c>)
 8007d56:	61fb      	str	r3, [r7, #28]
        break;
 8007d58:	e00d      	b.n	8007d76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d5a:	f7fd fd15 	bl	8005788 <HAL_RCC_GetSysClockFreq>
 8007d5e:	61f8      	str	r0, [r7, #28]
        break;
 8007d60:	e009      	b.n	8007d76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d66:	61fb      	str	r3, [r7, #28]
        break;
 8007d68:	e005      	b.n	8007d76 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007d74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d077      	beq.n	8007e6c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	005a      	lsls	r2, r3, #1
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	085b      	lsrs	r3, r3, #1
 8007d86:	441a      	add	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	2b0f      	cmp	r3, #15
 8007d96:	d916      	bls.n	8007dc6 <UART_SetConfig+0x4a6>
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d9e:	d212      	bcs.n	8007dc6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	f023 030f 	bic.w	r3, r3, #15
 8007da8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	085b      	lsrs	r3, r3, #1
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	8afb      	ldrh	r3, [r7, #22]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	8afa      	ldrh	r2, [r7, #22]
 8007dc2:	60da      	str	r2, [r3, #12]
 8007dc4:	e052      	b.n	8007e6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007dcc:	e04e      	b.n	8007e6c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007dce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dd2:	2b08      	cmp	r3, #8
 8007dd4:	d827      	bhi.n	8007e26 <UART_SetConfig+0x506>
 8007dd6:	a201      	add	r2, pc, #4	; (adr r2, 8007ddc <UART_SetConfig+0x4bc>)
 8007dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ddc:	08007e01 	.word	0x08007e01
 8007de0:	08007e09 	.word	0x08007e09
 8007de4:	08007e11 	.word	0x08007e11
 8007de8:	08007e27 	.word	0x08007e27
 8007dec:	08007e17 	.word	0x08007e17
 8007df0:	08007e27 	.word	0x08007e27
 8007df4:	08007e27 	.word	0x08007e27
 8007df8:	08007e27 	.word	0x08007e27
 8007dfc:	08007e1f 	.word	0x08007e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e00:	f7fd fd5a 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 8007e04:	61f8      	str	r0, [r7, #28]
        break;
 8007e06:	e014      	b.n	8007e32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e08:	f7fd fd6c 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8007e0c:	61f8      	str	r0, [r7, #28]
        break;
 8007e0e:	e010      	b.n	8007e32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e10:	4b1e      	ldr	r3, [pc, #120]	; (8007e8c <UART_SetConfig+0x56c>)
 8007e12:	61fb      	str	r3, [r7, #28]
        break;
 8007e14:	e00d      	b.n	8007e32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e16:	f7fd fcb7 	bl	8005788 <HAL_RCC_GetSysClockFreq>
 8007e1a:	61f8      	str	r0, [r7, #28]
        break;
 8007e1c:	e009      	b.n	8007e32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e22:	61fb      	str	r3, [r7, #28]
        break;
 8007e24:	e005      	b.n	8007e32 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007e30:	bf00      	nop
    }

    if (pclk != 0U)
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d019      	beq.n	8007e6c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	085a      	lsrs	r2, r3, #1
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	441a      	add	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	2b0f      	cmp	r3, #15
 8007e50:	d909      	bls.n	8007e66 <UART_SetConfig+0x546>
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e58:	d205      	bcs.n	8007e66 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	60da      	str	r2, [r3, #12]
 8007e64:	e002      	b.n	8007e6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007e78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3728      	adds	r7, #40	; 0x28
 8007e80:	46bd      	mov	sp, r7
 8007e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e86:	bf00      	nop
 8007e88:	40008000 	.word	0x40008000
 8007e8c:	00f42400 	.word	0x00f42400

08007e90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9c:	f003 0308 	and.w	r3, r3, #8
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00a      	beq.n	8007eba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee0:	f003 0302 	and.w	r3, r3, #2
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00a      	beq.n	8007efe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f02:	f003 0304 	and.w	r3, r3, #4
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	f003 0310 	and.w	r3, r3, #16
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00a      	beq.n	8007f42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f46:	f003 0320 	and.w	r3, r3, #32
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00a      	beq.n	8007f64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d01a      	beq.n	8007fa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f8e:	d10a      	bne.n	8007fa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00a      	beq.n	8007fc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	605a      	str	r2, [r3, #4]
  }
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b098      	sub	sp, #96	; 0x60
 8007fd8:	af02      	add	r7, sp, #8
 8007fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fe4:	f7fc fb96 	bl	8004714 <HAL_GetTick>
 8007fe8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0308 	and.w	r3, r3, #8
 8007ff4:	2b08      	cmp	r3, #8
 8007ff6:	d12e      	bne.n	8008056 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ff8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008000:	2200      	movs	r2, #0
 8008002:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f88c 	bl	8008124 <UART_WaitOnFlagUntilTimeout>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d021      	beq.n	8008056 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801a:	e853 3f00 	ldrex	r3, [r3]
 800801e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008026:	653b      	str	r3, [r7, #80]	; 0x50
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	461a      	mov	r2, r3
 800802e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008030:	647b      	str	r3, [r7, #68]	; 0x44
 8008032:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008034:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008036:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008038:	e841 2300 	strex	r3, r2, [r1]
 800803c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800803e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1e6      	bne.n	8008012 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2220      	movs	r2, #32
 8008048:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e062      	b.n	800811c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b04      	cmp	r3, #4
 8008062:	d149      	bne.n	80080f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800806c:	2200      	movs	r2, #0
 800806e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f856 	bl	8008124 <UART_WaitOnFlagUntilTimeout>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d03c      	beq.n	80080f8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	e853 3f00 	ldrex	r3, [r3]
 800808a:	623b      	str	r3, [r7, #32]
   return(result);
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	461a      	mov	r2, r3
 800809a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800809c:	633b      	str	r3, [r7, #48]	; 0x30
 800809e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080a4:	e841 2300 	strex	r3, r2, [r1]
 80080a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e6      	bne.n	800807e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	3308      	adds	r3, #8
 80080b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	e853 3f00 	ldrex	r3, [r3]
 80080be:	60fb      	str	r3, [r7, #12]
   return(result);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f023 0301 	bic.w	r3, r3, #1
 80080c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3308      	adds	r3, #8
 80080ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080d0:	61fa      	str	r2, [r7, #28]
 80080d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d4:	69b9      	ldr	r1, [r7, #24]
 80080d6:	69fa      	ldr	r2, [r7, #28]
 80080d8:	e841 2300 	strex	r3, r2, [r1]
 80080dc:	617b      	str	r3, [r7, #20]
   return(result);
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1e5      	bne.n	80080b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2220      	movs	r2, #32
 80080e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e011      	b.n	800811c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2220      	movs	r2, #32
 80080fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3758      	adds	r7, #88	; 0x58
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	603b      	str	r3, [r7, #0]
 8008130:	4613      	mov	r3, r2
 8008132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008134:	e049      	b.n	80081ca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813c:	d045      	beq.n	80081ca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800813e:	f7fc fae9 	bl	8004714 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	69ba      	ldr	r2, [r7, #24]
 800814a:	429a      	cmp	r2, r3
 800814c:	d302      	bcc.n	8008154 <UART_WaitOnFlagUntilTimeout+0x30>
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e048      	b.n	80081ea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0304 	and.w	r3, r3, #4
 8008162:	2b00      	cmp	r3, #0
 8008164:	d031      	beq.n	80081ca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69db      	ldr	r3, [r3, #28]
 800816c:	f003 0308 	and.w	r3, r3, #8
 8008170:	2b08      	cmp	r3, #8
 8008172:	d110      	bne.n	8008196 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2208      	movs	r2, #8
 800817a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f000 f838 	bl	80081f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2208      	movs	r2, #8
 8008186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e029      	b.n	80081ea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081a4:	d111      	bne.n	80081ca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f000 f81e 	bl	80081f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80081c6:	2303      	movs	r3, #3
 80081c8:	e00f      	b.n	80081ea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	69da      	ldr	r2, [r3, #28]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	4013      	ands	r3, r2
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	bf0c      	ite	eq
 80081da:	2301      	moveq	r3, #1
 80081dc:	2300      	movne	r3, #0
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	461a      	mov	r2, r3
 80081e2:	79fb      	ldrb	r3, [r7, #7]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d0a6      	beq.n	8008136 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b095      	sub	sp, #84	; 0x54
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008202:	e853 3f00 	ldrex	r3, [r3]
 8008206:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800820e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	461a      	mov	r2, r3
 8008216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008218:	643b      	str	r3, [r7, #64]	; 0x40
 800821a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800821e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008220:	e841 2300 	strex	r3, r2, [r1]
 8008224:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1e6      	bne.n	80081fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3308      	adds	r3, #8
 8008232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	e853 3f00 	ldrex	r3, [r3]
 800823a:	61fb      	str	r3, [r7, #28]
   return(result);
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	f023 0301 	bic.w	r3, r3, #1
 8008242:	64bb      	str	r3, [r7, #72]	; 0x48
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3308      	adds	r3, #8
 800824a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800824c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800824e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008254:	e841 2300 	strex	r3, r2, [r1]
 8008258:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e5      	bne.n	800822c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008264:	2b01      	cmp	r3, #1
 8008266:	d118      	bne.n	800829a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	60bb      	str	r3, [r7, #8]
   return(result);
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f023 0310 	bic.w	r3, r3, #16
 800827c:	647b      	str	r3, [r7, #68]	; 0x44
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008286:	61bb      	str	r3, [r7, #24]
 8008288:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828a:	6979      	ldr	r1, [r7, #20]
 800828c:	69ba      	ldr	r2, [r7, #24]
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	613b      	str	r3, [r7, #16]
   return(result);
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e6      	bne.n	8008268 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2220      	movs	r2, #32
 800829e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	669a      	str	r2, [r3, #104]	; 0x68
}
 80082ae:	bf00      	nop
 80082b0:	3754      	adds	r7, #84	; 0x54
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
	...

080082bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80082bc:	b580      	push	{r7, lr}
 80082be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80082c0:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <SysTick_Handler+0x1c>)
 80082c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80082c4:	f001 fe32 	bl	8009f2c <xTaskGetSchedulerState>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d001      	beq.n	80082d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80082ce:	f002 fd1b 	bl	800ad08 <xPortSysTickHandler>
  }
}
 80082d2:	bf00      	nop
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	e000e010 	.word	0xe000e010

080082dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	4a07      	ldr	r2, [pc, #28]	; (8008308 <vApplicationGetIdleTaskMemory+0x2c>)
 80082ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	4a06      	ldr	r2, [pc, #24]	; (800830c <vApplicationGetIdleTaskMemory+0x30>)
 80082f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2280      	movs	r2, #128	; 0x80
 80082f8:	601a      	str	r2, [r3, #0]
}
 80082fa:	bf00      	nop
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	200029c8 	.word	0x200029c8
 800830c:	20002a74 	.word	0x20002a74

08008310 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4a07      	ldr	r2, [pc, #28]	; (800833c <vApplicationGetTimerTaskMemory+0x2c>)
 8008320:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	4a06      	ldr	r2, [pc, #24]	; (8008340 <vApplicationGetTimerTaskMemory+0x30>)
 8008326:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800832e:	601a      	str	r2, [r3, #0]
}
 8008330:	bf00      	nop
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	20002c74 	.word	0x20002c74
 8008340:	20002d20 	.word	0x20002d20

08008344 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f103 0208 	add.w	r2, r3, #8
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f04f 32ff 	mov.w	r2, #4294967295
 800835c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f103 0208 	add.w	r2, r3, #8
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f103 0208 	add.w	r2, r3, #8
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008392:	bf00      	nop
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800839e:	b480      	push	{r7}
 80083a0:	b085      	sub	sp, #20
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	689a      	ldr	r2, [r3, #8]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	683a      	ldr	r2, [r7, #0]
 80083c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	1c5a      	adds	r2, r3, #1
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	601a      	str	r2, [r3, #0]
}
 80083da:	bf00      	nop
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083e6:	b480      	push	{r7}
 80083e8:	b085      	sub	sp, #20
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fc:	d103      	bne.n	8008406 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	60fb      	str	r3, [r7, #12]
 8008404:	e00c      	b.n	8008420 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	3308      	adds	r3, #8
 800840a:	60fb      	str	r3, [r7, #12]
 800840c:	e002      	b.n	8008414 <vListInsert+0x2e>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	60fb      	str	r3, [r7, #12]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	429a      	cmp	r2, r3
 800841e:	d2f6      	bcs.n	800840e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	1c5a      	adds	r2, r3, #1
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	601a      	str	r2, [r3, #0]
}
 800844c:	bf00      	nop
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	6892      	ldr	r2, [r2, #8]
 800846e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	6852      	ldr	r2, [r2, #4]
 8008478:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	429a      	cmp	r2, r3
 8008482:	d103      	bne.n	800848c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689a      	ldr	r2, [r3, #8]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	1e5a      	subs	r2, r3, #1
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10a      	bne.n	80084d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80084d2:	bf00      	nop
 80084d4:	e7fe      	b.n	80084d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80084d6:	f002 fb85 	bl	800abe4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e2:	68f9      	ldr	r1, [r7, #12]
 80084e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80084e6:	fb01 f303 	mul.w	r3, r1, r3
 80084ea:	441a      	add	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008506:	3b01      	subs	r3, #1
 8008508:	68f9      	ldr	r1, [r7, #12]
 800850a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800850c:	fb01 f303 	mul.w	r3, r1, r3
 8008510:	441a      	add	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	22ff      	movs	r2, #255	; 0xff
 800851a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	22ff      	movs	r2, #255	; 0xff
 8008522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d114      	bne.n	8008556 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d01a      	beq.n	800856a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	3310      	adds	r3, #16
 8008538:	4618      	mov	r0, r3
 800853a:	f001 fb35 	bl	8009ba8 <xTaskRemoveFromEventList>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d012      	beq.n	800856a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008544:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <xQueueGenericReset+0xcc>)
 8008546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	e009      	b.n	800856a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3310      	adds	r3, #16
 800855a:	4618      	mov	r0, r3
 800855c:	f7ff fef2 	bl	8008344 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	3324      	adds	r3, #36	; 0x24
 8008564:	4618      	mov	r0, r3
 8008566:	f7ff feed 	bl	8008344 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800856a:	f002 fb6b 	bl	800ac44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800856e:	2301      	movs	r3, #1
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	e000ed04 	.word	0xe000ed04

0800857c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08e      	sub	sp, #56	; 0x38
 8008580:	af02      	add	r7, sp, #8
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10a      	bne.n	80085a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085a2:	bf00      	nop
 80085a4:	e7fe      	b.n	80085a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10a      	bne.n	80085c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80085ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085be:	bf00      	nop
 80085c0:	e7fe      	b.n	80085c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <xQueueGenericCreateStatic+0x52>
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <xQueueGenericCreateStatic+0x56>
 80085ce:	2301      	movs	r3, #1
 80085d0:	e000      	b.n	80085d4 <xQueueGenericCreateStatic+0x58>
 80085d2:	2300      	movs	r3, #0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10a      	bne.n	80085ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80085d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	623b      	str	r3, [r7, #32]
}
 80085ea:	bf00      	nop
 80085ec:	e7fe      	b.n	80085ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d102      	bne.n	80085fa <xQueueGenericCreateStatic+0x7e>
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <xQueueGenericCreateStatic+0x82>
 80085fa:	2301      	movs	r3, #1
 80085fc:	e000      	b.n	8008600 <xQueueGenericCreateStatic+0x84>
 80085fe:	2300      	movs	r3, #0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10a      	bne.n	800861a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	61fb      	str	r3, [r7, #28]
}
 8008616:	bf00      	nop
 8008618:	e7fe      	b.n	8008618 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800861a:	2350      	movs	r3, #80	; 0x50
 800861c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2b50      	cmp	r3, #80	; 0x50
 8008622:	d00a      	beq.n	800863a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	61bb      	str	r3, [r7, #24]
}
 8008636:	bf00      	nop
 8008638:	e7fe      	b.n	8008638 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800863a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00d      	beq.n	8008662 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008648:	2201      	movs	r2, #1
 800864a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800864e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	4613      	mov	r3, r2
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	68b9      	ldr	r1, [r7, #8]
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 f83f 	bl	80086e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008664:	4618      	mov	r0, r3
 8008666:	3730      	adds	r7, #48	; 0x30
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08a      	sub	sp, #40	; 0x28
 8008670:	af02      	add	r7, sp, #8
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	4613      	mov	r3, r2
 8008678:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10a      	bne.n	8008696 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	613b      	str	r3, [r7, #16]
}
 8008692:	bf00      	nop
 8008694:	e7fe      	b.n	8008694 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	fb02 f303 	mul.w	r3, r2, r3
 800869e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	3350      	adds	r3, #80	; 0x50
 80086a4:	4618      	mov	r0, r3
 80086a6:	f002 fbbf 	bl	800ae28 <pvPortMalloc>
 80086aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d011      	beq.n	80086d6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	3350      	adds	r3, #80	; 0x50
 80086ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086c4:	79fa      	ldrb	r2, [r7, #7]
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	4613      	mov	r3, r2
 80086cc:	697a      	ldr	r2, [r7, #20]
 80086ce:	68b9      	ldr	r1, [r7, #8]
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 f805 	bl	80086e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086d6:	69bb      	ldr	r3, [r7, #24]
	}
 80086d8:	4618      	mov	r0, r3
 80086da:	3720      	adds	r7, #32
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d103      	bne.n	80086fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	e002      	b.n	8008702 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800870e:	2101      	movs	r1, #1
 8008710:	69b8      	ldr	r0, [r7, #24]
 8008712:	f7ff fecb 	bl	80084ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	78fa      	ldrb	r2, [r7, #3]
 800871a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800871e:	bf00      	nop
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
	...

08008728 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08e      	sub	sp, #56	; 0x38
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
 8008734:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008736:	2300      	movs	r3, #0
 8008738:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10a      	bne.n	800875a <xQueueGenericSend+0x32>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008756:	bf00      	nop
 8008758:	e7fe      	b.n	8008758 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d103      	bne.n	8008768 <xQueueGenericSend+0x40>
 8008760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <xQueueGenericSend+0x44>
 8008768:	2301      	movs	r3, #1
 800876a:	e000      	b.n	800876e <xQueueGenericSend+0x46>
 800876c:	2300      	movs	r3, #0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10a      	bne.n	8008788 <xQueueGenericSend+0x60>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008784:	bf00      	nop
 8008786:	e7fe      	b.n	8008786 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	2b02      	cmp	r3, #2
 800878c:	d103      	bne.n	8008796 <xQueueGenericSend+0x6e>
 800878e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008792:	2b01      	cmp	r3, #1
 8008794:	d101      	bne.n	800879a <xQueueGenericSend+0x72>
 8008796:	2301      	movs	r3, #1
 8008798:	e000      	b.n	800879c <xQueueGenericSend+0x74>
 800879a:	2300      	movs	r3, #0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	623b      	str	r3, [r7, #32]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087b6:	f001 fbb9 	bl	8009f2c <xTaskGetSchedulerState>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d102      	bne.n	80087c6 <xQueueGenericSend+0x9e>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <xQueueGenericSend+0xa2>
 80087c6:	2301      	movs	r3, #1
 80087c8:	e000      	b.n	80087cc <xQueueGenericSend+0xa4>
 80087ca:	2300      	movs	r3, #0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10a      	bne.n	80087e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	61fb      	str	r3, [r7, #28]
}
 80087e2:	bf00      	nop
 80087e4:	e7fe      	b.n	80087e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087e6:	f002 f9fd 	bl	800abe4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d302      	bcc.n	80087fc <xQueueGenericSend+0xd4>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d129      	bne.n	8008850 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087fc:	683a      	ldr	r2, [r7, #0]
 80087fe:	68b9      	ldr	r1, [r7, #8]
 8008800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008802:	f000 fbbb 	bl	8008f7c <prvCopyDataToQueue>
 8008806:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880c:	2b00      	cmp	r3, #0
 800880e:	d010      	beq.n	8008832 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008812:	3324      	adds	r3, #36	; 0x24
 8008814:	4618      	mov	r0, r3
 8008816:	f001 f9c7 	bl	8009ba8 <xTaskRemoveFromEventList>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d013      	beq.n	8008848 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008820:	4b3f      	ldr	r3, [pc, #252]	; (8008920 <xQueueGenericSend+0x1f8>)
 8008822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	e00a      	b.n	8008848 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008834:	2b00      	cmp	r3, #0
 8008836:	d007      	beq.n	8008848 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008838:	4b39      	ldr	r3, [pc, #228]	; (8008920 <xQueueGenericSend+0x1f8>)
 800883a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	f3bf 8f4f 	dsb	sy
 8008844:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008848:	f002 f9fc 	bl	800ac44 <vPortExitCritical>
				return pdPASS;
 800884c:	2301      	movs	r3, #1
 800884e:	e063      	b.n	8008918 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d103      	bne.n	800885e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008856:	f002 f9f5 	bl	800ac44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800885a:	2300      	movs	r3, #0
 800885c:	e05c      	b.n	8008918 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800885e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008860:	2b00      	cmp	r3, #0
 8008862:	d106      	bne.n	8008872 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008864:	f107 0314 	add.w	r3, r7, #20
 8008868:	4618      	mov	r0, r3
 800886a:	f001 fa01 	bl	8009c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800886e:	2301      	movs	r3, #1
 8008870:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008872:	f002 f9e7 	bl	800ac44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008876:	f000 ff51 	bl	800971c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800887a:	f002 f9b3 	bl	800abe4 <vPortEnterCritical>
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008884:	b25b      	sxtb	r3, r3
 8008886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888a:	d103      	bne.n	8008894 <xQueueGenericSend+0x16c>
 800888c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800889a:	b25b      	sxtb	r3, r3
 800889c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a0:	d103      	bne.n	80088aa <xQueueGenericSend+0x182>
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088aa:	f002 f9cb 	bl	800ac44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088ae:	1d3a      	adds	r2, r7, #4
 80088b0:	f107 0314 	add.w	r3, r7, #20
 80088b4:	4611      	mov	r1, r2
 80088b6:	4618      	mov	r0, r3
 80088b8:	f001 f9f0 	bl	8009c9c <xTaskCheckForTimeOut>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d124      	bne.n	800890c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088c4:	f000 fc52 	bl	800916c <prvIsQueueFull>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d018      	beq.n	8008900 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d0:	3310      	adds	r3, #16
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	4611      	mov	r1, r2
 80088d6:	4618      	mov	r0, r3
 80088d8:	f001 f916 	bl	8009b08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80088dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088de:	f000 fbdd 	bl	800909c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80088e2:	f000 ff29 	bl	8009738 <xTaskResumeAll>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f47f af7c 	bne.w	80087e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80088ee:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <xQueueGenericSend+0x1f8>)
 80088f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088f4:	601a      	str	r2, [r3, #0]
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	e772      	b.n	80087e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008902:	f000 fbcb 	bl	800909c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008906:	f000 ff17 	bl	8009738 <xTaskResumeAll>
 800890a:	e76c      	b.n	80087e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800890c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800890e:	f000 fbc5 	bl	800909c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008912:	f000 ff11 	bl	8009738 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008916:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008918:	4618      	mov	r0, r3
 800891a:	3738      	adds	r7, #56	; 0x38
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	e000ed04 	.word	0xe000ed04

08008924 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b090      	sub	sp, #64	; 0x40
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10a      	bne.n	8008952 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800893c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800894e:	bf00      	nop
 8008950:	e7fe      	b.n	8008950 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d103      	bne.n	8008960 <xQueueGenericSendFromISR+0x3c>
 8008958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <xQueueGenericSendFromISR+0x40>
 8008960:	2301      	movs	r3, #1
 8008962:	e000      	b.n	8008966 <xQueueGenericSendFromISR+0x42>
 8008964:	2300      	movs	r3, #0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10a      	bne.n	8008980 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800896a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800897c:	bf00      	nop
 800897e:	e7fe      	b.n	800897e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2b02      	cmp	r3, #2
 8008984:	d103      	bne.n	800898e <xQueueGenericSendFromISR+0x6a>
 8008986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898a:	2b01      	cmp	r3, #1
 800898c:	d101      	bne.n	8008992 <xQueueGenericSendFromISR+0x6e>
 800898e:	2301      	movs	r3, #1
 8008990:	e000      	b.n	8008994 <xQueueGenericSendFromISR+0x70>
 8008992:	2300      	movs	r3, #0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10a      	bne.n	80089ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	623b      	str	r3, [r7, #32]
}
 80089aa:	bf00      	nop
 80089ac:	e7fe      	b.n	80089ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089ae:	f002 f9fb 	bl	800ada8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089b2:	f3ef 8211 	mrs	r2, BASEPRI
 80089b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	61fa      	str	r2, [r7, #28]
 80089c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d302      	bcc.n	80089e0 <xQueueGenericSendFromISR+0xbc>
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d12f      	bne.n	8008a40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	68b9      	ldr	r1, [r7, #8]
 80089f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089f6:	f000 fac1 	bl	8008f7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80089fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a02:	d112      	bne.n	8008a2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d016      	beq.n	8008a3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0e:	3324      	adds	r3, #36	; 0x24
 8008a10:	4618      	mov	r0, r3
 8008a12:	f001 f8c9 	bl	8009ba8 <xTaskRemoveFromEventList>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00e      	beq.n	8008a3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00b      	beq.n	8008a3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	601a      	str	r2, [r3, #0]
 8008a28:	e007      	b.n	8008a3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a2e:	3301      	adds	r3, #1
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	b25a      	sxtb	r2, r3
 8008a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008a3e:	e001      	b.n	8008a44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a40:	2300      	movs	r3, #0
 8008a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a46:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3740      	adds	r7, #64	; 0x40
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b08e      	sub	sp, #56	; 0x38
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10a      	bne.n	8008a84 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	623b      	str	r3, [r7, #32]
}
 8008a80:	bf00      	nop
 8008a82:	e7fe      	b.n	8008a82 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00a      	beq.n	8008aa2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a90:	f383 8811 	msr	BASEPRI, r3
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	61fb      	str	r3, [r7, #28]
}
 8008a9e:	bf00      	nop
 8008aa0:	e7fe      	b.n	8008aa0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d103      	bne.n	8008ab2 <xQueueGiveFromISR+0x58>
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <xQueueGiveFromISR+0x5c>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e000      	b.n	8008ab8 <xQueueGiveFromISR+0x5e>
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10a      	bne.n	8008ad2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	61bb      	str	r3, [r7, #24]
}
 8008ace:	bf00      	nop
 8008ad0:	e7fe      	b.n	8008ad0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ad2:	f002 f969 	bl	800ada8 <vPortValidateInterruptPriority>
	__asm volatile
 8008ad6:	f3ef 8211 	mrs	r2, BASEPRI
 8008ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	617a      	str	r2, [r7, #20]
 8008aec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008aee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008af0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d22b      	bcs.n	8008b5a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0e:	1c5a      	adds	r2, r3, #1
 8008b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b12:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1c:	d112      	bne.n	8008b44 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d016      	beq.n	8008b54 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b28:	3324      	adds	r3, #36	; 0x24
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f001 f83c 	bl	8009ba8 <xTaskRemoveFromEventList>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00e      	beq.n	8008b54 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00b      	beq.n	8008b54 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	601a      	str	r2, [r3, #0]
 8008b42:	e007      	b.n	8008b54 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b48:	3301      	adds	r3, #1
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	b25a      	sxtb	r2, r3
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b54:	2301      	movs	r3, #1
 8008b56:	637b      	str	r3, [r7, #52]	; 0x34
 8008b58:	e001      	b.n	8008b5e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b60:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f383 8811 	msr	BASEPRI, r3
}
 8008b68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3738      	adds	r7, #56	; 0x38
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b08c      	sub	sp, #48	; 0x30
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b80:	2300      	movs	r3, #0
 8008b82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d10a      	bne.n	8008ba4 <xQueueReceive+0x30>
	__asm volatile
 8008b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	623b      	str	r3, [r7, #32]
}
 8008ba0:	bf00      	nop
 8008ba2:	e7fe      	b.n	8008ba2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d103      	bne.n	8008bb2 <xQueueReceive+0x3e>
 8008baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d101      	bne.n	8008bb6 <xQueueReceive+0x42>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e000      	b.n	8008bb8 <xQueueReceive+0x44>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10a      	bne.n	8008bd2 <xQueueReceive+0x5e>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	61fb      	str	r3, [r7, #28]
}
 8008bce:	bf00      	nop
 8008bd0:	e7fe      	b.n	8008bd0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bd2:	f001 f9ab 	bl	8009f2c <xTaskGetSchedulerState>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d102      	bne.n	8008be2 <xQueueReceive+0x6e>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d101      	bne.n	8008be6 <xQueueReceive+0x72>
 8008be2:	2301      	movs	r3, #1
 8008be4:	e000      	b.n	8008be8 <xQueueReceive+0x74>
 8008be6:	2300      	movs	r3, #0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10a      	bne.n	8008c02 <xQueueReceive+0x8e>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	61bb      	str	r3, [r7, #24]
}
 8008bfe:	bf00      	nop
 8008c00:	e7fe      	b.n	8008c00 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c02:	f001 ffef 	bl	800abe4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d01f      	beq.n	8008c52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c12:	68b9      	ldr	r1, [r7, #8]
 8008c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c16:	f000 fa1b 	bl	8009050 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	1e5a      	subs	r2, r3, #1
 8008c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00f      	beq.n	8008c4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2c:	3310      	adds	r3, #16
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 ffba 	bl	8009ba8 <xTaskRemoveFromEventList>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d007      	beq.n	8008c4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c3a:	4b3d      	ldr	r3, [pc, #244]	; (8008d30 <xQueueReceive+0x1bc>)
 8008c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c40:	601a      	str	r2, [r3, #0]
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c4a:	f001 fffb 	bl	800ac44 <vPortExitCritical>
				return pdPASS;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e069      	b.n	8008d26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d103      	bne.n	8008c60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c58:	f001 fff4 	bl	800ac44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	e062      	b.n	8008d26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d106      	bne.n	8008c74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c66:	f107 0310 	add.w	r3, r7, #16
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f001 f800 	bl	8009c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c70:	2301      	movs	r3, #1
 8008c72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c74:	f001 ffe6 	bl	800ac44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c78:	f000 fd50 	bl	800971c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c7c:	f001 ffb2 	bl	800abe4 <vPortEnterCritical>
 8008c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c86:	b25b      	sxtb	r3, r3
 8008c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8c:	d103      	bne.n	8008c96 <xQueueReceive+0x122>
 8008c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c9c:	b25b      	sxtb	r3, r3
 8008c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca2:	d103      	bne.n	8008cac <xQueueReceive+0x138>
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cac:	f001 ffca 	bl	800ac44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cb0:	1d3a      	adds	r2, r7, #4
 8008cb2:	f107 0310 	add.w	r3, r7, #16
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 ffef 	bl	8009c9c <xTaskCheckForTimeOut>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d123      	bne.n	8008d0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cc6:	f000 fa3b 	bl	8009140 <prvIsQueueEmpty>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d017      	beq.n	8008d00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd2:	3324      	adds	r3, #36	; 0x24
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 ff15 	bl	8009b08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ce0:	f000 f9dc 	bl	800909c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ce4:	f000 fd28 	bl	8009738 <xTaskResumeAll>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d189      	bne.n	8008c02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008cee:	4b10      	ldr	r3, [pc, #64]	; (8008d30 <xQueueReceive+0x1bc>)
 8008cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cf4:	601a      	str	r2, [r3, #0]
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	e780      	b.n	8008c02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d02:	f000 f9cb 	bl	800909c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d06:	f000 fd17 	bl	8009738 <xTaskResumeAll>
 8008d0a:	e77a      	b.n	8008c02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d0e:	f000 f9c5 	bl	800909c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d12:	f000 fd11 	bl	8009738 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d18:	f000 fa12 	bl	8009140 <prvIsQueueEmpty>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f43f af6f 	beq.w	8008c02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3730      	adds	r7, #48	; 0x30
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	e000ed04 	.word	0xe000ed04

08008d34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b08e      	sub	sp, #56	; 0x38
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008d46:	2300      	movs	r3, #0
 8008d48:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10a      	bne.n	8008d66 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	623b      	str	r3, [r7, #32]
}
 8008d62:	bf00      	nop
 8008d64:	e7fe      	b.n	8008d64 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00a      	beq.n	8008d84 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	61fb      	str	r3, [r7, #28]
}
 8008d80:	bf00      	nop
 8008d82:	e7fe      	b.n	8008d82 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d84:	f001 f8d2 	bl	8009f2c <xTaskGetSchedulerState>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d102      	bne.n	8008d94 <xQueueSemaphoreTake+0x60>
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d101      	bne.n	8008d98 <xQueueSemaphoreTake+0x64>
 8008d94:	2301      	movs	r3, #1
 8008d96:	e000      	b.n	8008d9a <xQueueSemaphoreTake+0x66>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10a      	bne.n	8008db4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	61bb      	str	r3, [r7, #24]
}
 8008db0:	bf00      	nop
 8008db2:	e7fe      	b.n	8008db2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008db4:	f001 ff16 	bl	800abe4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d024      	beq.n	8008e0e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc6:	1e5a      	subs	r2, r3, #1
 8008dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d104      	bne.n	8008dde <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008dd4:	f001 fa20 	bl	800a218 <pvTaskIncrementMutexHeldCount>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ddc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00f      	beq.n	8008e06 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de8:	3310      	adds	r3, #16
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 fedc 	bl	8009ba8 <xTaskRemoveFromEventList>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d007      	beq.n	8008e06 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008df6:	4b54      	ldr	r3, [pc, #336]	; (8008f48 <xQueueSemaphoreTake+0x214>)
 8008df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dfc:	601a      	str	r2, [r3, #0]
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e06:	f001 ff1d 	bl	800ac44 <vPortExitCritical>
				return pdPASS;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e097      	b.n	8008f3e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d111      	bne.n	8008e38 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00a      	beq.n	8008e30 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	617b      	str	r3, [r7, #20]
}
 8008e2c:	bf00      	nop
 8008e2e:	e7fe      	b.n	8008e2e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008e30:	f001 ff08 	bl	800ac44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e34:	2300      	movs	r3, #0
 8008e36:	e082      	b.n	8008f3e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d106      	bne.n	8008e4c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e3e:	f107 030c 	add.w	r3, r7, #12
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 ff14 	bl	8009c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e4c:	f001 fefa 	bl	800ac44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e50:	f000 fc64 	bl	800971c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e54:	f001 fec6 	bl	800abe4 <vPortEnterCritical>
 8008e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e5e:	b25b      	sxtb	r3, r3
 8008e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e64:	d103      	bne.n	8008e6e <xQueueSemaphoreTake+0x13a>
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e74:	b25b      	sxtb	r3, r3
 8008e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7a:	d103      	bne.n	8008e84 <xQueueSemaphoreTake+0x150>
 8008e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e84:	f001 fede 	bl	800ac44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e88:	463a      	mov	r2, r7
 8008e8a:	f107 030c 	add.w	r3, r7, #12
 8008e8e:	4611      	mov	r1, r2
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 ff03 	bl	8009c9c <xTaskCheckForTimeOut>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d132      	bne.n	8008f02 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e9e:	f000 f94f 	bl	8009140 <prvIsQueueEmpty>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d026      	beq.n	8008ef6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d109      	bne.n	8008ec4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008eb0:	f001 fe98 	bl	800abe4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f001 f855 	bl	8009f68 <xTaskPriorityInherit>
 8008ebe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008ec0:	f001 fec0 	bl	800ac44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec6:	3324      	adds	r3, #36	; 0x24
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	4611      	mov	r1, r2
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 fe1b 	bl	8009b08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ed2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ed4:	f000 f8e2 	bl	800909c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ed8:	f000 fc2e 	bl	8009738 <xTaskResumeAll>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f47f af68 	bne.w	8008db4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008ee4:	4b18      	ldr	r3, [pc, #96]	; (8008f48 <xQueueSemaphoreTake+0x214>)
 8008ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	e75e      	b.n	8008db4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008ef6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ef8:	f000 f8d0 	bl	800909c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008efc:	f000 fc1c 	bl	8009738 <xTaskResumeAll>
 8008f00:	e758      	b.n	8008db4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008f02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f04:	f000 f8ca 	bl	800909c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f08:	f000 fc16 	bl	8009738 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f0e:	f000 f917 	bl	8009140 <prvIsQueueEmpty>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f43f af4d 	beq.w	8008db4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00d      	beq.n	8008f3c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008f20:	f001 fe60 	bl	800abe4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008f24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f26:	f000 f811 	bl	8008f4c <prvGetDisinheritPriorityAfterTimeout>
 8008f2a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f32:	4618      	mov	r0, r3
 8008f34:	f001 f8ee 	bl	800a114 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008f38:	f001 fe84 	bl	800ac44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3738      	adds	r7, #56	; 0x38
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	e000ed04 	.word	0xe000ed04

08008f4c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d006      	beq.n	8008f6a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008f66:	60fb      	str	r3, [r7, #12]
 8008f68:	e001      	b.n	8008f6e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
	}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10d      	bne.n	8008fb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d14d      	bne.n	800903e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f001 f846 	bl	800a038 <xTaskPriorityDisinherit>
 8008fac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	609a      	str	r2, [r3, #8]
 8008fb4:	e043      	b.n	800903e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d119      	bne.n	8008ff0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6858      	ldr	r0, [r3, #4]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	68b9      	ldr	r1, [r7, #8]
 8008fc8:	f002 fa70 	bl	800b4ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	685a      	ldr	r2, [r3, #4]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd4:	441a      	add	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d32b      	bcc.n	800903e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	605a      	str	r2, [r3, #4]
 8008fee:	e026      	b.n	800903e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	68d8      	ldr	r0, [r3, #12]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	68b9      	ldr	r1, [r7, #8]
 8008ffc:	f002 fa56 	bl	800b4ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	68da      	ldr	r2, [r3, #12]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009008:	425b      	negs	r3, r3
 800900a:	441a      	add	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	68da      	ldr	r2, [r3, #12]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	429a      	cmp	r2, r3
 800901a:	d207      	bcs.n	800902c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	689a      	ldr	r2, [r3, #8]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009024:	425b      	negs	r3, r3
 8009026:	441a      	add	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b02      	cmp	r3, #2
 8009030:	d105      	bne.n	800903e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d002      	beq.n	800903e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	3b01      	subs	r3, #1
 800903c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	1c5a      	adds	r2, r3, #1
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009046:	697b      	ldr	r3, [r7, #20]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3718      	adds	r7, #24
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905e:	2b00      	cmp	r3, #0
 8009060:	d018      	beq.n	8009094 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68da      	ldr	r2, [r3, #12]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906a:	441a      	add	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68da      	ldr	r2, [r3, #12]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	429a      	cmp	r2, r3
 800907a:	d303      	bcc.n	8009084 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68d9      	ldr	r1, [r3, #12]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908c:	461a      	mov	r2, r3
 800908e:	6838      	ldr	r0, [r7, #0]
 8009090:	f002 fa0c 	bl	800b4ac <memcpy>
	}
}
 8009094:	bf00      	nop
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80090a4:	f001 fd9e 	bl	800abe4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090b0:	e011      	b.n	80090d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d012      	beq.n	80090e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	3324      	adds	r3, #36	; 0x24
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 fd72 	bl	8009ba8 <xTaskRemoveFromEventList>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80090ca:	f000 fe49 	bl	8009d60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80090ce:	7bfb      	ldrb	r3, [r7, #15]
 80090d0:	3b01      	subs	r3, #1
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	dce9      	bgt.n	80090b2 <prvUnlockQueue+0x16>
 80090de:	e000      	b.n	80090e2 <prvUnlockQueue+0x46>
					break;
 80090e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	22ff      	movs	r2, #255	; 0xff
 80090e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80090ea:	f001 fdab 	bl	800ac44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80090ee:	f001 fd79 	bl	800abe4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090fa:	e011      	b.n	8009120 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d012      	beq.n	800912a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	3310      	adds	r3, #16
 8009108:	4618      	mov	r0, r3
 800910a:	f000 fd4d 	bl	8009ba8 <xTaskRemoveFromEventList>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009114:	f000 fe24 	bl	8009d60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009118:	7bbb      	ldrb	r3, [r7, #14]
 800911a:	3b01      	subs	r3, #1
 800911c:	b2db      	uxtb	r3, r3
 800911e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009120:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009124:	2b00      	cmp	r3, #0
 8009126:	dce9      	bgt.n	80090fc <prvUnlockQueue+0x60>
 8009128:	e000      	b.n	800912c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800912a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	22ff      	movs	r2, #255	; 0xff
 8009130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009134:	f001 fd86 	bl	800ac44 <vPortExitCritical>
}
 8009138:	bf00      	nop
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009148:	f001 fd4c 	bl	800abe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009150:	2b00      	cmp	r3, #0
 8009152:	d102      	bne.n	800915a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009154:	2301      	movs	r3, #1
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	e001      	b.n	800915e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800915a:	2300      	movs	r3, #0
 800915c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800915e:	f001 fd71 	bl	800ac44 <vPortExitCritical>

	return xReturn;
 8009162:	68fb      	ldr	r3, [r7, #12]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009174:	f001 fd36 	bl	800abe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009180:	429a      	cmp	r2, r3
 8009182:	d102      	bne.n	800918a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009184:	2301      	movs	r3, #1
 8009186:	60fb      	str	r3, [r7, #12]
 8009188:	e001      	b.n	800918e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800918a:	2300      	movs	r3, #0
 800918c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800918e:	f001 fd59 	bl	800ac44 <vPortExitCritical>

	return xReturn;
 8009192:	68fb      	ldr	r3, [r7, #12]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091a6:	2300      	movs	r3, #0
 80091a8:	60fb      	str	r3, [r7, #12]
 80091aa:	e014      	b.n	80091d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80091ac:	4a0f      	ldr	r2, [pc, #60]	; (80091ec <vQueueAddToRegistry+0x50>)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10b      	bne.n	80091d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80091b8:	490c      	ldr	r1, [pc, #48]	; (80091ec <vQueueAddToRegistry+0x50>)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	683a      	ldr	r2, [r7, #0]
 80091be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80091c2:	4a0a      	ldr	r2, [pc, #40]	; (80091ec <vQueueAddToRegistry+0x50>)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	00db      	lsls	r3, r3, #3
 80091c8:	4413      	add	r3, r2
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80091ce:	e006      	b.n	80091de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	3301      	adds	r3, #1
 80091d4:	60fb      	str	r3, [r7, #12]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2b07      	cmp	r3, #7
 80091da:	d9e7      	bls.n	80091ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80091dc:	bf00      	nop
 80091de:	bf00      	nop
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	20003120 	.word	0x20003120

080091f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009200:	f001 fcf0 	bl	800abe4 <vPortEnterCritical>
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800920a:	b25b      	sxtb	r3, r3
 800920c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009210:	d103      	bne.n	800921a <vQueueWaitForMessageRestricted+0x2a>
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009220:	b25b      	sxtb	r3, r3
 8009222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009226:	d103      	bne.n	8009230 <vQueueWaitForMessageRestricted+0x40>
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009230:	f001 fd08 	bl	800ac44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009238:	2b00      	cmp	r3, #0
 800923a:	d106      	bne.n	800924a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	3324      	adds	r3, #36	; 0x24
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	68b9      	ldr	r1, [r7, #8]
 8009244:	4618      	mov	r0, r3
 8009246:	f000 fc83 	bl	8009b50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800924a:	6978      	ldr	r0, [r7, #20]
 800924c:	f7ff ff26 	bl	800909c <prvUnlockQueue>
	}
 8009250:	bf00      	nop
 8009252:	3718      	adds	r7, #24
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009258:	b580      	push	{r7, lr}
 800925a:	b08e      	sub	sp, #56	; 0x38
 800925c:	af04      	add	r7, sp, #16
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
 8009264:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10a      	bne.n	8009282 <xTaskCreateStatic+0x2a>
	__asm volatile
 800926c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009270:	f383 8811 	msr	BASEPRI, r3
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	623b      	str	r3, [r7, #32]
}
 800927e:	bf00      	nop
 8009280:	e7fe      	b.n	8009280 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10a      	bne.n	800929e <xTaskCreateStatic+0x46>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	61fb      	str	r3, [r7, #28]
}
 800929a:	bf00      	nop
 800929c:	e7fe      	b.n	800929c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800929e:	23ac      	movs	r3, #172	; 0xac
 80092a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	2bac      	cmp	r3, #172	; 0xac
 80092a6:	d00a      	beq.n	80092be <xTaskCreateStatic+0x66>
	__asm volatile
 80092a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	61bb      	str	r3, [r7, #24]
}
 80092ba:	bf00      	nop
 80092bc:	e7fe      	b.n	80092bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80092be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80092c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d01e      	beq.n	8009304 <xTaskCreateStatic+0xac>
 80092c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d01b      	beq.n	8009304 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80092d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	2202      	movs	r2, #2
 80092da:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80092de:	2300      	movs	r3, #0
 80092e0:	9303      	str	r3, [sp, #12]
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	9302      	str	r3, [sp, #8]
 80092e6:	f107 0314 	add.w	r3, r7, #20
 80092ea:	9301      	str	r3, [sp, #4]
 80092ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	68b9      	ldr	r1, [r7, #8]
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f000 f850 	bl	800939c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092fe:	f000 f8f7 	bl	80094f0 <prvAddNewTaskToReadyList>
 8009302:	e001      	b.n	8009308 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009304:	2300      	movs	r3, #0
 8009306:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009308:	697b      	ldr	r3, [r7, #20]
	}
 800930a:	4618      	mov	r0, r3
 800930c:	3728      	adds	r7, #40	; 0x28
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009312:	b580      	push	{r7, lr}
 8009314:	b08c      	sub	sp, #48	; 0x30
 8009316:	af04      	add	r7, sp, #16
 8009318:	60f8      	str	r0, [r7, #12]
 800931a:	60b9      	str	r1, [r7, #8]
 800931c:	603b      	str	r3, [r7, #0]
 800931e:	4613      	mov	r3, r2
 8009320:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009322:	88fb      	ldrh	r3, [r7, #6]
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4618      	mov	r0, r3
 8009328:	f001 fd7e 	bl	800ae28 <pvPortMalloc>
 800932c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00e      	beq.n	8009352 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009334:	20ac      	movs	r0, #172	; 0xac
 8009336:	f001 fd77 	bl	800ae28 <pvPortMalloc>
 800933a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	631a      	str	r2, [r3, #48]	; 0x30
 8009348:	e005      	b.n	8009356 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800934a:	6978      	ldr	r0, [r7, #20]
 800934c:	f001 fe38 	bl	800afc0 <vPortFree>
 8009350:	e001      	b.n	8009356 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009352:	2300      	movs	r3, #0
 8009354:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d017      	beq.n	800938c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009364:	88fa      	ldrh	r2, [r7, #6]
 8009366:	2300      	movs	r3, #0
 8009368:	9303      	str	r3, [sp, #12]
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	9302      	str	r3, [sp, #8]
 800936e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	68b9      	ldr	r1, [r7, #8]
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f000 f80e 	bl	800939c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009380:	69f8      	ldr	r0, [r7, #28]
 8009382:	f000 f8b5 	bl	80094f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009386:	2301      	movs	r3, #1
 8009388:	61bb      	str	r3, [r7, #24]
 800938a:	e002      	b.n	8009392 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800938c:	f04f 33ff 	mov.w	r3, #4294967295
 8009390:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009392:	69bb      	ldr	r3, [r7, #24]
	}
 8009394:	4618      	mov	r0, r3
 8009396:	3720      	adds	r7, #32
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b088      	sub	sp, #32
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
 80093a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80093aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	461a      	mov	r2, r3
 80093b4:	21a5      	movs	r1, #165	; 0xa5
 80093b6:	f001 ffe7 	bl	800b388 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80093ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80093c4:	3b01      	subs	r3, #1
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	f023 0307 	bic.w	r3, r3, #7
 80093d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	f003 0307 	and.w	r3, r3, #7
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00a      	beq.n	80093f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	617b      	str	r3, [r7, #20]
}
 80093f0:	bf00      	nop
 80093f2:	e7fe      	b.n	80093f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d01f      	beq.n	800943a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093fa:	2300      	movs	r3, #0
 80093fc:	61fb      	str	r3, [r7, #28]
 80093fe:	e012      	b.n	8009426 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	4413      	add	r3, r2
 8009406:	7819      	ldrb	r1, [r3, #0]
 8009408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	4413      	add	r3, r2
 800940e:	3334      	adds	r3, #52	; 0x34
 8009410:	460a      	mov	r2, r1
 8009412:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	4413      	add	r3, r2
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d006      	beq.n	800942e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	3301      	adds	r3, #1
 8009424:	61fb      	str	r3, [r7, #28]
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	2b0f      	cmp	r3, #15
 800942a:	d9e9      	bls.n	8009400 <prvInitialiseNewTask+0x64>
 800942c:	e000      	b.n	8009430 <prvInitialiseNewTask+0x94>
			{
				break;
 800942e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009432:	2200      	movs	r2, #0
 8009434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009438:	e003      	b.n	8009442 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943c:	2200      	movs	r2, #0
 800943e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009444:	2b37      	cmp	r3, #55	; 0x37
 8009446:	d901      	bls.n	800944c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009448:	2337      	movs	r3, #55	; 0x37
 800944a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800944c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009450:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009456:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945a:	2200      	movs	r2, #0
 800945c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800945e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009460:	3304      	adds	r3, #4
 8009462:	4618      	mov	r0, r3
 8009464:	f7fe ff8e 	bl	8008384 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946a:	3318      	adds	r3, #24
 800946c:	4618      	mov	r0, r3
 800946e:	f7fe ff89 	bl	8008384 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009476:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800947e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009480:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009486:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948a:	2200      	movs	r2, #0
 800948c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800948e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009490:	2200      	movs	r2, #0
 8009492:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009498:	2200      	movs	r2, #0
 800949a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a0:	3358      	adds	r3, #88	; 0x58
 80094a2:	224c      	movs	r2, #76	; 0x4c
 80094a4:	2100      	movs	r1, #0
 80094a6:	4618      	mov	r0, r3
 80094a8:	f001 ff6e 	bl	800b388 <memset>
 80094ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ae:	4a0d      	ldr	r2, [pc, #52]	; (80094e4 <prvInitialiseNewTask+0x148>)
 80094b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80094b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b4:	4a0c      	ldr	r2, [pc, #48]	; (80094e8 <prvInitialiseNewTask+0x14c>)
 80094b6:	661a      	str	r2, [r3, #96]	; 0x60
 80094b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ba:	4a0c      	ldr	r2, [pc, #48]	; (80094ec <prvInitialiseNewTask+0x150>)
 80094bc:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	68f9      	ldr	r1, [r7, #12]
 80094c2:	69b8      	ldr	r0, [r7, #24]
 80094c4:	f001 fa5e 	bl	800a984 <pxPortInitialiseStack>
 80094c8:	4602      	mov	r2, r0
 80094ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80094ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d002      	beq.n	80094da <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80094d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094da:	bf00      	nop
 80094dc:	3720      	adds	r7, #32
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	20004374 	.word	0x20004374
 80094e8:	200043dc 	.word	0x200043dc
 80094ec:	20004444 	.word	0x20004444

080094f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80094f8:	f001 fb74 	bl	800abe4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80094fc:	4b2d      	ldr	r3, [pc, #180]	; (80095b4 <prvAddNewTaskToReadyList+0xc4>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3301      	adds	r3, #1
 8009502:	4a2c      	ldr	r2, [pc, #176]	; (80095b4 <prvAddNewTaskToReadyList+0xc4>)
 8009504:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009506:	4b2c      	ldr	r3, [pc, #176]	; (80095b8 <prvAddNewTaskToReadyList+0xc8>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d109      	bne.n	8009522 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800950e:	4a2a      	ldr	r2, [pc, #168]	; (80095b8 <prvAddNewTaskToReadyList+0xc8>)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009514:	4b27      	ldr	r3, [pc, #156]	; (80095b4 <prvAddNewTaskToReadyList+0xc4>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d110      	bne.n	800953e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800951c:	f000 fc44 	bl	8009da8 <prvInitialiseTaskLists>
 8009520:	e00d      	b.n	800953e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009522:	4b26      	ldr	r3, [pc, #152]	; (80095bc <prvAddNewTaskToReadyList+0xcc>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d109      	bne.n	800953e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800952a:	4b23      	ldr	r3, [pc, #140]	; (80095b8 <prvAddNewTaskToReadyList+0xc8>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009534:	429a      	cmp	r2, r3
 8009536:	d802      	bhi.n	800953e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009538:	4a1f      	ldr	r2, [pc, #124]	; (80095b8 <prvAddNewTaskToReadyList+0xc8>)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800953e:	4b20      	ldr	r3, [pc, #128]	; (80095c0 <prvAddNewTaskToReadyList+0xd0>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	3301      	adds	r3, #1
 8009544:	4a1e      	ldr	r2, [pc, #120]	; (80095c0 <prvAddNewTaskToReadyList+0xd0>)
 8009546:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009548:	4b1d      	ldr	r3, [pc, #116]	; (80095c0 <prvAddNewTaskToReadyList+0xd0>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009554:	4b1b      	ldr	r3, [pc, #108]	; (80095c4 <prvAddNewTaskToReadyList+0xd4>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	429a      	cmp	r2, r3
 800955a:	d903      	bls.n	8009564 <prvAddNewTaskToReadyList+0x74>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009560:	4a18      	ldr	r2, [pc, #96]	; (80095c4 <prvAddNewTaskToReadyList+0xd4>)
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009568:	4613      	mov	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4413      	add	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4a15      	ldr	r2, [pc, #84]	; (80095c8 <prvAddNewTaskToReadyList+0xd8>)
 8009572:	441a      	add	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	3304      	adds	r3, #4
 8009578:	4619      	mov	r1, r3
 800957a:	4610      	mov	r0, r2
 800957c:	f7fe ff0f 	bl	800839e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009580:	f001 fb60 	bl	800ac44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009584:	4b0d      	ldr	r3, [pc, #52]	; (80095bc <prvAddNewTaskToReadyList+0xcc>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00e      	beq.n	80095aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800958c:	4b0a      	ldr	r3, [pc, #40]	; (80095b8 <prvAddNewTaskToReadyList+0xc8>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009596:	429a      	cmp	r2, r3
 8009598:	d207      	bcs.n	80095aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800959a:	4b0c      	ldr	r3, [pc, #48]	; (80095cc <prvAddNewTaskToReadyList+0xdc>)
 800959c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095aa:	bf00      	nop
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	20003634 	.word	0x20003634
 80095b8:	20003160 	.word	0x20003160
 80095bc:	20003640 	.word	0x20003640
 80095c0:	20003650 	.word	0x20003650
 80095c4:	2000363c 	.word	0x2000363c
 80095c8:	20003164 	.word	0x20003164
 80095cc:	e000ed04 	.word	0xe000ed04

080095d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80095d8:	2300      	movs	r3, #0
 80095da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d017      	beq.n	8009612 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80095e2:	4b13      	ldr	r3, [pc, #76]	; (8009630 <vTaskDelay+0x60>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00a      	beq.n	8009600 <vTaskDelay+0x30>
	__asm volatile
 80095ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	60bb      	str	r3, [r7, #8]
}
 80095fc:	bf00      	nop
 80095fe:	e7fe      	b.n	80095fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009600:	f000 f88c 	bl	800971c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009604:	2100      	movs	r1, #0
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fe1a 	bl	800a240 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800960c:	f000 f894 	bl	8009738 <xTaskResumeAll>
 8009610:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d107      	bne.n	8009628 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009618:	4b06      	ldr	r3, [pc, #24]	; (8009634 <vTaskDelay+0x64>)
 800961a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009628:	bf00      	nop
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	2000365c 	.word	0x2000365c
 8009634:	e000ed04 	.word	0xe000ed04

08009638 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b08a      	sub	sp, #40	; 0x28
 800963c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800963e:	2300      	movs	r3, #0
 8009640:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009642:	2300      	movs	r3, #0
 8009644:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009646:	463a      	mov	r2, r7
 8009648:	1d39      	adds	r1, r7, #4
 800964a:	f107 0308 	add.w	r3, r7, #8
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe fe44 	bl	80082dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	9202      	str	r2, [sp, #8]
 800965c:	9301      	str	r3, [sp, #4]
 800965e:	2300      	movs	r3, #0
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	2300      	movs	r3, #0
 8009664:	460a      	mov	r2, r1
 8009666:	4925      	ldr	r1, [pc, #148]	; (80096fc <vTaskStartScheduler+0xc4>)
 8009668:	4825      	ldr	r0, [pc, #148]	; (8009700 <vTaskStartScheduler+0xc8>)
 800966a:	f7ff fdf5 	bl	8009258 <xTaskCreateStatic>
 800966e:	4603      	mov	r3, r0
 8009670:	4a24      	ldr	r2, [pc, #144]	; (8009704 <vTaskStartScheduler+0xcc>)
 8009672:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009674:	4b23      	ldr	r3, [pc, #140]	; (8009704 <vTaskStartScheduler+0xcc>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d002      	beq.n	8009682 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800967c:	2301      	movs	r3, #1
 800967e:	617b      	str	r3, [r7, #20]
 8009680:	e001      	b.n	8009686 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009682:	2300      	movs	r3, #0
 8009684:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d102      	bne.n	8009692 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800968c:	f000 fe2c 	bl	800a2e8 <xTimerCreateTimerTask>
 8009690:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d11d      	bne.n	80096d4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8009698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	613b      	str	r3, [r7, #16]
}
 80096aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096ac:	4b16      	ldr	r3, [pc, #88]	; (8009708 <vTaskStartScheduler+0xd0>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3358      	adds	r3, #88	; 0x58
 80096b2:	4a16      	ldr	r2, [pc, #88]	; (800970c <vTaskStartScheduler+0xd4>)
 80096b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80096b6:	4b16      	ldr	r3, [pc, #88]	; (8009710 <vTaskStartScheduler+0xd8>)
 80096b8:	f04f 32ff 	mov.w	r2, #4294967295
 80096bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80096be:	4b15      	ldr	r3, [pc, #84]	; (8009714 <vTaskStartScheduler+0xdc>)
 80096c0:	2201      	movs	r2, #1
 80096c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80096c4:	4b14      	ldr	r3, [pc, #80]	; (8009718 <vTaskStartScheduler+0xe0>)
 80096c6:	2200      	movs	r2, #0
 80096c8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80096ca:	f7f7 fb45 	bl	8000d58 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80096ce:	f001 f9e7 	bl	800aaa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80096d2:	e00e      	b.n	80096f2 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096da:	d10a      	bne.n	80096f2 <vTaskStartScheduler+0xba>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	60fb      	str	r3, [r7, #12]
}
 80096ee:	bf00      	nop
 80096f0:	e7fe      	b.n	80096f0 <vTaskStartScheduler+0xb8>
}
 80096f2:	bf00      	nop
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	0800c120 	.word	0x0800c120
 8009700:	08009d79 	.word	0x08009d79
 8009704:	20003658 	.word	0x20003658
 8009708:	20003160 	.word	0x20003160
 800970c:	200003a4 	.word	0x200003a4
 8009710:	20003654 	.word	0x20003654
 8009714:	20003640 	.word	0x20003640
 8009718:	20003638 	.word	0x20003638

0800971c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800971c:	b480      	push	{r7}
 800971e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009720:	4b04      	ldr	r3, [pc, #16]	; (8009734 <vTaskSuspendAll+0x18>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3301      	adds	r3, #1
 8009726:	4a03      	ldr	r2, [pc, #12]	; (8009734 <vTaskSuspendAll+0x18>)
 8009728:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800972a:	bf00      	nop
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr
 8009734:	2000365c 	.word	0x2000365c

08009738 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800973e:	2300      	movs	r3, #0
 8009740:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009742:	2300      	movs	r3, #0
 8009744:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009746:	4b42      	ldr	r3, [pc, #264]	; (8009850 <xTaskResumeAll+0x118>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10a      	bne.n	8009764 <xTaskResumeAll+0x2c>
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	603b      	str	r3, [r7, #0]
}
 8009760:	bf00      	nop
 8009762:	e7fe      	b.n	8009762 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009764:	f001 fa3e 	bl	800abe4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009768:	4b39      	ldr	r3, [pc, #228]	; (8009850 <xTaskResumeAll+0x118>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3b01      	subs	r3, #1
 800976e:	4a38      	ldr	r2, [pc, #224]	; (8009850 <xTaskResumeAll+0x118>)
 8009770:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009772:	4b37      	ldr	r3, [pc, #220]	; (8009850 <xTaskResumeAll+0x118>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d162      	bne.n	8009840 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800977a:	4b36      	ldr	r3, [pc, #216]	; (8009854 <xTaskResumeAll+0x11c>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d05e      	beq.n	8009840 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009782:	e02f      	b.n	80097e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009784:	4b34      	ldr	r3, [pc, #208]	; (8009858 <xTaskResumeAll+0x120>)
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	3318      	adds	r3, #24
 8009790:	4618      	mov	r0, r3
 8009792:	f7fe fe61 	bl	8008458 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	3304      	adds	r3, #4
 800979a:	4618      	mov	r0, r3
 800979c:	f7fe fe5c 	bl	8008458 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a4:	4b2d      	ldr	r3, [pc, #180]	; (800985c <xTaskResumeAll+0x124>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d903      	bls.n	80097b4 <xTaskResumeAll+0x7c>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b0:	4a2a      	ldr	r2, [pc, #168]	; (800985c <xTaskResumeAll+0x124>)
 80097b2:	6013      	str	r3, [r2, #0]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b8:	4613      	mov	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4413      	add	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4a27      	ldr	r2, [pc, #156]	; (8009860 <xTaskResumeAll+0x128>)
 80097c2:	441a      	add	r2, r3
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	3304      	adds	r3, #4
 80097c8:	4619      	mov	r1, r3
 80097ca:	4610      	mov	r0, r2
 80097cc:	f7fe fde7 	bl	800839e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d4:	4b23      	ldr	r3, [pc, #140]	; (8009864 <xTaskResumeAll+0x12c>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097da:	429a      	cmp	r2, r3
 80097dc:	d302      	bcc.n	80097e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80097de:	4b22      	ldr	r3, [pc, #136]	; (8009868 <xTaskResumeAll+0x130>)
 80097e0:	2201      	movs	r2, #1
 80097e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097e4:	4b1c      	ldr	r3, [pc, #112]	; (8009858 <xTaskResumeAll+0x120>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1cb      	bne.n	8009784 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d001      	beq.n	80097f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80097f2:	f000 fb7b 	bl	8009eec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80097f6:	4b1d      	ldr	r3, [pc, #116]	; (800986c <xTaskResumeAll+0x134>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d010      	beq.n	8009824 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009802:	f000 f847 	bl	8009894 <xTaskIncrementTick>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d002      	beq.n	8009812 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800980c:	4b16      	ldr	r3, [pc, #88]	; (8009868 <xTaskResumeAll+0x130>)
 800980e:	2201      	movs	r2, #1
 8009810:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	3b01      	subs	r3, #1
 8009816:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1f1      	bne.n	8009802 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800981e:	4b13      	ldr	r3, [pc, #76]	; (800986c <xTaskResumeAll+0x134>)
 8009820:	2200      	movs	r2, #0
 8009822:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009824:	4b10      	ldr	r3, [pc, #64]	; (8009868 <xTaskResumeAll+0x130>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d009      	beq.n	8009840 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800982c:	2301      	movs	r3, #1
 800982e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009830:	4b0f      	ldr	r3, [pc, #60]	; (8009870 <xTaskResumeAll+0x138>)
 8009832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009836:	601a      	str	r2, [r3, #0]
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009840:	f001 fa00 	bl	800ac44 <vPortExitCritical>

	return xAlreadyYielded;
 8009844:	68bb      	ldr	r3, [r7, #8]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	2000365c 	.word	0x2000365c
 8009854:	20003634 	.word	0x20003634
 8009858:	200035f4 	.word	0x200035f4
 800985c:	2000363c 	.word	0x2000363c
 8009860:	20003164 	.word	0x20003164
 8009864:	20003160 	.word	0x20003160
 8009868:	20003648 	.word	0x20003648
 800986c:	20003644 	.word	0x20003644
 8009870:	e000ed04 	.word	0xe000ed04

08009874 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800987a:	4b05      	ldr	r3, [pc, #20]	; (8009890 <xTaskGetTickCount+0x1c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009880:	687b      	ldr	r3, [r7, #4]
}
 8009882:	4618      	mov	r0, r3
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	20003638 	.word	0x20003638

08009894 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800989a:	2300      	movs	r3, #0
 800989c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800989e:	4b4f      	ldr	r3, [pc, #316]	; (80099dc <xTaskIncrementTick+0x148>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f040 808f 	bne.w	80099c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098a8:	4b4d      	ldr	r3, [pc, #308]	; (80099e0 <xTaskIncrementTick+0x14c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	3301      	adds	r3, #1
 80098ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098b0:	4a4b      	ldr	r2, [pc, #300]	; (80099e0 <xTaskIncrementTick+0x14c>)
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d120      	bne.n	80098fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80098bc:	4b49      	ldr	r3, [pc, #292]	; (80099e4 <xTaskIncrementTick+0x150>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00a      	beq.n	80098dc <xTaskIncrementTick+0x48>
	__asm volatile
 80098c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	603b      	str	r3, [r7, #0]
}
 80098d8:	bf00      	nop
 80098da:	e7fe      	b.n	80098da <xTaskIncrementTick+0x46>
 80098dc:	4b41      	ldr	r3, [pc, #260]	; (80099e4 <xTaskIncrementTick+0x150>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	60fb      	str	r3, [r7, #12]
 80098e2:	4b41      	ldr	r3, [pc, #260]	; (80099e8 <xTaskIncrementTick+0x154>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a3f      	ldr	r2, [pc, #252]	; (80099e4 <xTaskIncrementTick+0x150>)
 80098e8:	6013      	str	r3, [r2, #0]
 80098ea:	4a3f      	ldr	r2, [pc, #252]	; (80099e8 <xTaskIncrementTick+0x154>)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6013      	str	r3, [r2, #0]
 80098f0:	4b3e      	ldr	r3, [pc, #248]	; (80099ec <xTaskIncrementTick+0x158>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3301      	adds	r3, #1
 80098f6:	4a3d      	ldr	r2, [pc, #244]	; (80099ec <xTaskIncrementTick+0x158>)
 80098f8:	6013      	str	r3, [r2, #0]
 80098fa:	f000 faf7 	bl	8009eec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80098fe:	4b3c      	ldr	r3, [pc, #240]	; (80099f0 <xTaskIncrementTick+0x15c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	429a      	cmp	r2, r3
 8009906:	d349      	bcc.n	800999c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009908:	4b36      	ldr	r3, [pc, #216]	; (80099e4 <xTaskIncrementTick+0x150>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d104      	bne.n	800991c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009912:	4b37      	ldr	r3, [pc, #220]	; (80099f0 <xTaskIncrementTick+0x15c>)
 8009914:	f04f 32ff 	mov.w	r2, #4294967295
 8009918:	601a      	str	r2, [r3, #0]
					break;
 800991a:	e03f      	b.n	800999c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800991c:	4b31      	ldr	r3, [pc, #196]	; (80099e4 <xTaskIncrementTick+0x150>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	429a      	cmp	r2, r3
 8009932:	d203      	bcs.n	800993c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009934:	4a2e      	ldr	r2, [pc, #184]	; (80099f0 <xTaskIncrementTick+0x15c>)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800993a:	e02f      	b.n	800999c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	3304      	adds	r3, #4
 8009940:	4618      	mov	r0, r3
 8009942:	f7fe fd89 	bl	8008458 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994a:	2b00      	cmp	r3, #0
 800994c:	d004      	beq.n	8009958 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	3318      	adds	r3, #24
 8009952:	4618      	mov	r0, r3
 8009954:	f7fe fd80 	bl	8008458 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995c:	4b25      	ldr	r3, [pc, #148]	; (80099f4 <xTaskIncrementTick+0x160>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	429a      	cmp	r2, r3
 8009962:	d903      	bls.n	800996c <xTaskIncrementTick+0xd8>
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009968:	4a22      	ldr	r2, [pc, #136]	; (80099f4 <xTaskIncrementTick+0x160>)
 800996a:	6013      	str	r3, [r2, #0]
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009970:	4613      	mov	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4a1f      	ldr	r2, [pc, #124]	; (80099f8 <xTaskIncrementTick+0x164>)
 800997a:	441a      	add	r2, r3
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	3304      	adds	r3, #4
 8009980:	4619      	mov	r1, r3
 8009982:	4610      	mov	r0, r2
 8009984:	f7fe fd0b 	bl	800839e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800998c:	4b1b      	ldr	r3, [pc, #108]	; (80099fc <xTaskIncrementTick+0x168>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009992:	429a      	cmp	r2, r3
 8009994:	d3b8      	bcc.n	8009908 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009996:	2301      	movs	r3, #1
 8009998:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800999a:	e7b5      	b.n	8009908 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800999c:	4b17      	ldr	r3, [pc, #92]	; (80099fc <xTaskIncrementTick+0x168>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a2:	4915      	ldr	r1, [pc, #84]	; (80099f8 <xTaskIncrementTick+0x164>)
 80099a4:	4613      	mov	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	440b      	add	r3, r1
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d901      	bls.n	80099b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80099b4:	2301      	movs	r3, #1
 80099b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80099b8:	4b11      	ldr	r3, [pc, #68]	; (8009a00 <xTaskIncrementTick+0x16c>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d007      	beq.n	80099d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80099c0:	2301      	movs	r3, #1
 80099c2:	617b      	str	r3, [r7, #20]
 80099c4:	e004      	b.n	80099d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80099c6:	4b0f      	ldr	r3, [pc, #60]	; (8009a04 <xTaskIncrementTick+0x170>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	3301      	adds	r3, #1
 80099cc:	4a0d      	ldr	r2, [pc, #52]	; (8009a04 <xTaskIncrementTick+0x170>)
 80099ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80099d0:	697b      	ldr	r3, [r7, #20]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3718      	adds	r7, #24
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	2000365c 	.word	0x2000365c
 80099e0:	20003638 	.word	0x20003638
 80099e4:	200035ec 	.word	0x200035ec
 80099e8:	200035f0 	.word	0x200035f0
 80099ec:	2000364c 	.word	0x2000364c
 80099f0:	20003654 	.word	0x20003654
 80099f4:	2000363c 	.word	0x2000363c
 80099f8:	20003164 	.word	0x20003164
 80099fc:	20003160 	.word	0x20003160
 8009a00:	20003648 	.word	0x20003648
 8009a04:	20003644 	.word	0x20003644

08009a08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a0e:	4b36      	ldr	r3, [pc, #216]	; (8009ae8 <vTaskSwitchContext+0xe0>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d003      	beq.n	8009a1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a16:	4b35      	ldr	r3, [pc, #212]	; (8009aec <vTaskSwitchContext+0xe4>)
 8009a18:	2201      	movs	r2, #1
 8009a1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a1c:	e05f      	b.n	8009ade <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8009a1e:	4b33      	ldr	r3, [pc, #204]	; (8009aec <vTaskSwitchContext+0xe4>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009a24:	f7f7 f99f 	bl	8000d66 <getRunTimeCounterValue>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	4a31      	ldr	r2, [pc, #196]	; (8009af0 <vTaskSwitchContext+0xe8>)
 8009a2c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009a2e:	4b30      	ldr	r3, [pc, #192]	; (8009af0 <vTaskSwitchContext+0xe8>)
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	4b30      	ldr	r3, [pc, #192]	; (8009af4 <vTaskSwitchContext+0xec>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d909      	bls.n	8009a4e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009a3a:	4b2f      	ldr	r3, [pc, #188]	; (8009af8 <vTaskSwitchContext+0xf0>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009a40:	4a2b      	ldr	r2, [pc, #172]	; (8009af0 <vTaskSwitchContext+0xe8>)
 8009a42:	6810      	ldr	r0, [r2, #0]
 8009a44:	4a2b      	ldr	r2, [pc, #172]	; (8009af4 <vTaskSwitchContext+0xec>)
 8009a46:	6812      	ldr	r2, [r2, #0]
 8009a48:	1a82      	subs	r2, r0, r2
 8009a4a:	440a      	add	r2, r1
 8009a4c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009a4e:	4b28      	ldr	r3, [pc, #160]	; (8009af0 <vTaskSwitchContext+0xe8>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a28      	ldr	r2, [pc, #160]	; (8009af4 <vTaskSwitchContext+0xec>)
 8009a54:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a56:	4b29      	ldr	r3, [pc, #164]	; (8009afc <vTaskSwitchContext+0xf4>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	e010      	b.n	8009a80 <vTaskSwitchContext+0x78>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10a      	bne.n	8009a7a <vTaskSwitchContext+0x72>
	__asm volatile
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	607b      	str	r3, [r7, #4]
}
 8009a76:	bf00      	nop
 8009a78:	e7fe      	b.n	8009a78 <vTaskSwitchContext+0x70>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	60fb      	str	r3, [r7, #12]
 8009a80:	491f      	ldr	r1, [pc, #124]	; (8009b00 <vTaskSwitchContext+0xf8>)
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	4613      	mov	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	440b      	add	r3, r1
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d0e4      	beq.n	8009a5e <vTaskSwitchContext+0x56>
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	4613      	mov	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4a18      	ldr	r2, [pc, #96]	; (8009b00 <vTaskSwitchContext+0xf8>)
 8009aa0:	4413      	add	r3, r2
 8009aa2:	60bb      	str	r3, [r7, #8]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	685a      	ldr	r2, [r3, #4]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	605a      	str	r2, [r3, #4]
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d104      	bne.n	8009ac4 <vTaskSwitchContext+0xbc>
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	685a      	ldr	r2, [r3, #4]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	605a      	str	r2, [r3, #4]
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	4a0b      	ldr	r2, [pc, #44]	; (8009af8 <vTaskSwitchContext+0xf0>)
 8009acc:	6013      	str	r3, [r2, #0]
 8009ace:	4a0b      	ldr	r2, [pc, #44]	; (8009afc <vTaskSwitchContext+0xf4>)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ad4:	4b08      	ldr	r3, [pc, #32]	; (8009af8 <vTaskSwitchContext+0xf0>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3358      	adds	r3, #88	; 0x58
 8009ada:	4a0a      	ldr	r2, [pc, #40]	; (8009b04 <vTaskSwitchContext+0xfc>)
 8009adc:	6013      	str	r3, [r2, #0]
}
 8009ade:	bf00      	nop
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	2000365c 	.word	0x2000365c
 8009aec:	20003648 	.word	0x20003648
 8009af0:	20003664 	.word	0x20003664
 8009af4:	20003660 	.word	0x20003660
 8009af8:	20003160 	.word	0x20003160
 8009afc:	2000363c 	.word	0x2000363c
 8009b00:	20003164 	.word	0x20003164
 8009b04:	200003a4 	.word	0x200003a4

08009b08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10a      	bne.n	8009b2e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	60fb      	str	r3, [r7, #12]
}
 8009b2a:	bf00      	nop
 8009b2c:	e7fe      	b.n	8009b2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b2e:	4b07      	ldr	r3, [pc, #28]	; (8009b4c <vTaskPlaceOnEventList+0x44>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	3318      	adds	r3, #24
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7fe fc55 	bl	80083e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b3c:	2101      	movs	r1, #1
 8009b3e:	6838      	ldr	r0, [r7, #0]
 8009b40:	f000 fb7e 	bl	800a240 <prvAddCurrentTaskToDelayedList>
}
 8009b44:	bf00      	nop
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	20003160 	.word	0x20003160

08009b50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10a      	bne.n	8009b78 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	617b      	str	r3, [r7, #20]
}
 8009b74:	bf00      	nop
 8009b76:	e7fe      	b.n	8009b76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b78:	4b0a      	ldr	r3, [pc, #40]	; (8009ba4 <vTaskPlaceOnEventListRestricted+0x54>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3318      	adds	r3, #24
 8009b7e:	4619      	mov	r1, r3
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f7fe fc0c 	bl	800839e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d002      	beq.n	8009b92 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b92:	6879      	ldr	r1, [r7, #4]
 8009b94:	68b8      	ldr	r0, [r7, #8]
 8009b96:	f000 fb53 	bl	800a240 <prvAddCurrentTaskToDelayedList>
	}
 8009b9a:	bf00      	nop
 8009b9c:	3718      	adds	r7, #24
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	20003160 	.word	0x20003160

08009ba8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10a      	bne.n	8009bd4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	60fb      	str	r3, [r7, #12]
}
 8009bd0:	bf00      	nop
 8009bd2:	e7fe      	b.n	8009bd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	3318      	adds	r3, #24
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fe fc3d 	bl	8008458 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bde:	4b1e      	ldr	r3, [pc, #120]	; (8009c58 <xTaskRemoveFromEventList+0xb0>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d11d      	bne.n	8009c22 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	3304      	adds	r3, #4
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fe fc34 	bl	8008458 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf4:	4b19      	ldr	r3, [pc, #100]	; (8009c5c <xTaskRemoveFromEventList+0xb4>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d903      	bls.n	8009c04 <xTaskRemoveFromEventList+0x5c>
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c00:	4a16      	ldr	r2, [pc, #88]	; (8009c5c <xTaskRemoveFromEventList+0xb4>)
 8009c02:	6013      	str	r3, [r2, #0]
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c08:	4613      	mov	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4a13      	ldr	r2, [pc, #76]	; (8009c60 <xTaskRemoveFromEventList+0xb8>)
 8009c12:	441a      	add	r2, r3
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	3304      	adds	r3, #4
 8009c18:	4619      	mov	r1, r3
 8009c1a:	4610      	mov	r0, r2
 8009c1c:	f7fe fbbf 	bl	800839e <vListInsertEnd>
 8009c20:	e005      	b.n	8009c2e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	3318      	adds	r3, #24
 8009c26:	4619      	mov	r1, r3
 8009c28:	480e      	ldr	r0, [pc, #56]	; (8009c64 <xTaskRemoveFromEventList+0xbc>)
 8009c2a:	f7fe fbb8 	bl	800839e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c32:	4b0d      	ldr	r3, [pc, #52]	; (8009c68 <xTaskRemoveFromEventList+0xc0>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d905      	bls.n	8009c48 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c40:	4b0a      	ldr	r3, [pc, #40]	; (8009c6c <xTaskRemoveFromEventList+0xc4>)
 8009c42:	2201      	movs	r2, #1
 8009c44:	601a      	str	r2, [r3, #0]
 8009c46:	e001      	b.n	8009c4c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c4c:	697b      	ldr	r3, [r7, #20]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3718      	adds	r7, #24
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	2000365c 	.word	0x2000365c
 8009c5c:	2000363c 	.word	0x2000363c
 8009c60:	20003164 	.word	0x20003164
 8009c64:	200035f4 	.word	0x200035f4
 8009c68:	20003160 	.word	0x20003160
 8009c6c:	20003648 	.word	0x20003648

08009c70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c78:	4b06      	ldr	r3, [pc, #24]	; (8009c94 <vTaskInternalSetTimeOutState+0x24>)
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c80:	4b05      	ldr	r3, [pc, #20]	; (8009c98 <vTaskInternalSetTimeOutState+0x28>)
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	605a      	str	r2, [r3, #4]
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	2000364c 	.word	0x2000364c
 8009c98:	20003638 	.word	0x20003638

08009c9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b088      	sub	sp, #32
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d10a      	bne.n	8009cc2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb0:	f383 8811 	msr	BASEPRI, r3
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	613b      	str	r3, [r7, #16]
}
 8009cbe:	bf00      	nop
 8009cc0:	e7fe      	b.n	8009cc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d10a      	bne.n	8009cde <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ccc:	f383 8811 	msr	BASEPRI, r3
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	60fb      	str	r3, [r7, #12]
}
 8009cda:	bf00      	nop
 8009cdc:	e7fe      	b.n	8009cdc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009cde:	f000 ff81 	bl	800abe4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ce2:	4b1d      	ldr	r3, [pc, #116]	; (8009d58 <xTaskCheckForTimeOut+0xbc>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	69ba      	ldr	r2, [r7, #24]
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfa:	d102      	bne.n	8009d02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	61fb      	str	r3, [r7, #28]
 8009d00:	e023      	b.n	8009d4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	4b15      	ldr	r3, [pc, #84]	; (8009d5c <xTaskCheckForTimeOut+0xc0>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d007      	beq.n	8009d1e <xTaskCheckForTimeOut+0x82>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	69ba      	ldr	r2, [r7, #24]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d302      	bcc.n	8009d1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	61fb      	str	r3, [r7, #28]
 8009d1c:	e015      	b.n	8009d4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d20b      	bcs.n	8009d40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	1ad2      	subs	r2, r2, r3
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f7ff ff9b 	bl	8009c70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	61fb      	str	r3, [r7, #28]
 8009d3e:	e004      	b.n	8009d4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2200      	movs	r2, #0
 8009d44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d46:	2301      	movs	r3, #1
 8009d48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d4a:	f000 ff7b 	bl	800ac44 <vPortExitCritical>

	return xReturn;
 8009d4e:	69fb      	ldr	r3, [r7, #28]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3720      	adds	r7, #32
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	20003638 	.word	0x20003638
 8009d5c:	2000364c 	.word	0x2000364c

08009d60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d60:	b480      	push	{r7}
 8009d62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d64:	4b03      	ldr	r3, [pc, #12]	; (8009d74 <vTaskMissedYield+0x14>)
 8009d66:	2201      	movs	r2, #1
 8009d68:	601a      	str	r2, [r3, #0]
}
 8009d6a:	bf00      	nop
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr
 8009d74:	20003648 	.word	0x20003648

08009d78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d80:	f000 f852 	bl	8009e28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d84:	4b06      	ldr	r3, [pc, #24]	; (8009da0 <prvIdleTask+0x28>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d9f9      	bls.n	8009d80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d8c:	4b05      	ldr	r3, [pc, #20]	; (8009da4 <prvIdleTask+0x2c>)
 8009d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d9c:	e7f0      	b.n	8009d80 <prvIdleTask+0x8>
 8009d9e:	bf00      	nop
 8009da0:	20003164 	.word	0x20003164
 8009da4:	e000ed04 	.word	0xe000ed04

08009da8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dae:	2300      	movs	r3, #0
 8009db0:	607b      	str	r3, [r7, #4]
 8009db2:	e00c      	b.n	8009dce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	4613      	mov	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4413      	add	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4a12      	ldr	r2, [pc, #72]	; (8009e08 <prvInitialiseTaskLists+0x60>)
 8009dc0:	4413      	add	r3, r2
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fe fabe 	bl	8008344 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	607b      	str	r3, [r7, #4]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b37      	cmp	r3, #55	; 0x37
 8009dd2:	d9ef      	bls.n	8009db4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009dd4:	480d      	ldr	r0, [pc, #52]	; (8009e0c <prvInitialiseTaskLists+0x64>)
 8009dd6:	f7fe fab5 	bl	8008344 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009dda:	480d      	ldr	r0, [pc, #52]	; (8009e10 <prvInitialiseTaskLists+0x68>)
 8009ddc:	f7fe fab2 	bl	8008344 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009de0:	480c      	ldr	r0, [pc, #48]	; (8009e14 <prvInitialiseTaskLists+0x6c>)
 8009de2:	f7fe faaf 	bl	8008344 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009de6:	480c      	ldr	r0, [pc, #48]	; (8009e18 <prvInitialiseTaskLists+0x70>)
 8009de8:	f7fe faac 	bl	8008344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009dec:	480b      	ldr	r0, [pc, #44]	; (8009e1c <prvInitialiseTaskLists+0x74>)
 8009dee:	f7fe faa9 	bl	8008344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009df2:	4b0b      	ldr	r3, [pc, #44]	; (8009e20 <prvInitialiseTaskLists+0x78>)
 8009df4:	4a05      	ldr	r2, [pc, #20]	; (8009e0c <prvInitialiseTaskLists+0x64>)
 8009df6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009df8:	4b0a      	ldr	r3, [pc, #40]	; (8009e24 <prvInitialiseTaskLists+0x7c>)
 8009dfa:	4a05      	ldr	r2, [pc, #20]	; (8009e10 <prvInitialiseTaskLists+0x68>)
 8009dfc:	601a      	str	r2, [r3, #0]
}
 8009dfe:	bf00      	nop
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20003164 	.word	0x20003164
 8009e0c:	200035c4 	.word	0x200035c4
 8009e10:	200035d8 	.word	0x200035d8
 8009e14:	200035f4 	.word	0x200035f4
 8009e18:	20003608 	.word	0x20003608
 8009e1c:	20003620 	.word	0x20003620
 8009e20:	200035ec 	.word	0x200035ec
 8009e24:	200035f0 	.word	0x200035f0

08009e28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e2e:	e019      	b.n	8009e64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e30:	f000 fed8 	bl	800abe4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e34:	4b10      	ldr	r3, [pc, #64]	; (8009e78 <prvCheckTasksWaitingTermination+0x50>)
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3304      	adds	r3, #4
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7fe fb09 	bl	8008458 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e46:	4b0d      	ldr	r3, [pc, #52]	; (8009e7c <prvCheckTasksWaitingTermination+0x54>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	4a0b      	ldr	r2, [pc, #44]	; (8009e7c <prvCheckTasksWaitingTermination+0x54>)
 8009e4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e50:	4b0b      	ldr	r3, [pc, #44]	; (8009e80 <prvCheckTasksWaitingTermination+0x58>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3b01      	subs	r3, #1
 8009e56:	4a0a      	ldr	r2, [pc, #40]	; (8009e80 <prvCheckTasksWaitingTermination+0x58>)
 8009e58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e5a:	f000 fef3 	bl	800ac44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f810 	bl	8009e84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e64:	4b06      	ldr	r3, [pc, #24]	; (8009e80 <prvCheckTasksWaitingTermination+0x58>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1e1      	bne.n	8009e30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e6c:	bf00      	nop
 8009e6e:	bf00      	nop
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	20003608 	.word	0x20003608
 8009e7c:	20003634 	.word	0x20003634
 8009e80:	2000361c 	.word	0x2000361c

08009e84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	3358      	adds	r3, #88	; 0x58
 8009e90:	4618      	mov	r0, r3
 8009e92:	f001 fa81 	bl	800b398 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d108      	bne.n	8009eb2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f001 f88b 	bl	800afc0 <vPortFree>
				vPortFree( pxTCB );
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f001 f888 	bl	800afc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009eb0:	e018      	b.n	8009ee4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d103      	bne.n	8009ec4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f001 f87f 	bl	800afc0 <vPortFree>
	}
 8009ec2:	e00f      	b.n	8009ee4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009eca:	2b02      	cmp	r3, #2
 8009ecc:	d00a      	beq.n	8009ee4 <prvDeleteTCB+0x60>
	__asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	60fb      	str	r3, [r7, #12]
}
 8009ee0:	bf00      	nop
 8009ee2:	e7fe      	b.n	8009ee2 <prvDeleteTCB+0x5e>
	}
 8009ee4:	bf00      	nop
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ef2:	4b0c      	ldr	r3, [pc, #48]	; (8009f24 <prvResetNextTaskUnblockTime+0x38>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d104      	bne.n	8009f06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009efc:	4b0a      	ldr	r3, [pc, #40]	; (8009f28 <prvResetNextTaskUnblockTime+0x3c>)
 8009efe:	f04f 32ff 	mov.w	r2, #4294967295
 8009f02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f04:	e008      	b.n	8009f18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f06:	4b07      	ldr	r3, [pc, #28]	; (8009f24 <prvResetNextTaskUnblockTime+0x38>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	4a04      	ldr	r2, [pc, #16]	; (8009f28 <prvResetNextTaskUnblockTime+0x3c>)
 8009f16:	6013      	str	r3, [r2, #0]
}
 8009f18:	bf00      	nop
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr
 8009f24:	200035ec 	.word	0x200035ec
 8009f28:	20003654 	.word	0x20003654

08009f2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f32:	4b0b      	ldr	r3, [pc, #44]	; (8009f60 <xTaskGetSchedulerState+0x34>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d102      	bne.n	8009f40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	607b      	str	r3, [r7, #4]
 8009f3e:	e008      	b.n	8009f52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f40:	4b08      	ldr	r3, [pc, #32]	; (8009f64 <xTaskGetSchedulerState+0x38>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d102      	bne.n	8009f4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f48:	2302      	movs	r3, #2
 8009f4a:	607b      	str	r3, [r7, #4]
 8009f4c:	e001      	b.n	8009f52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f52:	687b      	ldr	r3, [r7, #4]
	}
 8009f54:	4618      	mov	r0, r3
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr
 8009f60:	20003640 	.word	0x20003640
 8009f64:	2000365c 	.word	0x2000365c

08009f68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009f74:	2300      	movs	r3, #0
 8009f76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d051      	beq.n	800a022 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f82:	4b2a      	ldr	r3, [pc, #168]	; (800a02c <xTaskPriorityInherit+0xc4>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d241      	bcs.n	800a010 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	db06      	blt.n	8009fa2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f94:	4b25      	ldr	r3, [pc, #148]	; (800a02c <xTaskPriorityInherit+0xc4>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	6959      	ldr	r1, [r3, #20]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009faa:	4613      	mov	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4a1f      	ldr	r2, [pc, #124]	; (800a030 <xTaskPriorityInherit+0xc8>)
 8009fb4:	4413      	add	r3, r2
 8009fb6:	4299      	cmp	r1, r3
 8009fb8:	d122      	bne.n	800a000 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	3304      	adds	r3, #4
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fe fa4a 	bl	8008458 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009fc4:	4b19      	ldr	r3, [pc, #100]	; (800a02c <xTaskPriorityInherit+0xc4>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd2:	4b18      	ldr	r3, [pc, #96]	; (800a034 <xTaskPriorityInherit+0xcc>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d903      	bls.n	8009fe2 <xTaskPriorityInherit+0x7a>
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fde:	4a15      	ldr	r2, [pc, #84]	; (800a034 <xTaskPriorityInherit+0xcc>)
 8009fe0:	6013      	str	r3, [r2, #0]
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	4413      	add	r3, r2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4a10      	ldr	r2, [pc, #64]	; (800a030 <xTaskPriorityInherit+0xc8>)
 8009ff0:	441a      	add	r2, r3
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	f7fe f9d0 	bl	800839e <vListInsertEnd>
 8009ffe:	e004      	b.n	800a00a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a000:	4b0a      	ldr	r3, [pc, #40]	; (800a02c <xTaskPriorityInherit+0xc4>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a00a:	2301      	movs	r3, #1
 800a00c:	60fb      	str	r3, [r7, #12]
 800a00e:	e008      	b.n	800a022 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a014:	4b05      	ldr	r3, [pc, #20]	; (800a02c <xTaskPriorityInherit+0xc4>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d201      	bcs.n	800a022 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a01e:	2301      	movs	r3, #1
 800a020:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a022:	68fb      	ldr	r3, [r7, #12]
	}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	20003160 	.word	0x20003160
 800a030:	20003164 	.word	0x20003164
 800a034:	2000363c 	.word	0x2000363c

0800a038 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a044:	2300      	movs	r3, #0
 800a046:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d056      	beq.n	800a0fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a04e:	4b2e      	ldr	r3, [pc, #184]	; (800a108 <xTaskPriorityDisinherit+0xd0>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	693a      	ldr	r2, [r7, #16]
 800a054:	429a      	cmp	r2, r3
 800a056:	d00a      	beq.n	800a06e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	60fb      	str	r3, [r7, #12]
}
 800a06a:	bf00      	nop
 800a06c:	e7fe      	b.n	800a06c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a072:	2b00      	cmp	r3, #0
 800a074:	d10a      	bne.n	800a08c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
 800a086:	60bb      	str	r3, [r7, #8]
}
 800a088:	bf00      	nop
 800a08a:	e7fe      	b.n	800a08a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a090:	1e5a      	subs	r2, r3, #1
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d02c      	beq.n	800a0fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d128      	bne.n	800a0fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fe f9d2 	bl	8008458 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0cc:	4b0f      	ldr	r3, [pc, #60]	; (800a10c <xTaskPriorityDisinherit+0xd4>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d903      	bls.n	800a0dc <xTaskPriorityDisinherit+0xa4>
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d8:	4a0c      	ldr	r2, [pc, #48]	; (800a10c <xTaskPriorityDisinherit+0xd4>)
 800a0da:	6013      	str	r3, [r2, #0]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4413      	add	r3, r2
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	4a09      	ldr	r2, [pc, #36]	; (800a110 <xTaskPriorityDisinherit+0xd8>)
 800a0ea:	441a      	add	r2, r3
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	f7fe f953 	bl	800839e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0fc:	697b      	ldr	r3, [r7, #20]
	}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3718      	adds	r7, #24
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	20003160 	.word	0x20003160
 800a10c:	2000363c 	.word	0x2000363c
 800a110:	20003164 	.word	0x20003164

0800a114 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a114:	b580      	push	{r7, lr}
 800a116:	b088      	sub	sp, #32
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a122:	2301      	movs	r3, #1
 800a124:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d06a      	beq.n	800a202 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10a      	bne.n	800a14a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	60fb      	str	r3, [r7, #12]
}
 800a146:	bf00      	nop
 800a148:	e7fe      	b.n	800a148 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a14e:	683a      	ldr	r2, [r7, #0]
 800a150:	429a      	cmp	r2, r3
 800a152:	d902      	bls.n	800a15a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	61fb      	str	r3, [r7, #28]
 800a158:	e002      	b.n	800a160 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a15e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a164:	69fa      	ldr	r2, [r7, #28]
 800a166:	429a      	cmp	r2, r3
 800a168:	d04b      	beq.n	800a202 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	429a      	cmp	r2, r3
 800a172:	d146      	bne.n	800a202 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a174:	4b25      	ldr	r3, [pc, #148]	; (800a20c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	69ba      	ldr	r2, [r7, #24]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d10a      	bne.n	800a194 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	60bb      	str	r3, [r7, #8]
}
 800a190:	bf00      	nop
 800a192:	e7fe      	b.n	800a192 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a198:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	69fa      	ldr	r2, [r7, #28]
 800a19e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	699b      	ldr	r3, [r3, #24]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	db04      	blt.n	800a1b2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	6959      	ldr	r1, [r3, #20]
 800a1b6:	693a      	ldr	r2, [r7, #16]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4a13      	ldr	r2, [pc, #76]	; (800a210 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a1c2:	4413      	add	r3, r2
 800a1c4:	4299      	cmp	r1, r3
 800a1c6:	d11c      	bne.n	800a202 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7fe f943 	bl	8008458 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d6:	4b0f      	ldr	r3, [pc, #60]	; (800a214 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d903      	bls.n	800a1e6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e2:	4a0c      	ldr	r2, [pc, #48]	; (800a214 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a1e4:	6013      	str	r3, [r2, #0]
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	4413      	add	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4a07      	ldr	r2, [pc, #28]	; (800a210 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a1f4:	441a      	add	r2, r3
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	4610      	mov	r0, r2
 800a1fe:	f7fe f8ce 	bl	800839e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a202:	bf00      	nop
 800a204:	3720      	adds	r7, #32
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	20003160 	.word	0x20003160
 800a210:	20003164 	.word	0x20003164
 800a214:	2000363c 	.word	0x2000363c

0800a218 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a218:	b480      	push	{r7}
 800a21a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a21c:	4b07      	ldr	r3, [pc, #28]	; (800a23c <pvTaskIncrementMutexHeldCount+0x24>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d004      	beq.n	800a22e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a224:	4b05      	ldr	r3, [pc, #20]	; (800a23c <pvTaskIncrementMutexHeldCount+0x24>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a22a:	3201      	adds	r2, #1
 800a22c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a22e:	4b03      	ldr	r3, [pc, #12]	; (800a23c <pvTaskIncrementMutexHeldCount+0x24>)
 800a230:	681b      	ldr	r3, [r3, #0]
	}
 800a232:	4618      	mov	r0, r3
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	20003160 	.word	0x20003160

0800a240 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a24a:	4b21      	ldr	r3, [pc, #132]	; (800a2d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a250:	4b20      	ldr	r3, [pc, #128]	; (800a2d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	3304      	adds	r3, #4
 800a256:	4618      	mov	r0, r3
 800a258:	f7fe f8fe 	bl	8008458 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a262:	d10a      	bne.n	800a27a <prvAddCurrentTaskToDelayedList+0x3a>
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d007      	beq.n	800a27a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a26a:	4b1a      	ldr	r3, [pc, #104]	; (800a2d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	3304      	adds	r3, #4
 800a270:	4619      	mov	r1, r3
 800a272:	4819      	ldr	r0, [pc, #100]	; (800a2d8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a274:	f7fe f893 	bl	800839e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a278:	e026      	b.n	800a2c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4413      	add	r3, r2
 800a280:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a282:	4b14      	ldr	r3, [pc, #80]	; (800a2d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d209      	bcs.n	800a2a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a292:	4b12      	ldr	r3, [pc, #72]	; (800a2dc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	4b0f      	ldr	r3, [pc, #60]	; (800a2d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3304      	adds	r3, #4
 800a29c:	4619      	mov	r1, r3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	f7fe f8a1 	bl	80083e6 <vListInsert>
}
 800a2a4:	e010      	b.n	800a2c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2a6:	4b0e      	ldr	r3, [pc, #56]	; (800a2e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	4b0a      	ldr	r3, [pc, #40]	; (800a2d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	3304      	adds	r3, #4
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	4610      	mov	r0, r2
 800a2b4:	f7fe f897 	bl	80083e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a2b8:	4b0a      	ldr	r3, [pc, #40]	; (800a2e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d202      	bcs.n	800a2c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a2c2:	4a08      	ldr	r2, [pc, #32]	; (800a2e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	6013      	str	r3, [r2, #0]
}
 800a2c8:	bf00      	nop
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	20003638 	.word	0x20003638
 800a2d4:	20003160 	.word	0x20003160
 800a2d8:	20003620 	.word	0x20003620
 800a2dc:	200035f0 	.word	0x200035f0
 800a2e0:	200035ec 	.word	0x200035ec
 800a2e4:	20003654 	.word	0x20003654

0800a2e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b08a      	sub	sp, #40	; 0x28
 800a2ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a2f2:	f000 fb07 	bl	800a904 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a2f6:	4b1c      	ldr	r3, [pc, #112]	; (800a368 <xTimerCreateTimerTask+0x80>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d021      	beq.n	800a342 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a302:	2300      	movs	r3, #0
 800a304:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a306:	1d3a      	adds	r2, r7, #4
 800a308:	f107 0108 	add.w	r1, r7, #8
 800a30c:	f107 030c 	add.w	r3, r7, #12
 800a310:	4618      	mov	r0, r3
 800a312:	f7fd fffd 	bl	8008310 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	9202      	str	r2, [sp, #8]
 800a31e:	9301      	str	r3, [sp, #4]
 800a320:	2302      	movs	r3, #2
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	2300      	movs	r3, #0
 800a326:	460a      	mov	r2, r1
 800a328:	4910      	ldr	r1, [pc, #64]	; (800a36c <xTimerCreateTimerTask+0x84>)
 800a32a:	4811      	ldr	r0, [pc, #68]	; (800a370 <xTimerCreateTimerTask+0x88>)
 800a32c:	f7fe ff94 	bl	8009258 <xTaskCreateStatic>
 800a330:	4603      	mov	r3, r0
 800a332:	4a10      	ldr	r2, [pc, #64]	; (800a374 <xTimerCreateTimerTask+0x8c>)
 800a334:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a336:	4b0f      	ldr	r3, [pc, #60]	; (800a374 <xTimerCreateTimerTask+0x8c>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d001      	beq.n	800a342 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a33e:	2301      	movs	r3, #1
 800a340:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d10a      	bne.n	800a35e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34c:	f383 8811 	msr	BASEPRI, r3
 800a350:	f3bf 8f6f 	isb	sy
 800a354:	f3bf 8f4f 	dsb	sy
 800a358:	613b      	str	r3, [r7, #16]
}
 800a35a:	bf00      	nop
 800a35c:	e7fe      	b.n	800a35c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a35e:	697b      	ldr	r3, [r7, #20]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3718      	adds	r7, #24
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	20003698 	.word	0x20003698
 800a36c:	0800c128 	.word	0x0800c128
 800a370:	0800a4ad 	.word	0x0800a4ad
 800a374:	2000369c 	.word	0x2000369c

0800a378 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b08a      	sub	sp, #40	; 0x28
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
 800a384:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a386:	2300      	movs	r3, #0
 800a388:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10a      	bne.n	800a3a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	623b      	str	r3, [r7, #32]
}
 800a3a2:	bf00      	nop
 800a3a4:	e7fe      	b.n	800a3a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a3a6:	4b1a      	ldr	r3, [pc, #104]	; (800a410 <xTimerGenericCommand+0x98>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d02a      	beq.n	800a404 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	2b05      	cmp	r3, #5
 800a3be:	dc18      	bgt.n	800a3f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a3c0:	f7ff fdb4 	bl	8009f2c <xTaskGetSchedulerState>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	d109      	bne.n	800a3de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a3ca:	4b11      	ldr	r3, [pc, #68]	; (800a410 <xTimerGenericCommand+0x98>)
 800a3cc:	6818      	ldr	r0, [r3, #0]
 800a3ce:	f107 0110 	add.w	r1, r7, #16
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3d6:	f7fe f9a7 	bl	8008728 <xQueueGenericSend>
 800a3da:	6278      	str	r0, [r7, #36]	; 0x24
 800a3dc:	e012      	b.n	800a404 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a3de:	4b0c      	ldr	r3, [pc, #48]	; (800a410 <xTimerGenericCommand+0x98>)
 800a3e0:	6818      	ldr	r0, [r3, #0]
 800a3e2:	f107 0110 	add.w	r1, r7, #16
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f7fe f99d 	bl	8008728 <xQueueGenericSend>
 800a3ee:	6278      	str	r0, [r7, #36]	; 0x24
 800a3f0:	e008      	b.n	800a404 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a3f2:	4b07      	ldr	r3, [pc, #28]	; (800a410 <xTimerGenericCommand+0x98>)
 800a3f4:	6818      	ldr	r0, [r3, #0]
 800a3f6:	f107 0110 	add.w	r1, r7, #16
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	683a      	ldr	r2, [r7, #0]
 800a3fe:	f7fe fa91 	bl	8008924 <xQueueGenericSendFromISR>
 800a402:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a406:	4618      	mov	r0, r3
 800a408:	3728      	adds	r7, #40	; 0x28
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	20003698 	.word	0x20003698

0800a414 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b088      	sub	sp, #32
 800a418:	af02      	add	r7, sp, #8
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a41e:	4b22      	ldr	r3, [pc, #136]	; (800a4a8 <prvProcessExpiredTimer+0x94>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	3304      	adds	r3, #4
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7fe f813 	bl	8008458 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d022      	beq.n	800a486 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	699a      	ldr	r2, [r3, #24]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	18d1      	adds	r1, r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	683a      	ldr	r2, [r7, #0]
 800a44c:	6978      	ldr	r0, [r7, #20]
 800a44e:	f000 f8d1 	bl	800a5f4 <prvInsertTimerInActiveList>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d01f      	beq.n	800a498 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a458:	2300      	movs	r3, #0
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	2300      	movs	r3, #0
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	2100      	movs	r1, #0
 800a462:	6978      	ldr	r0, [r7, #20]
 800a464:	f7ff ff88 	bl	800a378 <xTimerGenericCommand>
 800a468:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d113      	bne.n	800a498 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	60fb      	str	r3, [r7, #12]
}
 800a482:	bf00      	nop
 800a484:	e7fe      	b.n	800a484 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a48c:	f023 0301 	bic.w	r3, r3, #1
 800a490:	b2da      	uxtb	r2, r3
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	6a1b      	ldr	r3, [r3, #32]
 800a49c:	6978      	ldr	r0, [r7, #20]
 800a49e:	4798      	blx	r3
}
 800a4a0:	bf00      	nop
 800a4a2:	3718      	adds	r7, #24
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	20003690 	.word	0x20003690

0800a4ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4b4:	f107 0308 	add.w	r3, r7, #8
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f000 f857 	bl	800a56c <prvGetNextExpireTime>
 800a4be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 f803 	bl	800a4d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a4ca:	f000 f8d5 	bl	800a678 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4ce:	e7f1      	b.n	800a4b4 <prvTimerTask+0x8>

0800a4d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a4da:	f7ff f91f 	bl	800971c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4de:	f107 0308 	add.w	r3, r7, #8
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 f866 	bl	800a5b4 <prvSampleTimeNow>
 800a4e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d130      	bne.n	800a552 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10a      	bne.n	800a50c <prvProcessTimerOrBlockTask+0x3c>
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d806      	bhi.n	800a50c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a4fe:	f7ff f91b 	bl	8009738 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a502:	68f9      	ldr	r1, [r7, #12]
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f7ff ff85 	bl	800a414 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a50a:	e024      	b.n	800a556 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d008      	beq.n	800a524 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a512:	4b13      	ldr	r3, [pc, #76]	; (800a560 <prvProcessTimerOrBlockTask+0x90>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d101      	bne.n	800a520 <prvProcessTimerOrBlockTask+0x50>
 800a51c:	2301      	movs	r3, #1
 800a51e:	e000      	b.n	800a522 <prvProcessTimerOrBlockTask+0x52>
 800a520:	2300      	movs	r3, #0
 800a522:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a524:	4b0f      	ldr	r3, [pc, #60]	; (800a564 <prvProcessTimerOrBlockTask+0x94>)
 800a526:	6818      	ldr	r0, [r3, #0]
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	4619      	mov	r1, r3
 800a532:	f7fe fe5d 	bl	80091f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a536:	f7ff f8ff 	bl	8009738 <xTaskResumeAll>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10a      	bne.n	800a556 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a540:	4b09      	ldr	r3, [pc, #36]	; (800a568 <prvProcessTimerOrBlockTask+0x98>)
 800a542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a546:	601a      	str	r2, [r3, #0]
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	f3bf 8f6f 	isb	sy
}
 800a550:	e001      	b.n	800a556 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a552:	f7ff f8f1 	bl	8009738 <xTaskResumeAll>
}
 800a556:	bf00      	nop
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	20003694 	.word	0x20003694
 800a564:	20003698 	.word	0x20003698
 800a568:	e000ed04 	.word	0xe000ed04

0800a56c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a574:	4b0e      	ldr	r3, [pc, #56]	; (800a5b0 <prvGetNextExpireTime+0x44>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d101      	bne.n	800a582 <prvGetNextExpireTime+0x16>
 800a57e:	2201      	movs	r2, #1
 800a580:	e000      	b.n	800a584 <prvGetNextExpireTime+0x18>
 800a582:	2200      	movs	r2, #0
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d105      	bne.n	800a59c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a590:	4b07      	ldr	r3, [pc, #28]	; (800a5b0 <prvGetNextExpireTime+0x44>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	60fb      	str	r3, [r7, #12]
 800a59a:	e001      	b.n	800a5a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a59c:	2300      	movs	r3, #0
 800a59e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	20003690 	.word	0x20003690

0800a5b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a5bc:	f7ff f95a 	bl	8009874 <xTaskGetTickCount>
 800a5c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a5c2:	4b0b      	ldr	r3, [pc, #44]	; (800a5f0 <prvSampleTimeNow+0x3c>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d205      	bcs.n	800a5d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a5cc:	f000 f936 	bl	800a83c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	601a      	str	r2, [r3, #0]
 800a5d6:	e002      	b.n	800a5de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a5de:	4a04      	ldr	r2, [pc, #16]	; (800a5f0 <prvSampleTimeNow+0x3c>)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	200036a0 	.word	0x200036a0

0800a5f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	607a      	str	r2, [r7, #4]
 800a600:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a602:	2300      	movs	r3, #0
 800a604:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	68ba      	ldr	r2, [r7, #8]
 800a60a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	429a      	cmp	r2, r3
 800a618:	d812      	bhi.n	800a640 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	1ad2      	subs	r2, r2, r3
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	699b      	ldr	r3, [r3, #24]
 800a624:	429a      	cmp	r2, r3
 800a626:	d302      	bcc.n	800a62e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a628:	2301      	movs	r3, #1
 800a62a:	617b      	str	r3, [r7, #20]
 800a62c:	e01b      	b.n	800a666 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a62e:	4b10      	ldr	r3, [pc, #64]	; (800a670 <prvInsertTimerInActiveList+0x7c>)
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	3304      	adds	r3, #4
 800a636:	4619      	mov	r1, r3
 800a638:	4610      	mov	r0, r2
 800a63a:	f7fd fed4 	bl	80083e6 <vListInsert>
 800a63e:	e012      	b.n	800a666 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	429a      	cmp	r2, r3
 800a646:	d206      	bcs.n	800a656 <prvInsertTimerInActiveList+0x62>
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d302      	bcc.n	800a656 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a650:	2301      	movs	r3, #1
 800a652:	617b      	str	r3, [r7, #20]
 800a654:	e007      	b.n	800a666 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a656:	4b07      	ldr	r3, [pc, #28]	; (800a674 <prvInsertTimerInActiveList+0x80>)
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	3304      	adds	r3, #4
 800a65e:	4619      	mov	r1, r3
 800a660:	4610      	mov	r0, r2
 800a662:	f7fd fec0 	bl	80083e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a666:	697b      	ldr	r3, [r7, #20]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3718      	adds	r7, #24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	20003694 	.word	0x20003694
 800a674:	20003690 	.word	0x20003690

0800a678 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b08e      	sub	sp, #56	; 0x38
 800a67c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a67e:	e0ca      	b.n	800a816 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2b00      	cmp	r3, #0
 800a684:	da18      	bge.n	800a6b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a686:	1d3b      	adds	r3, r7, #4
 800a688:	3304      	adds	r3, #4
 800a68a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10a      	bne.n	800a6a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a696:	f383 8811 	msr	BASEPRI, r3
 800a69a:	f3bf 8f6f 	isb	sy
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	61fb      	str	r3, [r7, #28]
}
 800a6a4:	bf00      	nop
 800a6a6:	e7fe      	b.n	800a6a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6ae:	6850      	ldr	r0, [r2, #4]
 800a6b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6b2:	6892      	ldr	r2, [r2, #8]
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f2c0 80ab 	blt.w	800a816 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c6:	695b      	ldr	r3, [r3, #20]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d004      	beq.n	800a6d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ce:	3304      	adds	r3, #4
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fd fec1 	bl	8008458 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6d6:	463b      	mov	r3, r7
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7ff ff6b 	bl	800a5b4 <prvSampleTimeNow>
 800a6de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2b09      	cmp	r3, #9
 800a6e4:	f200 8096 	bhi.w	800a814 <prvProcessReceivedCommands+0x19c>
 800a6e8:	a201      	add	r2, pc, #4	; (adr r2, 800a6f0 <prvProcessReceivedCommands+0x78>)
 800a6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ee:	bf00      	nop
 800a6f0:	0800a719 	.word	0x0800a719
 800a6f4:	0800a719 	.word	0x0800a719
 800a6f8:	0800a719 	.word	0x0800a719
 800a6fc:	0800a78d 	.word	0x0800a78d
 800a700:	0800a7a1 	.word	0x0800a7a1
 800a704:	0800a7eb 	.word	0x0800a7eb
 800a708:	0800a719 	.word	0x0800a719
 800a70c:	0800a719 	.word	0x0800a719
 800a710:	0800a78d 	.word	0x0800a78d
 800a714:	0800a7a1 	.word	0x0800a7a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a71e:	f043 0301 	orr.w	r3, r3, #1
 800a722:	b2da      	uxtb	r2, r3
 800a724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a726:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72e:	699b      	ldr	r3, [r3, #24]
 800a730:	18d1      	adds	r1, r2, r3
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a738:	f7ff ff5c 	bl	800a5f4 <prvInsertTimerInActiveList>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d069      	beq.n	800a816 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a744:	6a1b      	ldr	r3, [r3, #32]
 800a746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a748:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a750:	f003 0304 	and.w	r3, r3, #4
 800a754:	2b00      	cmp	r3, #0
 800a756:	d05e      	beq.n	800a816 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	441a      	add	r2, r3
 800a760:	2300      	movs	r3, #0
 800a762:	9300      	str	r3, [sp, #0]
 800a764:	2300      	movs	r3, #0
 800a766:	2100      	movs	r1, #0
 800a768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a76a:	f7ff fe05 	bl	800a378 <xTimerGenericCommand>
 800a76e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a770:	6a3b      	ldr	r3, [r7, #32]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d14f      	bne.n	800a816 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77a:	f383 8811 	msr	BASEPRI, r3
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	61bb      	str	r3, [r7, #24]
}
 800a788:	bf00      	nop
 800a78a:	e7fe      	b.n	800a78a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a792:	f023 0301 	bic.w	r3, r3, #1
 800a796:	b2da      	uxtb	r2, r3
 800a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a79e:	e03a      	b.n	800a816 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7a6:	f043 0301 	orr.w	r3, r3, #1
 800a7aa:	b2da      	uxtb	r2, r3
 800a7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ba:	699b      	ldr	r3, [r3, #24]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10a      	bne.n	800a7d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c4:	f383 8811 	msr	BASEPRI, r3
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	617b      	str	r3, [r7, #20]
}
 800a7d2:	bf00      	nop
 800a7d4:	e7fe      	b.n	800a7d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d8:	699a      	ldr	r2, [r3, #24]
 800a7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7dc:	18d1      	adds	r1, r2, r3
 800a7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7e4:	f7ff ff06 	bl	800a5f4 <prvInsertTimerInActiveList>
					break;
 800a7e8:	e015      	b.n	800a816 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7f0:	f003 0302 	and.w	r3, r3, #2
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d103      	bne.n	800a800 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a7f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7fa:	f000 fbe1 	bl	800afc0 <vPortFree>
 800a7fe:	e00a      	b.n	800a816 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a806:	f023 0301 	bic.w	r3, r3, #1
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a812:	e000      	b.n	800a816 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a814:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a816:	4b08      	ldr	r3, [pc, #32]	; (800a838 <prvProcessReceivedCommands+0x1c0>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	1d39      	adds	r1, r7, #4
 800a81c:	2200      	movs	r2, #0
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fe f9a8 	bl	8008b74 <xQueueReceive>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	f47f af2a 	bne.w	800a680 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a82c:	bf00      	nop
 800a82e:	bf00      	nop
 800a830:	3730      	adds	r7, #48	; 0x30
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	20003698 	.word	0x20003698

0800a83c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b088      	sub	sp, #32
 800a840:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a842:	e048      	b.n	800a8d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a844:	4b2d      	ldr	r3, [pc, #180]	; (800a8fc <prvSwitchTimerLists+0xc0>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a84e:	4b2b      	ldr	r3, [pc, #172]	; (800a8fc <prvSwitchTimerLists+0xc0>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	3304      	adds	r3, #4
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fd fdfb 	bl	8008458 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6a1b      	ldr	r3, [r3, #32]
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a870:	f003 0304 	and.w	r3, r3, #4
 800a874:	2b00      	cmp	r3, #0
 800a876:	d02e      	beq.n	800a8d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	699b      	ldr	r3, [r3, #24]
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	4413      	add	r3, r2
 800a880:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	429a      	cmp	r2, r3
 800a888:	d90e      	bls.n	800a8a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a896:	4b19      	ldr	r3, [pc, #100]	; (800a8fc <prvSwitchTimerLists+0xc0>)
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	3304      	adds	r3, #4
 800a89e:	4619      	mov	r1, r3
 800a8a0:	4610      	mov	r0, r2
 800a8a2:	f7fd fda0 	bl	80083e6 <vListInsert>
 800a8a6:	e016      	b.n	800a8d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	693a      	ldr	r2, [r7, #16]
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f7ff fd60 	bl	800a378 <xTimerGenericCommand>
 800a8b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10a      	bne.n	800a8d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	603b      	str	r3, [r7, #0]
}
 800a8d2:	bf00      	nop
 800a8d4:	e7fe      	b.n	800a8d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8d6:	4b09      	ldr	r3, [pc, #36]	; (800a8fc <prvSwitchTimerLists+0xc0>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1b1      	bne.n	800a844 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a8e0:	4b06      	ldr	r3, [pc, #24]	; (800a8fc <prvSwitchTimerLists+0xc0>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a8e6:	4b06      	ldr	r3, [pc, #24]	; (800a900 <prvSwitchTimerLists+0xc4>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a04      	ldr	r2, [pc, #16]	; (800a8fc <prvSwitchTimerLists+0xc0>)
 800a8ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a8ee:	4a04      	ldr	r2, [pc, #16]	; (800a900 <prvSwitchTimerLists+0xc4>)
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	6013      	str	r3, [r2, #0]
}
 800a8f4:	bf00      	nop
 800a8f6:	3718      	adds	r7, #24
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	20003690 	.word	0x20003690
 800a900:	20003694 	.word	0x20003694

0800a904 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a90a:	f000 f96b 	bl	800abe4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a90e:	4b15      	ldr	r3, [pc, #84]	; (800a964 <prvCheckForValidListAndQueue+0x60>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d120      	bne.n	800a958 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a916:	4814      	ldr	r0, [pc, #80]	; (800a968 <prvCheckForValidListAndQueue+0x64>)
 800a918:	f7fd fd14 	bl	8008344 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a91c:	4813      	ldr	r0, [pc, #76]	; (800a96c <prvCheckForValidListAndQueue+0x68>)
 800a91e:	f7fd fd11 	bl	8008344 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a922:	4b13      	ldr	r3, [pc, #76]	; (800a970 <prvCheckForValidListAndQueue+0x6c>)
 800a924:	4a10      	ldr	r2, [pc, #64]	; (800a968 <prvCheckForValidListAndQueue+0x64>)
 800a926:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a928:	4b12      	ldr	r3, [pc, #72]	; (800a974 <prvCheckForValidListAndQueue+0x70>)
 800a92a:	4a10      	ldr	r2, [pc, #64]	; (800a96c <prvCheckForValidListAndQueue+0x68>)
 800a92c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a92e:	2300      	movs	r3, #0
 800a930:	9300      	str	r3, [sp, #0]
 800a932:	4b11      	ldr	r3, [pc, #68]	; (800a978 <prvCheckForValidListAndQueue+0x74>)
 800a934:	4a11      	ldr	r2, [pc, #68]	; (800a97c <prvCheckForValidListAndQueue+0x78>)
 800a936:	2110      	movs	r1, #16
 800a938:	200a      	movs	r0, #10
 800a93a:	f7fd fe1f 	bl	800857c <xQueueGenericCreateStatic>
 800a93e:	4603      	mov	r3, r0
 800a940:	4a08      	ldr	r2, [pc, #32]	; (800a964 <prvCheckForValidListAndQueue+0x60>)
 800a942:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a944:	4b07      	ldr	r3, [pc, #28]	; (800a964 <prvCheckForValidListAndQueue+0x60>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d005      	beq.n	800a958 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a94c:	4b05      	ldr	r3, [pc, #20]	; (800a964 <prvCheckForValidListAndQueue+0x60>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	490b      	ldr	r1, [pc, #44]	; (800a980 <prvCheckForValidListAndQueue+0x7c>)
 800a952:	4618      	mov	r0, r3
 800a954:	f7fe fc22 	bl	800919c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a958:	f000 f974 	bl	800ac44 <vPortExitCritical>
}
 800a95c:	bf00      	nop
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	20003698 	.word	0x20003698
 800a968:	20003668 	.word	0x20003668
 800a96c:	2000367c 	.word	0x2000367c
 800a970:	20003690 	.word	0x20003690
 800a974:	20003694 	.word	0x20003694
 800a978:	20003744 	.word	0x20003744
 800a97c:	200036a4 	.word	0x200036a4
 800a980:	0800c130 	.word	0x0800c130

0800a984 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	3b04      	subs	r3, #4
 800a994:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a99c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	3b04      	subs	r3, #4
 800a9a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	f023 0201 	bic.w	r2, r3, #1
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	3b04      	subs	r3, #4
 800a9b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a9b4:	4a0c      	ldr	r2, [pc, #48]	; (800a9e8 <pxPortInitialiseStack+0x64>)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	3b14      	subs	r3, #20
 800a9be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	3b04      	subs	r3, #4
 800a9ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f06f 0202 	mvn.w	r2, #2
 800a9d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	3b20      	subs	r3, #32
 800a9d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a9da:	68fb      	ldr	r3, [r7, #12]
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3714      	adds	r7, #20
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr
 800a9e8:	0800a9ed 	.word	0x0800a9ed

0800a9ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a9f6:	4b12      	ldr	r3, [pc, #72]	; (800aa40 <prvTaskExitError+0x54>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9fe:	d00a      	beq.n	800aa16 <prvTaskExitError+0x2a>
	__asm volatile
 800aa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	60fb      	str	r3, [r7, #12]
}
 800aa12:	bf00      	nop
 800aa14:	e7fe      	b.n	800aa14 <prvTaskExitError+0x28>
	__asm volatile
 800aa16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1a:	f383 8811 	msr	BASEPRI, r3
 800aa1e:	f3bf 8f6f 	isb	sy
 800aa22:	f3bf 8f4f 	dsb	sy
 800aa26:	60bb      	str	r3, [r7, #8]
}
 800aa28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa2a:	bf00      	nop
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d0fc      	beq.n	800aa2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa32:	bf00      	nop
 800aa34:	bf00      	nop
 800aa36:	3714      	adds	r7, #20
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr
 800aa40:	20000354 	.word	0x20000354
	...

0800aa50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa50:	4b07      	ldr	r3, [pc, #28]	; (800aa70 <pxCurrentTCBConst2>)
 800aa52:	6819      	ldr	r1, [r3, #0]
 800aa54:	6808      	ldr	r0, [r1, #0]
 800aa56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5a:	f380 8809 	msr	PSP, r0
 800aa5e:	f3bf 8f6f 	isb	sy
 800aa62:	f04f 0000 	mov.w	r0, #0
 800aa66:	f380 8811 	msr	BASEPRI, r0
 800aa6a:	4770      	bx	lr
 800aa6c:	f3af 8000 	nop.w

0800aa70 <pxCurrentTCBConst2>:
 800aa70:	20003160 	.word	0x20003160
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa74:	bf00      	nop
 800aa76:	bf00      	nop

0800aa78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa78:	4808      	ldr	r0, [pc, #32]	; (800aa9c <prvPortStartFirstTask+0x24>)
 800aa7a:	6800      	ldr	r0, [r0, #0]
 800aa7c:	6800      	ldr	r0, [r0, #0]
 800aa7e:	f380 8808 	msr	MSP, r0
 800aa82:	f04f 0000 	mov.w	r0, #0
 800aa86:	f380 8814 	msr	CONTROL, r0
 800aa8a:	b662      	cpsie	i
 800aa8c:	b661      	cpsie	f
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	df00      	svc	0
 800aa98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa9a:	bf00      	nop
 800aa9c:	e000ed08 	.word	0xe000ed08

0800aaa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aaa6:	4b46      	ldr	r3, [pc, #280]	; (800abc0 <xPortStartScheduler+0x120>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a46      	ldr	r2, [pc, #280]	; (800abc4 <xPortStartScheduler+0x124>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d10a      	bne.n	800aac6 <xPortStartScheduler+0x26>
	__asm volatile
 800aab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab4:	f383 8811 	msr	BASEPRI, r3
 800aab8:	f3bf 8f6f 	isb	sy
 800aabc:	f3bf 8f4f 	dsb	sy
 800aac0:	613b      	str	r3, [r7, #16]
}
 800aac2:	bf00      	nop
 800aac4:	e7fe      	b.n	800aac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aac6:	4b3e      	ldr	r3, [pc, #248]	; (800abc0 <xPortStartScheduler+0x120>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a3f      	ldr	r2, [pc, #252]	; (800abc8 <xPortStartScheduler+0x128>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d10a      	bne.n	800aae6 <xPortStartScheduler+0x46>
	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	60fb      	str	r3, [r7, #12]
}
 800aae2:	bf00      	nop
 800aae4:	e7fe      	b.n	800aae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aae6:	4b39      	ldr	r3, [pc, #228]	; (800abcc <xPortStartScheduler+0x12c>)
 800aae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	22ff      	movs	r2, #255	; 0xff
 800aaf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab00:	78fb      	ldrb	r3, [r7, #3]
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	4b31      	ldr	r3, [pc, #196]	; (800abd0 <xPortStartScheduler+0x130>)
 800ab0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab0e:	4b31      	ldr	r3, [pc, #196]	; (800abd4 <xPortStartScheduler+0x134>)
 800ab10:	2207      	movs	r2, #7
 800ab12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab14:	e009      	b.n	800ab2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ab16:	4b2f      	ldr	r3, [pc, #188]	; (800abd4 <xPortStartScheduler+0x134>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	4a2d      	ldr	r2, [pc, #180]	; (800abd4 <xPortStartScheduler+0x134>)
 800ab1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab20:	78fb      	ldrb	r3, [r7, #3]
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	005b      	lsls	r3, r3, #1
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab2a:	78fb      	ldrb	r3, [r7, #3]
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab32:	2b80      	cmp	r3, #128	; 0x80
 800ab34:	d0ef      	beq.n	800ab16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab36:	4b27      	ldr	r3, [pc, #156]	; (800abd4 <xPortStartScheduler+0x134>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f1c3 0307 	rsb	r3, r3, #7
 800ab3e:	2b04      	cmp	r3, #4
 800ab40:	d00a      	beq.n	800ab58 <xPortStartScheduler+0xb8>
	__asm volatile
 800ab42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab46:	f383 8811 	msr	BASEPRI, r3
 800ab4a:	f3bf 8f6f 	isb	sy
 800ab4e:	f3bf 8f4f 	dsb	sy
 800ab52:	60bb      	str	r3, [r7, #8]
}
 800ab54:	bf00      	nop
 800ab56:	e7fe      	b.n	800ab56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab58:	4b1e      	ldr	r3, [pc, #120]	; (800abd4 <xPortStartScheduler+0x134>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	021b      	lsls	r3, r3, #8
 800ab5e:	4a1d      	ldr	r2, [pc, #116]	; (800abd4 <xPortStartScheduler+0x134>)
 800ab60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab62:	4b1c      	ldr	r3, [pc, #112]	; (800abd4 <xPortStartScheduler+0x134>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab6a:	4a1a      	ldr	r2, [pc, #104]	; (800abd4 <xPortStartScheduler+0x134>)
 800ab6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	b2da      	uxtb	r2, r3
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab76:	4b18      	ldr	r3, [pc, #96]	; (800abd8 <xPortStartScheduler+0x138>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a17      	ldr	r2, [pc, #92]	; (800abd8 <xPortStartScheduler+0x138>)
 800ab7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab82:	4b15      	ldr	r3, [pc, #84]	; (800abd8 <xPortStartScheduler+0x138>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a14      	ldr	r2, [pc, #80]	; (800abd8 <xPortStartScheduler+0x138>)
 800ab88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab8e:	f000 f8dd 	bl	800ad4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab92:	4b12      	ldr	r3, [pc, #72]	; (800abdc <xPortStartScheduler+0x13c>)
 800ab94:	2200      	movs	r2, #0
 800ab96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab98:	f000 f8fc 	bl	800ad94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab9c:	4b10      	ldr	r3, [pc, #64]	; (800abe0 <xPortStartScheduler+0x140>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a0f      	ldr	r2, [pc, #60]	; (800abe0 <xPortStartScheduler+0x140>)
 800aba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aba8:	f7ff ff66 	bl	800aa78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800abac:	f7fe ff2c 	bl	8009a08 <vTaskSwitchContext>
	prvTaskExitError();
 800abb0:	f7ff ff1c 	bl	800a9ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3718      	adds	r7, #24
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	e000ed00 	.word	0xe000ed00
 800abc4:	410fc271 	.word	0x410fc271
 800abc8:	410fc270 	.word	0x410fc270
 800abcc:	e000e400 	.word	0xe000e400
 800abd0:	20003794 	.word	0x20003794
 800abd4:	20003798 	.word	0x20003798
 800abd8:	e000ed20 	.word	0xe000ed20
 800abdc:	20000354 	.word	0x20000354
 800abe0:	e000ef34 	.word	0xe000ef34

0800abe4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
	__asm volatile
 800abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	607b      	str	r3, [r7, #4]
}
 800abfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800abfe:	4b0f      	ldr	r3, [pc, #60]	; (800ac3c <vPortEnterCritical+0x58>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	3301      	adds	r3, #1
 800ac04:	4a0d      	ldr	r2, [pc, #52]	; (800ac3c <vPortEnterCritical+0x58>)
 800ac06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac08:	4b0c      	ldr	r3, [pc, #48]	; (800ac3c <vPortEnterCritical+0x58>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d10f      	bne.n	800ac30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac10:	4b0b      	ldr	r3, [pc, #44]	; (800ac40 <vPortEnterCritical+0x5c>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00a      	beq.n	800ac30 <vPortEnterCritical+0x4c>
	__asm volatile
 800ac1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1e:	f383 8811 	msr	BASEPRI, r3
 800ac22:	f3bf 8f6f 	isb	sy
 800ac26:	f3bf 8f4f 	dsb	sy
 800ac2a:	603b      	str	r3, [r7, #0]
}
 800ac2c:	bf00      	nop
 800ac2e:	e7fe      	b.n	800ac2e <vPortEnterCritical+0x4a>
	}
}
 800ac30:	bf00      	nop
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr
 800ac3c:	20000354 	.word	0x20000354
 800ac40:	e000ed04 	.word	0xe000ed04

0800ac44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac4a:	4b12      	ldr	r3, [pc, #72]	; (800ac94 <vPortExitCritical+0x50>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d10a      	bne.n	800ac68 <vPortExitCritical+0x24>
	__asm volatile
 800ac52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac56:	f383 8811 	msr	BASEPRI, r3
 800ac5a:	f3bf 8f6f 	isb	sy
 800ac5e:	f3bf 8f4f 	dsb	sy
 800ac62:	607b      	str	r3, [r7, #4]
}
 800ac64:	bf00      	nop
 800ac66:	e7fe      	b.n	800ac66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ac68:	4b0a      	ldr	r3, [pc, #40]	; (800ac94 <vPortExitCritical+0x50>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	4a09      	ldr	r2, [pc, #36]	; (800ac94 <vPortExitCritical+0x50>)
 800ac70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac72:	4b08      	ldr	r3, [pc, #32]	; (800ac94 <vPortExitCritical+0x50>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d105      	bne.n	800ac86 <vPortExitCritical+0x42>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	f383 8811 	msr	BASEPRI, r3
}
 800ac84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac86:	bf00      	nop
 800ac88:	370c      	adds	r7, #12
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	20000354 	.word	0x20000354
	...

0800aca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aca0:	f3ef 8009 	mrs	r0, PSP
 800aca4:	f3bf 8f6f 	isb	sy
 800aca8:	4b15      	ldr	r3, [pc, #84]	; (800ad00 <pxCurrentTCBConst>)
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	f01e 0f10 	tst.w	lr, #16
 800acb0:	bf08      	it	eq
 800acb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800acb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acba:	6010      	str	r0, [r2, #0]
 800acbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800acc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800acc4:	f380 8811 	msr	BASEPRI, r0
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f7fe fe9a 	bl	8009a08 <vTaskSwitchContext>
 800acd4:	f04f 0000 	mov.w	r0, #0
 800acd8:	f380 8811 	msr	BASEPRI, r0
 800acdc:	bc09      	pop	{r0, r3}
 800acde:	6819      	ldr	r1, [r3, #0]
 800ace0:	6808      	ldr	r0, [r1, #0]
 800ace2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace6:	f01e 0f10 	tst.w	lr, #16
 800acea:	bf08      	it	eq
 800acec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800acf0:	f380 8809 	msr	PSP, r0
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	f3af 8000 	nop.w

0800ad00 <pxCurrentTCBConst>:
 800ad00:	20003160 	.word	0x20003160
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad04:	bf00      	nop
 800ad06:	bf00      	nop

0800ad08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	607b      	str	r3, [r7, #4]
}
 800ad20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad22:	f7fe fdb7 	bl	8009894 <xTaskIncrementTick>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d003      	beq.n	800ad34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad2c:	4b06      	ldr	r3, [pc, #24]	; (800ad48 <xPortSysTickHandler+0x40>)
 800ad2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad32:	601a      	str	r2, [r3, #0]
 800ad34:	2300      	movs	r3, #0
 800ad36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	f383 8811 	msr	BASEPRI, r3
}
 800ad3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad40:	bf00      	nop
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	e000ed04 	.word	0xe000ed04

0800ad4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad50:	4b0b      	ldr	r3, [pc, #44]	; (800ad80 <vPortSetupTimerInterrupt+0x34>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad56:	4b0b      	ldr	r3, [pc, #44]	; (800ad84 <vPortSetupTimerInterrupt+0x38>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad5c:	4b0a      	ldr	r3, [pc, #40]	; (800ad88 <vPortSetupTimerInterrupt+0x3c>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a0a      	ldr	r2, [pc, #40]	; (800ad8c <vPortSetupTimerInterrupt+0x40>)
 800ad62:	fba2 2303 	umull	r2, r3, r2, r3
 800ad66:	099b      	lsrs	r3, r3, #6
 800ad68:	4a09      	ldr	r2, [pc, #36]	; (800ad90 <vPortSetupTimerInterrupt+0x44>)
 800ad6a:	3b01      	subs	r3, #1
 800ad6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad6e:	4b04      	ldr	r3, [pc, #16]	; (800ad80 <vPortSetupTimerInterrupt+0x34>)
 800ad70:	2207      	movs	r2, #7
 800ad72:	601a      	str	r2, [r3, #0]
}
 800ad74:	bf00      	nop
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	e000e010 	.word	0xe000e010
 800ad84:	e000e018 	.word	0xe000e018
 800ad88:	20000340 	.word	0x20000340
 800ad8c:	10624dd3 	.word	0x10624dd3
 800ad90:	e000e014 	.word	0xe000e014

0800ad94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ada4 <vPortEnableVFP+0x10>
 800ad98:	6801      	ldr	r1, [r0, #0]
 800ad9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad9e:	6001      	str	r1, [r0, #0]
 800ada0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ada2:	bf00      	nop
 800ada4:	e000ed88 	.word	0xe000ed88

0800ada8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ada8:	b480      	push	{r7}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800adae:	f3ef 8305 	mrs	r3, IPSR
 800adb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2b0f      	cmp	r3, #15
 800adb8:	d914      	bls.n	800ade4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800adba:	4a17      	ldr	r2, [pc, #92]	; (800ae18 <vPortValidateInterruptPriority+0x70>)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	4413      	add	r3, r2
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800adc4:	4b15      	ldr	r3, [pc, #84]	; (800ae1c <vPortValidateInterruptPriority+0x74>)
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	7afa      	ldrb	r2, [r7, #11]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d20a      	bcs.n	800ade4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800adce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	607b      	str	r3, [r7, #4]
}
 800ade0:	bf00      	nop
 800ade2:	e7fe      	b.n	800ade2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ade4:	4b0e      	ldr	r3, [pc, #56]	; (800ae20 <vPortValidateInterruptPriority+0x78>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800adec:	4b0d      	ldr	r3, [pc, #52]	; (800ae24 <vPortValidateInterruptPriority+0x7c>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d90a      	bls.n	800ae0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	603b      	str	r3, [r7, #0]
}
 800ae06:	bf00      	nop
 800ae08:	e7fe      	b.n	800ae08 <vPortValidateInterruptPriority+0x60>
	}
 800ae0a:	bf00      	nop
 800ae0c:	3714      	adds	r7, #20
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	e000e3f0 	.word	0xe000e3f0
 800ae1c:	20003794 	.word	0x20003794
 800ae20:	e000ed0c 	.word	0xe000ed0c
 800ae24:	20003798 	.word	0x20003798

0800ae28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b08a      	sub	sp, #40	; 0x28
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae30:	2300      	movs	r3, #0
 800ae32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ae34:	f7fe fc72 	bl	800971c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ae38:	4b5b      	ldr	r3, [pc, #364]	; (800afa8 <pvPortMalloc+0x180>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d101      	bne.n	800ae44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae40:	f000 f920 	bl	800b084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae44:	4b59      	ldr	r3, [pc, #356]	; (800afac <pvPortMalloc+0x184>)
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f040 8093 	bne.w	800af78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d01d      	beq.n	800ae94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ae58:	2208      	movs	r2, #8
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f003 0307 	and.w	r3, r3, #7
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d014      	beq.n	800ae94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f023 0307 	bic.w	r3, r3, #7
 800ae70:	3308      	adds	r3, #8
 800ae72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f003 0307 	and.w	r3, r3, #7
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00a      	beq.n	800ae94 <pvPortMalloc+0x6c>
	__asm volatile
 800ae7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae82:	f383 8811 	msr	BASEPRI, r3
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	617b      	str	r3, [r7, #20]
}
 800ae90:	bf00      	nop
 800ae92:	e7fe      	b.n	800ae92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d06e      	beq.n	800af78 <pvPortMalloc+0x150>
 800ae9a:	4b45      	ldr	r3, [pc, #276]	; (800afb0 <pvPortMalloc+0x188>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d869      	bhi.n	800af78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aea4:	4b43      	ldr	r3, [pc, #268]	; (800afb4 <pvPortMalloc+0x18c>)
 800aea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aea8:	4b42      	ldr	r3, [pc, #264]	; (800afb4 <pvPortMalloc+0x18c>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aeae:	e004      	b.n	800aeba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d903      	bls.n	800aecc <pvPortMalloc+0xa4>
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d1f1      	bne.n	800aeb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aecc:	4b36      	ldr	r3, [pc, #216]	; (800afa8 <pvPortMalloc+0x180>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d050      	beq.n	800af78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aed6:	6a3b      	ldr	r3, [r7, #32]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2208      	movs	r2, #8
 800aedc:	4413      	add	r3, r2
 800aede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	6a3b      	ldr	r3, [r7, #32]
 800aee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeea:	685a      	ldr	r2, [r3, #4]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	1ad2      	subs	r2, r2, r3
 800aef0:	2308      	movs	r3, #8
 800aef2:	005b      	lsls	r3, r3, #1
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d91f      	bls.n	800af38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4413      	add	r3, r2
 800aefe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	f003 0307 	and.w	r3, r3, #7
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00a      	beq.n	800af20 <pvPortMalloc+0xf8>
	__asm volatile
 800af0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0e:	f383 8811 	msr	BASEPRI, r3
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	f3bf 8f4f 	dsb	sy
 800af1a:	613b      	str	r3, [r7, #16]
}
 800af1c:	bf00      	nop
 800af1e:	e7fe      	b.n	800af1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af22:	685a      	ldr	r2, [r3, #4]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	1ad2      	subs	r2, r2, r3
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af32:	69b8      	ldr	r0, [r7, #24]
 800af34:	f000 f908 	bl	800b148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af38:	4b1d      	ldr	r3, [pc, #116]	; (800afb0 <pvPortMalloc+0x188>)
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	1ad3      	subs	r3, r2, r3
 800af42:	4a1b      	ldr	r2, [pc, #108]	; (800afb0 <pvPortMalloc+0x188>)
 800af44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af46:	4b1a      	ldr	r3, [pc, #104]	; (800afb0 <pvPortMalloc+0x188>)
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	4b1b      	ldr	r3, [pc, #108]	; (800afb8 <pvPortMalloc+0x190>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d203      	bcs.n	800af5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af52:	4b17      	ldr	r3, [pc, #92]	; (800afb0 <pvPortMalloc+0x188>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a18      	ldr	r2, [pc, #96]	; (800afb8 <pvPortMalloc+0x190>)
 800af58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5c:	685a      	ldr	r2, [r3, #4]
 800af5e:	4b13      	ldr	r3, [pc, #76]	; (800afac <pvPortMalloc+0x184>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	431a      	orrs	r2, r3
 800af64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6a:	2200      	movs	r2, #0
 800af6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800af6e:	4b13      	ldr	r3, [pc, #76]	; (800afbc <pvPortMalloc+0x194>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	3301      	adds	r3, #1
 800af74:	4a11      	ldr	r2, [pc, #68]	; (800afbc <pvPortMalloc+0x194>)
 800af76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af78:	f7fe fbde 	bl	8009738 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	f003 0307 	and.w	r3, r3, #7
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00a      	beq.n	800af9c <pvPortMalloc+0x174>
	__asm volatile
 800af86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8a:	f383 8811 	msr	BASEPRI, r3
 800af8e:	f3bf 8f6f 	isb	sy
 800af92:	f3bf 8f4f 	dsb	sy
 800af96:	60fb      	str	r3, [r7, #12]
}
 800af98:	bf00      	nop
 800af9a:	e7fe      	b.n	800af9a <pvPortMalloc+0x172>
	return pvReturn;
 800af9c:	69fb      	ldr	r3, [r7, #28]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3728      	adds	r7, #40	; 0x28
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	2000435c 	.word	0x2000435c
 800afac:	20004370 	.word	0x20004370
 800afb0:	20004360 	.word	0x20004360
 800afb4:	20004354 	.word	0x20004354
 800afb8:	20004364 	.word	0x20004364
 800afbc:	20004368 	.word	0x20004368

0800afc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d04d      	beq.n	800b06e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800afd2:	2308      	movs	r3, #8
 800afd4:	425b      	negs	r3, r3
 800afd6:	697a      	ldr	r2, [r7, #20]
 800afd8:	4413      	add	r3, r2
 800afda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	685a      	ldr	r2, [r3, #4]
 800afe4:	4b24      	ldr	r3, [pc, #144]	; (800b078 <vPortFree+0xb8>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4013      	ands	r3, r2
 800afea:	2b00      	cmp	r3, #0
 800afec:	d10a      	bne.n	800b004 <vPortFree+0x44>
	__asm volatile
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	60fb      	str	r3, [r7, #12]
}
 800b000:	bf00      	nop
 800b002:	e7fe      	b.n	800b002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00a      	beq.n	800b022 <vPortFree+0x62>
	__asm volatile
 800b00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b010:	f383 8811 	msr	BASEPRI, r3
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	60bb      	str	r3, [r7, #8]
}
 800b01e:	bf00      	nop
 800b020:	e7fe      	b.n	800b020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	685a      	ldr	r2, [r3, #4]
 800b026:	4b14      	ldr	r3, [pc, #80]	; (800b078 <vPortFree+0xb8>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4013      	ands	r3, r2
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d01e      	beq.n	800b06e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d11a      	bne.n	800b06e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	685a      	ldr	r2, [r3, #4]
 800b03c:	4b0e      	ldr	r3, [pc, #56]	; (800b078 <vPortFree+0xb8>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	43db      	mvns	r3, r3
 800b042:	401a      	ands	r2, r3
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b048:	f7fe fb68 	bl	800971c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	685a      	ldr	r2, [r3, #4]
 800b050:	4b0a      	ldr	r3, [pc, #40]	; (800b07c <vPortFree+0xbc>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4413      	add	r3, r2
 800b056:	4a09      	ldr	r2, [pc, #36]	; (800b07c <vPortFree+0xbc>)
 800b058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b05a:	6938      	ldr	r0, [r7, #16]
 800b05c:	f000 f874 	bl	800b148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b060:	4b07      	ldr	r3, [pc, #28]	; (800b080 <vPortFree+0xc0>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	3301      	adds	r3, #1
 800b066:	4a06      	ldr	r2, [pc, #24]	; (800b080 <vPortFree+0xc0>)
 800b068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b06a:	f7fe fb65 	bl	8009738 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b06e:	bf00      	nop
 800b070:	3718      	adds	r7, #24
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	20004370 	.word	0x20004370
 800b07c:	20004360 	.word	0x20004360
 800b080:	2000436c 	.word	0x2000436c

0800b084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b08a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800b08e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b090:	4b27      	ldr	r3, [pc, #156]	; (800b130 <prvHeapInit+0xac>)
 800b092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f003 0307 	and.w	r3, r3, #7
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00c      	beq.n	800b0b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	3307      	adds	r3, #7
 800b0a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f023 0307 	bic.w	r3, r3, #7
 800b0aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	1ad3      	subs	r3, r2, r3
 800b0b2:	4a1f      	ldr	r2, [pc, #124]	; (800b130 <prvHeapInit+0xac>)
 800b0b4:	4413      	add	r3, r2
 800b0b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b0bc:	4a1d      	ldr	r2, [pc, #116]	; (800b134 <prvHeapInit+0xb0>)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b0c2:	4b1c      	ldr	r3, [pc, #112]	; (800b134 <prvHeapInit+0xb0>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	68ba      	ldr	r2, [r7, #8]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b0d0:	2208      	movs	r2, #8
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	1a9b      	subs	r3, r3, r2
 800b0d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f023 0307 	bic.w	r3, r3, #7
 800b0de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	4a15      	ldr	r2, [pc, #84]	; (800b138 <prvHeapInit+0xb4>)
 800b0e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0e6:	4b14      	ldr	r3, [pc, #80]	; (800b138 <prvHeapInit+0xb4>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0ee:	4b12      	ldr	r3, [pc, #72]	; (800b138 <prvHeapInit+0xb4>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	1ad2      	subs	r2, r2, r3
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b104:	4b0c      	ldr	r3, [pc, #48]	; (800b138 <prvHeapInit+0xb4>)
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	4a0a      	ldr	r2, [pc, #40]	; (800b13c <prvHeapInit+0xb8>)
 800b112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	4a09      	ldr	r2, [pc, #36]	; (800b140 <prvHeapInit+0xbc>)
 800b11a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b11c:	4b09      	ldr	r3, [pc, #36]	; (800b144 <prvHeapInit+0xc0>)
 800b11e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b122:	601a      	str	r2, [r3, #0]
}
 800b124:	bf00      	nop
 800b126:	3714      	adds	r7, #20
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr
 800b130:	2000379c 	.word	0x2000379c
 800b134:	20004354 	.word	0x20004354
 800b138:	2000435c 	.word	0x2000435c
 800b13c:	20004364 	.word	0x20004364
 800b140:	20004360 	.word	0x20004360
 800b144:	20004370 	.word	0x20004370

0800b148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b150:	4b28      	ldr	r3, [pc, #160]	; (800b1f4 <prvInsertBlockIntoFreeList+0xac>)
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	e002      	b.n	800b15c <prvInsertBlockIntoFreeList+0x14>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	60fb      	str	r3, [r7, #12]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	429a      	cmp	r2, r3
 800b164:	d8f7      	bhi.n	800b156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	68ba      	ldr	r2, [r7, #8]
 800b170:	4413      	add	r3, r2
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	429a      	cmp	r2, r3
 800b176:	d108      	bne.n	800b18a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	441a      	add	r2, r3
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	68ba      	ldr	r2, [r7, #8]
 800b194:	441a      	add	r2, r3
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d118      	bne.n	800b1d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	4b15      	ldr	r3, [pc, #84]	; (800b1f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d00d      	beq.n	800b1c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	685a      	ldr	r2, [r3, #4]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	441a      	add	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	601a      	str	r2, [r3, #0]
 800b1c4:	e008      	b.n	800b1d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b1c6:	4b0c      	ldr	r3, [pc, #48]	; (800b1f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	601a      	str	r2, [r3, #0]
 800b1ce:	e003      	b.n	800b1d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d002      	beq.n	800b1e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1e6:	bf00      	nop
 800b1e8:	3714      	adds	r7, #20
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	20004354 	.word	0x20004354
 800b1f8:	2000435c 	.word	0x2000435c

0800b1fc <_strtol_l.constprop.0>:
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b202:	d001      	beq.n	800b208 <_strtol_l.constprop.0+0xc>
 800b204:	2b24      	cmp	r3, #36	; 0x24
 800b206:	d906      	bls.n	800b216 <_strtol_l.constprop.0+0x1a>
 800b208:	f000 f91c 	bl	800b444 <__errno>
 800b20c:	2316      	movs	r3, #22
 800b20e:	6003      	str	r3, [r0, #0]
 800b210:	2000      	movs	r0, #0
 800b212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b216:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b2fc <_strtol_l.constprop.0+0x100>
 800b21a:	460d      	mov	r5, r1
 800b21c:	462e      	mov	r6, r5
 800b21e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b222:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b226:	f017 0708 	ands.w	r7, r7, #8
 800b22a:	d1f7      	bne.n	800b21c <_strtol_l.constprop.0+0x20>
 800b22c:	2c2d      	cmp	r4, #45	; 0x2d
 800b22e:	d132      	bne.n	800b296 <_strtol_l.constprop.0+0x9a>
 800b230:	782c      	ldrb	r4, [r5, #0]
 800b232:	2701      	movs	r7, #1
 800b234:	1cb5      	adds	r5, r6, #2
 800b236:	2b00      	cmp	r3, #0
 800b238:	d05b      	beq.n	800b2f2 <_strtol_l.constprop.0+0xf6>
 800b23a:	2b10      	cmp	r3, #16
 800b23c:	d109      	bne.n	800b252 <_strtol_l.constprop.0+0x56>
 800b23e:	2c30      	cmp	r4, #48	; 0x30
 800b240:	d107      	bne.n	800b252 <_strtol_l.constprop.0+0x56>
 800b242:	782c      	ldrb	r4, [r5, #0]
 800b244:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b248:	2c58      	cmp	r4, #88	; 0x58
 800b24a:	d14d      	bne.n	800b2e8 <_strtol_l.constprop.0+0xec>
 800b24c:	786c      	ldrb	r4, [r5, #1]
 800b24e:	2310      	movs	r3, #16
 800b250:	3502      	adds	r5, #2
 800b252:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b256:	f108 38ff 	add.w	r8, r8, #4294967295
 800b25a:	f04f 0e00 	mov.w	lr, #0
 800b25e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b262:	4676      	mov	r6, lr
 800b264:	fb03 8a19 	mls	sl, r3, r9, r8
 800b268:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b26c:	f1bc 0f09 	cmp.w	ip, #9
 800b270:	d816      	bhi.n	800b2a0 <_strtol_l.constprop.0+0xa4>
 800b272:	4664      	mov	r4, ip
 800b274:	42a3      	cmp	r3, r4
 800b276:	dd24      	ble.n	800b2c2 <_strtol_l.constprop.0+0xc6>
 800b278:	f1be 3fff 	cmp.w	lr, #4294967295
 800b27c:	d008      	beq.n	800b290 <_strtol_l.constprop.0+0x94>
 800b27e:	45b1      	cmp	r9, r6
 800b280:	d31c      	bcc.n	800b2bc <_strtol_l.constprop.0+0xc0>
 800b282:	d101      	bne.n	800b288 <_strtol_l.constprop.0+0x8c>
 800b284:	45a2      	cmp	sl, r4
 800b286:	db19      	blt.n	800b2bc <_strtol_l.constprop.0+0xc0>
 800b288:	fb06 4603 	mla	r6, r6, r3, r4
 800b28c:	f04f 0e01 	mov.w	lr, #1
 800b290:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b294:	e7e8      	b.n	800b268 <_strtol_l.constprop.0+0x6c>
 800b296:	2c2b      	cmp	r4, #43	; 0x2b
 800b298:	bf04      	itt	eq
 800b29a:	782c      	ldrbeq	r4, [r5, #0]
 800b29c:	1cb5      	addeq	r5, r6, #2
 800b29e:	e7ca      	b.n	800b236 <_strtol_l.constprop.0+0x3a>
 800b2a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b2a4:	f1bc 0f19 	cmp.w	ip, #25
 800b2a8:	d801      	bhi.n	800b2ae <_strtol_l.constprop.0+0xb2>
 800b2aa:	3c37      	subs	r4, #55	; 0x37
 800b2ac:	e7e2      	b.n	800b274 <_strtol_l.constprop.0+0x78>
 800b2ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b2b2:	f1bc 0f19 	cmp.w	ip, #25
 800b2b6:	d804      	bhi.n	800b2c2 <_strtol_l.constprop.0+0xc6>
 800b2b8:	3c57      	subs	r4, #87	; 0x57
 800b2ba:	e7db      	b.n	800b274 <_strtol_l.constprop.0+0x78>
 800b2bc:	f04f 3eff 	mov.w	lr, #4294967295
 800b2c0:	e7e6      	b.n	800b290 <_strtol_l.constprop.0+0x94>
 800b2c2:	f1be 3fff 	cmp.w	lr, #4294967295
 800b2c6:	d105      	bne.n	800b2d4 <_strtol_l.constprop.0+0xd8>
 800b2c8:	2322      	movs	r3, #34	; 0x22
 800b2ca:	6003      	str	r3, [r0, #0]
 800b2cc:	4646      	mov	r6, r8
 800b2ce:	b942      	cbnz	r2, 800b2e2 <_strtol_l.constprop.0+0xe6>
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	e79e      	b.n	800b212 <_strtol_l.constprop.0+0x16>
 800b2d4:	b107      	cbz	r7, 800b2d8 <_strtol_l.constprop.0+0xdc>
 800b2d6:	4276      	negs	r6, r6
 800b2d8:	2a00      	cmp	r2, #0
 800b2da:	d0f9      	beq.n	800b2d0 <_strtol_l.constprop.0+0xd4>
 800b2dc:	f1be 0f00 	cmp.w	lr, #0
 800b2e0:	d000      	beq.n	800b2e4 <_strtol_l.constprop.0+0xe8>
 800b2e2:	1e69      	subs	r1, r5, #1
 800b2e4:	6011      	str	r1, [r2, #0]
 800b2e6:	e7f3      	b.n	800b2d0 <_strtol_l.constprop.0+0xd4>
 800b2e8:	2430      	movs	r4, #48	; 0x30
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1b1      	bne.n	800b252 <_strtol_l.constprop.0+0x56>
 800b2ee:	2308      	movs	r3, #8
 800b2f0:	e7af      	b.n	800b252 <_strtol_l.constprop.0+0x56>
 800b2f2:	2c30      	cmp	r4, #48	; 0x30
 800b2f4:	d0a5      	beq.n	800b242 <_strtol_l.constprop.0+0x46>
 800b2f6:	230a      	movs	r3, #10
 800b2f8:	e7ab      	b.n	800b252 <_strtol_l.constprop.0+0x56>
 800b2fa:	bf00      	nop
 800b2fc:	0800c2dd 	.word	0x0800c2dd

0800b300 <strtol>:
 800b300:	4613      	mov	r3, r2
 800b302:	460a      	mov	r2, r1
 800b304:	4601      	mov	r1, r0
 800b306:	4802      	ldr	r0, [pc, #8]	; (800b310 <strtol+0x10>)
 800b308:	6800      	ldr	r0, [r0, #0]
 800b30a:	f7ff bf77 	b.w	800b1fc <_strtol_l.constprop.0>
 800b30e:	bf00      	nop
 800b310:	200003a4 	.word	0x200003a4

0800b314 <_vsniprintf_r>:
 800b314:	b530      	push	{r4, r5, lr}
 800b316:	4614      	mov	r4, r2
 800b318:	2c00      	cmp	r4, #0
 800b31a:	b09b      	sub	sp, #108	; 0x6c
 800b31c:	4605      	mov	r5, r0
 800b31e:	461a      	mov	r2, r3
 800b320:	da05      	bge.n	800b32e <_vsniprintf_r+0x1a>
 800b322:	238b      	movs	r3, #139	; 0x8b
 800b324:	6003      	str	r3, [r0, #0]
 800b326:	f04f 30ff 	mov.w	r0, #4294967295
 800b32a:	b01b      	add	sp, #108	; 0x6c
 800b32c:	bd30      	pop	{r4, r5, pc}
 800b32e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b332:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b336:	bf14      	ite	ne
 800b338:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b33c:	4623      	moveq	r3, r4
 800b33e:	9302      	str	r3, [sp, #8]
 800b340:	9305      	str	r3, [sp, #20]
 800b342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b346:	9100      	str	r1, [sp, #0]
 800b348:	9104      	str	r1, [sp, #16]
 800b34a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b34e:	4669      	mov	r1, sp
 800b350:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b352:	f000 fa0b 	bl	800b76c <_svfiprintf_r>
 800b356:	1c43      	adds	r3, r0, #1
 800b358:	bfbc      	itt	lt
 800b35a:	238b      	movlt	r3, #139	; 0x8b
 800b35c:	602b      	strlt	r3, [r5, #0]
 800b35e:	2c00      	cmp	r4, #0
 800b360:	d0e3      	beq.n	800b32a <_vsniprintf_r+0x16>
 800b362:	9b00      	ldr	r3, [sp, #0]
 800b364:	2200      	movs	r2, #0
 800b366:	701a      	strb	r2, [r3, #0]
 800b368:	e7df      	b.n	800b32a <_vsniprintf_r+0x16>
	...

0800b36c <vsniprintf>:
 800b36c:	b507      	push	{r0, r1, r2, lr}
 800b36e:	9300      	str	r3, [sp, #0]
 800b370:	4613      	mov	r3, r2
 800b372:	460a      	mov	r2, r1
 800b374:	4601      	mov	r1, r0
 800b376:	4803      	ldr	r0, [pc, #12]	; (800b384 <vsniprintf+0x18>)
 800b378:	6800      	ldr	r0, [r0, #0]
 800b37a:	f7ff ffcb 	bl	800b314 <_vsniprintf_r>
 800b37e:	b003      	add	sp, #12
 800b380:	f85d fb04 	ldr.w	pc, [sp], #4
 800b384:	200003a4 	.word	0x200003a4

0800b388 <memset>:
 800b388:	4402      	add	r2, r0
 800b38a:	4603      	mov	r3, r0
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d100      	bne.n	800b392 <memset+0xa>
 800b390:	4770      	bx	lr
 800b392:	f803 1b01 	strb.w	r1, [r3], #1
 800b396:	e7f9      	b.n	800b38c <memset+0x4>

0800b398 <_reclaim_reent>:
 800b398:	4b29      	ldr	r3, [pc, #164]	; (800b440 <_reclaim_reent+0xa8>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4283      	cmp	r3, r0
 800b39e:	b570      	push	{r4, r5, r6, lr}
 800b3a0:	4604      	mov	r4, r0
 800b3a2:	d04b      	beq.n	800b43c <_reclaim_reent+0xa4>
 800b3a4:	69c3      	ldr	r3, [r0, #28]
 800b3a6:	b143      	cbz	r3, 800b3ba <_reclaim_reent+0x22>
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d144      	bne.n	800b438 <_reclaim_reent+0xa0>
 800b3ae:	69e3      	ldr	r3, [r4, #28]
 800b3b0:	6819      	ldr	r1, [r3, #0]
 800b3b2:	b111      	cbz	r1, 800b3ba <_reclaim_reent+0x22>
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f000 f887 	bl	800b4c8 <_free_r>
 800b3ba:	6961      	ldr	r1, [r4, #20]
 800b3bc:	b111      	cbz	r1, 800b3c4 <_reclaim_reent+0x2c>
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f000 f882 	bl	800b4c8 <_free_r>
 800b3c4:	69e1      	ldr	r1, [r4, #28]
 800b3c6:	b111      	cbz	r1, 800b3ce <_reclaim_reent+0x36>
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f000 f87d 	bl	800b4c8 <_free_r>
 800b3ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b3d0:	b111      	cbz	r1, 800b3d8 <_reclaim_reent+0x40>
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f000 f878 	bl	800b4c8 <_free_r>
 800b3d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3da:	b111      	cbz	r1, 800b3e2 <_reclaim_reent+0x4a>
 800b3dc:	4620      	mov	r0, r4
 800b3de:	f000 f873 	bl	800b4c8 <_free_r>
 800b3e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b3e4:	b111      	cbz	r1, 800b3ec <_reclaim_reent+0x54>
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f000 f86e 	bl	800b4c8 <_free_r>
 800b3ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b3ee:	b111      	cbz	r1, 800b3f6 <_reclaim_reent+0x5e>
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	f000 f869 	bl	800b4c8 <_free_r>
 800b3f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b3f8:	b111      	cbz	r1, 800b400 <_reclaim_reent+0x68>
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f000 f864 	bl	800b4c8 <_free_r>
 800b400:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b402:	b111      	cbz	r1, 800b40a <_reclaim_reent+0x72>
 800b404:	4620      	mov	r0, r4
 800b406:	f000 f85f 	bl	800b4c8 <_free_r>
 800b40a:	6a23      	ldr	r3, [r4, #32]
 800b40c:	b1b3      	cbz	r3, 800b43c <_reclaim_reent+0xa4>
 800b40e:	4620      	mov	r0, r4
 800b410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b414:	4718      	bx	r3
 800b416:	5949      	ldr	r1, [r1, r5]
 800b418:	b941      	cbnz	r1, 800b42c <_reclaim_reent+0x94>
 800b41a:	3504      	adds	r5, #4
 800b41c:	69e3      	ldr	r3, [r4, #28]
 800b41e:	2d80      	cmp	r5, #128	; 0x80
 800b420:	68d9      	ldr	r1, [r3, #12]
 800b422:	d1f8      	bne.n	800b416 <_reclaim_reent+0x7e>
 800b424:	4620      	mov	r0, r4
 800b426:	f000 f84f 	bl	800b4c8 <_free_r>
 800b42a:	e7c0      	b.n	800b3ae <_reclaim_reent+0x16>
 800b42c:	680e      	ldr	r6, [r1, #0]
 800b42e:	4620      	mov	r0, r4
 800b430:	f000 f84a 	bl	800b4c8 <_free_r>
 800b434:	4631      	mov	r1, r6
 800b436:	e7ef      	b.n	800b418 <_reclaim_reent+0x80>
 800b438:	2500      	movs	r5, #0
 800b43a:	e7ef      	b.n	800b41c <_reclaim_reent+0x84>
 800b43c:	bd70      	pop	{r4, r5, r6, pc}
 800b43e:	bf00      	nop
 800b440:	200003a4 	.word	0x200003a4

0800b444 <__errno>:
 800b444:	4b01      	ldr	r3, [pc, #4]	; (800b44c <__errno+0x8>)
 800b446:	6818      	ldr	r0, [r3, #0]
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	200003a4 	.word	0x200003a4

0800b450 <__libc_init_array>:
 800b450:	b570      	push	{r4, r5, r6, lr}
 800b452:	4d0d      	ldr	r5, [pc, #52]	; (800b488 <__libc_init_array+0x38>)
 800b454:	4c0d      	ldr	r4, [pc, #52]	; (800b48c <__libc_init_array+0x3c>)
 800b456:	1b64      	subs	r4, r4, r5
 800b458:	10a4      	asrs	r4, r4, #2
 800b45a:	2600      	movs	r6, #0
 800b45c:	42a6      	cmp	r6, r4
 800b45e:	d109      	bne.n	800b474 <__libc_init_array+0x24>
 800b460:	4d0b      	ldr	r5, [pc, #44]	; (800b490 <__libc_init_array+0x40>)
 800b462:	4c0c      	ldr	r4, [pc, #48]	; (800b494 <__libc_init_array+0x44>)
 800b464:	f000 fcba 	bl	800bddc <_init>
 800b468:	1b64      	subs	r4, r4, r5
 800b46a:	10a4      	asrs	r4, r4, #2
 800b46c:	2600      	movs	r6, #0
 800b46e:	42a6      	cmp	r6, r4
 800b470:	d105      	bne.n	800b47e <__libc_init_array+0x2e>
 800b472:	bd70      	pop	{r4, r5, r6, pc}
 800b474:	f855 3b04 	ldr.w	r3, [r5], #4
 800b478:	4798      	blx	r3
 800b47a:	3601      	adds	r6, #1
 800b47c:	e7ee      	b.n	800b45c <__libc_init_array+0xc>
 800b47e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b482:	4798      	blx	r3
 800b484:	3601      	adds	r6, #1
 800b486:	e7f2      	b.n	800b46e <__libc_init_array+0x1e>
 800b488:	0800c418 	.word	0x0800c418
 800b48c:	0800c418 	.word	0x0800c418
 800b490:	0800c418 	.word	0x0800c418
 800b494:	0800c41c 	.word	0x0800c41c

0800b498 <__retarget_lock_acquire_recursive>:
 800b498:	4770      	bx	lr

0800b49a <__retarget_lock_release_recursive>:
 800b49a:	4770      	bx	lr

0800b49c <strcpy>:
 800b49c:	4603      	mov	r3, r0
 800b49e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4a2:	f803 2b01 	strb.w	r2, [r3], #1
 800b4a6:	2a00      	cmp	r2, #0
 800b4a8:	d1f9      	bne.n	800b49e <strcpy+0x2>
 800b4aa:	4770      	bx	lr

0800b4ac <memcpy>:
 800b4ac:	440a      	add	r2, r1
 800b4ae:	4291      	cmp	r1, r2
 800b4b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4b4:	d100      	bne.n	800b4b8 <memcpy+0xc>
 800b4b6:	4770      	bx	lr
 800b4b8:	b510      	push	{r4, lr}
 800b4ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4c2:	4291      	cmp	r1, r2
 800b4c4:	d1f9      	bne.n	800b4ba <memcpy+0xe>
 800b4c6:	bd10      	pop	{r4, pc}

0800b4c8 <_free_r>:
 800b4c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4ca:	2900      	cmp	r1, #0
 800b4cc:	d044      	beq.n	800b558 <_free_r+0x90>
 800b4ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4d2:	9001      	str	r0, [sp, #4]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	f1a1 0404 	sub.w	r4, r1, #4
 800b4da:	bfb8      	it	lt
 800b4dc:	18e4      	addlt	r4, r4, r3
 800b4de:	f000 f8df 	bl	800b6a0 <__malloc_lock>
 800b4e2:	4a1e      	ldr	r2, [pc, #120]	; (800b55c <_free_r+0x94>)
 800b4e4:	9801      	ldr	r0, [sp, #4]
 800b4e6:	6813      	ldr	r3, [r2, #0]
 800b4e8:	b933      	cbnz	r3, 800b4f8 <_free_r+0x30>
 800b4ea:	6063      	str	r3, [r4, #4]
 800b4ec:	6014      	str	r4, [r2, #0]
 800b4ee:	b003      	add	sp, #12
 800b4f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4f4:	f000 b8da 	b.w	800b6ac <__malloc_unlock>
 800b4f8:	42a3      	cmp	r3, r4
 800b4fa:	d908      	bls.n	800b50e <_free_r+0x46>
 800b4fc:	6825      	ldr	r5, [r4, #0]
 800b4fe:	1961      	adds	r1, r4, r5
 800b500:	428b      	cmp	r3, r1
 800b502:	bf01      	itttt	eq
 800b504:	6819      	ldreq	r1, [r3, #0]
 800b506:	685b      	ldreq	r3, [r3, #4]
 800b508:	1949      	addeq	r1, r1, r5
 800b50a:	6021      	streq	r1, [r4, #0]
 800b50c:	e7ed      	b.n	800b4ea <_free_r+0x22>
 800b50e:	461a      	mov	r2, r3
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	b10b      	cbz	r3, 800b518 <_free_r+0x50>
 800b514:	42a3      	cmp	r3, r4
 800b516:	d9fa      	bls.n	800b50e <_free_r+0x46>
 800b518:	6811      	ldr	r1, [r2, #0]
 800b51a:	1855      	adds	r5, r2, r1
 800b51c:	42a5      	cmp	r5, r4
 800b51e:	d10b      	bne.n	800b538 <_free_r+0x70>
 800b520:	6824      	ldr	r4, [r4, #0]
 800b522:	4421      	add	r1, r4
 800b524:	1854      	adds	r4, r2, r1
 800b526:	42a3      	cmp	r3, r4
 800b528:	6011      	str	r1, [r2, #0]
 800b52a:	d1e0      	bne.n	800b4ee <_free_r+0x26>
 800b52c:	681c      	ldr	r4, [r3, #0]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	6053      	str	r3, [r2, #4]
 800b532:	440c      	add	r4, r1
 800b534:	6014      	str	r4, [r2, #0]
 800b536:	e7da      	b.n	800b4ee <_free_r+0x26>
 800b538:	d902      	bls.n	800b540 <_free_r+0x78>
 800b53a:	230c      	movs	r3, #12
 800b53c:	6003      	str	r3, [r0, #0]
 800b53e:	e7d6      	b.n	800b4ee <_free_r+0x26>
 800b540:	6825      	ldr	r5, [r4, #0]
 800b542:	1961      	adds	r1, r4, r5
 800b544:	428b      	cmp	r3, r1
 800b546:	bf04      	itt	eq
 800b548:	6819      	ldreq	r1, [r3, #0]
 800b54a:	685b      	ldreq	r3, [r3, #4]
 800b54c:	6063      	str	r3, [r4, #4]
 800b54e:	bf04      	itt	eq
 800b550:	1949      	addeq	r1, r1, r5
 800b552:	6021      	streq	r1, [r4, #0]
 800b554:	6054      	str	r4, [r2, #4]
 800b556:	e7ca      	b.n	800b4ee <_free_r+0x26>
 800b558:	b003      	add	sp, #12
 800b55a:	bd30      	pop	{r4, r5, pc}
 800b55c:	200044b4 	.word	0x200044b4

0800b560 <sbrk_aligned>:
 800b560:	b570      	push	{r4, r5, r6, lr}
 800b562:	4e0e      	ldr	r6, [pc, #56]	; (800b59c <sbrk_aligned+0x3c>)
 800b564:	460c      	mov	r4, r1
 800b566:	6831      	ldr	r1, [r6, #0]
 800b568:	4605      	mov	r5, r0
 800b56a:	b911      	cbnz	r1, 800b572 <sbrk_aligned+0x12>
 800b56c:	f000 fba6 	bl	800bcbc <_sbrk_r>
 800b570:	6030      	str	r0, [r6, #0]
 800b572:	4621      	mov	r1, r4
 800b574:	4628      	mov	r0, r5
 800b576:	f000 fba1 	bl	800bcbc <_sbrk_r>
 800b57a:	1c43      	adds	r3, r0, #1
 800b57c:	d00a      	beq.n	800b594 <sbrk_aligned+0x34>
 800b57e:	1cc4      	adds	r4, r0, #3
 800b580:	f024 0403 	bic.w	r4, r4, #3
 800b584:	42a0      	cmp	r0, r4
 800b586:	d007      	beq.n	800b598 <sbrk_aligned+0x38>
 800b588:	1a21      	subs	r1, r4, r0
 800b58a:	4628      	mov	r0, r5
 800b58c:	f000 fb96 	bl	800bcbc <_sbrk_r>
 800b590:	3001      	adds	r0, #1
 800b592:	d101      	bne.n	800b598 <sbrk_aligned+0x38>
 800b594:	f04f 34ff 	mov.w	r4, #4294967295
 800b598:	4620      	mov	r0, r4
 800b59a:	bd70      	pop	{r4, r5, r6, pc}
 800b59c:	200044b8 	.word	0x200044b8

0800b5a0 <_malloc_r>:
 800b5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5a4:	1ccd      	adds	r5, r1, #3
 800b5a6:	f025 0503 	bic.w	r5, r5, #3
 800b5aa:	3508      	adds	r5, #8
 800b5ac:	2d0c      	cmp	r5, #12
 800b5ae:	bf38      	it	cc
 800b5b0:	250c      	movcc	r5, #12
 800b5b2:	2d00      	cmp	r5, #0
 800b5b4:	4607      	mov	r7, r0
 800b5b6:	db01      	blt.n	800b5bc <_malloc_r+0x1c>
 800b5b8:	42a9      	cmp	r1, r5
 800b5ba:	d905      	bls.n	800b5c8 <_malloc_r+0x28>
 800b5bc:	230c      	movs	r3, #12
 800b5be:	603b      	str	r3, [r7, #0]
 800b5c0:	2600      	movs	r6, #0
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b69c <_malloc_r+0xfc>
 800b5cc:	f000 f868 	bl	800b6a0 <__malloc_lock>
 800b5d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b5d4:	461c      	mov	r4, r3
 800b5d6:	bb5c      	cbnz	r4, 800b630 <_malloc_r+0x90>
 800b5d8:	4629      	mov	r1, r5
 800b5da:	4638      	mov	r0, r7
 800b5dc:	f7ff ffc0 	bl	800b560 <sbrk_aligned>
 800b5e0:	1c43      	adds	r3, r0, #1
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	d155      	bne.n	800b692 <_malloc_r+0xf2>
 800b5e6:	f8d8 4000 	ldr.w	r4, [r8]
 800b5ea:	4626      	mov	r6, r4
 800b5ec:	2e00      	cmp	r6, #0
 800b5ee:	d145      	bne.n	800b67c <_malloc_r+0xdc>
 800b5f0:	2c00      	cmp	r4, #0
 800b5f2:	d048      	beq.n	800b686 <_malloc_r+0xe6>
 800b5f4:	6823      	ldr	r3, [r4, #0]
 800b5f6:	4631      	mov	r1, r6
 800b5f8:	4638      	mov	r0, r7
 800b5fa:	eb04 0903 	add.w	r9, r4, r3
 800b5fe:	f000 fb5d 	bl	800bcbc <_sbrk_r>
 800b602:	4581      	cmp	r9, r0
 800b604:	d13f      	bne.n	800b686 <_malloc_r+0xe6>
 800b606:	6821      	ldr	r1, [r4, #0]
 800b608:	1a6d      	subs	r5, r5, r1
 800b60a:	4629      	mov	r1, r5
 800b60c:	4638      	mov	r0, r7
 800b60e:	f7ff ffa7 	bl	800b560 <sbrk_aligned>
 800b612:	3001      	adds	r0, #1
 800b614:	d037      	beq.n	800b686 <_malloc_r+0xe6>
 800b616:	6823      	ldr	r3, [r4, #0]
 800b618:	442b      	add	r3, r5
 800b61a:	6023      	str	r3, [r4, #0]
 800b61c:	f8d8 3000 	ldr.w	r3, [r8]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d038      	beq.n	800b696 <_malloc_r+0xf6>
 800b624:	685a      	ldr	r2, [r3, #4]
 800b626:	42a2      	cmp	r2, r4
 800b628:	d12b      	bne.n	800b682 <_malloc_r+0xe2>
 800b62a:	2200      	movs	r2, #0
 800b62c:	605a      	str	r2, [r3, #4]
 800b62e:	e00f      	b.n	800b650 <_malloc_r+0xb0>
 800b630:	6822      	ldr	r2, [r4, #0]
 800b632:	1b52      	subs	r2, r2, r5
 800b634:	d41f      	bmi.n	800b676 <_malloc_r+0xd6>
 800b636:	2a0b      	cmp	r2, #11
 800b638:	d917      	bls.n	800b66a <_malloc_r+0xca>
 800b63a:	1961      	adds	r1, r4, r5
 800b63c:	42a3      	cmp	r3, r4
 800b63e:	6025      	str	r5, [r4, #0]
 800b640:	bf18      	it	ne
 800b642:	6059      	strne	r1, [r3, #4]
 800b644:	6863      	ldr	r3, [r4, #4]
 800b646:	bf08      	it	eq
 800b648:	f8c8 1000 	streq.w	r1, [r8]
 800b64c:	5162      	str	r2, [r4, r5]
 800b64e:	604b      	str	r3, [r1, #4]
 800b650:	4638      	mov	r0, r7
 800b652:	f104 060b 	add.w	r6, r4, #11
 800b656:	f000 f829 	bl	800b6ac <__malloc_unlock>
 800b65a:	f026 0607 	bic.w	r6, r6, #7
 800b65e:	1d23      	adds	r3, r4, #4
 800b660:	1af2      	subs	r2, r6, r3
 800b662:	d0ae      	beq.n	800b5c2 <_malloc_r+0x22>
 800b664:	1b9b      	subs	r3, r3, r6
 800b666:	50a3      	str	r3, [r4, r2]
 800b668:	e7ab      	b.n	800b5c2 <_malloc_r+0x22>
 800b66a:	42a3      	cmp	r3, r4
 800b66c:	6862      	ldr	r2, [r4, #4]
 800b66e:	d1dd      	bne.n	800b62c <_malloc_r+0x8c>
 800b670:	f8c8 2000 	str.w	r2, [r8]
 800b674:	e7ec      	b.n	800b650 <_malloc_r+0xb0>
 800b676:	4623      	mov	r3, r4
 800b678:	6864      	ldr	r4, [r4, #4]
 800b67a:	e7ac      	b.n	800b5d6 <_malloc_r+0x36>
 800b67c:	4634      	mov	r4, r6
 800b67e:	6876      	ldr	r6, [r6, #4]
 800b680:	e7b4      	b.n	800b5ec <_malloc_r+0x4c>
 800b682:	4613      	mov	r3, r2
 800b684:	e7cc      	b.n	800b620 <_malloc_r+0x80>
 800b686:	230c      	movs	r3, #12
 800b688:	603b      	str	r3, [r7, #0]
 800b68a:	4638      	mov	r0, r7
 800b68c:	f000 f80e 	bl	800b6ac <__malloc_unlock>
 800b690:	e797      	b.n	800b5c2 <_malloc_r+0x22>
 800b692:	6025      	str	r5, [r4, #0]
 800b694:	e7dc      	b.n	800b650 <_malloc_r+0xb0>
 800b696:	605b      	str	r3, [r3, #4]
 800b698:	deff      	udf	#255	; 0xff
 800b69a:	bf00      	nop
 800b69c:	200044b4 	.word	0x200044b4

0800b6a0 <__malloc_lock>:
 800b6a0:	4801      	ldr	r0, [pc, #4]	; (800b6a8 <__malloc_lock+0x8>)
 800b6a2:	f7ff bef9 	b.w	800b498 <__retarget_lock_acquire_recursive>
 800b6a6:	bf00      	nop
 800b6a8:	200044b0 	.word	0x200044b0

0800b6ac <__malloc_unlock>:
 800b6ac:	4801      	ldr	r0, [pc, #4]	; (800b6b4 <__malloc_unlock+0x8>)
 800b6ae:	f7ff bef4 	b.w	800b49a <__retarget_lock_release_recursive>
 800b6b2:	bf00      	nop
 800b6b4:	200044b0 	.word	0x200044b0

0800b6b8 <__ssputs_r>:
 800b6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6bc:	688e      	ldr	r6, [r1, #8]
 800b6be:	461f      	mov	r7, r3
 800b6c0:	42be      	cmp	r6, r7
 800b6c2:	680b      	ldr	r3, [r1, #0]
 800b6c4:	4682      	mov	sl, r0
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	4690      	mov	r8, r2
 800b6ca:	d82c      	bhi.n	800b726 <__ssputs_r+0x6e>
 800b6cc:	898a      	ldrh	r2, [r1, #12]
 800b6ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6d2:	d026      	beq.n	800b722 <__ssputs_r+0x6a>
 800b6d4:	6965      	ldr	r5, [r4, #20]
 800b6d6:	6909      	ldr	r1, [r1, #16]
 800b6d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6dc:	eba3 0901 	sub.w	r9, r3, r1
 800b6e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6e4:	1c7b      	adds	r3, r7, #1
 800b6e6:	444b      	add	r3, r9
 800b6e8:	106d      	asrs	r5, r5, #1
 800b6ea:	429d      	cmp	r5, r3
 800b6ec:	bf38      	it	cc
 800b6ee:	461d      	movcc	r5, r3
 800b6f0:	0553      	lsls	r3, r2, #21
 800b6f2:	d527      	bpl.n	800b744 <__ssputs_r+0x8c>
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	f7ff ff53 	bl	800b5a0 <_malloc_r>
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	b360      	cbz	r0, 800b758 <__ssputs_r+0xa0>
 800b6fe:	6921      	ldr	r1, [r4, #16]
 800b700:	464a      	mov	r2, r9
 800b702:	f7ff fed3 	bl	800b4ac <memcpy>
 800b706:	89a3      	ldrh	r3, [r4, #12]
 800b708:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b710:	81a3      	strh	r3, [r4, #12]
 800b712:	6126      	str	r6, [r4, #16]
 800b714:	6165      	str	r5, [r4, #20]
 800b716:	444e      	add	r6, r9
 800b718:	eba5 0509 	sub.w	r5, r5, r9
 800b71c:	6026      	str	r6, [r4, #0]
 800b71e:	60a5      	str	r5, [r4, #8]
 800b720:	463e      	mov	r6, r7
 800b722:	42be      	cmp	r6, r7
 800b724:	d900      	bls.n	800b728 <__ssputs_r+0x70>
 800b726:	463e      	mov	r6, r7
 800b728:	6820      	ldr	r0, [r4, #0]
 800b72a:	4632      	mov	r2, r6
 800b72c:	4641      	mov	r1, r8
 800b72e:	f000 faab 	bl	800bc88 <memmove>
 800b732:	68a3      	ldr	r3, [r4, #8]
 800b734:	1b9b      	subs	r3, r3, r6
 800b736:	60a3      	str	r3, [r4, #8]
 800b738:	6823      	ldr	r3, [r4, #0]
 800b73a:	4433      	add	r3, r6
 800b73c:	6023      	str	r3, [r4, #0]
 800b73e:	2000      	movs	r0, #0
 800b740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b744:	462a      	mov	r2, r5
 800b746:	f000 fac9 	bl	800bcdc <_realloc_r>
 800b74a:	4606      	mov	r6, r0
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d1e0      	bne.n	800b712 <__ssputs_r+0x5a>
 800b750:	6921      	ldr	r1, [r4, #16]
 800b752:	4650      	mov	r0, sl
 800b754:	f7ff feb8 	bl	800b4c8 <_free_r>
 800b758:	230c      	movs	r3, #12
 800b75a:	f8ca 3000 	str.w	r3, [sl]
 800b75e:	89a3      	ldrh	r3, [r4, #12]
 800b760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b764:	81a3      	strh	r3, [r4, #12]
 800b766:	f04f 30ff 	mov.w	r0, #4294967295
 800b76a:	e7e9      	b.n	800b740 <__ssputs_r+0x88>

0800b76c <_svfiprintf_r>:
 800b76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b770:	4698      	mov	r8, r3
 800b772:	898b      	ldrh	r3, [r1, #12]
 800b774:	061b      	lsls	r3, r3, #24
 800b776:	b09d      	sub	sp, #116	; 0x74
 800b778:	4607      	mov	r7, r0
 800b77a:	460d      	mov	r5, r1
 800b77c:	4614      	mov	r4, r2
 800b77e:	d50e      	bpl.n	800b79e <_svfiprintf_r+0x32>
 800b780:	690b      	ldr	r3, [r1, #16]
 800b782:	b963      	cbnz	r3, 800b79e <_svfiprintf_r+0x32>
 800b784:	2140      	movs	r1, #64	; 0x40
 800b786:	f7ff ff0b 	bl	800b5a0 <_malloc_r>
 800b78a:	6028      	str	r0, [r5, #0]
 800b78c:	6128      	str	r0, [r5, #16]
 800b78e:	b920      	cbnz	r0, 800b79a <_svfiprintf_r+0x2e>
 800b790:	230c      	movs	r3, #12
 800b792:	603b      	str	r3, [r7, #0]
 800b794:	f04f 30ff 	mov.w	r0, #4294967295
 800b798:	e0d0      	b.n	800b93c <_svfiprintf_r+0x1d0>
 800b79a:	2340      	movs	r3, #64	; 0x40
 800b79c:	616b      	str	r3, [r5, #20]
 800b79e:	2300      	movs	r3, #0
 800b7a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b7a2:	2320      	movs	r3, #32
 800b7a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7ac:	2330      	movs	r3, #48	; 0x30
 800b7ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b954 <_svfiprintf_r+0x1e8>
 800b7b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7b6:	f04f 0901 	mov.w	r9, #1
 800b7ba:	4623      	mov	r3, r4
 800b7bc:	469a      	mov	sl, r3
 800b7be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7c2:	b10a      	cbz	r2, 800b7c8 <_svfiprintf_r+0x5c>
 800b7c4:	2a25      	cmp	r2, #37	; 0x25
 800b7c6:	d1f9      	bne.n	800b7bc <_svfiprintf_r+0x50>
 800b7c8:	ebba 0b04 	subs.w	fp, sl, r4
 800b7cc:	d00b      	beq.n	800b7e6 <_svfiprintf_r+0x7a>
 800b7ce:	465b      	mov	r3, fp
 800b7d0:	4622      	mov	r2, r4
 800b7d2:	4629      	mov	r1, r5
 800b7d4:	4638      	mov	r0, r7
 800b7d6:	f7ff ff6f 	bl	800b6b8 <__ssputs_r>
 800b7da:	3001      	adds	r0, #1
 800b7dc:	f000 80a9 	beq.w	800b932 <_svfiprintf_r+0x1c6>
 800b7e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7e2:	445a      	add	r2, fp
 800b7e4:	9209      	str	r2, [sp, #36]	; 0x24
 800b7e6:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	f000 80a1 	beq.w	800b932 <_svfiprintf_r+0x1c6>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7fa:	f10a 0a01 	add.w	sl, sl, #1
 800b7fe:	9304      	str	r3, [sp, #16]
 800b800:	9307      	str	r3, [sp, #28]
 800b802:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b806:	931a      	str	r3, [sp, #104]	; 0x68
 800b808:	4654      	mov	r4, sl
 800b80a:	2205      	movs	r2, #5
 800b80c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b810:	4850      	ldr	r0, [pc, #320]	; (800b954 <_svfiprintf_r+0x1e8>)
 800b812:	f7f4 fce5 	bl	80001e0 <memchr>
 800b816:	9a04      	ldr	r2, [sp, #16]
 800b818:	b9d8      	cbnz	r0, 800b852 <_svfiprintf_r+0xe6>
 800b81a:	06d0      	lsls	r0, r2, #27
 800b81c:	bf44      	itt	mi
 800b81e:	2320      	movmi	r3, #32
 800b820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b824:	0711      	lsls	r1, r2, #28
 800b826:	bf44      	itt	mi
 800b828:	232b      	movmi	r3, #43	; 0x2b
 800b82a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b82e:	f89a 3000 	ldrb.w	r3, [sl]
 800b832:	2b2a      	cmp	r3, #42	; 0x2a
 800b834:	d015      	beq.n	800b862 <_svfiprintf_r+0xf6>
 800b836:	9a07      	ldr	r2, [sp, #28]
 800b838:	4654      	mov	r4, sl
 800b83a:	2000      	movs	r0, #0
 800b83c:	f04f 0c0a 	mov.w	ip, #10
 800b840:	4621      	mov	r1, r4
 800b842:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b846:	3b30      	subs	r3, #48	; 0x30
 800b848:	2b09      	cmp	r3, #9
 800b84a:	d94d      	bls.n	800b8e8 <_svfiprintf_r+0x17c>
 800b84c:	b1b0      	cbz	r0, 800b87c <_svfiprintf_r+0x110>
 800b84e:	9207      	str	r2, [sp, #28]
 800b850:	e014      	b.n	800b87c <_svfiprintf_r+0x110>
 800b852:	eba0 0308 	sub.w	r3, r0, r8
 800b856:	fa09 f303 	lsl.w	r3, r9, r3
 800b85a:	4313      	orrs	r3, r2
 800b85c:	9304      	str	r3, [sp, #16]
 800b85e:	46a2      	mov	sl, r4
 800b860:	e7d2      	b.n	800b808 <_svfiprintf_r+0x9c>
 800b862:	9b03      	ldr	r3, [sp, #12]
 800b864:	1d19      	adds	r1, r3, #4
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	9103      	str	r1, [sp, #12]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	bfbb      	ittet	lt
 800b86e:	425b      	neglt	r3, r3
 800b870:	f042 0202 	orrlt.w	r2, r2, #2
 800b874:	9307      	strge	r3, [sp, #28]
 800b876:	9307      	strlt	r3, [sp, #28]
 800b878:	bfb8      	it	lt
 800b87a:	9204      	strlt	r2, [sp, #16]
 800b87c:	7823      	ldrb	r3, [r4, #0]
 800b87e:	2b2e      	cmp	r3, #46	; 0x2e
 800b880:	d10c      	bne.n	800b89c <_svfiprintf_r+0x130>
 800b882:	7863      	ldrb	r3, [r4, #1]
 800b884:	2b2a      	cmp	r3, #42	; 0x2a
 800b886:	d134      	bne.n	800b8f2 <_svfiprintf_r+0x186>
 800b888:	9b03      	ldr	r3, [sp, #12]
 800b88a:	1d1a      	adds	r2, r3, #4
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	9203      	str	r2, [sp, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	bfb8      	it	lt
 800b894:	f04f 33ff 	movlt.w	r3, #4294967295
 800b898:	3402      	adds	r4, #2
 800b89a:	9305      	str	r3, [sp, #20]
 800b89c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b964 <_svfiprintf_r+0x1f8>
 800b8a0:	7821      	ldrb	r1, [r4, #0]
 800b8a2:	2203      	movs	r2, #3
 800b8a4:	4650      	mov	r0, sl
 800b8a6:	f7f4 fc9b 	bl	80001e0 <memchr>
 800b8aa:	b138      	cbz	r0, 800b8bc <_svfiprintf_r+0x150>
 800b8ac:	9b04      	ldr	r3, [sp, #16]
 800b8ae:	eba0 000a 	sub.w	r0, r0, sl
 800b8b2:	2240      	movs	r2, #64	; 0x40
 800b8b4:	4082      	lsls	r2, r0
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	3401      	adds	r4, #1
 800b8ba:	9304      	str	r3, [sp, #16]
 800b8bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8c0:	4825      	ldr	r0, [pc, #148]	; (800b958 <_svfiprintf_r+0x1ec>)
 800b8c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8c6:	2206      	movs	r2, #6
 800b8c8:	f7f4 fc8a 	bl	80001e0 <memchr>
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	d038      	beq.n	800b942 <_svfiprintf_r+0x1d6>
 800b8d0:	4b22      	ldr	r3, [pc, #136]	; (800b95c <_svfiprintf_r+0x1f0>)
 800b8d2:	bb1b      	cbnz	r3, 800b91c <_svfiprintf_r+0x1b0>
 800b8d4:	9b03      	ldr	r3, [sp, #12]
 800b8d6:	3307      	adds	r3, #7
 800b8d8:	f023 0307 	bic.w	r3, r3, #7
 800b8dc:	3308      	adds	r3, #8
 800b8de:	9303      	str	r3, [sp, #12]
 800b8e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8e2:	4433      	add	r3, r6
 800b8e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8e6:	e768      	b.n	800b7ba <_svfiprintf_r+0x4e>
 800b8e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8ec:	460c      	mov	r4, r1
 800b8ee:	2001      	movs	r0, #1
 800b8f0:	e7a6      	b.n	800b840 <_svfiprintf_r+0xd4>
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	3401      	adds	r4, #1
 800b8f6:	9305      	str	r3, [sp, #20]
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	f04f 0c0a 	mov.w	ip, #10
 800b8fe:	4620      	mov	r0, r4
 800b900:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b904:	3a30      	subs	r2, #48	; 0x30
 800b906:	2a09      	cmp	r2, #9
 800b908:	d903      	bls.n	800b912 <_svfiprintf_r+0x1a6>
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d0c6      	beq.n	800b89c <_svfiprintf_r+0x130>
 800b90e:	9105      	str	r1, [sp, #20]
 800b910:	e7c4      	b.n	800b89c <_svfiprintf_r+0x130>
 800b912:	fb0c 2101 	mla	r1, ip, r1, r2
 800b916:	4604      	mov	r4, r0
 800b918:	2301      	movs	r3, #1
 800b91a:	e7f0      	b.n	800b8fe <_svfiprintf_r+0x192>
 800b91c:	ab03      	add	r3, sp, #12
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	462a      	mov	r2, r5
 800b922:	4b0f      	ldr	r3, [pc, #60]	; (800b960 <_svfiprintf_r+0x1f4>)
 800b924:	a904      	add	r1, sp, #16
 800b926:	4638      	mov	r0, r7
 800b928:	f3af 8000 	nop.w
 800b92c:	1c42      	adds	r2, r0, #1
 800b92e:	4606      	mov	r6, r0
 800b930:	d1d6      	bne.n	800b8e0 <_svfiprintf_r+0x174>
 800b932:	89ab      	ldrh	r3, [r5, #12]
 800b934:	065b      	lsls	r3, r3, #25
 800b936:	f53f af2d 	bmi.w	800b794 <_svfiprintf_r+0x28>
 800b93a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b93c:	b01d      	add	sp, #116	; 0x74
 800b93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b942:	ab03      	add	r3, sp, #12
 800b944:	9300      	str	r3, [sp, #0]
 800b946:	462a      	mov	r2, r5
 800b948:	4b05      	ldr	r3, [pc, #20]	; (800b960 <_svfiprintf_r+0x1f4>)
 800b94a:	a904      	add	r1, sp, #16
 800b94c:	4638      	mov	r0, r7
 800b94e:	f000 f879 	bl	800ba44 <_printf_i>
 800b952:	e7eb      	b.n	800b92c <_svfiprintf_r+0x1c0>
 800b954:	0800c3dd 	.word	0x0800c3dd
 800b958:	0800c3e7 	.word	0x0800c3e7
 800b95c:	00000000 	.word	0x00000000
 800b960:	0800b6b9 	.word	0x0800b6b9
 800b964:	0800c3e3 	.word	0x0800c3e3

0800b968 <_printf_common>:
 800b968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b96c:	4616      	mov	r6, r2
 800b96e:	4699      	mov	r9, r3
 800b970:	688a      	ldr	r2, [r1, #8]
 800b972:	690b      	ldr	r3, [r1, #16]
 800b974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b978:	4293      	cmp	r3, r2
 800b97a:	bfb8      	it	lt
 800b97c:	4613      	movlt	r3, r2
 800b97e:	6033      	str	r3, [r6, #0]
 800b980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b984:	4607      	mov	r7, r0
 800b986:	460c      	mov	r4, r1
 800b988:	b10a      	cbz	r2, 800b98e <_printf_common+0x26>
 800b98a:	3301      	adds	r3, #1
 800b98c:	6033      	str	r3, [r6, #0]
 800b98e:	6823      	ldr	r3, [r4, #0]
 800b990:	0699      	lsls	r1, r3, #26
 800b992:	bf42      	ittt	mi
 800b994:	6833      	ldrmi	r3, [r6, #0]
 800b996:	3302      	addmi	r3, #2
 800b998:	6033      	strmi	r3, [r6, #0]
 800b99a:	6825      	ldr	r5, [r4, #0]
 800b99c:	f015 0506 	ands.w	r5, r5, #6
 800b9a0:	d106      	bne.n	800b9b0 <_printf_common+0x48>
 800b9a2:	f104 0a19 	add.w	sl, r4, #25
 800b9a6:	68e3      	ldr	r3, [r4, #12]
 800b9a8:	6832      	ldr	r2, [r6, #0]
 800b9aa:	1a9b      	subs	r3, r3, r2
 800b9ac:	42ab      	cmp	r3, r5
 800b9ae:	dc26      	bgt.n	800b9fe <_printf_common+0x96>
 800b9b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b9b4:	1e13      	subs	r3, r2, #0
 800b9b6:	6822      	ldr	r2, [r4, #0]
 800b9b8:	bf18      	it	ne
 800b9ba:	2301      	movne	r3, #1
 800b9bc:	0692      	lsls	r2, r2, #26
 800b9be:	d42b      	bmi.n	800ba18 <_printf_common+0xb0>
 800b9c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	47c0      	blx	r8
 800b9ca:	3001      	adds	r0, #1
 800b9cc:	d01e      	beq.n	800ba0c <_printf_common+0xa4>
 800b9ce:	6823      	ldr	r3, [r4, #0]
 800b9d0:	6922      	ldr	r2, [r4, #16]
 800b9d2:	f003 0306 	and.w	r3, r3, #6
 800b9d6:	2b04      	cmp	r3, #4
 800b9d8:	bf02      	ittt	eq
 800b9da:	68e5      	ldreq	r5, [r4, #12]
 800b9dc:	6833      	ldreq	r3, [r6, #0]
 800b9de:	1aed      	subeq	r5, r5, r3
 800b9e0:	68a3      	ldr	r3, [r4, #8]
 800b9e2:	bf0c      	ite	eq
 800b9e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9e8:	2500      	movne	r5, #0
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	bfc4      	itt	gt
 800b9ee:	1a9b      	subgt	r3, r3, r2
 800b9f0:	18ed      	addgt	r5, r5, r3
 800b9f2:	2600      	movs	r6, #0
 800b9f4:	341a      	adds	r4, #26
 800b9f6:	42b5      	cmp	r5, r6
 800b9f8:	d11a      	bne.n	800ba30 <_printf_common+0xc8>
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	e008      	b.n	800ba10 <_printf_common+0xa8>
 800b9fe:	2301      	movs	r3, #1
 800ba00:	4652      	mov	r2, sl
 800ba02:	4649      	mov	r1, r9
 800ba04:	4638      	mov	r0, r7
 800ba06:	47c0      	blx	r8
 800ba08:	3001      	adds	r0, #1
 800ba0a:	d103      	bne.n	800ba14 <_printf_common+0xac>
 800ba0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba14:	3501      	adds	r5, #1
 800ba16:	e7c6      	b.n	800b9a6 <_printf_common+0x3e>
 800ba18:	18e1      	adds	r1, r4, r3
 800ba1a:	1c5a      	adds	r2, r3, #1
 800ba1c:	2030      	movs	r0, #48	; 0x30
 800ba1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ba22:	4422      	add	r2, r4
 800ba24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ba28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba2c:	3302      	adds	r3, #2
 800ba2e:	e7c7      	b.n	800b9c0 <_printf_common+0x58>
 800ba30:	2301      	movs	r3, #1
 800ba32:	4622      	mov	r2, r4
 800ba34:	4649      	mov	r1, r9
 800ba36:	4638      	mov	r0, r7
 800ba38:	47c0      	blx	r8
 800ba3a:	3001      	adds	r0, #1
 800ba3c:	d0e6      	beq.n	800ba0c <_printf_common+0xa4>
 800ba3e:	3601      	adds	r6, #1
 800ba40:	e7d9      	b.n	800b9f6 <_printf_common+0x8e>
	...

0800ba44 <_printf_i>:
 800ba44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba48:	7e0f      	ldrb	r7, [r1, #24]
 800ba4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ba4c:	2f78      	cmp	r7, #120	; 0x78
 800ba4e:	4691      	mov	r9, r2
 800ba50:	4680      	mov	r8, r0
 800ba52:	460c      	mov	r4, r1
 800ba54:	469a      	mov	sl, r3
 800ba56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ba5a:	d807      	bhi.n	800ba6c <_printf_i+0x28>
 800ba5c:	2f62      	cmp	r7, #98	; 0x62
 800ba5e:	d80a      	bhi.n	800ba76 <_printf_i+0x32>
 800ba60:	2f00      	cmp	r7, #0
 800ba62:	f000 80d4 	beq.w	800bc0e <_printf_i+0x1ca>
 800ba66:	2f58      	cmp	r7, #88	; 0x58
 800ba68:	f000 80c0 	beq.w	800bbec <_printf_i+0x1a8>
 800ba6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba74:	e03a      	b.n	800baec <_printf_i+0xa8>
 800ba76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba7a:	2b15      	cmp	r3, #21
 800ba7c:	d8f6      	bhi.n	800ba6c <_printf_i+0x28>
 800ba7e:	a101      	add	r1, pc, #4	; (adr r1, 800ba84 <_printf_i+0x40>)
 800ba80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba84:	0800badd 	.word	0x0800badd
 800ba88:	0800baf1 	.word	0x0800baf1
 800ba8c:	0800ba6d 	.word	0x0800ba6d
 800ba90:	0800ba6d 	.word	0x0800ba6d
 800ba94:	0800ba6d 	.word	0x0800ba6d
 800ba98:	0800ba6d 	.word	0x0800ba6d
 800ba9c:	0800baf1 	.word	0x0800baf1
 800baa0:	0800ba6d 	.word	0x0800ba6d
 800baa4:	0800ba6d 	.word	0x0800ba6d
 800baa8:	0800ba6d 	.word	0x0800ba6d
 800baac:	0800ba6d 	.word	0x0800ba6d
 800bab0:	0800bbf5 	.word	0x0800bbf5
 800bab4:	0800bb1d 	.word	0x0800bb1d
 800bab8:	0800bbaf 	.word	0x0800bbaf
 800babc:	0800ba6d 	.word	0x0800ba6d
 800bac0:	0800ba6d 	.word	0x0800ba6d
 800bac4:	0800bc17 	.word	0x0800bc17
 800bac8:	0800ba6d 	.word	0x0800ba6d
 800bacc:	0800bb1d 	.word	0x0800bb1d
 800bad0:	0800ba6d 	.word	0x0800ba6d
 800bad4:	0800ba6d 	.word	0x0800ba6d
 800bad8:	0800bbb7 	.word	0x0800bbb7
 800badc:	682b      	ldr	r3, [r5, #0]
 800bade:	1d1a      	adds	r2, r3, #4
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	602a      	str	r2, [r5, #0]
 800bae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800baec:	2301      	movs	r3, #1
 800baee:	e09f      	b.n	800bc30 <_printf_i+0x1ec>
 800baf0:	6820      	ldr	r0, [r4, #0]
 800baf2:	682b      	ldr	r3, [r5, #0]
 800baf4:	0607      	lsls	r7, r0, #24
 800baf6:	f103 0104 	add.w	r1, r3, #4
 800bafa:	6029      	str	r1, [r5, #0]
 800bafc:	d501      	bpl.n	800bb02 <_printf_i+0xbe>
 800bafe:	681e      	ldr	r6, [r3, #0]
 800bb00:	e003      	b.n	800bb0a <_printf_i+0xc6>
 800bb02:	0646      	lsls	r6, r0, #25
 800bb04:	d5fb      	bpl.n	800bafe <_printf_i+0xba>
 800bb06:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bb0a:	2e00      	cmp	r6, #0
 800bb0c:	da03      	bge.n	800bb16 <_printf_i+0xd2>
 800bb0e:	232d      	movs	r3, #45	; 0x2d
 800bb10:	4276      	negs	r6, r6
 800bb12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb16:	485a      	ldr	r0, [pc, #360]	; (800bc80 <_printf_i+0x23c>)
 800bb18:	230a      	movs	r3, #10
 800bb1a:	e012      	b.n	800bb42 <_printf_i+0xfe>
 800bb1c:	682b      	ldr	r3, [r5, #0]
 800bb1e:	6820      	ldr	r0, [r4, #0]
 800bb20:	1d19      	adds	r1, r3, #4
 800bb22:	6029      	str	r1, [r5, #0]
 800bb24:	0605      	lsls	r5, r0, #24
 800bb26:	d501      	bpl.n	800bb2c <_printf_i+0xe8>
 800bb28:	681e      	ldr	r6, [r3, #0]
 800bb2a:	e002      	b.n	800bb32 <_printf_i+0xee>
 800bb2c:	0641      	lsls	r1, r0, #25
 800bb2e:	d5fb      	bpl.n	800bb28 <_printf_i+0xe4>
 800bb30:	881e      	ldrh	r6, [r3, #0]
 800bb32:	4853      	ldr	r0, [pc, #332]	; (800bc80 <_printf_i+0x23c>)
 800bb34:	2f6f      	cmp	r7, #111	; 0x6f
 800bb36:	bf0c      	ite	eq
 800bb38:	2308      	moveq	r3, #8
 800bb3a:	230a      	movne	r3, #10
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bb42:	6865      	ldr	r5, [r4, #4]
 800bb44:	60a5      	str	r5, [r4, #8]
 800bb46:	2d00      	cmp	r5, #0
 800bb48:	bfa2      	ittt	ge
 800bb4a:	6821      	ldrge	r1, [r4, #0]
 800bb4c:	f021 0104 	bicge.w	r1, r1, #4
 800bb50:	6021      	strge	r1, [r4, #0]
 800bb52:	b90e      	cbnz	r6, 800bb58 <_printf_i+0x114>
 800bb54:	2d00      	cmp	r5, #0
 800bb56:	d04b      	beq.n	800bbf0 <_printf_i+0x1ac>
 800bb58:	4615      	mov	r5, r2
 800bb5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bb5e:	fb03 6711 	mls	r7, r3, r1, r6
 800bb62:	5dc7      	ldrb	r7, [r0, r7]
 800bb64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bb68:	4637      	mov	r7, r6
 800bb6a:	42bb      	cmp	r3, r7
 800bb6c:	460e      	mov	r6, r1
 800bb6e:	d9f4      	bls.n	800bb5a <_printf_i+0x116>
 800bb70:	2b08      	cmp	r3, #8
 800bb72:	d10b      	bne.n	800bb8c <_printf_i+0x148>
 800bb74:	6823      	ldr	r3, [r4, #0]
 800bb76:	07de      	lsls	r6, r3, #31
 800bb78:	d508      	bpl.n	800bb8c <_printf_i+0x148>
 800bb7a:	6923      	ldr	r3, [r4, #16]
 800bb7c:	6861      	ldr	r1, [r4, #4]
 800bb7e:	4299      	cmp	r1, r3
 800bb80:	bfde      	ittt	le
 800bb82:	2330      	movle	r3, #48	; 0x30
 800bb84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bb88:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bb8c:	1b52      	subs	r2, r2, r5
 800bb8e:	6122      	str	r2, [r4, #16]
 800bb90:	f8cd a000 	str.w	sl, [sp]
 800bb94:	464b      	mov	r3, r9
 800bb96:	aa03      	add	r2, sp, #12
 800bb98:	4621      	mov	r1, r4
 800bb9a:	4640      	mov	r0, r8
 800bb9c:	f7ff fee4 	bl	800b968 <_printf_common>
 800bba0:	3001      	adds	r0, #1
 800bba2:	d14a      	bne.n	800bc3a <_printf_i+0x1f6>
 800bba4:	f04f 30ff 	mov.w	r0, #4294967295
 800bba8:	b004      	add	sp, #16
 800bbaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbae:	6823      	ldr	r3, [r4, #0]
 800bbb0:	f043 0320 	orr.w	r3, r3, #32
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	4833      	ldr	r0, [pc, #204]	; (800bc84 <_printf_i+0x240>)
 800bbb8:	2778      	movs	r7, #120	; 0x78
 800bbba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bbbe:	6823      	ldr	r3, [r4, #0]
 800bbc0:	6829      	ldr	r1, [r5, #0]
 800bbc2:	061f      	lsls	r7, r3, #24
 800bbc4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bbc8:	d402      	bmi.n	800bbd0 <_printf_i+0x18c>
 800bbca:	065f      	lsls	r7, r3, #25
 800bbcc:	bf48      	it	mi
 800bbce:	b2b6      	uxthmi	r6, r6
 800bbd0:	07df      	lsls	r7, r3, #31
 800bbd2:	bf48      	it	mi
 800bbd4:	f043 0320 	orrmi.w	r3, r3, #32
 800bbd8:	6029      	str	r1, [r5, #0]
 800bbda:	bf48      	it	mi
 800bbdc:	6023      	strmi	r3, [r4, #0]
 800bbde:	b91e      	cbnz	r6, 800bbe8 <_printf_i+0x1a4>
 800bbe0:	6823      	ldr	r3, [r4, #0]
 800bbe2:	f023 0320 	bic.w	r3, r3, #32
 800bbe6:	6023      	str	r3, [r4, #0]
 800bbe8:	2310      	movs	r3, #16
 800bbea:	e7a7      	b.n	800bb3c <_printf_i+0xf8>
 800bbec:	4824      	ldr	r0, [pc, #144]	; (800bc80 <_printf_i+0x23c>)
 800bbee:	e7e4      	b.n	800bbba <_printf_i+0x176>
 800bbf0:	4615      	mov	r5, r2
 800bbf2:	e7bd      	b.n	800bb70 <_printf_i+0x12c>
 800bbf4:	682b      	ldr	r3, [r5, #0]
 800bbf6:	6826      	ldr	r6, [r4, #0]
 800bbf8:	6961      	ldr	r1, [r4, #20]
 800bbfa:	1d18      	adds	r0, r3, #4
 800bbfc:	6028      	str	r0, [r5, #0]
 800bbfe:	0635      	lsls	r5, r6, #24
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	d501      	bpl.n	800bc08 <_printf_i+0x1c4>
 800bc04:	6019      	str	r1, [r3, #0]
 800bc06:	e002      	b.n	800bc0e <_printf_i+0x1ca>
 800bc08:	0670      	lsls	r0, r6, #25
 800bc0a:	d5fb      	bpl.n	800bc04 <_printf_i+0x1c0>
 800bc0c:	8019      	strh	r1, [r3, #0]
 800bc0e:	2300      	movs	r3, #0
 800bc10:	6123      	str	r3, [r4, #16]
 800bc12:	4615      	mov	r5, r2
 800bc14:	e7bc      	b.n	800bb90 <_printf_i+0x14c>
 800bc16:	682b      	ldr	r3, [r5, #0]
 800bc18:	1d1a      	adds	r2, r3, #4
 800bc1a:	602a      	str	r2, [r5, #0]
 800bc1c:	681d      	ldr	r5, [r3, #0]
 800bc1e:	6862      	ldr	r2, [r4, #4]
 800bc20:	2100      	movs	r1, #0
 800bc22:	4628      	mov	r0, r5
 800bc24:	f7f4 fadc 	bl	80001e0 <memchr>
 800bc28:	b108      	cbz	r0, 800bc2e <_printf_i+0x1ea>
 800bc2a:	1b40      	subs	r0, r0, r5
 800bc2c:	6060      	str	r0, [r4, #4]
 800bc2e:	6863      	ldr	r3, [r4, #4]
 800bc30:	6123      	str	r3, [r4, #16]
 800bc32:	2300      	movs	r3, #0
 800bc34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc38:	e7aa      	b.n	800bb90 <_printf_i+0x14c>
 800bc3a:	6923      	ldr	r3, [r4, #16]
 800bc3c:	462a      	mov	r2, r5
 800bc3e:	4649      	mov	r1, r9
 800bc40:	4640      	mov	r0, r8
 800bc42:	47d0      	blx	sl
 800bc44:	3001      	adds	r0, #1
 800bc46:	d0ad      	beq.n	800bba4 <_printf_i+0x160>
 800bc48:	6823      	ldr	r3, [r4, #0]
 800bc4a:	079b      	lsls	r3, r3, #30
 800bc4c:	d413      	bmi.n	800bc76 <_printf_i+0x232>
 800bc4e:	68e0      	ldr	r0, [r4, #12]
 800bc50:	9b03      	ldr	r3, [sp, #12]
 800bc52:	4298      	cmp	r0, r3
 800bc54:	bfb8      	it	lt
 800bc56:	4618      	movlt	r0, r3
 800bc58:	e7a6      	b.n	800bba8 <_printf_i+0x164>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	4632      	mov	r2, r6
 800bc5e:	4649      	mov	r1, r9
 800bc60:	4640      	mov	r0, r8
 800bc62:	47d0      	blx	sl
 800bc64:	3001      	adds	r0, #1
 800bc66:	d09d      	beq.n	800bba4 <_printf_i+0x160>
 800bc68:	3501      	adds	r5, #1
 800bc6a:	68e3      	ldr	r3, [r4, #12]
 800bc6c:	9903      	ldr	r1, [sp, #12]
 800bc6e:	1a5b      	subs	r3, r3, r1
 800bc70:	42ab      	cmp	r3, r5
 800bc72:	dcf2      	bgt.n	800bc5a <_printf_i+0x216>
 800bc74:	e7eb      	b.n	800bc4e <_printf_i+0x20a>
 800bc76:	2500      	movs	r5, #0
 800bc78:	f104 0619 	add.w	r6, r4, #25
 800bc7c:	e7f5      	b.n	800bc6a <_printf_i+0x226>
 800bc7e:	bf00      	nop
 800bc80:	0800c3ee 	.word	0x0800c3ee
 800bc84:	0800c3ff 	.word	0x0800c3ff

0800bc88 <memmove>:
 800bc88:	4288      	cmp	r0, r1
 800bc8a:	b510      	push	{r4, lr}
 800bc8c:	eb01 0402 	add.w	r4, r1, r2
 800bc90:	d902      	bls.n	800bc98 <memmove+0x10>
 800bc92:	4284      	cmp	r4, r0
 800bc94:	4623      	mov	r3, r4
 800bc96:	d807      	bhi.n	800bca8 <memmove+0x20>
 800bc98:	1e43      	subs	r3, r0, #1
 800bc9a:	42a1      	cmp	r1, r4
 800bc9c:	d008      	beq.n	800bcb0 <memmove+0x28>
 800bc9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bca2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bca6:	e7f8      	b.n	800bc9a <memmove+0x12>
 800bca8:	4402      	add	r2, r0
 800bcaa:	4601      	mov	r1, r0
 800bcac:	428a      	cmp	r2, r1
 800bcae:	d100      	bne.n	800bcb2 <memmove+0x2a>
 800bcb0:	bd10      	pop	{r4, pc}
 800bcb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bcba:	e7f7      	b.n	800bcac <memmove+0x24>

0800bcbc <_sbrk_r>:
 800bcbc:	b538      	push	{r3, r4, r5, lr}
 800bcbe:	4d06      	ldr	r5, [pc, #24]	; (800bcd8 <_sbrk_r+0x1c>)
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	4608      	mov	r0, r1
 800bcc6:	602b      	str	r3, [r5, #0]
 800bcc8:	f7f6 f8f0 	bl	8001eac <_sbrk>
 800bccc:	1c43      	adds	r3, r0, #1
 800bcce:	d102      	bne.n	800bcd6 <_sbrk_r+0x1a>
 800bcd0:	682b      	ldr	r3, [r5, #0]
 800bcd2:	b103      	cbz	r3, 800bcd6 <_sbrk_r+0x1a>
 800bcd4:	6023      	str	r3, [r4, #0]
 800bcd6:	bd38      	pop	{r3, r4, r5, pc}
 800bcd8:	200044ac 	.word	0x200044ac

0800bcdc <_realloc_r>:
 800bcdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bce0:	4680      	mov	r8, r0
 800bce2:	4614      	mov	r4, r2
 800bce4:	460e      	mov	r6, r1
 800bce6:	b921      	cbnz	r1, 800bcf2 <_realloc_r+0x16>
 800bce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcec:	4611      	mov	r1, r2
 800bcee:	f7ff bc57 	b.w	800b5a0 <_malloc_r>
 800bcf2:	b92a      	cbnz	r2, 800bd00 <_realloc_r+0x24>
 800bcf4:	f7ff fbe8 	bl	800b4c8 <_free_r>
 800bcf8:	4625      	mov	r5, r4
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd00:	f000 f81b 	bl	800bd3a <_malloc_usable_size_r>
 800bd04:	4284      	cmp	r4, r0
 800bd06:	4607      	mov	r7, r0
 800bd08:	d802      	bhi.n	800bd10 <_realloc_r+0x34>
 800bd0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd0e:	d812      	bhi.n	800bd36 <_realloc_r+0x5a>
 800bd10:	4621      	mov	r1, r4
 800bd12:	4640      	mov	r0, r8
 800bd14:	f7ff fc44 	bl	800b5a0 <_malloc_r>
 800bd18:	4605      	mov	r5, r0
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	d0ed      	beq.n	800bcfa <_realloc_r+0x1e>
 800bd1e:	42bc      	cmp	r4, r7
 800bd20:	4622      	mov	r2, r4
 800bd22:	4631      	mov	r1, r6
 800bd24:	bf28      	it	cs
 800bd26:	463a      	movcs	r2, r7
 800bd28:	f7ff fbc0 	bl	800b4ac <memcpy>
 800bd2c:	4631      	mov	r1, r6
 800bd2e:	4640      	mov	r0, r8
 800bd30:	f7ff fbca 	bl	800b4c8 <_free_r>
 800bd34:	e7e1      	b.n	800bcfa <_realloc_r+0x1e>
 800bd36:	4635      	mov	r5, r6
 800bd38:	e7df      	b.n	800bcfa <_realloc_r+0x1e>

0800bd3a <_malloc_usable_size_r>:
 800bd3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd3e:	1f18      	subs	r0, r3, #4
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	bfbc      	itt	lt
 800bd44:	580b      	ldrlt	r3, [r1, r0]
 800bd46:	18c0      	addlt	r0, r0, r3
 800bd48:	4770      	bx	lr
	...

0800bd4c <round>:
 800bd4c:	ec53 2b10 	vmov	r2, r3, d0
 800bd50:	b570      	push	{r4, r5, r6, lr}
 800bd52:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800bd56:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800bd5a:	2813      	cmp	r0, #19
 800bd5c:	ee10 5a10 	vmov	r5, s0
 800bd60:	4619      	mov	r1, r3
 800bd62:	dc18      	bgt.n	800bd96 <round+0x4a>
 800bd64:	2800      	cmp	r0, #0
 800bd66:	da09      	bge.n	800bd7c <round+0x30>
 800bd68:	3001      	adds	r0, #1
 800bd6a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800bd6e:	d103      	bne.n	800bd78 <round+0x2c>
 800bd70:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800bd74:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bd78:	2300      	movs	r3, #0
 800bd7a:	e02a      	b.n	800bdd2 <round+0x86>
 800bd7c:	4c16      	ldr	r4, [pc, #88]	; (800bdd8 <round+0x8c>)
 800bd7e:	4104      	asrs	r4, r0
 800bd80:	ea03 0604 	and.w	r6, r3, r4
 800bd84:	4316      	orrs	r6, r2
 800bd86:	d011      	beq.n	800bdac <round+0x60>
 800bd88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bd8c:	4103      	asrs	r3, r0
 800bd8e:	440b      	add	r3, r1
 800bd90:	ea23 0104 	bic.w	r1, r3, r4
 800bd94:	e7f0      	b.n	800bd78 <round+0x2c>
 800bd96:	2833      	cmp	r0, #51	; 0x33
 800bd98:	dd0b      	ble.n	800bdb2 <round+0x66>
 800bd9a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800bd9e:	d105      	bne.n	800bdac <round+0x60>
 800bda0:	ee10 0a10 	vmov	r0, s0
 800bda4:	f7f4 fa72 	bl	800028c <__adddf3>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	460b      	mov	r3, r1
 800bdac:	ec43 2b10 	vmov	d0, r2, r3
 800bdb0:	bd70      	pop	{r4, r5, r6, pc}
 800bdb2:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800bdb6:	f04f 34ff 	mov.w	r4, #4294967295
 800bdba:	40f4      	lsrs	r4, r6
 800bdbc:	4214      	tst	r4, r2
 800bdbe:	d0f5      	beq.n	800bdac <round+0x60>
 800bdc0:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	4083      	lsls	r3, r0
 800bdc8:	195b      	adds	r3, r3, r5
 800bdca:	bf28      	it	cs
 800bdcc:	3101      	addcs	r1, #1
 800bdce:	ea23 0304 	bic.w	r3, r3, r4
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	e7e9      	b.n	800bdac <round+0x60>
 800bdd8:	000fffff 	.word	0x000fffff

0800bddc <_init>:
 800bddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdde:	bf00      	nop
 800bde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bde2:	bc08      	pop	{r3}
 800bde4:	469e      	mov	lr, r3
 800bde6:	4770      	bx	lr

0800bde8 <_fini>:
 800bde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdea:	bf00      	nop
 800bdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdee:	bc08      	pop	{r3}
 800bdf0:	469e      	mov	lr, r3
 800bdf2:	4770      	bx	lr
