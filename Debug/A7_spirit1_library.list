
A7_spirit1_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bea4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  0800c034  0800c034  0001c034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6dc  0800c6dc  000203ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6dc  0800c6dc  0001c6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6e4  0800c6e4  000203ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6e4  0800c6e4  0001c6e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6e8  0800c6e8  0001c6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003ac  20000000  0800c6ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f20  200003ac  0800ca98  000203ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042cc  0800ca98  000242cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203ac  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002693a  00000000  00000000  0002041f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a10  00000000  00000000  00046d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002318  00000000  00000000  0004c770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ae5  00000000  00000000  0004ea88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d966  00000000  00000000  0005056d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000278cc  00000000  00000000  0007ded3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010fb2e  00000000  00000000  000a579f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009824  00000000  00000000  001b52d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001beaf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003ac 	.word	0x200003ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c01c 	.word	0x0800c01c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003b0 	.word	0x200003b0
 80001cc:	0800c01c 	.word	0x0800c01c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
return 0;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4b3e      	ldr	r3, [pc, #248]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a3d      	ldr	r2, [pc, #244]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b38      	ldr	r3, [pc, #224]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a37      	ldr	r2, [pc, #220]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b32      	ldr	r3, [pc, #200]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a31      	ldr	r2, [pc, #196]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_onboard_Pin|SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de0:	f004 f882 	bl	8004ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SPI_CSn_GPIO_Port, SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2140      	movs	r1, #64	; 0x40
 8000de8:	4828      	ldr	r0, [pc, #160]	; (8000e8c <MX_GPIO_Init+0x114>)
 8000dea:	f004 f87d 	bl	8004ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4619      	mov	r1, r3
 8000e04:	4822      	ldr	r0, [pc, #136]	; (8000e90 <MX_GPIO_Init+0x118>)
 8000e06:	f003 fec5 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Green_LED_onboard_Pin|SPIRIT1_SDN_Pin;
 8000e0a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4619      	mov	r1, r3
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e26:	f003 feb5 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e2e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4814      	ldr	r0, [pc, #80]	; (8000e90 <MX_GPIO_Init+0x118>)
 8000e40:	f003 fea8 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SPI_CSn_Pin;
 8000e44:	2340      	movs	r3, #64	; 0x40
 8000e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT1_SPI_CSn_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480c      	ldr	r0, [pc, #48]	; (8000e8c <MX_GPIO_Init+0x114>)
 8000e5c:	f003 fe9a 	bl	8004b94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2106      	movs	r1, #6
 8000e64:	2017      	movs	r0, #23
 8000e66:	f003 fe5d 	bl	8004b24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e6a:	2017      	movs	r0, #23
 8000e6c:	f003 fe76 	bl	8004b5c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2107      	movs	r1, #7
 8000e74:	2028      	movs	r0, #40	; 0x28
 8000e76:	f003 fe55 	bl	8004b24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e7a:	2028      	movs	r0, #40	; 0x28
 8000e7c:	f003 fe6e 	bl	8004b5c <HAL_NVIC_EnableIRQ>

}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	48000400 	.word	0x48000400
 8000e90:	48000800 	.word	0x48000800

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	; (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <RTOS_ISR_setPriority>:
void Task_RX(void *argument);

TaskHandle_t Task_TXHandler, Task_RXHandler, Task_HBHandler;
SemaphoreHandle_t FLAG_SPIRIT;

void RTOS_ISR_setPriority(uint32_t IRQn){
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	HAL_NVIC_SetPriorityGrouping(0);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f003 fdd9 	bl	8004b0e <HAL_NVIC_SetPriorityGrouping>
	uint32_t lowPriority = NVIC_EncodePriority(0, 10, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	210a      	movs	r1, #10
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff ffc1 	bl	8000ee8 <NVIC_EncodePriority>
 8000f66:	60f8      	str	r0, [r7, #12]
	NVIC_SetPriority(IRQn, lowPriority);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	68f9      	ldr	r1, [r7, #12]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff90 	bl	8000e94 <__NVIC_SetPriority>
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]
  SpiritIrqs xIrqStatus;
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]

  if (GPIO_Pin != SPIRIT1_GPIO3_Pin){return;}
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	2b80      	cmp	r3, #128	; 0x80
 8000f8e:	d13b      	bne.n	8001008 <HAL_GPIO_EXTI_Callback+0x8c>

  SpiritIrqGetStatus(&xIrqStatus);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 fb2b 	bl	80025f0 <SpiritIrqGetStatus>

  if (xIrqStatus.IRQ_TX_FIFO_ALMOST_EMPTY){
	  //todo:
  }

  if (xIrqStatus.IRQ_TX_DATA_SENT)
 8000f9a:	7b3b      	ldrb	r3, [r7, #12]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d009      	beq.n	8000fba <HAL_GPIO_EXTI_Callback+0x3e>
  {
	  confirm_TX();
 8000fa6:	f000 f839 	bl	800101c <confirm_TX>
	  xSemaphoreGiveFromISR(FLAG_SPIRIT, &xHigherPriorityTaskWoken);
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f107 0208 	add.w	r2, r7, #8
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f007 fe70 	bl	8008c9a <xQueueGiveFromISR>
  }

  if (xIrqStatus.IRQ_RX_DATA_READY)
 8000fba:	7b3b      	ldrb	r3, [r7, #12]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d009      	beq.n	8000fda <HAL_GPIO_EXTI_Callback+0x5e>
  {
	  get_RX();
 8000fc6:	f000 f9d9 	bl	800137c <get_RX>
	  xSemaphoreGiveFromISR(FLAG_SPIRIT, &xHigherPriorityTaskWoken);
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f107 0208 	add.w	r2, r7, #8
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f007 fe60 	bl	8008c9a <xQueueGiveFromISR>
  if (xIrqStatus.IRQ_RX_DATA_DISC)
  {
//	myHAL_UART_printf("  | || || |_\r\n");
  }

  if (xIrqStatus.IRQ_RX_TIMEOUT){
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	f003 0320 	and.w	r3, r3, #32
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <HAL_GPIO_EXTI_Callback+0x70>
	myHAL_UART_printf("timeout\r\n");
 8000fe6:	480b      	ldr	r0, [pc, #44]	; (8001014 <HAL_GPIO_EXTI_Callback+0x98>)
 8000fe8:	f000 fd12 	bl	8001a10 <myHAL_UART_printf>
  }

  SpiritIrqClearStatus();
 8000fec:	f001 fb32 	bl	8002654 <SpiritIrqClearStatus>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d009      	beq.n	800100a <HAL_GPIO_EXTI_Callback+0x8e>
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	f3bf 8f4f 	dsb	sy
 8001002:	f3bf 8f6f 	isb	sy
 8001006:	e000      	b.n	800100a <HAL_GPIO_EXTI_Callback+0x8e>
  if (GPIO_Pin != SPIRIT1_GPIO3_Pin){return;}
 8001008:	bf00      	nop
}
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200003d4 	.word	0x200003d4
 8001014:	0800c1bc 	.word	0x0800c1bc
 8001018:	e000ed04 	.word	0xe000ed04

0800101c <confirm_TX>:
#define RX_Q_SIZE 3
Payload RXq[RX_Q_SIZE];
int currentReadRX;
int currentWriteRX;

void confirm_TX(){
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0


	switch (TXq[currentReadTX].type){
 8001020:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <confirm_TX+0xc4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a2f      	ldr	r2, [pc, #188]	; (80010e4 <confirm_TX+0xc8>)
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	4413      	add	r3, r2
 800102a:	3301      	adds	r3, #1
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	3b01      	subs	r3, #1
 8001030:	2b03      	cmp	r3, #3
 8001032:	d82b      	bhi.n	800108c <confirm_TX+0x70>
 8001034:	a201      	add	r2, pc, #4	; (adr r2, 800103c <confirm_TX+0x20>)
 8001036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103a:	bf00      	nop
 800103c:	08001065 	.word	0x08001065
 8001040:	0800106d 	.word	0x0800106d
 8001044:	080010b5 	.word	0x080010b5
 8001048:	0800104d 	.word	0x0800104d
				myHAL_UART_printf("my heart still beats 4 u \r\n");
			}
			break;

		case PACKET_MESSAGE:
			myHAL_UART_printf("message sent: %s \r\n", TXq[currentReadTX].message);
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <confirm_TX+0xc4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a24      	ldr	r2, [pc, #144]	; (80010e4 <confirm_TX+0xc8>)
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	4413      	add	r3, r2
 8001056:	3308      	adds	r3, #8
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	4822      	ldr	r0, [pc, #136]	; (80010e8 <confirm_TX+0xcc>)
 800105e:	f000 fcd7 	bl	8001a10 <myHAL_UART_printf>
			break;
 8001062:	e028      	b.n	80010b6 <confirm_TX+0x9a>

		case PACKET_ANNOUNCEMENT:
		    myHAL_UART_printf("going live!\r\n");
 8001064:	4821      	ldr	r0, [pc, #132]	; (80010ec <confirm_TX+0xd0>)
 8001066:	f000 fcd3 	bl	8001a10 <myHAL_UART_printf>
			break;
 800106a:	e024      	b.n	80010b6 <confirm_TX+0x9a>

		case PACKET_ANNOUNCEMENT_RESP:
		    myHAL_UART_printf("I see you %s! \r\n", names[TXq[currentReadTX].dest]);
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <confirm_TX+0xc4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <confirm_TX+0xc8>)
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	4413      	add	r3, r2
 8001076:	330d      	adds	r3, #13
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <confirm_TX+0xd4>)
 800107e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001082:	4619      	mov	r1, r3
 8001084:	481b      	ldr	r0, [pc, #108]	; (80010f4 <confirm_TX+0xd8>)
 8001086:	f000 fcc3 	bl	8001a10 <myHAL_UART_printf>
			break;
 800108a:	e014      	b.n	80010b6 <confirm_TX+0x9a>

		default:
		    myHAL_UART_printf("umm... what the sigma? you sent a broken packet \r\n", TXq[currentReadTX].type, TXq[currentReadTX].user);
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <confirm_TX+0xc4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <confirm_TX+0xc8>)
 8001092:	011b      	lsls	r3, r3, #4
 8001094:	4413      	add	r3, r2
 8001096:	3301      	adds	r3, #1
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <confirm_TX+0xc4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <confirm_TX+0xc8>)
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	4413      	add	r3, r2
 80010a6:	3304      	adds	r3, #4
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4812      	ldr	r0, [pc, #72]	; (80010f8 <confirm_TX+0xdc>)
 80010ae:	f000 fcaf 	bl	8001a10 <myHAL_UART_printf>
			break;
 80010b2:	e000      	b.n	80010b6 <confirm_TX+0x9a>
			break;
 80010b4:	bf00      	nop


	}
	// myHAL_UART_printf("payload sent: type(%d) %s \r\n", TXq[currentReadTX].type, TXq[currentReadTX].user);
	currentReadTX = (++currentReadTX) %TX_Q_SIZE;
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <confirm_TX+0xc4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <confirm_TX+0xc4>)
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <confirm_TX+0xc4>)
 80010c2:	6819      	ldr	r1, [r3, #0]
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <confirm_TX+0xe0>)
 80010c6:	fb83 3201 	smull	r3, r2, r3, r1
 80010ca:	17cb      	asrs	r3, r1, #31
 80010cc:	1ad2      	subs	r2, r2, r3
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	1aca      	subs	r2, r1, r3
 80010d6:	4b02      	ldr	r3, [pc, #8]	; (80010e0 <confirm_TX+0xc4>)
 80010d8:	601a      	str	r2, [r3, #0]
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20002010 	.word	0x20002010
 80010e4:	20001fe0 	.word	0x20001fe0
 80010e8:	0800c1c8 	.word	0x0800c1c8
 80010ec:	0800c1dc 	.word	0x0800c1dc
 80010f0:	20000004 	.word	0x20000004
 80010f4:	0800c1ec 	.word	0x0800c1ec
 80010f8:	0800c200 	.word	0x0800c200
 80010fc:	55555556 	.word	0x55555556

08001100 <Task_TX>:





void Task_TX(void *argument){
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b09d      	sub	sp, #116	; 0x74
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	char loadString[100]; //NOT a string
	while (1)
	{


		  if(TXq[currentReadTX].valid){
 8001108:	4b3f      	ldr	r3, [pc, #252]	; (8001208 <Task_TX+0x108>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a3f      	ldr	r2, [pc, #252]	; (800120c <Task_TX+0x10c>)
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d072      	beq.n	80011fe <Task_TX+0xfe>

			  if(skinSuit != 0){impersonate();}
 8001118:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <Task_TX+0x110>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <Task_TX+0x24>
 8001120:	f000 fba8 	bl	8001874 <impersonate>

			  SpiritGotoReadyState(); //interrupt any other thang going down
 8001124:	f000 fcb8 	bl	8001a98 <SpiritGotoReadyState>
			  if(xSemaphoreTake(FLAG_SPIRIT, 10) == 1){
 8001128:	4b3a      	ldr	r3, [pc, #232]	; (8001214 <Task_TX+0x114>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	210a      	movs	r1, #10
 800112e:	4618      	mov	r0, r3
 8001130:	f007 ff20 	bl	8008f74 <xQueueSemaphoreTake>
 8001134:	4603      	mov	r3, r0
 8001136:	2b01      	cmp	r3, #1
 8001138:	d161      	bne.n	80011fe <Task_TX+0xfe>

				SpiritPktStackSetDestinationAddress(TXq[currentReadTX].dest);
 800113a:	4b33      	ldr	r3, [pc, #204]	; (8001208 <Task_TX+0x108>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a33      	ldr	r2, [pc, #204]	; (800120c <Task_TX+0x10c>)
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	4413      	add	r3, r2
 8001144:	330d      	adds	r3, #13
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f001 fd5b 	bl	8002c04 <SpiritPktCommonSetDestinationAddress>

				uint8_t type = TXq[currentReadTX].type;
 800114e:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <Task_TX+0x108>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a2e      	ldr	r2, [pc, #184]	; (800120c <Task_TX+0x10c>)
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	4413      	add	r3, r2
 8001158:	3301      	adds	r3, #1
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				uint16_t len = 1+strlen(myUsername)+1;
 8001160:	482d      	ldr	r0, [pc, #180]	; (8001218 <Task_TX+0x118>)
 8001162:	f7ff f835 	bl	80001d0 <strlen>
 8001166:	4603      	mov	r3, r0
 8001168:	b29b      	uxth	r3, r3
 800116a:	3302      	adds	r3, #2
 800116c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

				loadString[0] = type;
 8001170:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001174:	723b      	strb	r3, [r7, #8]
				strcpy(&loadString[1], myUsername);
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	3301      	adds	r3, #1
 800117c:	4926      	ldr	r1, [pc, #152]	; (8001218 <Task_TX+0x118>)
 800117e:	4618      	mov	r0, r3
 8001180:	f00a faac 	bl	800b6dc <strcpy>
				if (type == 4){
 8001184:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001188:	2b04      	cmp	r3, #4
 800118a:	d128      	bne.n	80011de <Task_TX+0xde>
					strcpy(&loadString[strlen(myUsername)+1+1], TXq[currentReadTX].message);
 800118c:	4822      	ldr	r0, [pc, #136]	; (8001218 <Task_TX+0x118>)
 800118e:	f7ff f81f 	bl	80001d0 <strlen>
 8001192:	4603      	mov	r3, r0
 8001194:	3302      	adds	r3, #2
 8001196:	f107 0208 	add.w	r2, r7, #8
 800119a:	441a      	add	r2, r3
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <Task_TX+0x108>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	491a      	ldr	r1, [pc, #104]	; (800120c <Task_TX+0x10c>)
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	440b      	add	r3, r1
 80011a6:	3308      	adds	r3, #8
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4619      	mov	r1, r3
 80011ac:	4610      	mov	r0, r2
 80011ae:	f00a fa95 	bl	800b6dc <strcpy>
					len = 1+ strlen(myUsername)+1+1+strlen(TXq[currentReadTX].message);
 80011b2:	4819      	ldr	r0, [pc, #100]	; (8001218 <Task_TX+0x118>)
 80011b4:	f7ff f80c 	bl	80001d0 <strlen>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b29c      	uxth	r4, r3
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <Task_TX+0x108>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a12      	ldr	r2, [pc, #72]	; (800120c <Task_TX+0x10c>)
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	4413      	add	r3, r2
 80011c6:	3308      	adds	r3, #8
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f800 	bl	80001d0 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	4423      	add	r3, r4
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	3303      	adds	r3, #3
 80011da:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
				}

				TXq[currentReadTX].valid = 0;
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <Task_TX+0x108>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <Task_TX+0x10c>)
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	4413      	add	r3, r2
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]

				SPSGRF_StartTx(loadString, len);
 80011ec:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fe45 	bl	8001e88 <SPSGRF_StartTx>
			  }
		//			  vTaskDelay(1000);
		  }

		  vTaskDelay(50);
 80011fe:	2032      	movs	r0, #50	; 0x32
 8001200:	f008 fb06 	bl	8009810 <vTaskDelay>
		  if(TXq[currentReadTX].valid){
 8001204:	e780      	b.n	8001108 <Task_TX+0x8>
 8001206:	bf00      	nop
 8001208:	20002010 	.word	0x20002010
 800120c:	20001fe0 	.word	0x20001fe0
 8001210:	20001fdc 	.word	0x20001fdc
 8001214:	200003d4 	.word	0x200003d4
 8001218:	2000032c 	.word	0x2000032c

0800121c <printUsersOnline>:



//USERS//////////////

void printUsersOnline(){
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b085      	sub	sp, #20
 8001220:	af02      	add	r7, sp, #8
	TickType_t currentTime = xTaskGetTickCount();
 8001222:	f008 fc47 	bl	8009ab4 <xTaskGetTickCount>
 8001226:	6038      	str	r0, [r7, #0]
	myHAL_UART_printf("--- Users Online @t=%d:\r\n", (currentTime-startTime)/1000);
 8001228:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <printUsersOnline+0xb8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	4a29      	ldr	r2, [pc, #164]	; (80012d8 <printUsersOnline+0xbc>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	4619      	mov	r1, r3
 800123a:	4828      	ldr	r0, [pc, #160]	; (80012dc <printUsersOnline+0xc0>)
 800123c:	f000 fbe8 	bl	8001a10 <myHAL_UART_printf>
	myHAL_UART_printf("- 0x%02X(%s)(%s) You!\r\n", currentUser, names[currentUser], myUsername);
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <printUsersOnline+0xc4>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <printUsersOnline+0xc4>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <printUsersOnline+0xc8>)
 800124e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001252:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <printUsersOnline+0xcc>)
 8001254:	4825      	ldr	r0, [pc, #148]	; (80012ec <printUsersOnline+0xd0>)
 8001256:	f000 fbdb 	bl	8001a10 <myHAL_UART_printf>

	for (int i = 0; i < MAX_USERS; i++){
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	e030      	b.n	80012c2 <printUsersOnline+0xa6>
		if (usersOnline[i].timeLastSeen != 0){
 8001260:	4923      	ldr	r1, [pc, #140]	; (80012f0 <printUsersOnline+0xd4>)
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	1a9b      	subs	r3, r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	3318      	adds	r3, #24
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d022      	beq.n	80012bc <printUsersOnline+0xa0>
			myHAL_UART_printf("- 0x%02X(%d)(%s)(%s) seen %d s ago\r\n", i, i, names[i], usersOnline[i].username, (currentTime - usersOnline[i].timeLastSeen)/1000);
 8001276:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <printUsersOnline+0xc8>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	1a9b      	subs	r3, r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <printUsersOnline+0xd4>)
 800128a:	1899      	adds	r1, r3, r2
 800128c:	4c18      	ldr	r4, [pc, #96]	; (80012f0 <printUsersOnline+0xd4>)
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	1a9b      	subs	r3, r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4423      	add	r3, r4
 800129a:	3318      	adds	r3, #24
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	1a9b      	subs	r3, r3, r2
 80012a4:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <printUsersOnline+0xbc>)
 80012a6:	fba2 2303 	umull	r2, r3, r2, r3
 80012aa:	099b      	lsrs	r3, r3, #6
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	9100      	str	r1, [sp, #0]
 80012b0:	4603      	mov	r3, r0
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	480f      	ldr	r0, [pc, #60]	; (80012f4 <printUsersOnline+0xd8>)
 80012b8:	f000 fbaa 	bl	8001a10 <myHAL_UART_printf>
	for (int i = 0; i < MAX_USERS; i++){
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3301      	adds	r3, #1
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2bff      	cmp	r3, #255	; 0xff
 80012c6:	ddcb      	ble.n	8001260 <printUsersOnline+0x44>
		}
	}
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd90      	pop	{r4, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20001fd8 	.word	0x20001fd8
 80012d8:	10624dd3 	.word	0x10624dd3
 80012dc:	0800c234 	.word	0x0800c234
 80012e0:	20000000 	.word	0x20000000
 80012e4:	20000004 	.word	0x20000004
 80012e8:	2000032c 	.word	0x2000032c
 80012ec:	0800c250 	.word	0x0800c250
 80012f0:	200003d8 	.word	0x200003d8
 80012f4:	0800c268 	.word	0x0800c268

080012f8 <reapUsers>:


void reapUsers(){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
	TickType_t currentTime = xTaskGetTickCount();
 80012fe:	f008 fbd9 	bl	8009ab4 <xTaskGetTickCount>
 8001302:	6038      	str	r0, [r7, #0]
	for (int i = 0; i < MAX_USERS; i++){
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	e02a      	b.n	8001360 <reapUsers+0x68>
		if ((usersOnline[i].timeLastSeen != 0)){
 800130a:	4919      	ldr	r1, [pc, #100]	; (8001370 <reapUsers+0x78>)
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	1a9b      	subs	r3, r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	440b      	add	r3, r1
 8001318:	3318      	adds	r3, #24
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d01c      	beq.n	800135a <reapUsers+0x62>
			if((currentTime-usersOnline[i].timeLastSeen)/1000 > USER_DEAD_TIME){
 8001320:	4913      	ldr	r1, [pc, #76]	; (8001370 <reapUsers+0x78>)
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	1a9b      	subs	r3, r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	3318      	adds	r3, #24
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	1a9b      	subs	r3, r3, r2
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <reapUsers+0x7c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d90d      	bls.n	800135a <reapUsers+0x62>
				myHAL_UART_printf("reaping user 0x%02X\r\n", i);
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	480d      	ldr	r0, [pc, #52]	; (8001378 <reapUsers+0x80>)
 8001342:	f000 fb65 	bl	8001a10 <myHAL_UART_printf>
				usersOnline[i].timeLastSeen = 0;
 8001346:	490a      	ldr	r1, [pc, #40]	; (8001370 <reapUsers+0x78>)
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	1a9b      	subs	r3, r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	440b      	add	r3, r1
 8001354:	3318      	adds	r3, #24
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_USERS; i++){
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3301      	adds	r3, #1
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2bff      	cmp	r3, #255	; 0xff
 8001364:	ddd1      	ble.n	800130a <reapUsers+0x12>
//				usersOnline[i].username = 0;
			}
		}
	}
}
 8001366:	bf00      	nop
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200003d8 	.word	0x200003d8
 8001374:	0001b197 	.word	0x0001b197
 8001378:	0800c290 	.word	0x0800c290

0800137c <get_RX>:

//RX//////////////
// This should: determine type of recieved packet, add node to onlinelist, send ACKS, print if message
ReceivedPayload currentRX;
void get_RX(){
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0

	//get payload info and sanitize payloads
	uint16_t rxLen = SPSGRF_GetRxData((uint8_t *) &currentRX.raw);
 8001382:	481c      	ldr	r0, [pc, #112]	; (80013f4 <get_RX+0x78>)
 8001384:	f000 fdaa 	bl	8001edc <SPSGRF_GetRxData>
 8001388:	4603      	mov	r3, r0
 800138a:	80fb      	strh	r3, [r7, #6]
	currentRX.raw[rxLen+1] = '\0'; //ensure null termination for bad little nodes
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	3301      	adds	r3, #1
 8001390:	4a19      	ldr	r2, [pc, #100]	; (80013f8 <get_RX+0x7c>)
 8001392:	4413      	add	r3, r2
 8001394:	2200      	movs	r2, #0
 8001396:	705a      	strb	r2, [r3, #1]

	currentRX.dest = SpiritPktStackGetReceivedDestAddress();
 8001398:	f001 fc66 	bl	8002c68 <SpiritPktCommonGetReceivedDestAddress>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <get_RX+0x7c>)
 80013a2:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	currentRX.source = SpiritPktStackGetReceivedSourceAddress();
 80013a6:	f001 fc77 	bl	8002c98 <SpiritPktCommonGetReceivedSourceAddress>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <get_RX+0x7c>)
 80013b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	currentRX.valid = 1;
 80013b4:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <get_RX+0x7c>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
	currentRX.t = xTaskGetTickCount();
 80013ba:	f008 fb7b 	bl	8009ab4 <xTaskGetTickCount>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <get_RX+0x7c>)
 80013c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	//update with RX time
	usersOnline[currentRX.source].timeLastSeen = currentRX.t;
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <get_RX+0x7c>)
 80013ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80013ce:	4618      	mov	r0, r3
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <get_RX+0x7c>)
 80013d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013d6:	4909      	ldr	r1, [pc, #36]	; (80013fc <get_RX+0x80>)
 80013d8:	4603      	mov	r3, r0
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	1a1b      	subs	r3, r3, r0
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	3318      	adds	r3, #24
 80013e4:	601a      	str	r2, [r3, #0]

	//todo: add RX packet to queue, handle_rx LATER
	handle_RX(&currentRX);
 80013e6:	4804      	ldr	r0, [pc, #16]	; (80013f8 <get_RX+0x7c>)
 80013e8:	f000 f80a 	bl	8001400 <handle_RX>

}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20002019 	.word	0x20002019
 80013f8:	20002018 	.word	0x20002018
 80013fc:	200003d8 	.word	0x200003d8

08001400 <handle_RX>:

void handle_RX(ReceivedPayload* load){
 8001400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af04      	add	r7, sp, #16
 8001406:	6078      	str	r0, [r7, #4]
	//check if private or broadcast
	bool private = false;
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]
	if (load->dest == SpiritPktStackGetBroadcastAddress()){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 4202 	ldrb.w	r4, [r3, #514]	; 0x202
 8001412:	f001 fc11 	bl	8002c38 <SpiritPktCommonGetBroadcastAddress>
 8001416:	4603      	mov	r3, r0
 8001418:	429c      	cmp	r4, r3
 800141a:	d108      	bne.n	800142e <handle_RX+0x2e>
		private = true;
 800141c:	2301      	movs	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, PRIVATE_TEXT_COLOR, 8, HAL_MAX_DELAY);//set text color
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
 8001424:	2208      	movs	r2, #8
 8001426:	494e      	ldr	r1, [pc, #312]	; (8001560 <handle_RX+0x160>)
 8001428:	484e      	ldr	r0, [pc, #312]	; (8001564 <handle_RX+0x164>)
 800142a:	f006 fb0f 	bl	8007a4c <HAL_UART_Transmit>
	//if ack, do nothing
	//if heartbeat, do nothing
	//if message, print message
	//and check for bad payloads

	if(load->raw[0] == PACKET_ANNOUNCEMENT){
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	785b      	ldrb	r3, [r3, #1]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d111      	bne.n	800145a <handle_RX+0x5a>
		// send ack
		myHAL_UART_printf("Announcement: (%s)0x%02X has Joined\r\n", &load->raw[1], load->source);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	1c99      	adds	r1, r3, #2
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8001440:	461a      	mov	r2, r3
 8001442:	4849      	ldr	r0, [pc, #292]	; (8001568 <handle_RX+0x168>)
 8001444:	f000 fae4 	bl	8001a10 <myHAL_UART_printf>

		createPayload(PACKET_ANNOUNCEMENT_RESP, myUsername, NULL, load->source);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800144e:	2200      	movs	r2, #0
 8001450:	4946      	ldr	r1, [pc, #280]	; (800156c <handle_RX+0x16c>)
 8001452:	2002      	movs	r0, #2
 8001454:	f000 f8c0 	bl	80015d8 <createPayload>
 8001458:	e065      	b.n	8001526 <handle_RX+0x126>

	} else if (load->raw[0] == PACKET_MESSAGE) {
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	785b      	ldrb	r3, [r3, #1]
 800145e:	2b04      	cmp	r3, #4
 8001460:	d11d      	bne.n	800149e <handle_RX+0x9e>
		//print message
		char* i = (char*)load->raw;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3301      	adds	r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
		while(*i != '\0'){i++;}
 8001468:	e002      	b.n	8001470 <handle_RX+0x70>
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	3301      	adds	r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f8      	bne.n	800146a <handle_RX+0x6a>
		i++;
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	3301      	adds	r3, #1
 800147c:	60bb      	str	r3, [r7, #8]

		myHAL_UART_printf("Message from 0x%02X(%s): %s\r\n", load->source, names[load->source], i);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8001484:	4619      	mov	r1, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800148c:	461a      	mov	r2, r3
 800148e:	4b38      	ldr	r3, [pc, #224]	; (8001570 <handle_RX+0x170>)
 8001490:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	4837      	ldr	r0, [pc, #220]	; (8001574 <handle_RX+0x174>)
 8001498:	f000 faba 	bl	8001a10 <myHAL_UART_printf>
 800149c:	e043      	b.n	8001526 <handle_RX+0x126>

	} else if ((load->raw[0] == PACKET_ANNOUNCEMENT_RESP) | (load->raw[0] == PACKET_HEARTBEAT)){
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	785b      	ldrb	r3, [r3, #1]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	bf0c      	ite	eq
 80014a6:	2301      	moveq	r3, #1
 80014a8:	2300      	movne	r3, #0
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	785b      	ldrb	r3, [r3, #1]
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	bf0c      	ite	eq
 80014b4:	2301      	moveq	r3, #1
 80014b6:	2300      	movne	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00b      	beq.n	80014da <handle_RX+0xda>
		//do nothing
		if(load->raw[0] == PACKET_HEARTBEAT){
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	785b      	ldrb	r3, [r3, #1]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d02d      	beq.n	8001526 <handle_RX+0x126>
			if (SHOW_OTHER_HEARTBEATS) {myHAL_UART_printf("<3beat from 0x%02X\r\n", load->source);}
		} else {
			myHAL_UART_printf("ACK by 0x%02X\r\n", load->source);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80014d0:	4619      	mov	r1, r3
 80014d2:	4829      	ldr	r0, [pc, #164]	; (8001578 <handle_RX+0x178>)
 80014d4:	f000 fa9c 	bl	8001a10 <myHAL_UART_printf>
 80014d8:	e025      	b.n	8001526 <handle_RX+0x126>
		}

	} else{
		//todo:untested case
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%02X(%d)(%s)\r\n",
				load->raw[0], load->raw[1], load->raw[2], load->raw[3],
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	785b      	ldrb	r3, [r3, #1]
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%02X(%d)(%s)\r\n",
 80014de:	461d      	mov	r5, r3
				load->raw[0], load->raw[1], load->raw[2], load->raw[3],
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	789b      	ldrb	r3, [r3, #2]
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%02X(%d)(%s)\r\n",
 80014e4:	461e      	mov	r6, r3
				load->raw[0], load->raw[1], load->raw[2], load->raw[3],
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	78db      	ldrb	r3, [r3, #3]
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%02X(%d)(%s)\r\n",
 80014ea:	469c      	mov	ip, r3
				load->raw[0], load->raw[1], load->raw[2], load->raw[3],
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	791b      	ldrb	r3, [r3, #4]
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%02X(%d)(%s)\r\n",
 80014f0:	461a      	mov	r2, r3
				load->source, load->source, names[load->source]);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%02X(%d)(%s)\r\n",
 80014f8:	4619      	mov	r1, r3
				load->source, load->source, names[load->source]);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%02X(%d)(%s)\r\n",
 8001500:	4618      	mov	r0, r3
				load->source, load->source, names[load->source]);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8001508:	461c      	mov	r4, r3
		myHAL_UART_printf("Bad Packet(%02X:%02X:%02X:%02X) from 0x%02X(%d)(%s)\r\n",
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <handle_RX+0x170>)
 800150c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001510:	9303      	str	r3, [sp, #12]
 8001512:	9002      	str	r0, [sp, #8]
 8001514:	9101      	str	r1, [sp, #4]
 8001516:	9200      	str	r2, [sp, #0]
 8001518:	4663      	mov	r3, ip
 800151a:	4632      	mov	r2, r6
 800151c:	4629      	mov	r1, r5
 800151e:	4817      	ldr	r0, [pc, #92]	; (800157c <handle_RX+0x17c>)
 8001520:	f000 fa76 	bl	8001a10 <myHAL_UART_printf>
		return;
 8001524:	e019      	b.n	800155a <handle_RX+0x15a>
	}

	if(private){
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d006      	beq.n	800153a <handle_RX+0x13a>
		HAL_UART_Transmit(&huart2, DEFAULT_TEXT_COLOR, 8, HAL_MAX_DELAY);//set color to white
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
 8001530:	2208      	movs	r2, #8
 8001532:	4913      	ldr	r1, [pc, #76]	; (8001580 <handle_RX+0x180>)
 8001534:	480b      	ldr	r0, [pc, #44]	; (8001564 <handle_RX+0x164>)
 8001536:	f006 fa89 	bl	8007a4c <HAL_UART_Transmit>
	}

//	usersOnline[sadd].address = sadd;
	strcpy(&usersOnline[load->source].username, &load->raw[1]);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8001540:	461a      	mov	r2, r3
 8001542:	4613      	mov	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	1a9b      	subs	r3, r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <handle_RX+0x184>)
 800154c:	441a      	add	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3302      	adds	r3, #2
 8001552:	4619      	mov	r1, r3
 8001554:	4610      	mov	r0, r2
 8001556:	f00a f8c1 	bl	800b6dc <strcpy>
}
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001560:	0800c2a8 	.word	0x0800c2a8
 8001564:	20002740 	.word	0x20002740
 8001568:	0800c2b0 	.word	0x0800c2b0
 800156c:	2000032c 	.word	0x2000032c
 8001570:	20000004 	.word	0x20000004
 8001574:	0800c2d8 	.word	0x0800c2d8
 8001578:	0800c2f8 	.word	0x0800c2f8
 800157c:	0800c308 	.word	0x0800c308
 8001580:	0800c340 	.word	0x0800c340
 8001584:	200003d8 	.word	0x200003d8

08001588 <Task_RX>:


void Task_RX(void *argument){
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	while(1){
		if(xSemaphoreTake(FLAG_SPIRIT, 10) == 1){
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <Task_RX+0x20>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	210a      	movs	r1, #10
 8001596:	4618      	mov	r0, r3
 8001598:	f007 fcec 	bl	8008f74 <xQueueSemaphoreTake>
 800159c:	4603      	mov	r3, r0
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d1f6      	bne.n	8001590 <Task_RX+0x8>
		  SPSGRF_StartRx();
 80015a2:	f000 fc92 	bl	8001eca <SPSGRF_StartRx>
		if(xSemaphoreTake(FLAG_SPIRIT, 10) == 1){
 80015a6:	e7f3      	b.n	8001590 <Task_RX+0x8>
 80015a8:	200003d4 	.word	0x200003d4

080015ac <Task_BeatHeart>:
/* USER CODE END 0 */




void Task_BeatHeart(void *argument){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	vTaskDelay(HEARTBEAT_TIME * 1000);
 80015b4:	f241 3088 	movw	r0, #5000	; 0x1388
 80015b8:	f008 f92a 	bl	8009810 <vTaskDelay>
					"iiiiiiiiii"
					"!!!!!!!!!?";
			createPayload(PACKET_MESSAGE, myUsername, massivemesssage, 0xFF);

		} else {
			createPayload(PACKET_HEARTBEAT, myUsername, NULL, 0xFF);
 80015bc:	23ff      	movs	r3, #255	; 0xff
 80015be:	2200      	movs	r2, #0
 80015c0:	4904      	ldr	r1, [pc, #16]	; (80015d4 <Task_BeatHeart+0x28>)
 80015c2:	2003      	movs	r0, #3
 80015c4:	f000 f808 	bl	80015d8 <createPayload>
		}
		vTaskDelay(HEARTBEAT_TIME * 1000);
 80015c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80015cc:	f008 f920 	bl	8009810 <vTaskDelay>
		if(CARDIAC_ARREST){
 80015d0:	e7f4      	b.n	80015bc <Task_BeatHeart+0x10>
 80015d2:	bf00      	nop
 80015d4:	2000032c 	.word	0x2000032c

080015d8 <createPayload>:
	}
}

void createPayload(int type, char* username, char* message, uint8_t dest){
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	70fb      	strb	r3, [r7, #3]

	int myWriteTX = currentWriteTX;
 80015e6:	4b21      	ldr	r3, [pc, #132]	; (800166c <createPayload+0x94>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	617b      	str	r3, [r7, #20]
	currentWriteTX = (++currentWriteTX) %TX_Q_SIZE;
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <createPayload+0x94>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	4a1e      	ldr	r2, [pc, #120]	; (800166c <createPayload+0x94>)
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <createPayload+0x94>)
 80015f8:	6819      	ldr	r1, [r3, #0]
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <createPayload+0x98>)
 80015fc:	fb83 3201 	smull	r3, r2, r3, r1
 8001600:	17cb      	asrs	r3, r1, #31
 8001602:	1ad2      	subs	r2, r2, r3
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	1aca      	subs	r2, r1, r3
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <createPayload+0x94>)
 800160e:	601a      	str	r2, [r3, #0]

	TXq[myWriteTX].type = type;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	b2d9      	uxtb	r1, r3
 8001614:	4a17      	ldr	r2, [pc, #92]	; (8001674 <createPayload+0x9c>)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	4413      	add	r3, r2
 800161c:	3301      	adds	r3, #1
 800161e:	460a      	mov	r2, r1
 8001620:	701a      	strb	r2, [r3, #0]
	TXq[myWriteTX].user = username;
 8001622:	4a14      	ldr	r2, [pc, #80]	; (8001674 <createPayload+0x9c>)
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	4413      	add	r3, r2
 800162a:	3304      	adds	r3, #4
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	601a      	str	r2, [r3, #0]

	if(type == 4){
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b04      	cmp	r3, #4
 8001634:	d106      	bne.n	8001644 <createPayload+0x6c>
		TXq[myWriteTX].message = message;
 8001636:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <createPayload+0x9c>)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	4413      	add	r3, r2
 800163e:	3308      	adds	r3, #8
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	601a      	str	r2, [r3, #0]
	}

	TXq[myWriteTX].dest = dest;
 8001644:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <createPayload+0x9c>)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	4413      	add	r3, r2
 800164c:	330d      	adds	r3, #13
 800164e:	78fa      	ldrb	r2, [r7, #3]
 8001650:	701a      	strb	r2, [r3, #0]
	TXq[myWriteTX].valid = 1;
 8001652:	4a08      	ldr	r2, [pc, #32]	; (8001674 <createPayload+0x9c>)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	4413      	add	r3, r2
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
}
 800165e:	bf00      	nop
 8001660:	371c      	adds	r7, #28
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20002014 	.word	0x20002014
 8001670:	55555556 	.word	0x55555556
 8001674:	20001fe0 	.word	0x20001fe0

08001678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167e:	f003 f93d 	bl	80048fc <HAL_Init>

  /* Configure the system cloc */
  SystemClock_Config();
 8001682:	f000 fa3f 	bl	8001b04 <SystemClock_Config>


  RTOS_ISR_setPriority(EXTI9_5_IRQn);
 8001686:	2017      	movs	r0, #23
 8001688:	f7ff fc61 	bl	8000f4e <RTOS_ISR_setPriority>


  /* Create the tasks */
  BaseType_t retVal = xTaskCreate(Task_TX, "Task_TX", configMINIMAL_STACK_SIZE,
 800168c:	4b3b      	ldr	r3, [pc, #236]	; (800177c <main+0x104>)
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	2304      	movs	r3, #4
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2300      	movs	r3, #0
 8001696:	2280      	movs	r2, #128	; 0x80
 8001698:	4939      	ldr	r1, [pc, #228]	; (8001780 <main+0x108>)
 800169a:	483a      	ldr	r0, [pc, #232]	; (8001784 <main+0x10c>)
 800169c:	f007 ff59 	bl	8009552 <xTaskCreate>
 80016a0:	6078      	str	r0, [r7, #4]
  		NULL, tskIDLE_PRIORITY + 4, &Task_TXHandler);
  if (retVal != 1) { while(1);}	// check if task creation failed
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d000      	beq.n	80016aa <main+0x32>
 80016a8:	e7fe      	b.n	80016a8 <main+0x30>

  retVal = xTaskCreate(Task_RX, "Task_RX", configMINIMAL_STACK_SIZE,
 80016aa:	4b37      	ldr	r3, [pc, #220]	; (8001788 <main+0x110>)
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	2303      	movs	r3, #3
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2300      	movs	r3, #0
 80016b4:	2280      	movs	r2, #128	; 0x80
 80016b6:	4935      	ldr	r1, [pc, #212]	; (800178c <main+0x114>)
 80016b8:	4835      	ldr	r0, [pc, #212]	; (8001790 <main+0x118>)
 80016ba:	f007 ff4a 	bl	8009552 <xTaskCreate>
 80016be:	6078      	str	r0, [r7, #4]
  		NULL, tskIDLE_PRIORITY + 3, &Task_RXHandler);
  if (retVal != 1) { while(1);}	// check if task creation failed
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d000      	beq.n	80016c8 <main+0x50>
 80016c6:	e7fe      	b.n	80016c6 <main+0x4e>

  retVal = xTaskCreate(Task_BeatHeart, "Task_BeatHeart", configMINIMAL_STACK_SIZE,
 80016c8:	4b32      	ldr	r3, [pc, #200]	; (8001794 <main+0x11c>)
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	2303      	movs	r3, #3
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2300      	movs	r3, #0
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	4930      	ldr	r1, [pc, #192]	; (8001798 <main+0x120>)
 80016d6:	4831      	ldr	r0, [pc, #196]	; (800179c <main+0x124>)
 80016d8:	f007 ff3b 	bl	8009552 <xTaskCreate>
 80016dc:	6078      	str	r0, [r7, #4]
  		NULL, tskIDLE_PRIORITY + 3, &Task_HBHandler);
  if (retVal != 1) { while(1);}	// check if task creation failed
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d000      	beq.n	80016e6 <main+0x6e>
 80016e4:	e7fe      	b.n	80016e4 <main+0x6c>


  // Create Binary Semaphore
  FLAG_SPIRIT = xSemaphoreCreateBinary();
 80016e6:	2203      	movs	r2, #3
 80016e8:	2100      	movs	r1, #0
 80016ea:	2001      	movs	r0, #1
 80016ec:	f007 f8de 	bl	80088ac <xQueueGenericCreate>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a2b      	ldr	r2, [pc, #172]	; (80017a0 <main+0x128>)
 80016f4:	6013      	str	r3, [r2, #0]
  if (FLAG_SPIRIT == NULL) { while(1); }
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <main+0x128>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d100      	bne.n	8001700 <main+0x88>
 80016fe:	e7fe      	b.n	80016fe <main+0x86>



  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001700:	f7ff fb3a 	bl	8000d78 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001704:	f000 fa68 	bl	8001bd8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001708:	f000 fd08 	bl	800211c <MX_USART2_UART_Init>

	//	enable interrupts for USART2 receive
	USART2->CR1 |= USART_CR1_RXNEIE;					// enable RXNE interrupt on USART2
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <main+0x12c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a24      	ldr	r2, [pc, #144]	; (80017a4 <main+0x12c>)
 8001712:	f043 0320 	orr.w	r3, r3, #32
 8001716:	6013      	str	r3, [r2, #0]
	USART2->ISR &= ~(USART_ISR_RXNE);					// clear interrupt flagwhile (message[i] != 0)
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <main+0x12c>)
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <main+0x12c>)
 800171e:	f023 0320 	bic.w	r3, r3, #32
 8001722:	61d3      	str	r3, [r2, #28]

	NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));		// enable USART2 ISR
 8001724:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <main+0x130>)
 8001726:	2240      	movs	r2, #64	; 0x40
 8001728:	605a      	str	r2, [r3, #4]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800172a:	b662      	cpsie	i
}
 800172c:	bf00      	nop
	__enable_irq();

	HAL_UART_Transmit(&huart2, DEFAULT_TEXT_COLOR, 8, HAL_MAX_DELAY);//set color to white
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	2208      	movs	r2, #8
 8001734:	491d      	ldr	r1, [pc, #116]	; (80017ac <main+0x134>)
 8001736:	481e      	ldr	r0, [pc, #120]	; (80017b0 <main+0x138>)
 8001738:	f006 f988 	bl	8007a4c <HAL_UART_Transmit>


  SPSGRF_Init();
 800173c:	f000 faea 	bl	8001d14 <SPSGRF_Init>
//  impersonate(LOGON_USER_ADDRESS);
//  strcpy(myUsername, LOGON_USERNAME);


  //Queue initial Announcement Packet, get start time, set semaphore
  createPayload(PACKET_ANNOUNCEMENT, myUsername, NULL, 0xFF);
 8001740:	23ff      	movs	r3, #255	; 0xff
 8001742:	2200      	movs	r2, #0
 8001744:	491b      	ldr	r1, [pc, #108]	; (80017b4 <main+0x13c>)
 8001746:	2001      	movs	r0, #1
 8001748:	f7ff ff46 	bl	80015d8 <createPayload>
  startTime = xTaskGetTickCount();
 800174c:	f008 f9b2 	bl	8009ab4 <xTaskGetTickCount>
 8001750:	4603      	mov	r3, r0
 8001752:	4a19      	ldr	r2, [pc, #100]	; (80017b8 <main+0x140>)
 8001754:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(FLAG_SPIRIT);
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <main+0x128>)
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	2300      	movs	r3, #0
 800175c:	2200      	movs	r2, #0
 800175e:	2100      	movs	r1, #0
 8001760:	f007 f902 	bl	8008968 <xQueueGenericSend>

  myHAL_UART_clear();
 8001764:	f000 f97c 	bl	8001a60 <myHAL_UART_clear>
  myHAL_UART_printf("RTOS NET ONLINE\r\n");
 8001768:	4814      	ldr	r0, [pc, #80]	; (80017bc <main+0x144>)
 800176a:	f000 f951 	bl	8001a10 <myHAL_UART_printf>

  vTaskStartScheduler();
 800176e:	f008 f883 	bl	8009878 <vTaskStartScheduler>
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200003c8 	.word	0x200003c8
 8001780:	0800c348 	.word	0x0800c348
 8001784:	08001101 	.word	0x08001101
 8001788:	200003cc 	.word	0x200003cc
 800178c:	0800c350 	.word	0x0800c350
 8001790:	08001589 	.word	0x08001589
 8001794:	200003d0 	.word	0x200003d0
 8001798:	0800c358 	.word	0x0800c358
 800179c:	080015ad 	.word	0x080015ad
 80017a0:	200003d4 	.word	0x200003d4
 80017a4:	40004400 	.word	0x40004400
 80017a8:	e000e100 	.word	0xe000e100
 80017ac:	0800c340 	.word	0x0800c340
 80017b0:	20002740 	.word	0x20002740
 80017b4:	2000032c 	.word	0x2000032c
 80017b8:	20001fd8 	.word	0x20001fd8
 80017bc:	0800c368 	.word	0x0800c368

080017c0 <USART2_IRQHandler>:


char userInput[100];
int userInputPos = 0;
void USART2_IRQHandler(void){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
	char r;

	if (USART2->ISR & USART_ISR_RXNE){
 80017c6:	4b27      	ldr	r3, [pc, #156]	; (8001864 <USART2_IRQHandler+0xa4>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d040      	beq.n	8001854 <USART2_IRQHandler+0x94>

		r = USART2->RDR; // copy received char
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <USART2_IRQHandler+0xa4>)
 80017d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	71fb      	strb	r3, [r7, #7]

		if (r == 13){
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	2b0d      	cmp	r3, #13
 80017e0:	d112      	bne.n	8001808 <USART2_IRQHandler+0x48>
			//enter
			userInput[userInputPos] = '\0';
 80017e2:	4b21      	ldr	r3, [pc, #132]	; (8001868 <USART2_IRQHandler+0xa8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a21      	ldr	r2, [pc, #132]	; (800186c <USART2_IRQHandler+0xac>)
 80017e8:	2100      	movs	r1, #0
 80017ea:	54d1      	strb	r1, [r2, r3]
			userInputPos = 0;
 80017ec:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <USART2_IRQHandler+0xa8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, &r, 1, HAL_MAX_DELAY);
 80017f2:	1df9      	adds	r1, r7, #7
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
 80017f8:	2201      	movs	r2, #1
 80017fa:	481d      	ldr	r0, [pc, #116]	; (8001870 <USART2_IRQHandler+0xb0>)
 80017fc:	f006 f926 	bl	8007a4c <HAL_UART_Transmit>

			handleCommand(userInput);
 8001800:	481a      	ldr	r0, [pc, #104]	; (800186c <USART2_IRQHandler+0xac>)
 8001802:	f000 f871 	bl	80018e8 <handleCommand>
 8001806:	e01e      	b.n	8001846 <USART2_IRQHandler+0x86>


		} else if (r == 127){
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2b7f      	cmp	r3, #127	; 0x7f
 800180c:	d10c      	bne.n	8001828 <USART2_IRQHandler+0x68>
			//backspace case
			userInputPos--;
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <USART2_IRQHandler+0xa8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	3b01      	subs	r3, #1
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <USART2_IRQHandler+0xa8>)
 8001816:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2, &r, 1, HAL_MAX_DELAY);
 8001818:	1df9      	adds	r1, r7, #7
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
 800181e:	2201      	movs	r2, #1
 8001820:	4813      	ldr	r0, [pc, #76]	; (8001870 <USART2_IRQHandler+0xb0>)
 8001822:	f006 f913 	bl	8007a4c <HAL_UART_Transmit>
 8001826:	e00e      	b.n	8001846 <USART2_IRQHandler+0x86>
		}
		else {
			//NOT enter
			userInput[userInputPos++] = r;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <USART2_IRQHandler+0xa8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	490e      	ldr	r1, [pc, #56]	; (8001868 <USART2_IRQHandler+0xa8>)
 8001830:	600a      	str	r2, [r1, #0]
 8001832:	79f9      	ldrb	r1, [r7, #7]
 8001834:	4a0d      	ldr	r2, [pc, #52]	; (800186c <USART2_IRQHandler+0xac>)
 8001836:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, &r, 1, HAL_MAX_DELAY);
 8001838:	1df9      	adds	r1, r7, #7
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
 800183e:	2201      	movs	r2, #1
 8001840:	480b      	ldr	r0, [pc, #44]	; (8001870 <USART2_IRQHandler+0xb0>)
 8001842:	f006 f903 	bl	8007a4c <HAL_UART_Transmit>

		}

		USART2->ISR &= ~(USART_ISR_RXNE); // clear the flag
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <USART2_IRQHandler+0xa4>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a06      	ldr	r2, [pc, #24]	; (8001864 <USART2_IRQHandler+0xa4>)
 800184c:	f023 0320 	bic.w	r3, r3, #32
 8001850:	61d3      	str	r3, [r2, #28]
	}
	else {
		USART2->ISR = 0; // clear the flag

	}
}
 8001852:	e002      	b.n	800185a <USART2_IRQHandler+0x9a>
		USART2->ISR = 0; // clear the flag
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <USART2_IRQHandler+0xa4>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40004400 	.word	0x40004400
 8001868:	20002284 	.word	0x20002284
 800186c:	20002220 	.word	0x20002220
 8001870:	20002740 	.word	0x20002740

08001874 <impersonate>:

void impersonate(){
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
	//change username and address to a desired person's

	SpiritGotoReadyState();
 800187a:	f000 f90d 	bl	8001a98 <SpiritGotoReadyState>
//
//	  /* Writes value on the register */
//	  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);

	  /* Fills array with the addresses passed in the structure */
	  tempRegValue[0] = BROADCAST_ADDRESS;
 800187e:	23ff      	movs	r3, #255	; 0xff
 8001880:	713b      	strb	r3, [r7, #4]
	  tempRegValue[1] = MULTICAST_ADDRESS;
 8001882:	23ee      	movs	r3, #238	; 0xee
 8001884:	717b      	strb	r3, [r7, #5]
	  tempRegValue[2] = skinSuit;
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <impersonate+0x60>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	71bb      	strb	r3, [r7, #6]

	  /* Writes them on the addresses registers */
	  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	461a      	mov	r2, r3
 8001890:	2103      	movs	r1, #3
 8001892:	204c      	movs	r0, #76	; 0x4c
 8001894:	f002 feb4 	bl	8004600 <RadioSpiWriteRegisters>
 8001898:	4602      	mov	r2, r0
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <impersonate+0x64>)
 800189c:	b212      	sxth	r2, r2
 800189e:	4611      	mov	r1, r2
 80018a0:	7019      	strb	r1, [r3, #0]
 80018a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80018a6:	705a      	strb	r2, [r3, #1]



	currentUser = skinSuit;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <impersonate+0x60>)
 80018aa:	781a      	ldrb	r2, [r3, #0]
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <impersonate+0x68>)
 80018ae:	701a      	strb	r2, [r3, #0]
	skinSuit = 0; //clear skinsuit flag, avoids unnecessary calling of the above functions
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <impersonate+0x60>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]

	strcpy(&myUsername, names[currentUser]);
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <impersonate+0x68>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <impersonate+0x6c>)
 80018be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c2:	4619      	mov	r1, r3
 80018c4:	4807      	ldr	r0, [pc, #28]	; (80018e4 <impersonate+0x70>)
 80018c6:	f009 ff09 	bl	800b6dc <strcpy>

}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20001fdc 	.word	0x20001fdc
 80018d8:	200027d0 	.word	0x200027d0
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000004 	.word	0x20000004
 80018e4:	2000032c 	.word	0x2000032c

080018e8 <handleCommand>:

void handleCommand(char* input){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	//this is after the string has been entered and the user hits enter
	myHAL_UART_printf("                              entered: (%s) \r\n", userInput);
 80018f0:	4940      	ldr	r1, [pc, #256]	; (80019f4 <handleCommand+0x10c>)
 80018f2:	4841      	ldr	r0, [pc, #260]	; (80019f8 <handleCommand+0x110>)
 80018f4:	f000 f88c 	bl	8001a10 <myHAL_UART_printf>


	if (userInput[0] == '/'){
 80018f8:	4b3e      	ldr	r3, [pc, #248]	; (80019f4 <handleCommand+0x10c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b2f      	cmp	r3, #47	; 0x2f
 80018fe:	d16d      	bne.n	80019dc <handleCommand+0xf4>

		switch (userInput[1]) {
 8001900:	4b3c      	ldr	r3, [pc, #240]	; (80019f4 <handleCommand+0x10c>)
 8001902:	785b      	ldrb	r3, [r3, #1]
 8001904:	3b62      	subs	r3, #98	; 0x62
 8001906:	2b13      	cmp	r3, #19
 8001908:	d863      	bhi.n	80019d2 <handleCommand+0xea>
 800190a:	a201      	add	r2, pc, #4	; (adr r2, 8001910 <handleCommand+0x28>)
 800190c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001910:	0800196b 	.word	0x0800196b
 8001914:	080019d3 	.word	0x080019d3
 8001918:	080019d3 	.word	0x080019d3
 800191c:	080019d3 	.word	0x080019d3
 8001920:	080019d3 	.word	0x080019d3
 8001924:	080019d3 	.word	0x080019d3
 8001928:	080019d3 	.word	0x080019d3
 800192c:	080019a9 	.word	0x080019a9
 8001930:	080019d3 	.word	0x080019d3
 8001934:	080019d3 	.word	0x080019d3
 8001938:	080019d3 	.word	0x080019d3
 800193c:	080019d3 	.word	0x080019d3
 8001940:	080019d3 	.word	0x080019d3
 8001944:	080019d3 	.word	0x080019d3
 8001948:	08001979 	.word	0x08001979
 800194c:	080019d3 	.word	0x080019d3
 8001950:	080019d3 	.word	0x080019d3
 8001954:	080019d3 	.word	0x080019d3
 8001958:	080019d3 	.word	0x080019d3
 800195c:	08001961 	.word	0x08001961

			case 'u': 	//list online users
				reapUsers();
 8001960:	f7ff fcca 	bl	80012f8 <reapUsers>
				printUsersOnline();
 8001964:	f7ff fc5a 	bl	800121c <printUsersOnline>
				break;
 8001968:	e03f      	b.n	80019ea <handleCommand+0x102>

			case 'b':	//broadcast message
				createPayload(PACKET_MESSAGE, myUsername, &userInput[3], 0xFF);
 800196a:	23ff      	movs	r3, #255	; 0xff
 800196c:	4a23      	ldr	r2, [pc, #140]	; (80019fc <handleCommand+0x114>)
 800196e:	4924      	ldr	r1, [pc, #144]	; (8001a00 <handleCommand+0x118>)
 8001970:	2004      	movs	r0, #4
 8001972:	f7ff fe31 	bl	80015d8 <createPayload>
				break;
 8001976:	e038      	b.n	80019ea <handleCommand+0x102>

			case 'p':	//private message
		        char hex_str[3];
		        hex_str[0] = userInput[2];
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <handleCommand+0x10c>)
 800197a:	789b      	ldrb	r3, [r3, #2]
 800197c:	743b      	strb	r3, [r7, #16]
		        hex_str[1] = userInput[3];
 800197e:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <handleCommand+0x10c>)
 8001980:	78db      	ldrb	r3, [r3, #3]
 8001982:	747b      	strb	r3, [r7, #17]
		        hex_str[2] = '\0';
 8001984:	2300      	movs	r3, #0
 8001986:	74bb      	strb	r3, [r7, #18]

		        uint8_t PInt = strtol(hex_str, NULL, 16);
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	2210      	movs	r2, #16
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f009 fdd5 	bl	800b540 <strtol>
 8001996:	4603      	mov	r3, r0
 8001998:	75fb      	strb	r3, [r7, #23]
				createPayload(PACKET_MESSAGE, myUsername, &userInput[5], PInt);
 800199a:	7dfb      	ldrb	r3, [r7, #23]
 800199c:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <handleCommand+0x11c>)
 800199e:	4918      	ldr	r1, [pc, #96]	; (8001a00 <handleCommand+0x118>)
 80019a0:	2004      	movs	r0, #4
 80019a2:	f7ff fe19 	bl	80015d8 <createPayload>
				break;
 80019a6:	e020      	b.n	80019ea <handleCommand+0x102>

			case 'i':	//impersonate
				char hexStr[3];
				hexStr[0] = userInput[2]; hexStr[1] = userInput[3]; hexStr[2] = '\0';
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <handleCommand+0x10c>)
 80019aa:	789b      	ldrb	r3, [r3, #2]
 80019ac:	733b      	strb	r3, [r7, #12]
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <handleCommand+0x10c>)
 80019b0:	78db      	ldrb	r3, [r3, #3]
 80019b2:	737b      	strb	r3, [r7, #13]
 80019b4:	2300      	movs	r3, #0
 80019b6:	73bb      	strb	r3, [r7, #14]
				uint8_t hexInt = (uint8_t)strtol(hexStr, NULL, 16);
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	2210      	movs	r2, #16
 80019be:	2100      	movs	r1, #0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f009 fdbd 	bl	800b540 <strtol>
 80019c6:	4603      	mov	r3, r0
 80019c8:	75bb      	strb	r3, [r7, #22]
				skinSuit = hexInt; //save the address to be impersonated until next transmission (cannot change address in IRQ)
 80019ca:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <handleCommand+0x120>)
 80019cc:	7dbb      	ldrb	r3, [r7, #22]
 80019ce:	7013      	strb	r3, [r2, #0]
				break;
 80019d0:	e00b      	b.n	80019ea <handleCommand+0x102>

			default: 	//Bad command
				myHAL_UART_printf("                              Bad command: (%s) \r\n", userInput);
 80019d2:	4908      	ldr	r1, [pc, #32]	; (80019f4 <handleCommand+0x10c>)
 80019d4:	480d      	ldr	r0, [pc, #52]	; (8001a0c <handleCommand+0x124>)
 80019d6:	f000 f81b 	bl	8001a10 <myHAL_UART_printf>
				break;
 80019da:	e006      	b.n	80019ea <handleCommand+0x102>
		}

	} else {
		//else just assume it's a broadcast message
		createPayload(PACKET_MESSAGE, myUsername, userInput, 0xFF);
 80019dc:	23ff      	movs	r3, #255	; 0xff
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <handleCommand+0x10c>)
 80019e0:	4907      	ldr	r1, [pc, #28]	; (8001a00 <handleCommand+0x118>)
 80019e2:	2004      	movs	r0, #4
 80019e4:	f7ff fdf8 	bl	80015d8 <createPayload>
	}

}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20002220 	.word	0x20002220
 80019f8:	0800c37c 	.word	0x0800c37c
 80019fc:	20002223 	.word	0x20002223
 8001a00:	2000032c 	.word	0x2000032c
 8001a04:	20002225 	.word	0x20002225
 8001a08:	20001fdc 	.word	0x20001fdc
 8001a0c:	0800c3ac 	.word	0x0800c3ac

08001a10 <myHAL_UART_printf>:





void myHAL_UART_printf(const char* format, ...) {
 8001a10:	b40f      	push	{r0, r1, r2, r3}
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, format);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	603b      	str	r3, [r7, #0]

	// Allocate temporary buffer for formatted string
	static char buffer[1024]; // Adjust buffer size as needed
	int formatted_length = vsnprintf(buffer, sizeof(buffer), format, args);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a26:	480c      	ldr	r0, [pc, #48]	; (8001a58 <myHAL_UART_printf+0x48>)
 8001a28:	f009 fdc0 	bl	800b5ac <vsniprintf>
 8001a2c:	6078      	str	r0, [r7, #4]

	// Check for potential buffer overflow (optional)
	if (formatted_length >= sizeof(buffer)) {
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a34:	d300      	bcc.n	8001a38 <myHAL_UART_printf+0x28>
		// Handle buffer overflow (e.g., print error message)
		while(1);
 8001a36:	e7fe      	b.n	8001a36 <myHAL_UART_printf+0x26>
	} else {
		// Print the formatted string
		HAL_UART_Transmit(&huart2, buffer, formatted_length, HAL_MAX_DELAY);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a40:	4905      	ldr	r1, [pc, #20]	; (8001a58 <myHAL_UART_printf+0x48>)
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <myHAL_UART_printf+0x4c>)
 8001a44:	f006 f802 	bl	8007a4c <HAL_UART_Transmit>
	}

	va_end(args);
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a52:	b004      	add	sp, #16
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20002288 	.word	0x20002288
 8001a5c:	20002740 	.word	0x20002740

08001a60 <myHAL_UART_clear>:

void myHAL_UART_clear(){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
	char clear[] = "\x1B[2J\x1B[0m\x1B[H"; // clear
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <myHAL_UART_clear+0x30>)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart2, clear, strlen(clear), 100);
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fbac 	bl	80001d0 <strlen>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	1d39      	adds	r1, r7, #4
 8001a7e:	2364      	movs	r3, #100	; 0x64
 8001a80:	4804      	ldr	r0, [pc, #16]	; (8001a94 <myHAL_UART_clear+0x34>)
 8001a82:	f005 ffe3 	bl	8007a4c <HAL_UART_Transmit>

}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	0800c3e0 	.word	0x0800c3e0
 8001a94:	20002740 	.word	0x20002740

08001a98 <SpiritGotoReadyState>:

void SpiritGotoReadyState(void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  static unsigned int i;
  /* Wait for the radio to enter the ready state */
  do {
    /* Go to the ready state */
    if (g_xStatus.MC_STATE == MC_STATE_LOCK) {
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <SpiritGotoReadyState+0x60>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b0f      	cmp	r3, #15
 8001aa8:	d103      	bne.n	8001ab2 <SpiritGotoReadyState+0x1a>
      SpiritCmdStrobeReady();
 8001aaa:	2062      	movs	r0, #98	; 0x62
 8001aac:	f000 fcd2 	bl	8002454 <SpiritCmdStrobeCommand>
 8001ab0:	e002      	b.n	8001ab8 <SpiritGotoReadyState+0x20>
    } else {
      SpiritCmdStrobeSabort();
 8001ab2:	2067      	movs	r0, #103	; 0x67
 8001ab4:	f000 fcce 	bl	8002454 <SpiritCmdStrobeCommand>
    }
    /* Delay for state transition */
    for (i = 0; i != 0xFF; i++)
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <SpiritGotoReadyState+0x64>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	e004      	b.n	8001aca <SpiritGotoReadyState+0x32>
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <SpiritGotoReadyState+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <SpiritGotoReadyState+0x64>)
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <SpiritGotoReadyState+0x64>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2bff      	cmp	r3, #255	; 0xff
 8001ad0:	d1f6      	bne.n	8001ac0 <SpiritGotoReadyState+0x28>
      ;
    /* Update the global status register variable */
    SpiritRefreshStatus();
 8001ad2:	f002 fd63 	bl	800459c <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <SpiritGotoReadyState+0x60>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d1db      	bne.n	8001a9c <SpiritGotoReadyState+0x4>

  xSemaphoreGive(FLAG_SPIRIT);
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <SpiritGotoReadyState+0x68>)
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	f006 ff3b 	bl	8008968 <xQueueGenericSend>
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200027d0 	.word	0x200027d0
 8001afc:	20002688 	.word	0x20002688
 8001b00:	200003d4 	.word	0x200003d4

08001b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b096      	sub	sp, #88	; 0x58
 8001b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	2244      	movs	r2, #68	; 0x44
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f009 fd58 	bl	800b5c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b18:	463b      	mov	r3, r7
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b26:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b2a:	f003 fa1b 	bl	8004f64 <HAL_PWREx_ControlVoltageScaling>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b34:	f000 f84a 	bl	8001bcc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b38:	2310      	movs	r3, #16
 8001b3a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b44:	2360      	movs	r3, #96	; 0x60
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b50:	2301      	movs	r3, #1
 8001b52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001b54:	2328      	movs	r3, #40	; 0x28
 8001b56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b58:	2307      	movs	r3, #7
 8001b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b60:	2302      	movs	r3, #2
 8001b62:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fa51 	bl	8005010 <HAL_RCC_OscConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001b74:	f000 f82a 	bl	8001bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b78:	230f      	movs	r3, #15
 8001b7a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2104      	movs	r1, #4
 8001b90:	4618      	mov	r0, r3
 8001b92:	f003 fe19 	bl	80057c8 <HAL_RCC_ClockConfig>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b9c:	f000 f816 	bl	8001bcc <Error_Handler>
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	3758      	adds	r7, #88	; 0x58
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bba:	f002 feb7 	bl	800492c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40014400 	.word	0x40014400

08001bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd0:	b672      	cpsid	i
}
 8001bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <Error_Handler+0x8>
	...

08001bd8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001bde:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <MX_SPI1_Init+0x78>)
 8001be0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001be2:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001be4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001be8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001bf2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bf6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c0e:	2210      	movs	r2, #16
 8001c10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c26:	2207      	movs	r2, #7
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c32:	2208      	movs	r2, #8
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c38:	f004 fcd8 	bl	80065ec <HAL_SPI_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c42:	f7ff ffc3 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2000268c 	.word	0x2000268c
 8001c50:	40013000 	.word	0x40013000

08001c54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a25      	ldr	r2, [pc, #148]	; (8001d08 <HAL_SPI_MspInit+0xb4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d144      	bne.n	8001d00 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c76:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <HAL_SPI_MspInit+0xb8>)
 8001c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7a:	4a24      	ldr	r2, [pc, #144]	; (8001d0c <HAL_SPI_MspInit+0xb8>)
 8001c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c80:	6613      	str	r3, [r2, #96]	; 0x60
 8001c82:	4b22      	ldr	r3, [pc, #136]	; (8001d0c <HAL_SPI_MspInit+0xb8>)
 8001c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <HAL_SPI_MspInit+0xb8>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	4a1e      	ldr	r2, [pc, #120]	; (8001d0c <HAL_SPI_MspInit+0xb8>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9a:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <HAL_SPI_MspInit+0xb8>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_SPI_MspInit+0xb8>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <HAL_SPI_MspInit+0xb8>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb2:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <HAL_SPI_MspInit+0xb8>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cbe:	23c0      	movs	r3, #192	; 0xc0
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cce:	2305      	movs	r3, #5
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cdc:	f002 ff5a 	bl	8004b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ce0:	2308      	movs	r3, #8
 8001ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cf0:	2305      	movs	r3, #5
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <HAL_SPI_MspInit+0xbc>)
 8001cfc:	f002 ff4a 	bl	8004b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d00:	bf00      	nop
 8001d02:	3728      	adds	r7, #40	; 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40013000 	.word	0x40013000
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	48000400 	.word	0x48000400

08001d14 <SPSGRF_Init>:
* @brief  Initialize the SPIRIT1 transceiver in the SPSGRF module.
* @param  None
* @retval None
*/
void SPSGRF_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b096      	sub	sp, #88	; 0x58
 8001d18:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktBasicInit xBasicInit;
  PktBasicAddressesInit xBasicAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 8001d1a:	f002 fc61 	bl	80045e0 <RadioSpiInit>

  // restart the radio
  SpiritEnterShutdown();
 8001d1e:	f002 fdd7 	bl	80048d0 <RadioEnterShutdown>
  SpiritExitShutdown();
 8001d22:	f002 fde0 	bl	80048e6 <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 8001d26:	f000 fef3 	bl	8002b10 <SpiritManagementWaExtraCurrent>

  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	70fb      	strb	r3, [r7, #3]
 8001d2e:	e004      	b.n	8001d3a <SPSGRF_Init+0x26>
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	3301      	adds	r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	70fb      	strb	r3, [r7, #3]
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2bff      	cmp	r3, #255	; 0xff
 8001d40:	d1f6      	bne.n	8001d30 <SPSGRF_Init+0x1c>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 8001d42:	f002 fc2b 	bl	800459c <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 8001d46:	4b4b      	ldr	r3, [pc, #300]	; (8001e74 <SPSGRF_Init+0x160>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d1ea      	bne.n	8001d2a <SPSGRF_Init+0x16>

  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 8001d54:	2300      	movs	r3, #0
 8001d56:	87bb      	strh	r3, [r7, #60]	; 0x3c
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 8001d58:	4b47      	ldr	r3, [pc, #284]	; (8001e78 <SPSGRF_Init+0x164>)
 8001d5a:	643b      	str	r3, [r7, #64]	; 0x40
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 8001d5c:	4b47      	ldr	r3, [pc, #284]	; (8001e7c <SPSGRF_Init+0x168>)
 8001d5e:	647b      	str	r3, [r7, #68]	; 0x44
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  xRadioInit.lDatarate = DATARATE;
 8001d6c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001d70:	64fb      	str	r3, [r7, #76]	; 0x4c
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 8001d72:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001d76:	653b      	str	r3, [r7, #80]	; 0x50
  xRadioInit.lBandwidth = BANDWIDTH;
 8001d78:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <SPSGRF_Init+0x168>)
 8001d7a:	657b      	str	r3, [r7, #84]	; 0x54
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 8001d7c:	4840      	ldr	r0, [pc, #256]	; (8001e80 <SPSGRF_Init+0x16c>)
 8001d7e:	f002 fb9b 	bl	80044b8 <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 8001d82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d86:	4618      	mov	r0, r3
 8001d88:	f001 f9e8 	bl	800315c <SpiritRadioInit>

  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 8001d8c:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8001e84 <SPSGRF_Init+0x170>
 8001d90:	2007      	movs	r0, #7
 8001d92:	f002 fa2d 	bl	80041f0 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 8001d96:	2007      	movs	r0, #7
 8001d98:	f002 fa80 	bl	800429c <SpiritRadioSetPALevelMaxIndex>
	PktStackInit xSTackInit;
	PktStackAddressesInit xSTackAddress;
	PktStackLlpInit xSTackLlp;

//	xSTackInit.xPreambleLength = PREAMBLE_LENGTH;
	xSTackInit.xPreambleLength = PKT_PREAMBLE_LENGTH_04BYTES;
 8001d9c:	2318      	movs	r3, #24
 8001d9e:	743b      	strb	r3, [r7, #16]
	xSTackInit.xSyncLength = SYNC_LENGTH;
 8001da0:	2306      	movs	r3, #6
 8001da2:	747b      	strb	r3, [r7, #17]
	xSTackInit.lSyncWords = SYNC_WORD; //double check this one?
 8001da4:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 8001da8:	617b      	str	r3, [r7, #20]
	xSTackInit.xFixVarLength = LENGTH_TYPE;
 8001daa:	2301      	movs	r3, #1
 8001dac:	763b      	strb	r3, [r7, #24]
	xSTackInit.cPktLengthWidth = LENGTH_WIDTH;
 8001dae:	2307      	movs	r3, #7
 8001db0:	767b      	strb	r3, [r7, #25]
	xSTackInit.xCrcMode = CRC_MODE; //todo:set to 8 bit CRC? is this right?
 8001db2:	2320      	movs	r3, #32
 8001db4:	76bb      	strb	r3, [r7, #26]
	xSTackInit.xControlLength = CONTROL_LENGTH;
 8001db6:	2300      	movs	r3, #0
 8001db8:	76fb      	strb	r3, [r7, #27]
	xSTackInit.xFec = S_DISABLE; //todo: what is FEN?
 8001dba:	2300      	movs	r3, #0
 8001dbc:	773b      	strb	r3, [r7, #28]
	xSTackInit.xDataWhitening = EN_WHITENING;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	777b      	strb	r3, [r7, #29]
	SpiritPktStackInit(&xSTackInit);
 8001dc2:	f107 0310 	add.w	r3, r7, #16
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 ff7e 	bl	8002cc8 <SpiritPktStackInit>

	xSTackAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	723b      	strb	r3, [r7, #8]
	xSTackAddress.cMyAddress = MY_ADDRESS;
 8001dd0:	23b0      	movs	r3, #176	; 0xb0
 8001dd2:	727b      	strb	r3, [r7, #9]
	xSTackAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	72bb      	strb	r3, [r7, #10]
	xSTackAddress.cMulticastAddress = MULTICAST_ADDRESS;
 8001dd8:	23ee      	movs	r3, #238	; 0xee
 8001dda:	72fb      	strb	r3, [r7, #11]
	xSTackAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	733b      	strb	r3, [r7, #12]
	xSTackAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 8001de0:	23ff      	movs	r3, #255	; 0xff
 8001de2:	737b      	strb	r3, [r7, #13]
	SpiritPktStackAddressesInit(&xSTackAddress);
 8001de4:	f107 0308 	add.w	r3, r7, #8
 8001de8:	4618      	mov	r0, r3
 8001dea:	f001 f83d 	bl	8002e68 <SpiritPktStackAddressesInit>

	xSTackLlp.xAutoAck = S_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	713b      	strb	r3, [r7, #4]
	xSTackLlp.xPiggybacking = S_ENABLE;
 8001df2:	2301      	movs	r3, #1
 8001df4:	717b      	strb	r3, [r7, #5]
	xSTackLlp.xNMaxRetx = PKT_DISABLE_RETX; //todo?
 8001df6:	2300      	movs	r3, #0
 8001df8:	71bb      	strb	r3, [r7, #6]

	SpiritPktStackLlpInit(&xSTackLlp);
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f001 f8a1 	bl	8002f44 <SpiritPktStackLlpInit>




  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 8001e02:	2302      	movs	r3, #2
 8001e04:	f887 3020 	strb.w	r3, [r7, #32]
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  SpiritGpioInit(&xGpioInit);
 8001e14:	f107 0320 	add.w	r3, r7, #32
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fb33 	bl	8002484 <SpiritGpioInit>

  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f000 fb54 	bl	80024cc <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 8001e24:	2101      	movs	r1, #1
 8001e26:	2004      	movs	r0, #4
 8001e28:	f000 fb7c 	bl	8002524 <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f000 fb78 	bl	8002524 <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 8001e34:	2101      	movs	r1, #1
 8001e36:	2002      	movs	r0, #2
 8001e38:	f000 fb74 	bl	8002524 <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001e42:	f000 fb6f 	bl	8002524 <SpiritIrq>
  SpiritIrqClearStatus();
 8001e46:	f000 fc05 	bl	8002654 <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f001 f932 	bl	80030b4 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 8001e50:	2001      	movs	r0, #1
 8001e52:	f001 f8f7 	bl	8003044 <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8001e56:	f06f 0077 	mvn.w	r0, #119	; 0x77
 8001e5a:	f001 f95f 	bl	800311c <SpiritQiSetRssiThresholddBm>

  // Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
  SpiritTimerSetRxTimeoutMs(RECEIVE_TIMEOUT);
#else
  SET_INFINITE_RX_TIMEOUT();
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f002 fb3a 	bl	80044d8 <SpiritTimerSetRxTimeoutCounter>
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 8001e64:	2002      	movs	r0, #2
 8001e66:	f002 fb51 	bl	800450c <SpiritTimerSetRxTimeoutStopCondition>
}
 8001e6a:	bf00      	nop
 8001e6c:	3758      	adds	r7, #88	; 0x58
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200027d0 	.word	0x200027d0
 8001e78:	3689cac0 	.word	0x3689cac0
 8001e7c:	000186a0 	.word	0x000186a0
 8001e80:	02faf080 	.word	0x02faf080
 8001e84:	4139999a 	.word	0x4139999a

08001e88 <SPSGRF_StartTx>:
* @param  txBuff: pointer to the data to transmit
* @param  txLen: number of bytes to transmit
* @retval None
*/
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	70fb      	strb	r3, [r7, #3]
  // flush the TX FIFO
  SpiritCmdStrobeFlushTxFifo();
 8001e94:	2072      	movs	r0, #114	; 0x72
 8001e96:	f000 fadd 	bl	8002454 <SpiritCmdStrobeCommand>

  // Avoid TX FIFO overflow
  txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	2b60      	cmp	r3, #96	; 0x60
 8001e9e:	bf28      	it	cs
 8001ea0:	2360      	movcs	r3, #96	; 0x60
 8001ea2:	70fb      	strb	r3, [r7, #3]

  // start TX operation
  SpiritSpiWriteLinearFifo(txLen, txBuff);
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f002 fc81 	bl	80047b0 <RadioSpiWriteFifo>
  SpiritPktStackSetPayloadLength(txLen);
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f001 f898 	bl	8002fe8 <SpiritPktStackSetPayloadLength>
  SpiritCmdStrobeTx();
 8001eb8:	f000 fdc2 	bl	8002a40 <SpiritManagementWaCmdStrobeTx>
 8001ebc:	2060      	movs	r0, #96	; 0x60
 8001ebe:	f000 fac9 	bl	8002454 <SpiritCmdStrobeCommand>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <SPSGRF_StartRx>:
* @brief  Enter the receive state.
* @param  None
* @retval None
*/
void SPSGRF_StartRx(void)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	af00      	add	r7, sp, #0
  SpiritCmdStrobeRx();
 8001ece:	f000 fdef 	bl	8002ab0 <SpiritManagementWaCmdStrobeRx>
 8001ed2:	2061      	movs	r0, #97	; 0x61
 8001ed4:	f000 fabe 	bl	8002454 <SpiritCmdStrobeCommand>
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}

08001edc <SPSGRF_GetRxData>:
* @brief  To be called after a reception is complete
* @param  rxBuff: pointer to a buffer to hold the received data
* @retval Number of bytes received
*/
uint8_t SPSGRF_GetRxData(uint8_t *rxBuff)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint8_t len;

  len = SpiritLinearFifoReadNumElementsRxFifo();
 8001ee4:	f000 fbce 	bl	8002684 <SpiritLinearFifoReadNumElementsRxFifo>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	73fb      	strb	r3, [r7, #15]
  SpiritSpiReadLinearFifo(len, rxBuff);
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f002 fca5 	bl	8004840 <RadioSpiReadFifo>

  return len;
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6613      	str	r3, [r2, #96]	; 0x60
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6593      	str	r3, [r2, #88]	; 0x58
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_MspInit+0x4c>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	210f      	movs	r1, #15
 8001f3a:	f06f 0001 	mvn.w	r0, #1
 8001f3e:	f002 fdf1 	bl	8004b24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000

08001f50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08c      	sub	sp, #48	; 0x30
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001f5e:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <HAL_InitTick+0xc8>)
 8001f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f62:	4a2d      	ldr	r2, [pc, #180]	; (8002018 <HAL_InitTick+0xc8>)
 8001f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f68:	6613      	str	r3, [r2, #96]	; 0x60
 8001f6a:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <HAL_InitTick+0xc8>)
 8001f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f76:	f107 020c 	add.w	r2, r7, #12
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 fde5 	bl	8005b50 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f86:	f003 fdcd 	bl	8005b24 <HAL_RCC_GetPCLK2Freq>
 8001f8a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	4a23      	ldr	r2, [pc, #140]	; (800201c <HAL_InitTick+0xcc>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	0c9b      	lsrs	r3, r3, #18
 8001f96:	3b01      	subs	r3, #1
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <HAL_InitTick+0xd0>)
 8001f9c:	4a21      	ldr	r2, [pc, #132]	; (8002024 <HAL_InitTick+0xd4>)
 8001f9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <HAL_InitTick+0xd0>)
 8001fa2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fa6:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001fa8:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <HAL_InitTick+0xd0>)
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001fae:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <HAL_InitTick+0xd0>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HAL_InitTick+0xd0>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fba:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_InitTick+0xd0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8001fc0:	4817      	ldr	r0, [pc, #92]	; (8002020 <HAL_InitTick+0xd0>)
 8001fc2:	f005 fa41 	bl	8007448 <HAL_TIM_Base_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001fcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d11b      	bne.n	800200c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8001fd4:	4812      	ldr	r0, [pc, #72]	; (8002020 <HAL_InitTick+0xd0>)
 8001fd6:	f005 fa99 	bl	800750c <HAL_TIM_Base_Start_IT>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001fe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d111      	bne.n	800200c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001fe8:	2019      	movs	r0, #25
 8001fea:	f002 fdb7 	bl	8004b5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b0f      	cmp	r3, #15
 8001ff2:	d808      	bhi.n	8002006 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	2019      	movs	r0, #25
 8001ffa:	f002 fd93 	bl	8004b24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_InitTick+0xd8>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	e002      	b.n	800200c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800200c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002010:	4618      	mov	r0, r3
 8002012:	3730      	adds	r7, #48	; 0x30
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	431bde83 	.word	0x431bde83
 8002020:	200026f0 	.word	0x200026f0
 8002024:	40014400 	.word	0x40014400
 8002028:	20000350 	.word	0x20000350

0800202c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002030:	e7fe      	b.n	8002030 <NMI_Handler+0x4>

08002032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <HardFault_Handler+0x4>

08002038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <MemManage_Handler+0x4>

0800203e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <BusFault_Handler+0x4>

08002044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <UsageFault_Handler+0x4>

0800204a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 800205c:	2080      	movs	r0, #128	; 0x80
 800205e:	f002 ff5b 	bl	8004f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800206e:	f005 fabd 	bl	80075ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200026f0 	.word	0x200026f0

0800207c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002080:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002084:	f002 ff48 	bl	8004f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}

0800208c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002094:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <_sbrk+0x5c>)
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <_sbrk+0x60>)
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <_sbrk+0x64>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <_sbrk+0x68>)
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d207      	bcs.n	80020cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020bc:	f009 fae2 	bl	800b684 <__errno>
 80020c0:	4603      	mov	r3, r0
 80020c2:	220c      	movs	r2, #12
 80020c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	e009      	b.n	80020e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <_sbrk+0x64>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <_sbrk+0x64>)
 80020dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020de:	68fb      	ldr	r3, [r7, #12]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20018000 	.word	0x20018000
 80020ec:	00000400 	.word	0x00000400
 80020f0:	2000273c 	.word	0x2000273c
 80020f4:	200042d0 	.word	0x200042d0

080020f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <SystemInit+0x20>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	4a05      	ldr	r2, [pc, #20]	; (8002118 <SystemInit+0x20>)
 8002104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <MX_USART2_UART_Init+0x58>)
 8002122:	4a15      	ldr	r2, [pc, #84]	; (8002178 <MX_USART2_UART_Init+0x5c>)
 8002124:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <MX_USART2_UART_Init+0x58>)
 8002128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800212c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <MX_USART2_UART_Init+0x58>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <MX_USART2_UART_Init+0x58>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <MX_USART2_UART_Init+0x58>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <MX_USART2_UART_Init+0x58>)
 8002142:	220c      	movs	r2, #12
 8002144:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <MX_USART2_UART_Init+0x58>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <MX_USART2_UART_Init+0x58>)
 800214e:	2200      	movs	r2, #0
 8002150:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002152:	4b08      	ldr	r3, [pc, #32]	; (8002174 <MX_USART2_UART_Init+0x58>)
 8002154:	2200      	movs	r2, #0
 8002156:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <MX_USART2_UART_Init+0x58>)
 800215a:	2200      	movs	r2, #0
 800215c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800215e:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_USART2_UART_Init+0x58>)
 8002160:	f005 fc26 	bl	80079b0 <HAL_UART_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800216a:	f7ff fd2f 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20002740 	.word	0x20002740
 8002178:	40004400 	.word	0x40004400

0800217c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b0ac      	sub	sp, #176	; 0xb0
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	2288      	movs	r2, #136	; 0x88
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f009 fa13 	bl	800b5c8 <memset>
  if(uartHandle->Instance==USART2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a21      	ldr	r2, [pc, #132]	; (800222c <HAL_UART_MspInit+0xb0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d13b      	bne.n	8002224 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021ac:	2302      	movs	r3, #2
 80021ae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021b0:	2300      	movs	r3, #0
 80021b2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4618      	mov	r0, r3
 80021ba:	f003 fd5b 	bl	8005c74 <HAL_RCCEx_PeriphCLKConfig>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021c4:	f7ff fd02 	bl	8001bcc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021c8:	4b19      	ldr	r3, [pc, #100]	; (8002230 <HAL_UART_MspInit+0xb4>)
 80021ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021cc:	4a18      	ldr	r2, [pc, #96]	; (8002230 <HAL_UART_MspInit+0xb4>)
 80021ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d2:	6593      	str	r3, [r2, #88]	; 0x58
 80021d4:	4b16      	ldr	r3, [pc, #88]	; (8002230 <HAL_UART_MspInit+0xb4>)
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e0:	4b13      	ldr	r3, [pc, #76]	; (8002230 <HAL_UART_MspInit+0xb4>)
 80021e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e4:	4a12      	ldr	r2, [pc, #72]	; (8002230 <HAL_UART_MspInit+0xb4>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ec:	4b10      	ldr	r3, [pc, #64]	; (8002230 <HAL_UART_MspInit+0xb4>)
 80021ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021f8:	230c      	movs	r3, #12
 80021fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220a:	2303      	movs	r3, #3
 800220c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002210:	2307      	movs	r3, #7
 8002212:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002216:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800221a:	4619      	mov	r1, r3
 800221c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002220:	f002 fcb8 	bl	8004b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002224:	bf00      	nop
 8002226:	37b0      	adds	r7, #176	; 0xb0
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40004400 	.word	0x40004400
 8002230:	40021000 	.word	0x40021000

08002234 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800226c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002238:	f7ff ff5e 	bl	80020f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800223c:	480c      	ldr	r0, [pc, #48]	; (8002270 <LoopForever+0x6>)
  ldr r1, =_edata
 800223e:	490d      	ldr	r1, [pc, #52]	; (8002274 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002240:	4a0d      	ldr	r2, [pc, #52]	; (8002278 <LoopForever+0xe>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002244:	e002      	b.n	800224c <LoopCopyDataInit>

08002246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800224a:	3304      	adds	r3, #4

0800224c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800224c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002250:	d3f9      	bcc.n	8002246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002252:	4a0a      	ldr	r2, [pc, #40]	; (800227c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002254:	4c0a      	ldr	r4, [pc, #40]	; (8002280 <LoopForever+0x16>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002258:	e001      	b.n	800225e <LoopFillZerobss>

0800225a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800225a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800225c:	3204      	adds	r2, #4

0800225e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002260:	d3fb      	bcc.n	800225a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002262:	f009 fa15 	bl	800b690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002266:	f7ff fa07 	bl	8001678 <main>

0800226a <LoopForever>:

LoopForever:
    b LoopForever
 800226a:	e7fe      	b.n	800226a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800226c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002274:	200003ac 	.word	0x200003ac
  ldr r2, =_sidata
 8002278:	0800c6ec 	.word	0x0800c6ec
  ldr r2, =_sbss
 800227c:	200003ac 	.word	0x200003ac
  ldr r4, =_ebss
 8002280:	200042cc 	.word	0x200042cc

08002284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002284:	e7fe      	b.n	8002284 <ADC1_2_IRQHandler>
	...

08002288 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8002292:	f107 030f 	add.w	r3, r7, #15
 8002296:	461a      	mov	r2, r3
 8002298:	2101      	movs	r1, #1
 800229a:	2050      	movs	r0, #80	; 0x50
 800229c:	f002 f9fc 	bl	8004698 <RadioSpiReadRegisters>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <SpiritCalibrationVco+0x6c>)
 80022a4:	b212      	sxth	r2, r2
 80022a6:	4611      	mov	r1, r2
 80022a8:	7019      	strb	r1, [r3, #0]
 80022aa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022ae:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d105      	bne.n	80022c2 <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	e004      	b.n	80022cc <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	f023 0302 	bic.w	r3, r3, #2
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 80022cc:	f107 030f 	add.w	r3, r7, #15
 80022d0:	461a      	mov	r2, r3
 80022d2:	2101      	movs	r1, #1
 80022d4:	2050      	movs	r0, #80	; 0x50
 80022d6:	f002 f993 	bl	8004600 <RadioSpiWriteRegisters>
 80022da:	4602      	mov	r2, r0
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <SpiritCalibrationVco+0x6c>)
 80022de:	b212      	sxth	r2, r2
 80022e0:	4611      	mov	r1, r2
 80022e2:	7019      	strb	r1, [r3, #0]
 80022e4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022e8:	705a      	strb	r2, [r3, #1]

}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200027d0 	.word	0x200027d0

080022f8 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 80022fe:	1dfb      	adds	r3, r7, #7
 8002300:	461a      	mov	r2, r3
 8002302:	2101      	movs	r1, #1
 8002304:	20e5      	movs	r0, #229	; 0xe5
 8002306:	f002 f9c7 	bl	8004698 <RadioSpiReadRegisters>
 800230a:	4602      	mov	r2, r0
 800230c:	4b07      	ldr	r3, [pc, #28]	; (800232c <SpiritCalibrationGetVcoCalData+0x34>)
 800230e:	b212      	sxth	r2, r2
 8002310:	4611      	mov	r1, r2
 8002312:	7019      	strb	r1, [r3, #0]
 8002314:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002318:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002320:	b2db      	uxtb	r3, r3

}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200027d0 	.word	0x200027d0

08002330 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 800233a:	f107 030f 	add.w	r3, r7, #15
 800233e:	461a      	mov	r2, r3
 8002340:	2101      	movs	r1, #1
 8002342:	206e      	movs	r0, #110	; 0x6e
 8002344:	f002 f9a8 	bl	8004698 <RadioSpiReadRegisters>
 8002348:	4602      	mov	r2, r0
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 800234c:	b212      	sxth	r2, r2
 800234e:	4611      	mov	r1, r2
 8002350:	7019      	strb	r1, [r3, #0]
 8002352:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002356:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800235e:	b2db      	uxtb	r3, r3
 8002360:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	4313      	orrs	r3, r2
 8002368:	b2db      	uxtb	r3, r3
 800236a:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 800236c:	f107 030f 	add.w	r3, r7, #15
 8002370:	461a      	mov	r2, r3
 8002372:	2101      	movs	r1, #1
 8002374:	206e      	movs	r0, #110	; 0x6e
 8002376:	f002 f943 	bl	8004600 <RadioSpiWriteRegisters>
 800237a:	4602      	mov	r2, r0
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 800237e:	b212      	sxth	r2, r2
 8002380:	4611      	mov	r1, r2
 8002382:	7019      	strb	r1, [r3, #0]
 8002384:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002388:	705a      	strb	r2, [r3, #1]

}
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200027d0 	.word	0x200027d0

08002398 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 80023a2:	f107 030f 	add.w	r3, r7, #15
 80023a6:	461a      	mov	r2, r3
 80023a8:	2101      	movs	r1, #1
 80023aa:	206f      	movs	r0, #111	; 0x6f
 80023ac:	f002 f974 	bl	8004698 <RadioSpiReadRegisters>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b12      	ldr	r3, [pc, #72]	; (80023fc <SpiritCalibrationSetVcoCalDataRx+0x64>)
 80023b4:	b212      	sxth	r2, r2
 80023b6:	4611      	mov	r1, r2
 80023b8:	7019      	strb	r1, [r3, #0]
 80023ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023be:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 80023d4:	f107 030f 	add.w	r3, r7, #15
 80023d8:	461a      	mov	r2, r3
 80023da:	2101      	movs	r1, #1
 80023dc:	206f      	movs	r0, #111	; 0x6f
 80023de:	f002 f90f 	bl	8004600 <RadioSpiWriteRegisters>
 80023e2:	4602      	mov	r2, r0
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <SpiritCalibrationSetVcoCalDataRx+0x64>)
 80023e6:	b212      	sxth	r2, r2
 80023e8:	4611      	mov	r1, r2
 80023ea:	7019      	strb	r1, [r3, #0]
 80023ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023f0:	705a      	strb	r2, [r3, #1]

}
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200027d0 	.word	0x200027d0

08002400 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800240a:	f107 030f 	add.w	r3, r7, #15
 800240e:	461a      	mov	r2, r3
 8002410:	2101      	movs	r1, #1
 8002412:	209e      	movs	r0, #158	; 0x9e
 8002414:	f002 f940 	bl	8004698 <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	f023 0306 	bic.w	r3, r3, #6
 800241e:	b2db      	uxtb	r3, r3
 8002420:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d105      	bne.n	8002434 <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	f043 0302 	orr.w	r3, r3, #2
 800242e:	b2db      	uxtb	r3, r3
 8002430:	73fb      	strb	r3, [r7, #15]
 8002432:	e004      	b.n	800243e <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	f043 0304 	orr.w	r3, r3, #4
 800243a:	b2db      	uxtb	r3, r3
 800243c:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 800243e:	f107 030f 	add.w	r3, r7, #15
 8002442:	461a      	mov	r2, r3
 8002444:	2101      	movs	r1, #1
 8002446:	209e      	movs	r0, #158	; 0x9e
 8002448:	f002 f8da 	bl	8004600 <RadioSpiWriteRegisters>
  
}
 800244c:	bf00      	nop
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	4618      	mov	r0, r3
 8002462:	f002 f965 	bl	8004730 <RadioSpiCommandStrobes>
 8002466:	4602      	mov	r2, r0
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <SpiritCmdStrobeCommand+0x2c>)
 800246a:	b212      	sxth	r2, r2
 800246c:	4611      	mov	r1, r2
 800246e:	7019      	strb	r1, [r3, #0]
 8002470:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002474:	705a      	strb	r2, [r3, #1]
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200027d0 	.word	0x200027d0

08002484 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	785a      	ldrb	r2, [r3, #1]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	789b      	ldrb	r3, [r3, #2]
 8002498:	4313      	orrs	r3, r2
 800249a:	b2db      	uxtb	r3, r3
 800249c:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	f107 020f 	add.w	r2, r7, #15
 80024a6:	2101      	movs	r1, #1
 80024a8:	4618      	mov	r0, r3
 80024aa:	f002 f8a9 	bl	8004600 <RadioSpiWriteRegisters>
 80024ae:	4602      	mov	r2, r0
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <SpiritGpioInit+0x44>)
 80024b2:	b212      	sxth	r2, r2
 80024b4:	4611      	mov	r1, r2
 80024b6:	7019      	strb	r1, [r3, #0]
 80024b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80024bc:	705a      	strb	r2, [r3, #1]

}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200027d0 	.word	0x200027d0

080024cc <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00c      	beq.n	80024f8 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 80024de:	f107 0308 	add.w	r3, r7, #8
 80024e2:	2204      	movs	r2, #4
 80024e4:	2100      	movs	r1, #0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f009 f86e 	bl	800b5c8 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	461a      	mov	r2, r3
 80024f0:	f107 0308 	add.w	r3, r7, #8
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	461a      	mov	r2, r3
 80024fe:	2104      	movs	r1, #4
 8002500:	2090      	movs	r0, #144	; 0x90
 8002502:	f002 f87d 	bl	8004600 <RadioSpiWriteRegisters>
 8002506:	4602      	mov	r2, r0
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <SpiritIrqDeInit+0x54>)
 800250a:	b212      	sxth	r2, r2
 800250c:	4611      	mov	r1, r2
 800250e:	7019      	strb	r1, [r3, #0]
 8002510:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002514:	705a      	strb	r2, [r3, #1]
}
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200027d0 	.word	0x200027d0

08002524 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	461a      	mov	r2, r3
 800253a:	2104      	movs	r1, #4
 800253c:	2090      	movs	r0, #144	; 0x90
 800253e:	f002 f8ab 	bl	8004698 <RadioSpiReadRegisters>
 8002542:	4602      	mov	r2, r0
 8002544:	4b29      	ldr	r3, [pc, #164]	; (80025ec <SpiritIrq+0xc8>)
 8002546:	b212      	sxth	r2, r2
 8002548:	4611      	mov	r1, r2
 800254a:	7019      	strb	r1, [r3, #0]
 800254c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002550:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8002552:	2300      	movs	r3, #0
 8002554:	74fb      	strb	r3, [r7, #19]
 8002556:	e011      	b.n	800257c <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8002558:	7cfb      	ldrb	r3, [r7, #19]
 800255a:	3318      	adds	r3, #24
 800255c:	443b      	add	r3, r7
 800255e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002562:	461a      	mov	r2, r3
 8002564:	7cfb      	ldrb	r3, [r7, #19]
 8002566:	f1c3 0303 	rsb	r3, r3, #3
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	4413      	add	r3, r2
 8002574:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8002576:	7cfb      	ldrb	r3, [r7, #19]
 8002578:	3301      	adds	r3, #1
 800257a:	74fb      	strb	r3, [r7, #19]
 800257c:	7cfb      	ldrb	r3, [r7, #19]
 800257e:	2b03      	cmp	r3, #3
 8002580:	d9ea      	bls.n	8002558 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d105      	bne.n	8002594 <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	43db      	mvns	r3, r3
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4013      	ands	r3, r2
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	e003      	b.n	800259c <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 800259c:	2300      	movs	r3, #0
 800259e:	74bb      	strb	r3, [r7, #18]
 80025a0:	e00e      	b.n	80025c0 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 80025a2:	7cbb      	ldrb	r3, [r7, #18]
 80025a4:	f1c3 0303 	rsb	r3, r3, #3
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	40da      	lsrs	r2, r3
 80025ae:	7cbb      	ldrb	r3, [r7, #18]
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	3318      	adds	r3, #24
 80025b4:	443b      	add	r3, r7
 80025b6:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 80025ba:	7cbb      	ldrb	r3, [r7, #18]
 80025bc:	3301      	adds	r3, #1
 80025be:	74bb      	strb	r3, [r7, #18]
 80025c0:	7cbb      	ldrb	r3, [r7, #18]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d9ed      	bls.n	80025a2 <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 80025c6:	f107 030c 	add.w	r3, r7, #12
 80025ca:	461a      	mov	r2, r3
 80025cc:	2104      	movs	r1, #4
 80025ce:	2090      	movs	r0, #144	; 0x90
 80025d0:	f002 f816 	bl	8004600 <RadioSpiWriteRegisters>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <SpiritIrq+0xc8>)
 80025d8:	b212      	sxth	r2, r2
 80025da:	4611      	mov	r1, r2
 80025dc:	7019      	strb	r1, [r3, #0]
 80025de:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025e2:	705a      	strb	r2, [r3, #1]

}
 80025e4:	bf00      	nop
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	200027d0 	.word	0x200027d0

080025f0 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 80025fc:	f107 030c 	add.w	r3, r7, #12
 8002600:	461a      	mov	r2, r3
 8002602:	2104      	movs	r1, #4
 8002604:	20fa      	movs	r0, #250	; 0xfa
 8002606:	f002 f847 	bl	8004698 <RadioSpiReadRegisters>
 800260a:	4602      	mov	r2, r0
 800260c:	4b10      	ldr	r3, [pc, #64]	; (8002650 <SpiritIrqGetStatus+0x60>)
 800260e:	b212      	sxth	r2, r2
 8002610:	4611      	mov	r1, r2
 8002612:	7019      	strb	r1, [r3, #0]
 8002614:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002618:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 800261a:	2300      	movs	r3, #0
 800261c:	74fb      	strb	r3, [r7, #19]
 800261e:	e00e      	b.n	800263e <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	f1c3 0303 	rsb	r3, r3, #3
 8002626:	3318      	adds	r3, #24
 8002628:	443b      	add	r3, r7
 800262a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	3301      	adds	r3, #1
 8002636:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	3301      	adds	r3, #1
 800263c:	74fb      	strb	r3, [r7, #19]
 800263e:	7cfb      	ldrb	r3, [r7, #19]
 8002640:	2b03      	cmp	r3, #3
 8002642:	d9ed      	bls.n	8002620 <SpiritIrqGetStatus+0x30>
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200027d0 	.word	0x200027d0

08002654 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	461a      	mov	r2, r3
 800265e:	2104      	movs	r1, #4
 8002660:	20fa      	movs	r0, #250	; 0xfa
 8002662:	f002 f819 	bl	8004698 <RadioSpiReadRegisters>
 8002666:	4602      	mov	r2, r0
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <SpiritIrqClearStatus+0x2c>)
 800266a:	b212      	sxth	r2, r2
 800266c:	4611      	mov	r1, r2
 800266e:	7019      	strb	r1, [r3, #0]
 8002670:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002674:	705a      	strb	r2, [r3, #1]

}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200027d0 	.word	0x200027d0

08002684 <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 800268a:	1dfb      	adds	r3, r7, #7
 800268c:	461a      	mov	r2, r3
 800268e:	2101      	movs	r1, #1
 8002690:	20e7      	movs	r0, #231	; 0xe7
 8002692:	f002 f801 	bl	8004698 <RadioSpiReadRegisters>
 8002696:	4602      	mov	r2, r0
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 800269a:	b212      	sxth	r2, r2
 800269c:	4611      	mov	r1, r2
 800269e:	7019      	strb	r1, [r3, #0]
 80026a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026a4:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026ac:	b2db      	uxtb	r3, r3

}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200027d0 	.word	0x200027d0

080026bc <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 80026bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026c0:	b08a      	sub	sp, #40	; 0x28
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a70      	ldr	r2, [pc, #448]	; (800288c <SpiritManagementSetFrequencyBase+0x1d0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d307      	bcc.n	80026de <SpiritManagementSetFrequencyBase+0x22>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a6f      	ldr	r2, [pc, #444]	; (8002890 <SpiritManagementSetFrequencyBase+0x1d4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d803      	bhi.n	80026de <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80026dc:	e01a      	b.n	8002714 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a6c      	ldr	r2, [pc, #432]	; (8002894 <SpiritManagementSetFrequencyBase+0x1d8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d907      	bls.n	80026f6 <SpiritManagementSetFrequencyBase+0x3a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a6b      	ldr	r2, [pc, #428]	; (8002898 <SpiritManagementSetFrequencyBase+0x1dc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d803      	bhi.n	80026f6 <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80026f4:	e00e      	b.n	8002714 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a68      	ldr	r2, [pc, #416]	; (800289c <SpiritManagementSetFrequencyBase+0x1e0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d907      	bls.n	800270e <SpiritManagementSetFrequencyBase+0x52>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a67      	ldr	r2, [pc, #412]	; (80028a0 <SpiritManagementSetFrequencyBase+0x1e4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d803      	bhi.n	800270e <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 8002706:	2302      	movs	r3, #2
 8002708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800270c:	e002      	b.n	8002714 <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 800270e:	2303      	movs	r3, #3
 8002710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8002714:	f001 f860 	bl	80037d8 <SpiritRadioGetFrequencyOffset>
 8002718:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 800271a:	f001 f83d 	bl	8003798 <SpiritRadioGetChannelSpace>
 800271e:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8002720:	f001 f822 	bl	8003768 <SpiritRadioGetChannel>
 8002724:	4603      	mov	r3, r0
 8002726:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8002728:	6a3a      	ldr	r2, [r7, #32]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	441a      	add	r2, r3
 800272e:	7efb      	ldrb	r3, [r7, #27]
 8002730:	69f9      	ldr	r1, [r7, #28]
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 800273a:	f001 fe3d 	bl	80043b8 <SpiritRadioGetRefDiv>
 800273e:	4603      	mov	r3, r0
 8002740:	3301      	adds	r3, #1
 8002742:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 8002744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002748:	2b03      	cmp	r3, #3
 800274a:	d83a      	bhi.n	80027c2 <SpiritManagementSetFrequencyBase+0x106>
 800274c:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <SpiritManagementSetFrequencyBase+0x98>)
 800274e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002752:	bf00      	nop
 8002754:	080027ad 	.word	0x080027ad
 8002758:	08002795 	.word	0x08002795
 800275c:	0800277d 	.word	0x0800277d
 8002760:	08002765 	.word	0x08002765
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	4a4f      	ldr	r2, [pc, #316]	; (80028a4 <SpiritManagementSetFrequencyBase+0x1e8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d803      	bhi.n	8002774 <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800276c:	2000      	movs	r0, #0
 800276e:	f7ff fe47 	bl	8002400 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002772:	e026      	b.n	80027c2 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002774:	2001      	movs	r0, #1
 8002776:	f7ff fe43 	bl	8002400 <SpiritCalibrationSelectVco>
    break;
 800277a:	e022      	b.n	80027c2 <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	4a4a      	ldr	r2, [pc, #296]	; (80028a8 <SpiritManagementSetFrequencyBase+0x1ec>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d803      	bhi.n	800278c <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002784:	2000      	movs	r0, #0
 8002786:	f7ff fe3b 	bl	8002400 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800278a:	e01a      	b.n	80027c2 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 800278c:	2001      	movs	r0, #1
 800278e:	f7ff fe37 	bl	8002400 <SpiritCalibrationSelectVco>
    break;
 8002792:	e016      	b.n	80027c2 <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	4a45      	ldr	r2, [pc, #276]	; (80028ac <SpiritManagementSetFrequencyBase+0x1f0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d803      	bhi.n	80027a4 <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800279c:	2000      	movs	r0, #0
 800279e:	f7ff fe2f 	bl	8002400 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80027a2:	e00e      	b.n	80027c2 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80027a4:	2001      	movs	r0, #1
 80027a6:	f7ff fe2b 	bl	8002400 <SpiritCalibrationSelectVco>
    break;
 80027aa:	e00a      	b.n	80027c2 <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	4a40      	ldr	r2, [pc, #256]	; (80028b0 <SpiritManagementSetFrequencyBase+0x1f4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d803      	bhi.n	80027bc <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f7ff fe23 	bl	8002400 <SpiritCalibrationSelectVco>
 80027ba:	e002      	b.n	80027c2 <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 80027bc:	2001      	movs	r0, #1
 80027be:	f7ff fe1f 	bl	8002400 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 80027c2:	6978      	ldr	r0, [r7, #20]
 80027c4:	f000 fee8 	bl	8003598 <SpiritRadioSearchWCP>
 80027c8:	4603      	mov	r3, r0
 80027ca:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7fd fe99 	bl	8000504 <__aeabi_ui2d>
 80027d2:	4604      	mov	r4, r0
 80027d4:	460d      	mov	r5, r1
 80027d6:	7cfb      	ldrb	r3, [r7, #19]
 80027d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80027dc:	4935      	ldr	r1, [pc, #212]	; (80028b4 <SpiritManagementSetFrequencyBase+0x1f8>)
 80027de:	5c8a      	ldrb	r2, [r1, r2]
 80027e0:	fb02 f303 	mul.w	r3, r2, r3
 80027e4:	049b      	lsls	r3, r3, #18
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fd fe9c 	bl	8000524 <__aeabi_i2d>
 80027ec:	4680      	mov	r8, r0
 80027ee:	4689      	mov	r9, r1
 80027f0:	f001 fe56 	bl	80044a0 <SpiritRadioGetXtalFrequency>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fe84 	bl	8000504 <__aeabi_ui2d>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4640      	mov	r0, r8
 8002802:	4649      	mov	r1, r9
 8002804:	f7fe f822 	bl	800084c <__aeabi_ddiv>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4620      	mov	r0, r4
 800280e:	4629      	mov	r1, r5
 8002810:	f7fd fef2 	bl	80005f8 <__aeabi_dmul>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	f7fe f8fe 	bl	8000a1c <__aeabi_d2uiz>
 8002820:	4603      	mov	r3, r0
 8002822:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	0d5b      	lsrs	r3, r3, #21
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	b2da      	uxtb	r2, r3
 8002830:	7cbb      	ldrb	r3, [r7, #18]
 8002832:	015b      	lsls	r3, r3, #5
 8002834:	b2db      	uxtb	r3, r3
 8002836:	4313      	orrs	r3, r2
 8002838:	b2db      	uxtb	r3, r3
 800283a:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	0b5b      	lsrs	r3, r3, #13
 8002840:	b2db      	uxtb	r3, r3
 8002842:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	b2db      	uxtb	r3, r3
 800284a:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	b2da      	uxtb	r2, r3
 8002854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002858:	4917      	ldr	r1, [pc, #92]	; (80028b8 <SpiritManagementSetFrequencyBase+0x1fc>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	4313      	orrs	r3, r2
 800285e:	b2db      	uxtb	r3, r3
 8002860:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8002862:	f107 0308 	add.w	r3, r7, #8
 8002866:	461a      	mov	r2, r3
 8002868:	2104      	movs	r1, #4
 800286a:	2008      	movs	r0, #8
 800286c:	f001 fec8 	bl	8004600 <RadioSpiWriteRegisters>
 8002870:	4602      	mov	r2, r0
 8002872:	4b12      	ldr	r3, [pc, #72]	; (80028bc <SpiritManagementSetFrequencyBase+0x200>)
 8002874:	b212      	sxth	r2, r2
 8002876:	4611      	mov	r1, r2
 8002878:	7019      	strb	r1, [r3, #0]
 800287a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800287e:	705a      	strb	r2, [r3, #1]
}
 8002880:	bf00      	nop
 8002882:	3728      	adds	r7, #40	; 0x28
 8002884:	46bd      	mov	sp, r7
 8002886:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800288a:	bf00      	nop
 800288c:	2e5f5680 	.word	0x2e5f5680
 8002890:	390c2fe0 	.word	0x390c2fe0
 8002894:	1701e47f 	.word	0x1701e47f
 8002898:	1c146a60 	.word	0x1c146a60
 800289c:	11d260bf 	.word	0x11d260bf
 80028a0:	14ced7e0 	.word	0x14ced7e0
 80028a4:	099cf4e1 	.word	0x099cf4e1
 80028a8:	1339e9c3 	.word	0x1339e9c3
 80028ac:	19a28d05 	.word	0x19a28d05
 80028b0:	33451a0a 	.word	0x33451a0a
 80028b4:	0800c450 	.word	0x0800c450
 80028b8:	0800c44c 	.word	0x0800c44c
 80028bc:	200027d0 	.word	0x200027d0

080028c0 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 80028ce:	f001 fde7 	bl	80044a0 <SpiritRadioGetXtalFrequency>
 80028d2:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4a57      	ldr	r2, [pc, #348]	; (8002a38 <SpiritManagementWaVcoCalibration+0x178>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d90f      	bls.n	8002900 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 80028e0:	f001 fd6a 	bl	80043b8 <SpiritRadioGetRefDiv>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10a      	bne.n	8002900 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 80028ee:	f001 f8d5 	bl	8003a9c <SpiritRadioGetFrequencyBase>
 80028f2:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 80028f4:	2001      	movs	r0, #1
 80028f6:	f001 fd2f 	bl	8004358 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff fede 	bl	80026bc <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8002900:	f001 f8cc 	bl	8003a9c <SpiritRadioGetFrequencyBase>
 8002904:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 8002906:	2325      	movs	r3, #37	; 0x25
 8002908:	707b      	strb	r3, [r7, #1]
 800290a:	1c7b      	adds	r3, r7, #1
 800290c:	461a      	mov	r2, r3
 800290e:	2101      	movs	r1, #1
 8002910:	20a1      	movs	r0, #161	; 0xa1
 8002912:	f001 fe75 	bl	8004600 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 8002916:	2001      	movs	r0, #1
 8002918:	f7ff fcb6 	bl	8002288 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 800291c:	f001 fe3e 	bl	800459c <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 8002920:	4b46      	ldr	r3, [pc, #280]	; (8002a3c <SpiritManagementWaVcoCalibration+0x17c>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b40      	cmp	r3, #64	; 0x40
 800292c:	d10d      	bne.n	800294a <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 800292e:	2301      	movs	r3, #1
 8002930:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 8002932:	2062      	movs	r0, #98	; 0x62
 8002934:	f7ff fd8e 	bl	8002454 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 8002938:	f001 fe30 	bl	800459c <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 800293c:	4b3f      	ldr	r3, [pc, #252]	; (8002a3c <SpiritManagementWaVcoCalibration+0x17c>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b03      	cmp	r3, #3
 8002948:	d1f6      	bne.n	8002938 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 800294a:	2066      	movs	r0, #102	; 0x66
 800294c:	f7ff fd82 	bl	8002454 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002950:	2300      	movs	r3, #0
 8002952:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002954:	f001 fe22 	bl	800459c <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002958:	4b38      	ldr	r3, [pc, #224]	; (8002a3c <SpiritManagementWaVcoCalibration+0x17c>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b13      	cmp	r3, #19
 8002964:	d106      	bne.n	8002974 <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 8002966:	7b7b      	ldrb	r3, [r7, #13]
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	737a      	strb	r2, [r7, #13]
 800296c:	2b05      	cmp	r3, #5
 800296e:	d101      	bne.n	8002974 <SpiritManagementWaVcoCalibration+0xb4>
 8002970:	2301      	movs	r3, #1
 8002972:	e05d      	b.n	8002a30 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002974:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <SpiritManagementWaVcoCalibration+0x17c>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b0f      	cmp	r3, #15
 8002980:	d1e8      	bne.n	8002954 <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 8002982:	f7ff fcb9 	bl	80022f8 <SpiritCalibrationGetVcoCalData>
 8002986:	4603      	mov	r3, r0
 8002988:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 800298a:	2062      	movs	r0, #98	; 0x62
 800298c:	f7ff fd62 	bl	8002454 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002990:	f001 fe04 	bl	800459c <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8002994:	4b29      	ldr	r3, [pc, #164]	; (8002a3c <SpiritManagementWaVcoCalibration+0x17c>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d1f6      	bne.n	8002990 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 80029a2:	2065      	movs	r0, #101	; 0x65
 80029a4:	f7ff fd56 	bl	8002454 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80029ac:	f001 fdf6 	bl	800459c <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80029b0:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <SpiritManagementWaVcoCalibration+0x17c>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b13      	cmp	r3, #19
 80029bc:	d106      	bne.n	80029cc <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 80029be:	7b7b      	ldrb	r3, [r7, #13]
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	737a      	strb	r2, [r7, #13]
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	d101      	bne.n	80029cc <SpiritManagementWaVcoCalibration+0x10c>
 80029c8:	2301      	movs	r3, #1
 80029ca:	e031      	b.n	8002a30 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80029cc:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <SpiritManagementWaVcoCalibration+0x17c>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b0f      	cmp	r3, #15
 80029d8:	d1e8      	bne.n	80029ac <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 80029da:	f7ff fc8d 	bl	80022f8 <SpiritCalibrationGetVcoCalData>
 80029de:	4603      	mov	r3, r0
 80029e0:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 80029e2:	2062      	movs	r0, #98	; 0x62
 80029e4:	f7ff fd36 	bl	8002454 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 80029e8:	f001 fdd8 	bl	800459c <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 80029ec:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <SpiritManagementWaVcoCalibration+0x17c>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d1f6      	bne.n	80029e8 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 80029fa:	7bbb      	ldrb	r3, [r7, #14]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d102      	bne.n	8002a06 <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8002a00:	2063      	movs	r0, #99	; 0x63
 8002a02:	f7ff fd27 	bl	8002454 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f7ff fc3e 	bl	8002288 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 8002a12:	2000      	movs	r0, #0
 8002a14:	f001 fca0 	bl	8004358 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff fe4f 	bl	80026bc <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fc85 	bl	8002330 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 8002a26:	78bb      	ldrb	r3, [r7, #2]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fcb5 	bl	8002398 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	01c9c380 	.word	0x01c9c380
 8002a3c:	200027d0 	.word	0x200027d0

08002a40 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 8002a46:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <SpiritManagementWaCmdStrobeTx+0x60>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d023      	beq.n	8002a98 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 8002a50:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <SpiritManagementWaCmdStrobeTx+0x64>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <SpiritManagementWaCmdStrobeTx+0x68>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d908      	bls.n	8002a6c <SpiritManagementWaCmdStrobeTx+0x2c>
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <SpiritManagementWaCmdStrobeTx+0x64>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a13      	ldr	r2, [pc, #76]	; (8002aac <SpiritManagementWaCmdStrobeTx+0x6c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d803      	bhi.n	8002a6c <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 8002a64:	20c0      	movs	r0, #192	; 0xc0
 8002a66:	f001 fbed 	bl	8004244 <SpiritRadioSetPACwc>
 8002a6a:	e002      	b.n	8002a72 <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f001 fbe9 	bl	8004244 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 8002a72:	2311      	movs	r3, #17
 8002a74:	71fb      	strb	r3, [r7, #7]
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	20a9      	movs	r0, #169	; 0xa9
 8002a7e:	f001 fdbf 	bl	8004600 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 8002a82:	2320      	movs	r3, #32
 8002a84:	71fb      	strb	r3, [r7, #7]
 8002a86:	1dfb      	adds	r3, r7, #7
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	20a5      	movs	r0, #165	; 0xa5
 8002a8e:	f001 fdb7 	bl	8004600 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 8002a92:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <SpiritManagementWaCmdStrobeTx+0x60>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
  }
}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	20000348 	.word	0x20000348
 8002aa4:	200027c8 	.word	0x200027c8
 8002aa8:	08f0d17f 	.word	0x08f0d17f
 8002aac:	1c03a180 	.word	0x1c03a180

08002ab0 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d00d      	beq.n	8002adc <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 8002ac0:	2398      	movs	r3, #152	; 0x98
 8002ac2:	71fb      	strb	r3, [r7, #7]
 8002ac4:	1dfb      	adds	r3, r7, #7
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2101      	movs	r1, #1
 8002aca:	20a5      	movs	r0, #165	; 0xa5
 8002acc:	f001 fd98 	bl	8004600 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f001 fbb7 	bl	8004244 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 8002ad6:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
  }
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20000348 	.word	0x20000348

08002ae8 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <SpiritManagementWaTRxFcMem+0x20>)
 8002af2:	2202      	movs	r2, #2
 8002af4:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 8002af6:	4a05      	ldr	r2, [pc, #20]	; (8002b0c <SpiritManagementWaTRxFcMem+0x24>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6013      	str	r3, [r2, #0]
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	20000348 	.word	0x20000348
 8002b0c:	200027c8 	.word	0x200027c8

08002b10 <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 8002b16:	23ca      	movs	r3, #202	; 0xca
 8002b18:	71fb      	strb	r3, [r7, #7]
 8002b1a:	1dfb      	adds	r3, r7, #7
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2101      	movs	r1, #1
 8002b20:	20b2      	movs	r0, #178	; 0xb2
 8002b22:	f001 fd6d 	bl	8004600 <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8002b26:	2304      	movs	r3, #4
 8002b28:	71fb      	strb	r3, [r7, #7]
 8002b2a:	1dfb      	adds	r3, r7, #7
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2101      	movs	r1, #1
 8002b30:	20a8      	movs	r0, #168	; 0xa8
 8002b32:	f001 fd65 	bl	8004600 <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 8002b36:	1dfb      	adds	r3, r7, #7
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	20a8      	movs	r0, #168	; 0xa8
 8002b3e:	f001 fdab 	bl	8004698 <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8002b42:	2300      	movs	r3, #0
 8002b44:	71fb      	strb	r3, [r7, #7]
 8002b46:	1dfb      	adds	r3, r7, #7
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	20a8      	movs	r0, #168	; 0xa8
 8002b4e:	f001 fd57 	bl	8004600 <RadioSpiWriteRegisters>
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002b62:	1dfb      	adds	r3, r7, #7
 8002b64:	461a      	mov	r2, r3
 8002b66:	2101      	movs	r1, #1
 8002b68:	2030      	movs	r0, #48	; 0x30
 8002b6a:	f001 fd95 	bl	8004698 <RadioSpiReadRegisters>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <SpiritPktCommonGetControlLength+0x34>)
 8002b72:	b212      	sxth	r2, r2
 8002b74:	4611      	mov	r1, r2
 8002b76:	7019      	strb	r1, [r3, #0]
 8002b78:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b7c:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	b2db      	uxtb	r3, r3

}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	200027d0 	.word	0x200027d0

08002b94 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002b9e:	f107 030f 	add.w	r3, r7, #15
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	204f      	movs	r0, #79	; 0x4f
 8002ba8:	f001 fd76 	bl	8004698 <RadioSpiReadRegisters>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002bb0:	b212      	sxth	r2, r2
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	7019      	strb	r1, [r3, #0]
 8002bb6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bba:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d105      	bne.n	8002bce <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	73fb      	strb	r3, [r7, #15]
 8002bcc:	e004      	b.n	8002bd8 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002bd8:	f107 030f 	add.w	r3, r7, #15
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2101      	movs	r1, #1
 8002be0:	204f      	movs	r0, #79	; 0x4f
 8002be2:	f001 fd0d 	bl	8004600 <RadioSpiWriteRegisters>
 8002be6:	4602      	mov	r2, r0
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002bea:	b212      	sxth	r2, r2
 8002bec:	4611      	mov	r1, r2
 8002bee:	7019      	strb	r1, [r3, #0]
 8002bf0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bf4:	705a      	strb	r2, [r3, #1]

}
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200027d0 	.word	0x200027d0

08002c04 <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8002c0e:	1dfb      	adds	r3, r7, #7
 8002c10:	461a      	mov	r2, r3
 8002c12:	2101      	movs	r1, #1
 8002c14:	204b      	movs	r0, #75	; 0x4b
 8002c16:	f001 fcf3 	bl	8004600 <RadioSpiWriteRegisters>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <SpiritPktCommonSetDestinationAddress+0x30>)
 8002c1e:	b212      	sxth	r2, r2
 8002c20:	4611      	mov	r1, r2
 8002c22:	7019      	strb	r1, [r3, #0]
 8002c24:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c28:	705a      	strb	r2, [r3, #1]

}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	200027d0 	.word	0x200027d0

08002c38 <SpiritPktCommonGetBroadcastAddress>:
 * @brief  Returns the broadcast address.
 * @param  None.
 * @retval uint8_t Broadcast address.
 */
uint8_t SpiritPktCommonGetBroadcastAddress(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads value on the PCKT_FLT_GOALS_BROADCAST register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 1, &tempRegValue);
 8002c3e:	1dfb      	adds	r3, r7, #7
 8002c40:	461a      	mov	r2, r3
 8002c42:	2101      	movs	r1, #1
 8002c44:	204c      	movs	r0, #76	; 0x4c
 8002c46:	f001 fd27 	bl	8004698 <RadioSpiReadRegisters>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <SpiritPktCommonGetBroadcastAddress+0x2c>)
 8002c4e:	b212      	sxth	r2, r2
 8002c50:	4611      	mov	r1, r2
 8002c52:	7019      	strb	r1, [r3, #0]
 8002c54:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c58:	705a      	strb	r2, [r3, #1]

  /* Return value */
  return tempRegValue;
 8002c5a:	79fb      	ldrb	r3, [r7, #7]

}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	200027d0 	.word	0x200027d0

08002c68 <SpiritPktCommonGetReceivedDestAddress>:
 * @brief  Returns the destination address of the received packet.
 * @param  None.
 * @retval uint8_t Destination address of the received address.
 */
uint8_t SpiritPktCommonGetReceivedDestAddress(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD0 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD0_BASE, 1, &tempRegValue);
 8002c6e:	1dfb      	adds	r3, r7, #7
 8002c70:	461a      	mov	r2, r3
 8002c72:	2101      	movs	r1, #1
 8002c74:	20d3      	movs	r0, #211	; 0xd3
 8002c76:	f001 fd0f 	bl	8004698 <RadioSpiReadRegisters>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <SpiritPktCommonGetReceivedDestAddress+0x2c>)
 8002c7e:	b212      	sxth	r2, r2
 8002c80:	4611      	mov	r1, r2
 8002c82:	7019      	strb	r1, [r3, #0]
 8002c84:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c88:	705a      	strb	r2, [r3, #1]

  /* Return value */
  return tempRegValue;
 8002c8a:	79fb      	ldrb	r3, [r7, #7]

}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	200027d0 	.word	0x200027d0

08002c98 <SpiritPktCommonGetReceivedSourceAddress>:
 * @brief  Returns the source address of the received packet.
 * @param  None.
 * @retval uint8_t Source address of the received packet.
 */
uint8_t SpiritPktCommonGetReceivedSourceAddress(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD1 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD1_BASE, 1, &tempRegValue);
 8002c9e:	1dfb      	adds	r3, r7, #7
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	20d2      	movs	r0, #210	; 0xd2
 8002ca6:	f001 fcf7 	bl	8004698 <RadioSpiReadRegisters>
 8002caa:	4602      	mov	r2, r0
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <SpiritPktCommonGetReceivedSourceAddress+0x2c>)
 8002cae:	b212      	sxth	r2, r2
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	7019      	strb	r1, [r3, #0]
 8002cb4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002cb8:	705a      	strb	r2, [r3, #1]

  /* Returns value */
  return tempRegValue;
 8002cba:	79fb      	ldrb	r3, [r7, #7]

}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	200027d0 	.word	0x200027d0

08002cc8 <SpiritPktStackInit>:
 * @param  pxPktStackInit STack packet init structure.
 *         This parameter is a pointer to @ref PktStackInit.
 * @retval None.
 */
void SpiritPktStackInit(PktStackInit* pxPktStackInit)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackInit->xDataWhitening));
  s_assert_param(IS_STACK_CONTROL_LENGTH(pxPktStackInit->xControlLength));


  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002cd0:	f107 0308 	add.w	r3, r7, #8
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	2051      	movs	r0, #81	; 0x51
 8002cda:	f001 fcdd 	bl	8004698 <RadioSpiReadRegisters>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	4b60      	ldr	r3, [pc, #384]	; (8002e64 <SpiritPktStackInit+0x19c>)
 8002ce2:	b212      	sxth	r2, r2
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	7019      	strb	r1, [r3, #0]
 8002ce8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002cec:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 8002cee:	7a3b      	ldrb	r3, [r7, #8]
 8002cf0:	f023 0320 	bic.w	r3, r3, #32
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	723b      	strb	r3, [r7, #8]

  /* Always (!) set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8002cf8:	7a3b      	ldrb	r3, [r7, #8]
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002d02:	f107 0308 	add.w	r3, r7, #8
 8002d06:	461a      	mov	r2, r3
 8002d08:	2101      	movs	r1, #1
 8002d0a:	2051      	movs	r0, #81	; 0x51
 8002d0c:	f001 fc78 	bl	8004600 <RadioSpiWriteRegisters>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b54      	ldr	r3, [pc, #336]	; (8002e64 <SpiritPktStackInit+0x19c>)
 8002d14:	b212      	sxth	r2, r2
 8002d16:	4611      	mov	r1, r2
 8002d18:	7019      	strb	r1, [r3, #0]
 8002d1a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d1e:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002d20:	f107 0308 	add.w	r3, r7, #8
 8002d24:	461a      	mov	r2, r3
 8002d26:	2101      	movs	r1, #1
 8002d28:	204f      	movs	r0, #79	; 0x4f
 8002d2a:	f001 fcb5 	bl	8004698 <RadioSpiReadRegisters>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4b4c      	ldr	r3, [pc, #304]	; (8002e64 <SpiritPktStackInit+0x19c>)
 8002d32:	b212      	sxth	r2, r2
 8002d34:	4611      	mov	r1, r2
 8002d36:	7019      	strb	r1, [r3, #0]
 8002d38:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d3c:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 8002d3e:	7a3b      	ldrb	r3, [r7, #8]
 8002d40:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002d48:	f107 0308 	add.w	r3, r7, #8
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2101      	movs	r1, #1
 8002d50:	204f      	movs	r0, #79	; 0x4f
 8002d52:	f001 fc55 	bl	8004600 <RadioSpiWriteRegisters>
 8002d56:	4602      	mov	r2, r0
 8002d58:	4b42      	ldr	r3, [pc, #264]	; (8002e64 <SpiritPktStackInit+0x19c>)
 8002d5a:	b212      	sxth	r2, r2
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	7019      	strb	r1, [r3, #0]
 8002d60:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d64:	705a      	strb	r2, [r3, #1]


  /* Address and control length setting: source and destination address are always present so ADDRESS_LENGTH=2 */
  tempRegValue[0] = 0x10 | ((uint8_t) pxPktStackInit->xControlLength);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7adb      	ldrb	r3, [r3, #11]
 8002d6a:	f043 0310 	orr.w	r3, r3, #16
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	723b      	strb	r3, [r7, #8]


  /* Packet format and width length setting */
  pxPktStackInit->cPktLengthWidth == 0 ? pxPktStackInit->cPktLengthWidth=1 : pxPktStackInit->cPktLengthWidth;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7a5b      	ldrb	r3, [r3, #9]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <SpiritPktStackInit+0xb8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_STACK) | ((uint8_t)(pxPktStackInit->cPktLengthWidth-1));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	7a5b      	ldrb	r3, [r3, #9]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	781a      	ldrb	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	785b      	ldrb	r3, [r3, #1]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktStackInit->xFixVarLength);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 8002da0:	4313      	orrs	r3, r2
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktStackInit->xCrcMode;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7a9b      	ldrb	r3, [r3, #10]
 8002daa:	72fb      	strb	r3, [r7, #11]

  if(pxPktStackInit->xDataWhitening == S_ENABLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	7b5b      	ldrb	r3, [r3, #13]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d104      	bne.n	8002dbe <SpiritPktStackInit+0xf6>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8002db4:	7afb      	ldrb	r3, [r7, #11]
 8002db6:	f043 0310 	orr.w	r3, r3, #16
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktStackInit->xFec == S_ENABLE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	7b1b      	ldrb	r3, [r3, #12]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d104      	bne.n	8002dd0 <SpiritPktStackInit+0x108>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8002dc6:	7afb      	ldrb	r3, [r7, #11]
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 8002dd0:	f107 0308 	add.w	r3, r7, #8
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2104      	movs	r1, #4
 8002dd8:	2030      	movs	r0, #48	; 0x30
 8002dda:	f001 fc11 	bl	8004600 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
 8002de2:	e01d      	b.n	8002e20 <SpiritPktStackInit+0x158>
  {
    if(i<3-(pxPktStackInit->xSyncLength >>1))
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	785b      	ldrb	r3, [r3, #1]
 8002dea:	085b      	lsrs	r3, r3, #1
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f1c3 0303 	rsb	r3, r3, #3
 8002df2:	429a      	cmp	r2, r3
 8002df4:	da06      	bge.n	8002e04 <SpiritPktStackInit+0x13c>
    {
      tempRegValue[i]=0;
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	3310      	adds	r3, #16
 8002dfa:	443b      	add	r3, r7
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002e02:	e00a      	b.n	8002e1a <SpiritPktStackInit+0x152>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktStackInit->lSyncWords>>(8*i));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	40da      	lsrs	r2, r3
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	3310      	adds	r3, #16
 8002e14:	443b      	add	r3, r7
 8002e16:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d9de      	bls.n	8002de4 <SpiritPktStackInit+0x11c>
    }
  }

  /* Enables or disables the CRC check */
  if(pxPktStackInit->xCrcMode == PKT_NO_CRC)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	7a9b      	ldrb	r3, [r3, #10]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d103      	bne.n	8002e36 <SpiritPktStackInit+0x16e>
  {
    SpiritPktStackFilterOnCrc(S_DISABLE);
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f7ff feb0 	bl	8002b94 <SpiritPktCommonFilterOnCrc>
 8002e34:	e002      	b.n	8002e3c <SpiritPktStackInit+0x174>
  }
  else
  {
    SpiritPktStackFilterOnCrc(S_ENABLE);
 8002e36:	2001      	movs	r0, #1
 8002e38:	f7ff feac 	bl	8002b94 <SpiritPktCommonFilterOnCrc>
  }

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002e3c:	f107 0308 	add.w	r3, r7, #8
 8002e40:	461a      	mov	r2, r3
 8002e42:	2104      	movs	r1, #4
 8002e44:	2036      	movs	r0, #54	; 0x36
 8002e46:	f001 fbdb 	bl	8004600 <RadioSpiWriteRegisters>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <SpiritPktStackInit+0x19c>)
 8002e4e:	b212      	sxth	r2, r2
 8002e50:	4611      	mov	r1, r2
 8002e52:	7019      	strb	r1, [r3, #0]
 8002e54:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e58:	705a      	strb	r2, [r3, #1]

}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	200027d0 	.word	0x200027d0

08002e68 <SpiritPktStackAddressesInit>:
 * @param  pxPktStackAddresses STack packet addresses init structure.
 *         This parameter is a pointer to @ref PktStackAddressesInit .
 * @retval None.
 */
void SpiritPktStackAddressesInit(PktStackAddressesInit* pxPktStackAddresses)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMyAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnBroadcastAddress));
  
  /* Reads the filtering options ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002e70:	f107 030c 	add.w	r3, r7, #12
 8002e74:	461a      	mov	r2, r3
 8002e76:	2101      	movs	r1, #1
 8002e78:	204f      	movs	r0, #79	; 0x4f
 8002e7a:	f001 fc0d 	bl	8004698 <RadioSpiReadRegisters>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <SpiritPktStackAddressesInit+0xd8>)
 8002e82:	b212      	sxth	r2, r2
 8002e84:	4611      	mov	r1, r2
 8002e86:	7019      	strb	r1, [r3, #0]
 8002e88:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e8c:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktStackAddresses->xFilterOnMyAddress == S_ENABLE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d105      	bne.n	8002ea2 <SpiritPktStackAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002e96:	7b3b      	ldrb	r3, [r7, #12]
 8002e98:	f043 0308 	orr.w	r3, r3, #8
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	733b      	strb	r3, [r7, #12]
 8002ea0:	e004      	b.n	8002eac <SpiritPktStackAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002ea2:	7b3b      	ldrb	r3, [r7, #12]
 8002ea4:	f023 0308 	bic.w	r3, r3, #8
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktStackAddresses->xFilterOnMulticastAddress == S_ENABLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	789b      	ldrb	r3, [r3, #2]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d105      	bne.n	8002ec0 <SpiritPktStackAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002eb4:	7b3b      	ldrb	r3, [r7, #12]
 8002eb6:	f043 0304 	orr.w	r3, r3, #4
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	733b      	strb	r3, [r7, #12]
 8002ebe:	e004      	b.n	8002eca <SpiritPktStackAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002ec0:	7b3b      	ldrb	r3, [r7, #12]
 8002ec2:	f023 0304 	bic.w	r3, r3, #4
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktStackAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	791b      	ldrb	r3, [r3, #4]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d105      	bne.n	8002ede <SpiritPktStackAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002ed2:	7b3b      	ldrb	r3, [r7, #12]
 8002ed4:	f043 0302 	orr.w	r3, r3, #2
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	733b      	strb	r3, [r7, #12]
 8002edc:	e004      	b.n	8002ee8 <SpiritPktStackAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002ede:	7b3b      	ldrb	r3, [r7, #12]
 8002ee0:	f023 0302 	bic.w	r3, r3, #2
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes value on the register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002ee8:	f107 030c 	add.w	r3, r7, #12
 8002eec:	461a      	mov	r2, r3
 8002eee:	2101      	movs	r1, #1
 8002ef0:	204f      	movs	r0, #79	; 0x4f
 8002ef2:	f001 fb85 	bl	8004600 <RadioSpiWriteRegisters>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <SpiritPktStackAddressesInit+0xd8>)
 8002efa:	b212      	sxth	r2, r2
 8002efc:	4611      	mov	r1, r2
 8002efe:	7019      	strb	r1, [r3, #0]
 8002f00:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f04:	705a      	strb	r2, [r3, #1]
  
  /* Fills array with the addresses passed in the structure */
  tempRegValue[0] = pxPktStackAddresses->cBroadcastAddress;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	795b      	ldrb	r3, [r3, #5]
 8002f0a:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktStackAddresses->cMulticastAddress;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	78db      	ldrb	r3, [r3, #3]
 8002f10:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktStackAddresses->cMyAddress;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	785b      	ldrb	r3, [r3, #1]
 8002f16:	73bb      	strb	r3, [r7, #14]
  
  /* Writes them on the addresses registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002f18:	f107 030c 	add.w	r3, r7, #12
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2103      	movs	r1, #3
 8002f20:	204c      	movs	r0, #76	; 0x4c
 8002f22:	f001 fb6d 	bl	8004600 <RadioSpiWriteRegisters>
 8002f26:	4602      	mov	r2, r0
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <SpiritPktStackAddressesInit+0xd8>)
 8002f2a:	b212      	sxth	r2, r2
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	7019      	strb	r1, [r3, #0]
 8002f30:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f34:	705a      	strb	r2, [r3, #1]
  
}
 8002f36:	bf00      	nop
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	200027d0 	.word	0x200027d0

08002f44 <SpiritPktStackLlpInit>:
* @param  pxPktStackLlpInit STack packet LLP init structure.
*         This parameter is a pointer to @ref PktStackLlpInit.
* @retval None.
*/
void SpiritPktStackLlpInit(PktStackLlpInit* pxPktStackLlpInit)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_STACK_NMAX_RETX(pxPktStackLlpInit->xNMaxRetx));
  /* check if piggybacking is enabled and autoack is disabled */
  s_assert_param(!(pxPktStackLlpInit->xPiggybacking==S_ENABLE && pxPktStackLlpInit->xAutoAck==S_DISABLE));

  /* Piggybacking mechanism setting on the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 8002f4c:	f107 030c 	add.w	r3, r7, #12
 8002f50:	461a      	mov	r2, r3
 8002f52:	2102      	movs	r1, #2
 8002f54:	2051      	movs	r0, #81	; 0x51
 8002f56:	f001 fb9f 	bl	8004698 <RadioSpiReadRegisters>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	4b21      	ldr	r3, [pc, #132]	; (8002fe4 <SpiritPktStackLlpInit+0xa0>)
 8002f5e:	b212      	sxth	r2, r2
 8002f60:	4611      	mov	r1, r2
 8002f62:	7019      	strb	r1, [r3, #0]
 8002f64:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f68:	705a      	strb	r2, [r3, #1]
  if(pxPktStackLlpInit->xPiggybacking == S_ENABLE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	785b      	ldrb	r3, [r3, #1]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d105      	bne.n	8002f7e <SpiritPktStackLlpInit+0x3a>
  {
    tempRegValue[0] |= PROTOCOL1_PIGGYBACKING_MASK;
 8002f72:	7b3b      	ldrb	r3, [r7, #12]
 8002f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	733b      	strb	r3, [r7, #12]
 8002f7c:	e004      	b.n	8002f88 <SpiritPktStackLlpInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PROTOCOL1_PIGGYBACKING_MASK;
 8002f7e:	7b3b      	ldrb	r3, [r7, #12]
 8002f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	733b      	strb	r3, [r7, #12]
  }

  /* RX and TX autoack mechanisms setting on the PROTOCOL0 register */
  if(pxPktStackLlpInit->xAutoAck == S_ENABLE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d105      	bne.n	8002f9c <SpiritPktStackLlpInit+0x58>
  {
    tempRegValue[1] |= PROTOCOL0_AUTO_ACK_MASK;
 8002f90:	7b7b      	ldrb	r3, [r7, #13]
 8002f92:	f043 0304 	orr.w	r3, r3, #4
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	737b      	strb	r3, [r7, #13]
 8002f9a:	e004      	b.n	8002fa6 <SpiritPktStackLlpInit+0x62>
  }
  else
  {
    tempRegValue[1] &= ~PROTOCOL0_AUTO_ACK_MASK;
 8002f9c:	7b7b      	ldrb	r3, [r7, #13]
 8002f9e:	f023 0304 	bic.w	r3, r3, #4
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	737b      	strb	r3, [r7, #13]
  }

  /* Max number of retransmission setting */
  tempRegValue[1] &= ~PROTOCOL0_NMAX_RETX_MASK;
 8002fa6:	7b7b      	ldrb	r3, [r7, #13]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= pxPktStackLlpInit->xNMaxRetx;
 8002fb0:	7b7a      	ldrb	r2, [r7, #13]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	789b      	ldrb	r3, [r3, #2]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	737b      	strb	r3, [r7, #13]

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 8002fbc:	f107 030c 	add.w	r3, r7, #12
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	2051      	movs	r0, #81	; 0x51
 8002fc6:	f001 fb1b 	bl	8004600 <RadioSpiWriteRegisters>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <SpiritPktStackLlpInit+0xa0>)
 8002fce:	b212      	sxth	r2, r2
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	7019      	strb	r1, [r3, #0]
 8002fd4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002fd8:	705a      	strb	r2, [r3, #1]

}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200027d0 	.word	0x200027d0

08002fe8 <SpiritPktStackSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter can be any value of uint16_t.
 * @retval None.
 */
void SpiritPktStackSetPayloadLength(uint16_t nPayloadLength)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];

  /* Computes the oversize (address + control) size */
  uint16_t overSize = 2 + (uint16_t) SpiritPktStackGetControlLength();
 8002ff2:	f7ff fdb3 	bl	8002b5c <SpiritPktCommonGetControlLength>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from lPayloadLength */
  tempRegValue[1]=STACK_BUILD_PCKTLEN0(nPayloadLength+overSize);
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	b2da      	uxtb	r2, r3
 8003002:	89fb      	ldrh	r3, [r7, #14]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	4413      	add	r3, r2
 8003008:	b2db      	uxtb	r3, r3
 800300a:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from lPayloadLength */
  tempRegValue[0]=STACK_BUILD_PCKTLEN1(nPayloadLength+overSize);
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	89fb      	ldrh	r3, [r7, #14]
 8003010:	4413      	add	r3, r2
 8003012:	121b      	asrs	r3, r3, #8
 8003014:	b2db      	uxtb	r3, r3
 8003016:	733b      	strb	r3, [r7, #12]

  /* Writes the value on the PCKTLENx registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8003018:	f107 030c 	add.w	r3, r7, #12
 800301c:	461a      	mov	r2, r3
 800301e:	2102      	movs	r1, #2
 8003020:	2034      	movs	r0, #52	; 0x34
 8003022:	f001 faed 	bl	8004600 <RadioSpiWriteRegisters>
 8003026:	4602      	mov	r2, r0
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <SpiritPktStackSetPayloadLength+0x58>)
 800302a:	b212      	sxth	r2, r2
 800302c:	4611      	mov	r1, r2
 800302e:	7019      	strb	r1, [r3, #0]
 8003030:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003034:	705a      	strb	r2, [r3, #1]

}
 8003036:	bf00      	nop
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	200027d0 	.word	0x200027d0

08003044 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 800304e:	f107 030f 	add.w	r3, r7, #15
 8003052:	461a      	mov	r2, r3
 8003054:	2101      	movs	r1, #1
 8003056:	203a      	movs	r0, #58	; 0x3a
 8003058:	f001 fb1e 	bl	8004698 <RadioSpiReadRegisters>
 800305c:	4602      	mov	r2, r0
 800305e:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <SpiritQiSqiCheck+0x6c>)
 8003060:	b212      	sxth	r2, r2
 8003062:	4611      	mov	r1, r2
 8003064:	7019      	strb	r1, [r3, #0]
 8003066:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800306a:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d105      	bne.n	800307e <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	f043 0302 	orr.w	r3, r3, #2
 8003078:	b2db      	uxtb	r3, r3
 800307a:	73fb      	strb	r3, [r7, #15]
 800307c:	e004      	b.n	8003088 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	f023 0302 	bic.w	r3, r3, #2
 8003084:	b2db      	uxtb	r3, r3
 8003086:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8003088:	f107 030f 	add.w	r3, r7, #15
 800308c:	461a      	mov	r2, r3
 800308e:	2101      	movs	r1, #1
 8003090:	203a      	movs	r0, #58	; 0x3a
 8003092:	f001 fab5 	bl	8004600 <RadioSpiWriteRegisters>
 8003096:	4602      	mov	r2, r0
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <SpiritQiSqiCheck+0x6c>)
 800309a:	b212      	sxth	r2, r2
 800309c:	4611      	mov	r1, r2
 800309e:	7019      	strb	r1, [r3, #0]
 80030a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80030a4:	705a      	strb	r2, [r3, #1]

}
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	200027d0 	.word	0x200027d0

080030b4 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 80030be:	f107 030f 	add.w	r3, r7, #15
 80030c2:	461a      	mov	r2, r3
 80030c4:	2101      	movs	r1, #1
 80030c6:	203a      	movs	r0, #58	; 0x3a
 80030c8:	f001 fae6 	bl	8004698 <RadioSpiReadRegisters>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b12      	ldr	r3, [pc, #72]	; (8003118 <SpiritQiSetSqiThreshold+0x64>)
 80030d0:	b212      	sxth	r2, r2
 80030d2:	4611      	mov	r1, r2
 80030d4:	7019      	strb	r1, [r3, #0]
 80030d6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80030da:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 80030e6:	7bfa      	ldrb	r2, [r7, #15]
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 80030f0:	f107 030f 	add.w	r3, r7, #15
 80030f4:	461a      	mov	r2, r3
 80030f6:	2101      	movs	r1, #1
 80030f8:	203a      	movs	r0, #58	; 0x3a
 80030fa:	f001 fa81 	bl	8004600 <RadioSpiWriteRegisters>
 80030fe:	4602      	mov	r2, r0
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <SpiritQiSetSqiThreshold+0x64>)
 8003102:	b212      	sxth	r2, r2
 8003104:	4611      	mov	r1, r2
 8003106:	7019      	strb	r1, [r3, #0]
 8003108:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800310c:	705a      	strb	r2, [r3, #1]

}
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200027d0 	.word	0x200027d0

0800311c <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3382      	adds	r3, #130	; 0x82
 8003128:	b2db      	uxtb	r3, r3
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	b2db      	uxtb	r3, r3
 800312e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8003130:	f107 030f 	add.w	r3, r7, #15
 8003134:	461a      	mov	r2, r3
 8003136:	2101      	movs	r1, #1
 8003138:	2022      	movs	r0, #34	; 0x22
 800313a:	f001 fa61 	bl	8004600 <RadioSpiWriteRegisters>
 800313e:	4602      	mov	r2, r0
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <SpiritQiSetRssiThresholddBm+0x3c>)
 8003142:	b212      	sxth	r2, r2
 8003144:	4611      	mov	r1, r2
 8003146:	7019      	strb	r1, [r3, #0]
 8003148:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800314c:	705a      	strb	r2, [r3, #1]

}
 800314e:	bf00      	nop
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	200027d0 	.word	0x200027d0

0800315c <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08c      	sub	sp, #48	; 0x30
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8003164:	23a0      	movs	r3, #160	; 0xa0
 8003166:	747b      	strb	r3, [r7, #17]
 8003168:	f107 0311 	add.w	r3, r7, #17
 800316c:	461a      	mov	r2, r3
 800316e:	2101      	movs	r1, #1
 8003170:	209f      	movs	r0, #159	; 0x9f
 8003172:	f001 fa45 	bl	8004600 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800317c:	ee07 3a90 	vmov	s15, r3
 8003180:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	ee07 3a90 	vmov	s15, r3
 800318c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003190:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003194:	eddf 6aae 	vldr	s13, [pc, #696]	; 8003450 <SpiritRadioInit+0x2f4>
 8003198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800319c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031a0:	ee17 3a90 	vmov	r3, s15
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 80031a6:	2063      	movs	r0, #99	; 0x63
 80031a8:	f001 fac2 	bl	8004730 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 80031ac:	2300      	movs	r3, #0
 80031ae:	73bb      	strb	r3, [r7, #14]
 80031b0:	e004      	b.n	80031bc <SpiritRadioInit+0x60>
 80031b2:	7bbb      	ldrb	r3, [r7, #14]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	3301      	adds	r3, #1
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	73bb      	strb	r3, [r7, #14]
 80031bc:	7bbb      	ldrb	r3, [r7, #14]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2bff      	cmp	r3, #255	; 0xff
 80031c2:	d1f6      	bne.n	80031b2 <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 80031c4:	f001 f9ea 	bl	800459c <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 80031c8:	4ba2      	ldr	r3, [pc, #648]	; (8003454 <SpiritRadioInit+0x2f8>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b40      	cmp	r3, #64	; 0x40
 80031d4:	d1ea      	bne.n	80031ac <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 80031d6:	4ba0      	ldr	r3, [pc, #640]	; (8003458 <SpiritRadioInit+0x2fc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4aa0      	ldr	r2, [pc, #640]	; (800345c <SpiritRadioInit+0x300>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d803      	bhi.n	80031e8 <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f001 f90b 	bl	80043fc <SpiritRadioSetDigDiv>
 80031e6:	e002      	b.n	80031ee <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 80031e8:	2001      	movs	r0, #1
 80031ea:	f001 f907 	bl	80043fc <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 80031ee:	2062      	movs	r0, #98	; 0x62
 80031f0:	f001 fa9e 	bl	8004730 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 80031f4:	2300      	movs	r3, #0
 80031f6:	737b      	strb	r3, [r7, #13]
 80031f8:	e004      	b.n	8003204 <SpiritRadioInit+0xa8>
 80031fa:	7b7b      	ldrb	r3, [r7, #13]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	3301      	adds	r3, #1
 8003200:	b2db      	uxtb	r3, r3
 8003202:	737b      	strb	r3, [r7, #13]
 8003204:	7b7b      	ldrb	r3, [r7, #13]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2bff      	cmp	r3, #255	; 0xff
 800320a:	d1f6      	bne.n	80031fa <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 800320c:	f001 f9c6 	bl	800459c <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8003210:	4b90      	ldr	r3, [pc, #576]	; (8003454 <SpiritRadioInit+0x2f8>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b03      	cmp	r3, #3
 800321c:	d1ea      	bne.n	80031f4 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 800321e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003220:	ee07 3a90 	vmov	s15, r3
 8003224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003228:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8003460 <SpiritRadioInit+0x304>
 800322c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003230:	4b89      	ldr	r3, [pc, #548]	; (8003458 <SpiritRadioInit+0x2fc>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	ee07 3a90 	vmov	s15, r3
 8003238:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800323c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003244:	ee17 3a90 	vmov	r3, s15
 8003248:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 800324a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800324c:	0a1b      	lsrs	r3, r3, #8
 800324e:	b29b      	uxth	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	b2db      	uxtb	r3, r3
 8003258:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 800325a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800325c:	b2db      	uxtb	r3, r3
 800325e:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	025a      	lsls	r2, r3, #9
 8003266:	4b7c      	ldr	r3, [pc, #496]	; (8003458 <SpiritRadioInit+0x2fc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	099b      	lsrs	r3, r3, #6
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	3301      	adds	r3, #1
 8003274:	b2db      	uxtb	r3, r3
 8003276:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fc33 	bl	8002ae8 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8003282:	f107 0310 	add.w	r3, r7, #16
 8003286:	461a      	mov	r2, r3
 8003288:	2101      	movs	r1, #1
 800328a:	20a3      	movs	r0, #163	; 0xa3
 800328c:	f001 fa04 	bl	8004698 <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8003290:	7c3b      	ldrb	r3, [r7, #16]
 8003292:	f023 0302 	bic.w	r3, r3, #2
 8003296:	b2db      	uxtb	r3, r3
 8003298:	743b      	strb	r3, [r7, #16]
 800329a:	f107 0310 	add.w	r3, r7, #16
 800329e:	461a      	mov	r2, r3
 80032a0:	2101      	movs	r1, #1
 80032a2:	20a3      	movs	r0, #163	; 0xa3
 80032a4:	f001 f9ac 	bl	8004600 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f107 0216 	add.w	r2, r7, #22
 80032b0:	f107 0117 	add.w	r1, r7, #23
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fc3d 	bl	8003b34 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
 80032bc:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	7b5a      	ldrb	r2, [r3, #13]
 80032c2:	7dbb      	ldrb	r3, [r7, #22]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 80032ca:	f107 0310 	add.w	r3, r7, #16
 80032ce:	461a      	mov	r2, r3
 80032d0:	2101      	movs	r1, #1
 80032d2:	201c      	movs	r0, #28
 80032d4:	f001 f9e0 	bl	8004698 <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	f107 0214 	add.w	r2, r7, #20
 80032e0:	f107 0115 	add.w	r1, r7, #21
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fdbd 	bl	8003e64 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 80032ea:	7d3b      	ldrb	r3, [r7, #20]
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	b25a      	sxtb	r2, r3
 80032f0:	7c3b      	ldrb	r3, [r7, #16]
 80032f2:	b25b      	sxtb	r3, r3
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	b25b      	sxtb	r3, r3
 80032fa:	4313      	orrs	r3, r2
 80032fc:	b25a      	sxtb	r2, r3
 80032fe:	7d7b      	ldrb	r3, [r7, #21]
 8003300:	b25b      	sxtb	r3, r3
 8003302:	4313      	orrs	r3, r2
 8003304:	b25b      	sxtb	r3, r3
 8003306:	b2db      	uxtb	r3, r3
 8003308:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f107 0212 	add.w	r2, r7, #18
 8003312:	f107 0113 	add.w	r1, r7, #19
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fcbe 	bl	8003c98 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	b25a      	sxtb	r2, r3
 8003322:	7cbb      	ldrb	r3, [r7, #18]
 8003324:	b25b      	sxtb	r3, r3
 8003326:	4313      	orrs	r3, r2
 8003328:	b25b      	sxtb	r3, r3
 800332a:	b2db      	uxtb	r3, r3
 800332c:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 800332e:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <SpiritRadioInit+0x2fc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	0b1b      	lsrs	r3, r3, #12
 8003334:	ee07 3a90 	vmov	s15, r3
 8003338:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800333c:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003464 <SpiritRadioInit+0x308>
 8003340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003344:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003468 <SpiritRadioInit+0x30c>
 8003348:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800334c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8003350:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003364:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800336c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003370:	dd09      	ble.n	8003386 <SpiritRadioInit+0x22a>
 8003372:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800337a:	edc7 7a00 	vstr	s15, [r7]
 800337e:	783b      	ldrb	r3, [r7, #0]
 8003380:	3301      	adds	r3, #1
 8003382:	b2db      	uxtb	r3, r3
 8003384:	e006      	b.n	8003394 <SpiritRadioInit+0x238>
 8003386:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800338a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800338e:	edc7 7a00 	vstr	s15, [r7]
 8003392:	783b      	ldrb	r3, [r7, #0]
 8003394:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8003396:	4b30      	ldr	r3, [pc, #192]	; (8003458 <SpiritRadioInit+0x2fc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a30      	ldr	r2, [pc, #192]	; (800345c <SpiritRadioInit+0x300>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d802      	bhi.n	80033a6 <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	777b      	strb	r3, [r7, #29]
 80033a4:	e033      	b.n	800340e <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 80033a6:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <SpiritRadioInit+0x2fc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	0b5b      	lsrs	r3, r3, #13
 80033ac:	ee07 3a90 	vmov	s15, r3
 80033b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033b4:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003464 <SpiritRadioInit+0x308>
 80033b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033bc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003468 <SpiritRadioInit+0x30c>
 80033c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033c4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 80033c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80033cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80033d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80033e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e8:	dd09      	ble.n	80033fe <SpiritRadioInit+0x2a2>
 80033ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80033ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033f2:	edc7 7a00 	vstr	s15, [r7]
 80033f6:	783b      	ldrb	r3, [r7, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	e006      	b.n	800340c <SpiritRadioInit+0x2b0>
 80033fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003406:	edc7 7a00 	vstr	s15, [r7]
 800340a:	783b      	ldrb	r3, [r7, #0]
 800340c:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 800340e:	f107 030f 	add.w	r3, r7, #15
 8003412:	461a      	mov	r2, r3
 8003414:	2101      	movs	r1, #1
 8003416:	2007      	movs	r0, #7
 8003418:	f001 f8f2 	bl	8004600 <RadioSpiWriteRegisters>
 800341c:	4602      	mov	r2, r0
 800341e:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <SpiritRadioInit+0x2f8>)
 8003420:	b212      	sxth	r2, r2
 8003422:	4611      	mov	r1, r2
 8003424:	7019      	strb	r1, [r3, #0]
 8003426:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800342a:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <SpiritRadioInit+0x2fc>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a0e      	ldr	r2, [pc, #56]	; (800346c <SpiritRadioInit+0x310>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d91e      	bls.n	8003474 <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8003436:	4b08      	ldr	r3, [pc, #32]	; (8003458 <SpiritRadioInit+0x2fc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a0d      	ldr	r2, [pc, #52]	; (8003470 <SpiritRadioInit+0x314>)
 800343c:	4293      	cmp	r3, r2
 800343e:	bf8c      	ite	hi
 8003440:	2301      	movhi	r3, #1
 8003442:	2300      	movls	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	4618      	mov	r0, r3
 8003448:	f000 f86c 	bl	8003524 <SpiritRadioSetXtalFlag>
 800344c:	e01d      	b.n	800348a <SpiritRadioInit+0x32e>
 800344e:	bf00      	nop
 8003450:	49742400 	.word	0x49742400
 8003454:	200027d0 	.word	0x200027d0
 8003458:	200027cc 	.word	0x200027cc
 800345c:	01c9c37f 	.word	0x01c9c37f
 8003460:	48800000 	.word	0x48800000
 8003464:	49afd520 	.word	0x49afd520
 8003468:	42800000 	.word	0x42800000
 800346c:	01c9c380 	.word	0x01c9c380
 8003470:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8003474:	4b28      	ldr	r3, [pc, #160]	; (8003518 <SpiritRadioInit+0x3bc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a28      	ldr	r2, [pc, #160]	; (800351c <SpiritRadioInit+0x3c0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	bf8c      	ite	hi
 800347e:	2301      	movhi	r3, #1
 8003480:	2300      	movls	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	4618      	mov	r0, r3
 8003486:	f000 f84d 	bl	8003524 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	330c      	adds	r3, #12
 800348e:	461a      	mov	r2, r3
 8003490:	2101      	movs	r1, #1
 8003492:	206c      	movs	r0, #108	; 0x6c
 8003494:	f001 f8b4 	bl	8004600 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8003498:	f107 031c 	add.w	r3, r7, #28
 800349c:	461a      	mov	r2, r3
 800349e:	2104      	movs	r1, #4
 80034a0:	200c      	movs	r0, #12
 80034a2:	f001 f8ad 	bl	8004600 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 80034a6:	f107 0318 	add.w	r3, r7, #24
 80034aa:	461a      	mov	r2, r3
 80034ac:	2104      	movs	r1, #4
 80034ae:	201a      	movs	r0, #26
 80034b0:	f001 f8a6 	bl	8004600 <RadioSpiWriteRegisters>
 80034b4:	4602      	mov	r2, r0
 80034b6:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <SpiritRadioInit+0x3c4>)
 80034b8:	b212      	sxth	r2, r2
 80034ba:	4611      	mov	r1, r2
 80034bc:	7019      	strb	r1, [r3, #0]
 80034be:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80034c2:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 80034c4:	2001      	movs	r0, #1
 80034c6:	f000 ff15 	bl	80042f4 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 80034ce:	23e3      	movs	r3, #227	; 0xe3
 80034d0:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 80034d2:	f107 031c 	add.w	r3, r7, #28
 80034d6:	461a      	mov	r2, r3
 80034d8:	2102      	movs	r1, #2
 80034da:	2099      	movs	r0, #153	; 0x99
 80034dc:	f001 f890 	bl	8004600 <RadioSpiWriteRegisters>
 80034e0:	4602      	mov	r2, r0
 80034e2:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <SpiritRadioInit+0x3c4>)
 80034e4:	b212      	sxth	r2, r2
 80034e6:	4611      	mov	r1, r2
 80034e8:	7019      	strb	r1, [r3, #0]
 80034ea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80034ee:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 80034f0:	2322      	movs	r3, #34	; 0x22
 80034f2:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 80034f4:	f107 031c 	add.w	r3, r7, #28
 80034f8:	461a      	mov	r2, r3
 80034fa:	2101      	movs	r1, #1
 80034fc:	20bc      	movs	r0, #188	; 0xbc
 80034fe:	f001 f87f 	bl	8004600 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f9aa 	bl	8003860 <SpiritRadioSetFrequencyBase>
 800350c:	4603      	mov	r3, r0
  
}
 800350e:	4618      	mov	r0, r3
 8003510:	3730      	adds	r7, #48	; 0x30
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	200027cc 	.word	0x200027cc
 800351c:	017d783f 	.word	0x017d783f
 8003520:	200027d0 	.word	0x200027d0

08003524 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 800352e:	2300      	movs	r3, #0
 8003530:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8003532:	f107 030f 	add.w	r3, r7, #15
 8003536:	461a      	mov	r2, r3
 8003538:	2101      	movs	r1, #1
 800353a:	2001      	movs	r0, #1
 800353c:	f001 f8ac 	bl	8004698 <RadioSpiReadRegisters>
 8003540:	4602      	mov	r2, r0
 8003542:	4b14      	ldr	r3, [pc, #80]	; (8003594 <SpiritRadioSetXtalFlag+0x70>)
 8003544:	b212      	sxth	r2, r2
 8003546:	4611      	mov	r1, r2
 8003548:	7019      	strb	r1, [r3, #0]
 800354a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800354e:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d105      	bne.n	8003562 <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800355c:	b2db      	uxtb	r3, r3
 800355e:	73fb      	strb	r3, [r7, #15]
 8003560:	e004      	b.n	800356c <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003568:	b2db      	uxtb	r3, r3
 800356a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 800356c:	f107 030f 	add.w	r3, r7, #15
 8003570:	461a      	mov	r2, r3
 8003572:	2101      	movs	r1, #1
 8003574:	2001      	movs	r0, #1
 8003576:	f001 f843 	bl	8004600 <RadioSpiWriteRegisters>
 800357a:	4602      	mov	r2, r0
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <SpiritRadioSetXtalFlag+0x70>)
 800357e:	b212      	sxth	r2, r2
 8003580:	4611      	mov	r1, r2
 8003582:	7019      	strb	r1, [r3, #0]
 8003584:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003588:	705a      	strb	r2, [r3, #1]
  
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200027d0 	.word	0x200027d0

08003598 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a3a      	ldr	r2, [pc, #232]	; (8003698 <SpiritRadioSearchWCP+0x100>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d306      	bcc.n	80035c2 <SpiritRadioSearchWCP+0x2a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a39      	ldr	r2, [pc, #228]	; (800369c <SpiritRadioSearchWCP+0x104>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d802      	bhi.n	80035c2 <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 80035bc:	2306      	movs	r3, #6
 80035be:	73bb      	strb	r3, [r7, #14]
 80035c0:	e01f      	b.n	8003602 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a36      	ldr	r2, [pc, #216]	; (80036a0 <SpiritRadioSearchWCP+0x108>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d906      	bls.n	80035d8 <SpiritRadioSearchWCP+0x40>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a35      	ldr	r2, [pc, #212]	; (80036a4 <SpiritRadioSearchWCP+0x10c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d802      	bhi.n	80035d8 <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 80035d2:	230c      	movs	r3, #12
 80035d4:	73bb      	strb	r3, [r7, #14]
 80035d6:	e014      	b.n	8003602 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a33      	ldr	r2, [pc, #204]	; (80036a8 <SpiritRadioSearchWCP+0x110>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d906      	bls.n	80035ee <SpiritRadioSearchWCP+0x56>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a32      	ldr	r2, [pc, #200]	; (80036ac <SpiritRadioSearchWCP+0x114>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d802      	bhi.n	80035ee <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 80035e8:	2310      	movs	r3, #16
 80035ea:	73bb      	strb	r3, [r7, #14]
 80035ec:	e009      	b.n	8003602 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a2f      	ldr	r2, [pc, #188]	; (80036b0 <SpiritRadioSearchWCP+0x118>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d905      	bls.n	8003602 <SpiritRadioSearchWCP+0x6a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a2e      	ldr	r2, [pc, #184]	; (80036b4 <SpiritRadioSearchWCP+0x11c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d801      	bhi.n	8003602 <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 80035fe:	2320      	movs	r3, #32
 8003600:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a2c      	ldr	r2, [pc, #176]	; (80036b8 <SpiritRadioSearchWCP+0x120>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	099b      	lsrs	r3, r3, #6
 800360c:	7bba      	ldrb	r2, [r7, #14]
 800360e:	fb02 f303 	mul.w	r3, r2, r3
 8003612:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8003614:	f241 631f 	movw	r3, #5663	; 0x161f
 8003618:	461a      	mov	r2, r3
 800361a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800361e:	fb02 f303 	mul.w	r3, r2, r3
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	429a      	cmp	r2, r3
 8003626:	d302      	bcc.n	800362e <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 8003628:	230f      	movs	r3, #15
 800362a:	73fb      	strb	r3, [r7, #15]
 800362c:	e023      	b.n	8003676 <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 800362e:	2300      	movs	r3, #0
 8003630:	73fb      	strb	r3, [r7, #15]
 8003632:	e005      	b.n	8003640 <SpiritRadioSearchWCP+0xa8>
 8003634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	3301      	adds	r3, #1
 800363c:	b2db      	uxtb	r3, r3
 800363e:	73fb      	strb	r3, [r7, #15]
 8003640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003644:	2b0e      	cmp	r3, #14
 8003646:	dc0c      	bgt.n	8003662 <SpiritRadioSearchWCP+0xca>
 8003648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800364c:	4a1b      	ldr	r2, [pc, #108]	; (80036bc <SpiritRadioSearchWCP+0x124>)
 800364e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003652:	461a      	mov	r2, r3
 8003654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003658:	fb02 f303 	mul.w	r3, r2, r3
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	d8e8      	bhi.n	8003634 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 8003662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <SpiritRadioSearchWCP+0xde>
      i--;
 800366a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b2db      	uxtb	r3, r3
 8003674:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8003676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800367a:	425a      	negs	r2, r3
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	f002 0207 	and.w	r2, r2, #7
 8003684:	bf58      	it	pl
 8003686:	4253      	negpl	r3, r2
 8003688:	b25b      	sxtb	r3, r3
 800368a:	b2db      	uxtb	r3, r3
  
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	2e5f5680 	.word	0x2e5f5680
 800369c:	390c2fe0 	.word	0x390c2fe0
 80036a0:	1701e47f 	.word	0x1701e47f
 80036a4:	1c146a60 	.word	0x1c146a60
 80036a8:	11d260bf 	.word	0x11d260bf
 80036ac:	14ced7e0 	.word	0x14ced7e0
 80036b0:	08e18f3f 	.word	0x08e18f3f
 80036b4:	0a6fd060 	.word	0x0a6fd060
 80036b8:	10624dd3 	.word	0x10624dd3
 80036bc:	0800c510 	.word	0x0800c510

080036c0 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 80036c6:	1d3b      	adds	r3, r7, #4
 80036c8:	461a      	mov	r2, r3
 80036ca:	2104      	movs	r1, #4
 80036cc:	2008      	movs	r0, #8
 80036ce:	f000 ffe3 	bl	8004698 <RadioSpiReadRegisters>
 80036d2:	4602      	mov	r2, r0
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <SpiritRadioGetSynthWord+0x48>)
 80036d6:	b212      	sxth	r2, r2
 80036d8:	4611      	mov	r1, r2
 80036da:	7019      	strb	r1, [r3, #0]
 80036dc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80036e0:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80036e2:	793b      	ldrb	r3, [r7, #4]
 80036e4:	055b      	lsls	r3, r3, #21
 80036e6:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 80036ea:	797b      	ldrb	r3, [r7, #5]
 80036ec:	035b      	lsls	r3, r3, #13
 80036ee:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80036f0:	79bb      	ldrb	r3, [r7, #6]
 80036f2:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80036f4:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80036f6:	79fa      	ldrb	r2, [r7, #7]
 80036f8:	08d2      	lsrs	r2, r2, #3
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	4413      	add	r3, r2
  
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	200027d0 	.word	0x200027d0

0800370c <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 8003712:	1dfb      	adds	r3, r7, #7
 8003714:	461a      	mov	r2, r3
 8003716:	2101      	movs	r1, #1
 8003718:	200b      	movs	r0, #11
 800371a:	f000 ffbd 	bl	8004698 <RadioSpiReadRegisters>
 800371e:	4602      	mov	r2, r0
 8003720:	4b10      	ldr	r3, [pc, #64]	; (8003764 <SpiritRadioGetBand+0x58>)
 8003722:	b212      	sxth	r2, r2
 8003724:	4611      	mov	r1, r2
 8003726:	7019      	strb	r1, [r3, #0]
 8003728:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800372c:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8003738:	2300      	movs	r3, #0
 800373a:	e00e      	b.n	800375a <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	2b03      	cmp	r3, #3
 8003744:	d101      	bne.n	800374a <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8003746:	2301      	movs	r3, #1
 8003748:	e007      	b.n	800375a <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	2b04      	cmp	r3, #4
 8003752:	d101      	bne.n	8003758 <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8003754:	2302      	movs	r3, #2
 8003756:	e000      	b.n	800375a <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8003758:	2303      	movs	r3, #3
  }
  
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	200027d0 	.word	0x200027d0

08003768 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 800376e:	1dfb      	adds	r3, r7, #7
 8003770:	461a      	mov	r2, r3
 8003772:	2101      	movs	r1, #1
 8003774:	206c      	movs	r0, #108	; 0x6c
 8003776:	f000 ff8f 	bl	8004698 <RadioSpiReadRegisters>
 800377a:	4602      	mov	r2, r0
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <SpiritRadioGetChannel+0x2c>)
 800377e:	b212      	sxth	r2, r2
 8003780:	4611      	mov	r1, r2
 8003782:	7019      	strb	r1, [r3, #0]
 8003784:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003788:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 800378a:	79fb      	ldrb	r3, [r7, #7]
  
}
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	200027d0 	.word	0x200027d0

08003798 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 800379e:	1dfb      	adds	r3, r7, #7
 80037a0:	461a      	mov	r2, r3
 80037a2:	2101      	movs	r1, #1
 80037a4:	200c      	movs	r0, #12
 80037a6:	f000 ff77 	bl	8004698 <RadioSpiReadRegisters>
 80037aa:	4602      	mov	r2, r0
 80037ac:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <SpiritRadioGetChannelSpace+0x38>)
 80037ae:	b212      	sxth	r2, r2
 80037b0:	4611      	mov	r1, r2
 80037b2:	7019      	strb	r1, [r3, #0]
 80037b4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80037b8:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	461a      	mov	r2, r3
 80037be:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <SpiritRadioGetChannelSpace+0x3c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	0bdb      	lsrs	r3, r3, #15
  
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	200027d0 	.word	0x200027d0
 80037d4:	200027cc 	.word	0x200027cc

080037d8 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 80037de:	1d3b      	adds	r3, r7, #4
 80037e0:	461a      	mov	r2, r3
 80037e2:	2102      	movs	r1, #2
 80037e4:	200e      	movs	r0, #14
 80037e6:	f000 ff57 	bl	8004698 <RadioSpiReadRegisters>
 80037ea:	4602      	mov	r2, r0
 80037ec:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <SpiritRadioGetFrequencyOffset+0x80>)
 80037ee:	b212      	sxth	r2, r2
 80037f0:	4611      	mov	r1, r2
 80037f2:	7019      	strb	r1, [r3, #0]
 80037f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80037f8:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 80037fa:	793b      	ldrb	r3, [r7, #4]
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	b29a      	uxth	r2, r3
 8003802:	797b      	ldrb	r3, [r7, #5]
 8003804:	b29b      	uxth	r3, r3
 8003806:	4413      	add	r3, r2
 8003808:	b29b      	uxth	r3, r3
 800380a:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 800380c:	887b      	ldrh	r3, [r7, #2]
 800380e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 8003816:	887b      	ldrh	r3, [r7, #2]
 8003818:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800381c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8003820:	b29b      	uxth	r3, r3
 8003822:	807b      	strh	r3, [r7, #2]
 8003824:	e004      	b.n	8003830 <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 8003826:	887b      	ldrh	r3, [r7, #2]
 8003828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382c:	b29b      	uxth	r3, r3
 800382e:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 8003830:	1cbb      	adds	r3, r7, #2
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 8003836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800383a:	4a08      	ldr	r2, [pc, #32]	; (800385c <SpiritRadioGetFrequencyOffset+0x84>)
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	da03      	bge.n	800384e <SpiritRadioGetFrequencyOffset+0x76>
 8003846:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800384a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800384e:	149b      	asrs	r3, r3, #18
  
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	200027d0 	.word	0x200027d0
 800385c:	200027cc 	.word	0x200027cc

08003860 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 8003860:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003864:	b08a      	sub	sp, #40	; 0x28
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 800386a:	2300      	movs	r3, #0
 800386c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a79      	ldr	r2, [pc, #484]	; (8003a58 <SpiritRadioSetFrequencyBase+0x1f8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d307      	bcc.n	8003888 <SpiritRadioSetFrequencyBase+0x28>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a78      	ldr	r2, [pc, #480]	; (8003a5c <SpiritRadioSetFrequencyBase+0x1fc>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d803      	bhi.n	8003888 <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8003880:	2300      	movs	r3, #0
 8003882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003886:	e022      	b.n	80038ce <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a75      	ldr	r2, [pc, #468]	; (8003a60 <SpiritRadioSetFrequencyBase+0x200>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d907      	bls.n	80038a0 <SpiritRadioSetFrequencyBase+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a74      	ldr	r2, [pc, #464]	; (8003a64 <SpiritRadioSetFrequencyBase+0x204>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d803      	bhi.n	80038a0 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800389e:	e016      	b.n	80038ce <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a71      	ldr	r2, [pc, #452]	; (8003a68 <SpiritRadioSetFrequencyBase+0x208>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d907      	bls.n	80038b8 <SpiritRadioSetFrequencyBase+0x58>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a70      	ldr	r2, [pc, #448]	; (8003a6c <SpiritRadioSetFrequencyBase+0x20c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d803      	bhi.n	80038b8 <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 80038b0:	2302      	movs	r3, #2
 80038b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80038b6:	e00a      	b.n	80038ce <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a6d      	ldr	r2, [pc, #436]	; (8003a70 <SpiritRadioSetFrequencyBase+0x210>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d906      	bls.n	80038ce <SpiritRadioSetFrequencyBase+0x6e>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a6c      	ldr	r2, [pc, #432]	; (8003a74 <SpiritRadioSetFrequencyBase+0x214>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d802      	bhi.n	80038ce <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 80038c8:	2303      	movs	r3, #3
 80038ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 80038ce:	f7ff ff83 	bl	80037d8 <SpiritRadioGetFrequencyOffset>
 80038d2:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 80038d4:	f7ff ff60 	bl	8003798 <SpiritRadioGetChannelSpace>
 80038d8:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 80038da:	f7ff ff45 	bl	8003768 <SpiritRadioGetChannel>
 80038de:	4603      	mov	r3, r0
 80038e0:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80038e2:	6a3a      	ldr	r2, [r7, #32]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	441a      	add	r2, r3
 80038e8:	7efb      	ldrb	r3, [r7, #27]
 80038ea:	69f9      	ldr	r1, [r7, #28]
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	4413      	add	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80038f4:	f000 fd60 	bl	80043b8 <SpiritRadioGetRefDiv>
 80038f8:	4603      	mov	r3, r0
 80038fa:	3301      	adds	r3, #1
 80038fc:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 80038fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003902:	2b03      	cmp	r3, #3
 8003904:	d839      	bhi.n	800397a <SpiritRadioSetFrequencyBase+0x11a>
 8003906:	a201      	add	r2, pc, #4	; (adr r2, 800390c <SpiritRadioSetFrequencyBase+0xac>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	08003965 	.word	0x08003965
 8003910:	0800394d 	.word	0x0800394d
 8003914:	08003935 	.word	0x08003935
 8003918:	0800391d 	.word	0x0800391d
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	4a56      	ldr	r2, [pc, #344]	; (8003a78 <SpiritRadioSetFrequencyBase+0x218>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d803      	bhi.n	800392c <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003924:	2000      	movs	r0, #0
 8003926:	f7fe fd6b 	bl	8002400 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800392a:	e026      	b.n	800397a <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 800392c:	2001      	movs	r0, #1
 800392e:	f7fe fd67 	bl	8002400 <SpiritCalibrationSelectVco>
    break;
 8003932:	e022      	b.n	800397a <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	4a51      	ldr	r2, [pc, #324]	; (8003a7c <SpiritRadioSetFrequencyBase+0x21c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d803      	bhi.n	8003944 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800393c:	2000      	movs	r0, #0
 800393e:	f7fe fd5f 	bl	8002400 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003942:	e01a      	b.n	800397a <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003944:	2001      	movs	r0, #1
 8003946:	f7fe fd5b 	bl	8002400 <SpiritCalibrationSelectVco>
    break;
 800394a:	e016      	b.n	800397a <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	4a4c      	ldr	r2, [pc, #304]	; (8003a80 <SpiritRadioSetFrequencyBase+0x220>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d803      	bhi.n	800395c <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003954:	2000      	movs	r0, #0
 8003956:	f7fe fd53 	bl	8002400 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800395a:	e00e      	b.n	800397a <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 800395c:	2001      	movs	r0, #1
 800395e:	f7fe fd4f 	bl	8002400 <SpiritCalibrationSelectVco>
    break;
 8003962:	e00a      	b.n	800397a <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	4a47      	ldr	r2, [pc, #284]	; (8003a84 <SpiritRadioSetFrequencyBase+0x224>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d803      	bhi.n	8003974 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800396c:	2000      	movs	r0, #0
 800396e:	f7fe fd47 	bl	8002400 <SpiritCalibrationSelectVco>
 8003972:	e002      	b.n	800397a <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8003974:	2001      	movs	r0, #1
 8003976:	f7fe fd43 	bl	8002400 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800397a:	6978      	ldr	r0, [r7, #20]
 800397c:	f7ff fe0c 	bl	8003598 <SpiritRadioSearchWCP>
 8003980:	4603      	mov	r3, r0
 8003982:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8003984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003988:	4a3f      	ldr	r2, [pc, #252]	; (8003a88 <SpiritRadioSetFrequencyBase+0x228>)
 800398a:	5cd3      	ldrb	r3, [r2, r3]
 800398c:	461a      	mov	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	fb02 f303 	mul.w	r3, r2, r3
 8003994:	4618      	mov	r0, r3
 8003996:	f7fc fdb5 	bl	8000504 <__aeabi_ui2d>
 800399a:	4604      	mov	r4, r0
 800399c:	460d      	mov	r5, r1
 800399e:	7cfb      	ldrb	r3, [r7, #19]
 80039a0:	049b      	lsls	r3, r3, #18
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fc fdbe 	bl	8000524 <__aeabi_i2d>
 80039a8:	4680      	mov	r8, r0
 80039aa:	4689      	mov	r9, r1
 80039ac:	4b37      	ldr	r3, [pc, #220]	; (8003a8c <SpiritRadioSetFrequencyBase+0x22c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fc fda7 	bl	8000504 <__aeabi_ui2d>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4640      	mov	r0, r8
 80039bc:	4649      	mov	r1, r9
 80039be:	f7fc ff45 	bl	800084c <__aeabi_ddiv>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4620      	mov	r0, r4
 80039c8:	4629      	mov	r1, r5
 80039ca:	f7fc fe15 	bl	80005f8 <__aeabi_dmul>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	f7fd f821 	bl	8000a1c <__aeabi_d2uiz>
 80039da:	4603      	mov	r3, r0
 80039dc:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	0d5b      	lsrs	r3, r3, #21
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	7cbb      	ldrb	r3, [r7, #18]
 80039ec:	015b      	lsls	r3, r3, #5
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	4313      	orrs	r3, r2
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	0b5b      	lsrs	r3, r3, #13
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a12:	491f      	ldr	r1, [pc, #124]	; (8003a90 <SpiritRadioSetFrequencyBase+0x230>)
 8003a14:	5ccb      	ldrb	r3, [r1, r3]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8003a1c:	f107 0308 	add.w	r3, r7, #8
 8003a20:	461a      	mov	r2, r3
 8003a22:	2104      	movs	r1, #4
 8003a24:	2008      	movs	r0, #8
 8003a26:	f000 fdeb 	bl	8004600 <RadioSpiWriteRegisters>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <SpiritRadioSetFrequencyBase+0x234>)
 8003a2e:	b212      	sxth	r2, r2
 8003a30:	4611      	mov	r1, r2
 8003a32:	7019      	strb	r1, [r3, #0]
 8003a34:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003a38:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 8003a3a:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <SpiritRadioSetFrequencyBase+0x238>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d103      	bne.n	8003a4a <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 8003a42:	f7fe ff3d 	bl	80028c0 <SpiritManagementWaVcoCalibration>
 8003a46:	4603      	mov	r3, r0
 8003a48:	e000      	b.n	8003a4c <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3728      	adds	r7, #40	; 0x28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a56:	bf00      	nop
 8003a58:	2e5f5680 	.word	0x2e5f5680
 8003a5c:	390c2fe0 	.word	0x390c2fe0
 8003a60:	1701e47f 	.word	0x1701e47f
 8003a64:	1c146a60 	.word	0x1c146a60
 8003a68:	11d260bf 	.word	0x11d260bf
 8003a6c:	14ced7e0 	.word	0x14ced7e0
 8003a70:	08e18f3f 	.word	0x08e18f3f
 8003a74:	0a6fd060 	.word	0x0a6fd060
 8003a78:	099cf4e1 	.word	0x099cf4e1
 8003a7c:	1339e9c3 	.word	0x1339e9c3
 8003a80:	19a28d05 	.word	0x19a28d05
 8003a84:	33451a0a 	.word	0x33451a0a
 8003a88:	0800c454 	.word	0x0800c454
 8003a8c:	200027cc 	.word	0x200027cc
 8003a90:	0800c458 	.word	0x0800c458
 8003a94:	200027d0 	.word	0x200027d0
 8003a98:	20000349 	.word	0x20000349

08003a9c <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8003a9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8003aa4:	f7ff fe0c 	bl	80036c0 <SpiritRadioGetSynthWord>
 8003aa8:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 8003aaa:	f7ff fe2f 	bl	800370c <SpiritRadioGetBand>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 8003ab2:	f000 fc81 	bl	80043b8 <SpiritRadioGetRefDiv>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	3301      	adds	r3, #1
 8003aba:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7fc fd21 	bl	8000504 <__aeabi_ui2d>
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	460d      	mov	r5, r1
 8003ac6:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <SpiritRadioGetFrequencyBase+0x90>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fc fd1a 	bl	8000504 <__aeabi_ui2d>
 8003ad0:	4680      	mov	r8, r0
 8003ad2:	4689      	mov	r9, r1
 8003ad4:	78bb      	ldrb	r3, [r7, #2]
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	4915      	ldr	r1, [pc, #84]	; (8003b30 <SpiritRadioGetFrequencyBase+0x94>)
 8003ada:	5c8a      	ldrb	r2, [r1, r2]
 8003adc:	fb02 f303 	mul.w	r3, r2, r3
 8003ae0:	049b      	lsls	r3, r3, #18
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fc fd1e 	bl	8000524 <__aeabi_i2d>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4640      	mov	r0, r8
 8003aee:	4649      	mov	r1, r9
 8003af0:	f7fc feac 	bl	800084c <__aeabi_ddiv>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4620      	mov	r0, r4
 8003afa:	4629      	mov	r1, r5
 8003afc:	f7fc fd7c 	bl	80005f8 <__aeabi_dmul>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	ec43 2b17 	vmov	d7, r2, r3
 8003b08:	eeb0 0a47 	vmov.f32	s0, s14
 8003b0c:	eef0 0a67 	vmov.f32	s1, s15
 8003b10:	f008 fa3c 	bl	800bf8c <round>
 8003b14:	ec53 2b10 	vmov	r2, r3, d0
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f7fc ff7e 	bl	8000a1c <__aeabi_d2uiz>
 8003b20:	4603      	mov	r3, r0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b2c:	200027cc 	.word	0x200027cc
 8003b30:	0800c454 	.word	0x0800c454

08003b34 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 8003b44:	230f      	movs	r3, #15
 8003b46:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 8003b4c:	f000 fc86 	bl	800445c <SpiritRadioGetDigDiv>
 8003b50:	4603      	mov	r3, r0
 8003b52:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 8003b54:	e015      	b.n	8003b82 <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 8003b56:	4b4f      	ldr	r3, [pc, #316]	; (8003c94 <SpiritRadioSearchDatarateME+0x160>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b5e:	f1c3 0114 	rsb	r1, r3, #20
 8003b62:	7ebb      	ldrb	r3, [r7, #26]
 8003b64:	440b      	add	r3, r1
 8003b66:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d302      	bcc.n	8003b76 <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 8003b70:	2301      	movs	r3, #1
 8003b72:	763b      	strb	r3, [r7, #24]
 8003b74:	e005      	b.n	8003b82 <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 8003b76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 8003b82:	7e3b      	ldrb	r3, [r7, #24]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <SpiritRadioSearchDatarateME+0x5e>
 8003b8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	dae1      	bge.n	8003b56 <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 8003b92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	da01      	bge.n	8003b9e <SpiritRadioSearchDatarateME+0x6a>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 8003b9e:	7ffa      	ldrb	r2, [r7, #31]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8003ba4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ba8:	f1c3 0317 	rsb	r3, r3, #23
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	4b38      	ldr	r3, [pc, #224]	; (8003c94 <SpiritRadioSearchDatarateME+0x160>)
 8003bb2:	6819      	ldr	r1, [r3, #0]
 8003bb4:	7ebb      	ldrb	r3, [r7, #26]
 8003bb6:	3305      	adds	r3, #5
 8003bb8:	fa21 f303 	lsr.w	r3, r1, r3
 8003bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc0:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	77bb      	strb	r3, [r7, #30]
 8003bc6:	e031      	b.n	8003c2c <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 8003bc8:	7e7a      	ldrb	r2, [r7, #25]
 8003bca:	7fbb      	ldrb	r3, [r7, #30]
 8003bcc:	4413      	add	r3, r2
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d021      	beq.n	8003c16 <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	7e7b      	ldrb	r3, [r7, #25]
 8003bd8:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8003bdc:	7fbb      	ldrb	r3, [r7, #30]
 8003bde:	440b      	add	r3, r1
 8003be0:	3b01      	subs	r3, #1
 8003be2:	4618      	mov	r0, r3
 8003be4:	4b2b      	ldr	r3, [pc, #172]	; (8003c94 <SpiritRadioSearchDatarateME+0x160>)
 8003be6:	6819      	ldr	r1, [r3, #0]
 8003be8:	7ebb      	ldrb	r3, [r7, #26]
 8003bea:	3305      	adds	r3, #5
 8003bec:	fa21 f303 	lsr.w	r3, r1, r3
 8003bf0:	fb03 f100 	mul.w	r1, r3, r0
 8003bf4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003bf8:	f1c3 0317 	rsb	r3, r3, #23
 8003bfc:	fa21 f303 	lsr.w	r3, r1, r3
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	7fbb      	ldrb	r3, [r7, #30]
 8003c08:	b212      	sxth	r2, r2
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	3320      	adds	r3, #32
 8003c0e:	443b      	add	r3, r7
 8003c10:	f823 2c10 	strh.w	r2, [r3, #-16]
 8003c14:	e007      	b.n	8003c26 <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 8003c16:	7fbb      	ldrb	r3, [r7, #30]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	3320      	adds	r3, #32
 8003c1c:	443b      	add	r3, r7
 8003c1e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003c22:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 8003c26:	7fbb      	ldrb	r3, [r7, #30]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	77bb      	strb	r3, [r7, #30]
 8003c2c:	7fbb      	ldrb	r3, [r7, #30]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d9ca      	bls.n	8003bc8 <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 8003c32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c36:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	76fb      	strb	r3, [r7, #27]
 8003c3c:	e021      	b.n	8003c82 <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 8003c3e:	7efb      	ldrb	r3, [r7, #27]
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	3320      	adds	r3, #32
 8003c44:	443b      	add	r3, r7
 8003c46:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	bfb8      	it	lt
 8003c4e:	425b      	neglt	r3, r3
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	8bba      	ldrh	r2, [r7, #28]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d911      	bls.n	8003c7c <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 8003c58:	7efb      	ldrb	r3, [r7, #27]
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	3320      	adds	r3, #32
 8003c5e:	443b      	add	r3, r7
 8003c60:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bfb8      	it	lt
 8003c68:	425b      	neglt	r3, r3
 8003c6a:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 8003c6c:	7e7a      	ldrb	r2, [r7, #25]
 8003c6e:	7efb      	ldrb	r3, [r7, #27]
 8003c70:	4413      	add	r3, r2
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003c7c:	7efb      	ldrb	r3, [r7, #27]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	76fb      	strb	r3, [r7, #27]
 8003c82:	7efb      	ldrb	r3, [r7, #27]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d9da      	bls.n	8003c3e <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	3720      	adds	r7, #32
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	200027cc 	.word	0x200027cc

08003c98 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8003caa:	f000 fbd7 	bl	800445c <SpiritRadioGetDigDiv>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003cba:	e002      	b.n	8003cc2 <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8003cc2:	4b63      	ldr	r3, [pc, #396]	; (8003e50 <SpiritRadioSearchChannelBwME+0x1b8>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cce:	4a61      	ldr	r2, [pc, #388]	; (8003e54 <SpiritRadioSearchChannelBwME+0x1bc>)
 8003cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd4:	095b      	lsrs	r3, r3, #5
 8003cd6:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003cde:	e006      	b.n	8003cee <SpiritRadioSearchChannelBwME+0x56>
 8003ce0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003cee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003cf2:	2b59      	cmp	r3, #89	; 0x59
 8003cf4:	dc0f      	bgt.n	8003d16 <SpiritRadioSearchChannelBwME+0x7e>
 8003cf6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003cfa:	4a57      	ldr	r2, [pc, #348]	; (8003e58 <SpiritRadioSearchChannelBwME+0x1c0>)
 8003cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d00:	461a      	mov	r2, r3
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	fb02 f303 	mul.w	r3, r2, r3
 8003d08:	4a54      	ldr	r2, [pc, #336]	; (8003e5c <SpiritRadioSearchChannelBwME+0x1c4>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	0adb      	lsrs	r3, r3, #11
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d3e4      	bcc.n	8003ce0 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 8003d16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d077      	beq.n	8003e0e <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 8003d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d22:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 8003d24:	2300      	movs	r3, #0
 8003d26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003d2a:	e03a      	b.n	8003da2 <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8003d2c:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003d30:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d34:	4413      	add	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	dc06      	bgt.n	8003d48 <SpiritRadioSearchChannelBwME+0xb0>
 8003d3a:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003d3e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d42:	4413      	add	r3, r2
 8003d44:	2b5a      	cmp	r3, #90	; 0x5a
 8003d46:	dc1e      	bgt.n	8003d86 <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8003d50:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d54:	440b      	add	r3, r1
 8003d56:	3b01      	subs	r3, #1
 8003d58:	493f      	ldr	r1, [pc, #252]	; (8003e58 <SpiritRadioSearchChannelBwME+0x1c0>)
 8003d5a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	fb01 f303 	mul.w	r3, r1, r3
 8003d66:	493d      	ldr	r1, [pc, #244]	; (8003e5c <SpiritRadioSearchChannelBwME+0x1c4>)
 8003d68:	fba1 1303 	umull	r1, r3, r1, r3
 8003d6c:	0adb      	lsrs	r3, r3, #11
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d78:	b212      	sxth	r2, r2
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	3328      	adds	r3, #40	; 0x28
 8003d7e:	443b      	add	r3, r7
 8003d80:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003d84:	e008      	b.n	8003d98 <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 8003d86:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	3328      	adds	r3, #40	; 0x28
 8003d8e:	443b      	add	r3, r7
 8003d90:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003d94:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 8003d98:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003da2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d9c0      	bls.n	8003d2c <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8003daa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dae:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003db6:	e026      	b.n	8003e06 <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8003db8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	3328      	adds	r3, #40	; 0x28
 8003dc0:	443b      	add	r3, r7
 8003dc2:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	bfb8      	it	lt
 8003dca:	425b      	neglt	r3, r3
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d913      	bls.n	8003dfc <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8003dd4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	3328      	adds	r3, #40	; 0x28
 8003ddc:	443b      	add	r3, r7
 8003dde:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	bfb8      	it	lt
 8003de6:	425b      	neglt	r3, r3
 8003de8:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 8003dea:	7efa      	ldrb	r2, [r7, #27]
 8003dec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003df0:	4413      	add	r3, r2
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 8003dfc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003e00:	3301      	adds	r3, #1
 8003e02:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003e06:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d9d4      	bls.n	8003db8 <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 8003e0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003e12:	4a13      	ldr	r2, [pc, #76]	; (8003e60 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003e14:	fb82 1203 	smull	r1, r2, r2, r3
 8003e18:	1052      	asrs	r2, r2, #1
 8003e1a:	17db      	asrs	r3, r3, #31
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	b25b      	sxtb	r3, r3
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 8003e26:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003e2c:	fb83 1302 	smull	r1, r3, r3, r2
 8003e30:	1059      	asrs	r1, r3, #1
 8003e32:	17d3      	asrs	r3, r2, #31
 8003e34:	1ac9      	subs	r1, r1, r3
 8003e36:	460b      	mov	r3, r1
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	440b      	add	r3, r1
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	b25b      	sxtb	r3, r3
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	701a      	strb	r2, [r3, #0]
  
}
 8003e46:	bf00      	nop
 8003e48:	3728      	adds	r7, #40	; 0x28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	200027cc 	.word	0x200027cc
 8003e54:	51eb851f 	.word	0x51eb851f
 8003e58:	0800c45c 	.word	0x0800c45c
 8003e5c:	c9a633fd 	.word	0xc9a633fd
 8003e60:	38e38e39 	.word	0x38e38e39

08003e64 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003e64:	b5b0      	push	{r4, r5, r7, lr}
 8003e66:	b08a      	sub	sp, #40	; 0x28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003e74:	4b53      	ldr	r3, [pc, #332]	; (8003fc4 <SpiritRadioSearchFreqDevME+0x160>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	ee07 3a90 	vmov	s15, r3
 8003e7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e80:	eddf 6a51 	vldr	s13, [pc, #324]	; 8003fc8 <SpiritRadioSearchFreqDevME+0x164>
 8003e84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e88:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e92:	e028      	b.n	8003ee6 <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8003e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e98:	2201      	movs	r2, #1
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fc fb40 	bl	8000524 <__aeabi_i2d>
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	4b48      	ldr	r3, [pc, #288]	; (8003fcc <SpiritRadioSearchFreqDevME+0x168>)
 8003eaa:	f7fc fba5 	bl	80005f8 <__aeabi_dmul>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	f7fc fdb1 	bl	8000a1c <__aeabi_d2uiz>
 8003eba:	ee07 0a90 	vmov	s15, r0
 8003ebe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ec2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ece:	ee17 3a90 	vmov	r3, s15
 8003ed2:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d309      	bcc.n	8003ef0 <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 8003edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003eea:	2b09      	cmp	r3, #9
 8003eec:	d9d2      	bls.n	8003e94 <SpiritRadioSearchFreqDevME+0x30>
 8003eee:	e000      	b.n	8003ef2 <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8003ef0:	bf00      	nop
  }
  (*pcE) = i;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003ef8:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 8003efa:	2300      	movs	r3, #0
 8003efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f00:	e043      	b.n	8003f8a <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 8003f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fc fb0a 	bl	8000524 <__aeabi_i2d>
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	4b2e      	ldr	r3, [pc, #184]	; (8003fd0 <SpiritRadioSearchFreqDevME+0x16c>)
 8003f16:	f7fc f9b9 	bl	800028c <__adddf3>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4610      	mov	r0, r2
 8003f20:	4619      	mov	r1, r3
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f2a:	f7fc fc8f 	bl	800084c <__aeabi_ddiv>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4614      	mov	r4, r2
 8003f34:	461d      	mov	r5, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	4093      	lsls	r3, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fc faef 	bl	8000524 <__aeabi_i2d>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	f7fc fb53 	bl	80005f8 <__aeabi_dmul>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4610      	mov	r0, r2
 8003f58:	4619      	mov	r1, r3
 8003f5a:	f7fc fd5f 	bl	8000a1c <__aeabi_d2uiz>
 8003f5e:	ee07 0a90 	vmov	s15, r0
 8003f62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f66:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f72:	ee17 3a90 	vmov	r3, s15
 8003f76:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d309      	bcc.n	8003f94 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 8003f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f84:	3301      	adds	r3, #1
 8003f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f8e:	2b07      	cmp	r3, #7
 8003f90:	d9b7      	bls.n	8003f02 <SpiritRadioSearchFreqDevME+0x9e>
 8003f92:	e000      	b.n	8003f96 <SpiritRadioSearchFreqDevME+0x132>
      break;
 8003f94:	bf00      	nop
  }
  
  (*pcM)=i;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003f9c:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	1ad2      	subs	r2, r2, r3
 8003fa4:	69f9      	ldr	r1, [r7, #28]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1acb      	subs	r3, r1, r3
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d205      	bcs.n	8003fba <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	701a      	strb	r2, [r3, #0]
  
}
 8003fba:	bf00      	nop
 8003fbc:	3728      	adds	r7, #40	; 0x28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	200027cc 	.word	0x200027cc
 8003fc8:	48800000 	.word	0x48800000
 8003fcc:	401e0000 	.word	0x401e0000
 8003fd0:	40200000 	.word	0x40200000

08003fd4 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4a74      	ldr	r2, [pc, #464]	; (80041bc <SpiritRadioGetdBm2Reg+0x1e8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d30c      	bcc.n	800400a <SpiritRadioGetdBm2Reg+0x36>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4a73      	ldr	r2, [pc, #460]	; (80041c0 <SpiritRadioGetdBm2Reg+0x1ec>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d808      	bhi.n	800400a <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4a71      	ldr	r2, [pc, #452]	; (80041c4 <SpiritRadioGetdBm2Reg+0x1f0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d822      	bhi.n	800404a <SpiritRadioGetdBm2Reg+0x76>
 8004004:	2301      	movs	r3, #1
 8004006:	75fb      	strb	r3, [r7, #23]
 8004008:	e01f      	b.n	800404a <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a6e      	ldr	r2, [pc, #440]	; (80041c8 <SpiritRadioGetdBm2Reg+0x1f4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d906      	bls.n	8004020 <SpiritRadioGetdBm2Reg+0x4c>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4a6d      	ldr	r2, [pc, #436]	; (80041cc <SpiritRadioGetdBm2Reg+0x1f8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d802      	bhi.n	8004020 <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 800401a:	2302      	movs	r3, #2
 800401c:	75fb      	strb	r3, [r7, #23]
 800401e:	e014      	b.n	800404a <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4a6b      	ldr	r2, [pc, #428]	; (80041d0 <SpiritRadioGetdBm2Reg+0x1fc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d906      	bls.n	8004036 <SpiritRadioGetdBm2Reg+0x62>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4a6a      	ldr	r2, [pc, #424]	; (80041d4 <SpiritRadioGetdBm2Reg+0x200>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d802      	bhi.n	8004036 <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 8004030:	2303      	movs	r3, #3
 8004032:	75fb      	strb	r3, [r7, #23]
 8004034:	e009      	b.n	800404a <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4a67      	ldr	r2, [pc, #412]	; (80041d8 <SpiritRadioGetdBm2Reg+0x204>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d905      	bls.n	800404a <SpiritRadioGetdBm2Reg+0x76>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4a66      	ldr	r2, [pc, #408]	; (80041dc <SpiritRadioGetdBm2Reg+0x208>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d801      	bhi.n	800404a <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 8004046:	2304      	movs	r3, #4
 8004048:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 800404a:	2301      	movs	r3, #1
 800404c:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 800404e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004052:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405a:	dd2f      	ble.n	80040bc <SpiritRadioGetdBm2Reg+0xe8>
 800405c:	7dfa      	ldrb	r2, [r7, #23]
 800405e:	4960      	ldr	r1, [pc, #384]	; (80041e0 <SpiritRadioGetdBm2Reg+0x20c>)
 8004060:	4613      	mov	r3, r2
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	4413      	add	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	440b      	add	r3, r1
 800406a:	3308      	adds	r3, #8
 800406c:	edd3 7a00 	vldr	s15, [r3]
 8004070:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8004074:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004078:	7dfa      	ldrb	r2, [r7, #23]
 800407a:	4959      	ldr	r1, [pc, #356]	; (80041e0 <SpiritRadioGetdBm2Reg+0x20c>)
 800407c:	4613      	mov	r3, r2
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	4413      	add	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	440b      	add	r3, r1
 8004086:	330c      	adds	r3, #12
 8004088:	ed93 6a00 	vldr	s12, [r3]
 800408c:	7dfa      	ldrb	r2, [r7, #23]
 800408e:	4954      	ldr	r1, [pc, #336]	; (80041e0 <SpiritRadioGetdBm2Reg+0x20c>)
 8004090:	4613      	mov	r3, r2
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4413      	add	r3, r2
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	440b      	add	r3, r1
 800409a:	3308      	adds	r3, #8
 800409c:	edd3 6a00 	vldr	s13, [r3]
 80040a0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80040a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80040ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b4:	dd02      	ble.n	80040bc <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	75bb      	strb	r3, [r7, #22]
 80040ba:	e035      	b.n	8004128 <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 80040bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80040c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c8:	d82e      	bhi.n	8004128 <SpiritRadioGetdBm2Reg+0x154>
 80040ca:	7dfa      	ldrb	r2, [r7, #23]
 80040cc:	4944      	ldr	r1, [pc, #272]	; (80041e0 <SpiritRadioGetdBm2Reg+0x20c>)
 80040ce:	4613      	mov	r3, r2
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	4413      	add	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	440b      	add	r3, r1
 80040d8:	3308      	adds	r3, #8
 80040da:	edd3 7a00 	vldr	s15, [r3]
 80040de:	eddf 6a41 	vldr	s13, [pc, #260]	; 80041e4 <SpiritRadioGetdBm2Reg+0x210>
 80040e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040e6:	7dfa      	ldrb	r2, [r7, #23]
 80040e8:	493d      	ldr	r1, [pc, #244]	; (80041e0 <SpiritRadioGetdBm2Reg+0x20c>)
 80040ea:	4613      	mov	r3, r2
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	4413      	add	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	440b      	add	r3, r1
 80040f4:	330c      	adds	r3, #12
 80040f6:	ed93 6a00 	vldr	s12, [r3]
 80040fa:	7dfa      	ldrb	r2, [r7, #23]
 80040fc:	4938      	ldr	r1, [pc, #224]	; (80041e0 <SpiritRadioGetdBm2Reg+0x20c>)
 80040fe:	4613      	mov	r3, r2
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	4413      	add	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	440b      	add	r3, r1
 8004108:	3308      	adds	r3, #8
 800410a:	edd3 6a00 	vldr	s13, [r3]
 800410e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004116:	ed97 7a02 	vldr	s14, [r7, #8]
 800411a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800411e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004122:	d501      	bpl.n	8004128 <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 8004124:	2302      	movs	r3, #2
 8004126:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 8004128:	7dfa      	ldrb	r2, [r7, #23]
 800412a:	7dbb      	ldrb	r3, [r7, #22]
 800412c:	0059      	lsls	r1, r3, #1
 800412e:	482c      	ldr	r0, [pc, #176]	; (80041e0 <SpiritRadioGetdBm2Reg+0x20c>)
 8004130:	4613      	mov	r3, r2
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	4413      	add	r3, r2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	440b      	add	r3, r1
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4403      	add	r3, r0
 800413e:	ed93 7a00 	vldr	s14, [r3]
 8004142:	edd7 7a02 	vldr	s15, [r7, #8]
 8004146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800414a:	7dfa      	ldrb	r2, [r7, #23]
 800414c:	7dbb      	ldrb	r3, [r7, #22]
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	1c59      	adds	r1, r3, #1
 8004152:	4823      	ldr	r0, [pc, #140]	; (80041e0 <SpiritRadioGetdBm2Reg+0x20c>)
 8004154:	4613      	mov	r3, r2
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	4413      	add	r3, r2
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	440b      	add	r3, r1
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4403      	add	r3, r0
 8004162:	edd3 7a00 	vldr	s15, [r3]
 8004166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800416a:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 800416e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800417a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417e:	d503      	bpl.n	8004188 <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 8004180:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	e00a      	b.n	800419e <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 8004188:	edd7 7a04 	vldr	s15, [r7, #16]
 800418c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80041e8 <SpiritRadioGetdBm2Reg+0x214>
 8004190:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004198:	dd01      	ble.n	800419e <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 800419a:	4b14      	ldr	r3, [pc, #80]	; (80041ec <SpiritRadioGetdBm2Reg+0x218>)
 800419c:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 800419e:	edd7 7a04 	vldr	s15, [r7, #16]
 80041a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041a6:	edc7 7a01 	vstr	s15, [r7, #4]
 80041aa:	793b      	ldrb	r3, [r7, #4]
 80041ac:	b2db      	uxtb	r3, r3
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	2e5f5680 	.word	0x2e5f5680
 80041c0:	390c2fe0 	.word	0x390c2fe0
 80041c4:	35a4e8ff 	.word	0x35a4e8ff
 80041c8:	1701e47f 	.word	0x1701e47f
 80041cc:	1c146a60 	.word	0x1c146a60
 80041d0:	11d260bf 	.word	0x11d260bf
 80041d4:	14ced7e0 	.word	0x14ced7e0
 80041d8:	08e18f3f 	.word	0x08e18f3f
 80041dc:	0a6fd060 	.word	0x0a6fd060
 80041e0:	0800c530 	.word	0x0800c530
 80041e4:	42200000 	.word	0x42200000
 80041e8:	42b40000 	.word	0x42b40000
 80041ec:	42b40000 	.word	0x42b40000

080041f0 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	ed87 0a00 	vstr	s0, [r7]
 80041fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 80041fe:	f7ff fc4d 	bl	8003a9c <SpiritRadioGetFrequencyBase>
 8004202:	4603      	mov	r3, r0
 8004204:	ed97 0a00 	vldr	s0, [r7]
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fee3 	bl	8003fd4 <SpiritRadioGetdBm2Reg>
 800420e:	4603      	mov	r3, r0
 8004210:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8004212:	79fb      	ldrb	r3, [r7, #7]
 8004214:	f1c3 0317 	rsb	r3, r3, #23
 8004218:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 800421a:	f107 020e 	add.w	r2, r7, #14
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	2101      	movs	r1, #1
 8004222:	4618      	mov	r0, r3
 8004224:	f000 f9ec 	bl	8004600 <RadioSpiWriteRegisters>
 8004228:	4602      	mov	r2, r0
 800422a:	4b05      	ldr	r3, [pc, #20]	; (8004240 <SpiritRadioSetPALeveldBm+0x50>)
 800422c:	b212      	sxth	r2, r2
 800422e:	4611      	mov	r1, r2
 8004230:	7019      	strb	r1, [r3, #0]
 8004232:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004236:	705a      	strb	r2, [r3, #1]
  
}
 8004238:	bf00      	nop
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	200027d0 	.word	0x200027d0

08004244 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800424e:	f107 030f 	add.w	r3, r7, #15
 8004252:	461a      	mov	r2, r3
 8004254:	2101      	movs	r1, #1
 8004256:	2018      	movs	r0, #24
 8004258:	f000 fa1e 	bl	8004698 <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004262:	b2db      	uxtb	r3, r3
 8004264:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8004266:	7bfa      	ldrb	r2, [r7, #15]
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	4313      	orrs	r3, r2
 800426c:	b2db      	uxtb	r3, r3
 800426e:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8004270:	f107 030f 	add.w	r3, r7, #15
 8004274:	461a      	mov	r2, r3
 8004276:	2101      	movs	r1, #1
 8004278:	2018      	movs	r0, #24
 800427a:	f000 f9c1 	bl	8004600 <RadioSpiWriteRegisters>
 800427e:	4602      	mov	r2, r0
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <SpiritRadioSetPACwc+0x54>)
 8004282:	b212      	sxth	r2, r2
 8004284:	4611      	mov	r1, r2
 8004286:	7019      	strb	r1, [r3, #0]
 8004288:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800428c:	705a      	strb	r2, [r3, #1]
  
}
 800428e:	bf00      	nop
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	200027d0 	.word	0x200027d0

0800429c <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80042a6:	f107 030f 	add.w	r3, r7, #15
 80042aa:	461a      	mov	r2, r3
 80042ac:	2101      	movs	r1, #1
 80042ae:	2018      	movs	r0, #24
 80042b0:	f000 f9f2 	bl	8004698 <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	f023 0307 	bic.w	r3, r3, #7
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 80042be:	7bfa      	ldrb	r2, [r7, #15]
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80042c8:	f107 030f 	add.w	r3, r7, #15
 80042cc:	461a      	mov	r2, r3
 80042ce:	2101      	movs	r1, #1
 80042d0:	2018      	movs	r0, #24
 80042d2:	f000 f995 	bl	8004600 <RadioSpiWriteRegisters>
 80042d6:	4602      	mov	r2, r0
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <SpiritRadioSetPALevelMaxIndex+0x54>)
 80042da:	b212      	sxth	r2, r2
 80042dc:	4611      	mov	r1, r2
 80042de:	7019      	strb	r1, [r3, #0]
 80042e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80042e4:	705a      	strb	r2, [r3, #1]
  
}
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	200027d0 	.word	0x200027d0

080042f4 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 80042fe:	2300      	movs	r3, #0
 8004300:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8004302:	f107 030f 	add.w	r3, r7, #15
 8004306:	461a      	mov	r2, r3
 8004308:	2101      	movs	r1, #1
 800430a:	201e      	movs	r0, #30
 800430c:	f000 f9c4 	bl	8004698 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d105      	bne.n	8004322 <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800431c:	b2db      	uxtb	r3, r3
 800431e:	73fb      	strb	r3, [r7, #15]
 8004320:	e004      	b.n	800432c <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004328:	b2db      	uxtb	r3, r3
 800432a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 800432c:	f107 030f 	add.w	r3, r7, #15
 8004330:	461a      	mov	r2, r3
 8004332:	2101      	movs	r1, #1
 8004334:	201e      	movs	r0, #30
 8004336:	f000 f963 	bl	8004600 <RadioSpiWriteRegisters>
 800433a:	4602      	mov	r2, r0
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <SpiritRadioAFCFreezeOnSync+0x60>)
 800433e:	b212      	sxth	r2, r2
 8004340:	4611      	mov	r1, r2
 8004342:	7019      	strb	r1, [r3, #0]
 8004344:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004348:	705a      	strb	r2, [r3, #1]
  
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	200027d0 	.word	0x200027d0

08004358 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	4603      	mov	r3, r0
 8004360:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8004362:	f107 030f 	add.w	r3, r7, #15
 8004366:	461a      	mov	r2, r3
 8004368:	2101      	movs	r1, #1
 800436a:	209e      	movs	r0, #158	; 0x9e
 800436c:	f000 f994 	bl	8004698 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d105      	bne.n	8004382 <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800437c:	b2db      	uxtb	r3, r3
 800437e:	73fb      	strb	r3, [r7, #15]
 8004380:	e004      	b.n	800438c <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004388:	b2db      	uxtb	r3, r3
 800438a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800438c:	f107 030f 	add.w	r3, r7, #15
 8004390:	461a      	mov	r2, r3
 8004392:	2101      	movs	r1, #1
 8004394:	209e      	movs	r0, #158	; 0x9e
 8004396:	f000 f933 	bl	8004600 <RadioSpiWriteRegisters>
 800439a:	4602      	mov	r2, r0
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <SpiritRadioSetRefDiv+0x5c>)
 800439e:	b212      	sxth	r2, r2
 80043a0:	4611      	mov	r1, r2
 80043a2:	7019      	strb	r1, [r3, #0]
 80043a4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80043a8:	705a      	strb	r2, [r3, #1]
  
}
 80043aa:	bf00      	nop
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	200027d0 	.word	0x200027d0

080043b8 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80043be:	1dfb      	adds	r3, r7, #7
 80043c0:	461a      	mov	r2, r3
 80043c2:	2101      	movs	r1, #1
 80043c4:	209e      	movs	r0, #158	; 0x9e
 80043c6:	f000 f967 	bl	8004698 <RadioSpiReadRegisters>
 80043ca:	4602      	mov	r2, r0
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <SpiritRadioGetRefDiv+0x40>)
 80043ce:	b212      	sxth	r2, r2
 80043d0:	4611      	mov	r1, r2
 80043d2:	7019      	strb	r1, [r3, #0]
 80043d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80043d8:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	09db      	lsrs	r3, r3, #7
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 80043ec:	2300      	movs	r3, #0
  }
  
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	200027d0 	.word	0x200027d0

080043fc <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8004406:	f107 030f 	add.w	r3, r7, #15
 800440a:	461a      	mov	r2, r3
 800440c:	2101      	movs	r1, #1
 800440e:	20b4      	movs	r0, #180	; 0xb4
 8004410:	f000 f942 	bl	8004698 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d105      	bne.n	8004426 <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	f023 0308 	bic.w	r3, r3, #8
 8004420:	b2db      	uxtb	r3, r3
 8004422:	73fb      	strb	r3, [r7, #15]
 8004424:	e004      	b.n	8004430 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	f043 0308 	orr.w	r3, r3, #8
 800442c:	b2db      	uxtb	r3, r3
 800442e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8004430:	f107 030f 	add.w	r3, r7, #15
 8004434:	461a      	mov	r2, r3
 8004436:	2101      	movs	r1, #1
 8004438:	20b4      	movs	r0, #180	; 0xb4
 800443a:	f000 f8e1 	bl	8004600 <RadioSpiWriteRegisters>
 800443e:	4602      	mov	r2, r0
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <SpiritRadioSetDigDiv+0x5c>)
 8004442:	b212      	sxth	r2, r2
 8004444:	4611      	mov	r1, r2
 8004446:	7019      	strb	r1, [r3, #0]
 8004448:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800444c:	705a      	strb	r2, [r3, #1]
  
}
 800444e:	bf00      	nop
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	200027d0 	.word	0x200027d0

0800445c <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8004462:	1dfb      	adds	r3, r7, #7
 8004464:	461a      	mov	r2, r3
 8004466:	2101      	movs	r1, #1
 8004468:	20b4      	movs	r0, #180	; 0xb4
 800446a:	f000 f915 	bl	8004698 <RadioSpiReadRegisters>
 800446e:	4602      	mov	r2, r0
 8004470:	4b0a      	ldr	r3, [pc, #40]	; (800449c <SpiritRadioGetDigDiv+0x40>)
 8004472:	b212      	sxth	r2, r2
 8004474:	4611      	mov	r1, r2
 8004476:	7019      	strb	r1, [r3, #0]
 8004478:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800447c:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	08db      	lsrs	r3, r3, #3
 8004482:	b2db      	uxtb	r3, r3
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 800448c:	2300      	movs	r3, #0
 800448e:	e000      	b.n	8004492 <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8004490:	2301      	movs	r3, #1
  }
  
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	200027d0 	.word	0x200027d0

080044a0 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 80044a4:	4b03      	ldr	r3, [pc, #12]	; (80044b4 <SpiritRadioGetXtalFrequency+0x14>)
 80044a6:	681b      	ldr	r3, [r3, #0]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	200027cc 	.word	0x200027cc

080044b8 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 80044c0:	4a04      	ldr	r2, [pc, #16]	; (80044d4 <SpiritRadioSetXtalFrequency+0x1c>)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6013      	str	r3, [r2, #0]
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	200027cc 	.word	0x200027cc

080044d8 <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	71fb      	strb	r3, [r7, #7]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 80044e2:	1dfb      	adds	r3, r7, #7
 80044e4:	461a      	mov	r2, r3
 80044e6:	2101      	movs	r1, #1
 80044e8:	2054      	movs	r0, #84	; 0x54
 80044ea:	f000 f889 	bl	8004600 <RadioSpiWriteRegisters>
 80044ee:	4602      	mov	r2, r0
 80044f0:	4b05      	ldr	r3, [pc, #20]	; (8004508 <SpiritTimerSetRxTimeoutCounter+0x30>)
 80044f2:	b212      	sxth	r2, r2
 80044f4:	4611      	mov	r1, r2
 80044f6:	7019      	strb	r1, [r3, #0]
 80044f8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80044fc:	705a      	strb	r2, [r3, #1]

}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	200027d0 	.word	0x200027d0

0800450c <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8004516:	f107 030c 	add.w	r3, r7, #12
 800451a:	461a      	mov	r2, r3
 800451c:	2102      	movs	r1, #2
 800451e:	204f      	movs	r0, #79	; 0x4f
 8004520:	f000 f8ba 	bl	8004698 <RadioSpiReadRegisters>
 8004524:	4602      	mov	r2, r0
 8004526:	4b1c      	ldr	r3, [pc, #112]	; (8004598 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8004528:	b212      	sxth	r2, r2
 800452a:	4611      	mov	r1, r2
 800452c:	7019      	strb	r1, [r3, #0]
 800452e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004532:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8004534:	7b3b      	ldrb	r3, [r7, #12]
 8004536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800453a:	b2db      	uxtb	r3, r3
 800453c:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 800453e:	7b3b      	ldrb	r3, [r7, #12]
 8004540:	b25a      	sxtb	r2, r3
 8004542:	79fb      	ldrb	r3, [r7, #7]
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	b25b      	sxtb	r3, r3
 8004548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454c:	b25b      	sxtb	r3, r3
 800454e:	4313      	orrs	r3, r2
 8004550:	b25b      	sxtb	r3, r3
 8004552:	b2db      	uxtb	r3, r3
 8004554:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 8004556:	7b7b      	ldrb	r3, [r7, #13]
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	b2db      	uxtb	r3, r3
 800455e:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8004560:	7b7b      	ldrb	r3, [r7, #13]
 8004562:	b25a      	sxtb	r2, r3
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	015b      	lsls	r3, r3, #5
 8004568:	b25b      	sxtb	r3, r3
 800456a:	4313      	orrs	r3, r2
 800456c:	b25b      	sxtb	r3, r3
 800456e:	b2db      	uxtb	r3, r3
 8004570:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8004572:	f107 030c 	add.w	r3, r7, #12
 8004576:	461a      	mov	r2, r3
 8004578:	2102      	movs	r1, #2
 800457a:	204f      	movs	r0, #79	; 0x4f
 800457c:	f000 f840 	bl	8004600 <RadioSpiWriteRegisters>
 8004580:	4602      	mov	r2, r0
 8004582:	4b05      	ldr	r3, [pc, #20]	; (8004598 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8004584:	b212      	sxth	r2, r2
 8004586:	4611      	mov	r1, r2
 8004588:	7019      	strb	r1, [r3, #0]
 800458a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800458e:	705a      	strb	r2, [r3, #1]

}
 8004590:	bf00      	nop
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	200027d0 	.word	0x200027d0

0800459c <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 80045a2:	1d3b      	adds	r3, r7, #4
 80045a4:	461a      	mov	r2, r3
 80045a6:	2102      	movs	r1, #2
 80045a8:	20c0      	movs	r0, #192	; 0xc0
 80045aa:	f000 f875 	bl	8004698 <RadioSpiReadRegisters>
 80045ae:	4603      	mov	r3, r0
 80045b0:	4a09      	ldr	r2, [pc, #36]	; (80045d8 <SpiritRefreshStatus+0x3c>)
 80045b2:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 80045b4:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <SpiritRefreshStatus+0x3c>)
 80045b6:	781a      	ldrb	r2, [r3, #0]
 80045b8:	797b      	ldrb	r3, [r7, #5]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d1f1      	bne.n	80045a2 <SpiritRefreshStatus+0x6>
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 80045be:	4b07      	ldr	r3, [pc, #28]	; (80045dc <SpiritRefreshStatus+0x40>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d1ea      	bne.n	80045a2 <SpiritRefreshStatus+0x6>

}
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	200027d0 	.word	0x200027d0
 80045dc:	200027d1 	.word	0x200027d1

080045e0 <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <RadioSpiInit+0x1c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <RadioSpiInit+0x16>
  {
    Error_Handler();
 80045f2:	f7fd faeb 	bl	8001bcc <Error_Handler>
  }
}
 80045f6:	bf00      	nop
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	2000034c 	.word	0x2000034c

08004600 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af02      	add	r7, sp, #8
 8004606:	4603      	mov	r3, r0
 8004608:	603a      	str	r2, [r7, #0]
 800460a:	71fb      	strb	r3, [r7, #7]
 800460c:	460b      	mov	r3, r1
 800460e:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 8004610:	2300      	movs	r3, #0
 8004612:	743b      	strb	r3, [r7, #16]
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004618:	2017      	movs	r0, #23
 800461a:	f000 faad 	bl	8004b78 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 800461e:	2200      	movs	r2, #0
 8004620:	2140      	movs	r1, #64	; 0x40
 8004622:	481b      	ldr	r0, [pc, #108]	; (8004690 <RadioSpiWriteRegisters+0x90>)
 8004624:	f000 fc60 	bl	8004ee8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004628:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <RadioSpiWriteRegisters+0x94>)
 800462a:	6818      	ldr	r0, [r3, #0]
 800462c:	f107 020c 	add.w	r2, r7, #12
 8004630:	f107 0110 	add.w	r1, r7, #16
 8004634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	2302      	movs	r3, #2
 800463c:	f002 fb25 	bl	8006c8a <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004640:	4b14      	ldr	r3, [pc, #80]	; (8004694 <RadioSpiWriteRegisters+0x94>)
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	79bb      	ldrb	r3, [r7, #6]
 8004646:	b29a      	uxth	r2, r3
 8004648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800464c:	6839      	ldr	r1, [r7, #0]
 800464e:	f002 f870 	bl	8006732 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004652:	2201      	movs	r2, #1
 8004654:	2140      	movs	r1, #64	; 0x40
 8004656:	480e      	ldr	r0, [pc, #56]	; (8004690 <RadioSpiWriteRegisters+0x90>)
 8004658:	f000 fc46 	bl	8004ee8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 800465c:	2017      	movs	r0, #23
 800465e:	f000 fa7d 	bl	8004b5c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004662:	f107 0308 	add.w	r3, r7, #8
 8004666:	3301      	adds	r3, #1
 8004668:	7b3a      	ldrb	r2, [r7, #12]
 800466a:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 800466c:	f107 0308 	add.w	r3, r7, #8
 8004670:	7b7a      	ldrb	r2, [r7, #13]
 8004672:	701a      	strb	r2, [r3, #0]

  return status;
 8004674:	893b      	ldrh	r3, [r7, #8]
 8004676:	82bb      	strh	r3, [r7, #20]
 8004678:	2300      	movs	r3, #0
 800467a:	7d3a      	ldrb	r2, [r7, #20]
 800467c:	f362 0307 	bfi	r3, r2, #0, #8
 8004680:	7d7a      	ldrb	r2, [r7, #21]
 8004682:	f362 230f 	bfi	r3, r2, #8, #8

}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	48000400 	.word	0x48000400
 8004694:	2000034c 	.word	0x2000034c

08004698 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af02      	add	r7, sp, #8
 800469e:	4603      	mov	r3, r0
 80046a0:	603a      	str	r2, [r7, #0]
 80046a2:	71fb      	strb	r3, [r7, #7]
 80046a4:	460b      	mov	r3, r1
 80046a6:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 80046a8:	2301      	movs	r3, #1
 80046aa:	743b      	strb	r3, [r7, #16]
 80046ac:	79fb      	ldrb	r3, [r7, #7]
 80046ae:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80046b0:	2017      	movs	r0, #23
 80046b2:	f000 fa61 	bl	8004b78 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80046b6:	2200      	movs	r2, #0
 80046b8:	2140      	movs	r1, #64	; 0x40
 80046ba:	481b      	ldr	r0, [pc, #108]	; (8004728 <RadioSpiReadRegisters+0x90>)
 80046bc:	f000 fc14 	bl	8004ee8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80046c0:	4b1a      	ldr	r3, [pc, #104]	; (800472c <RadioSpiReadRegisters+0x94>)
 80046c2:	6818      	ldr	r0, [r3, #0]
 80046c4:	f107 020c 	add.w	r2, r7, #12
 80046c8:	f107 0110 	add.w	r1, r7, #16
 80046cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	2302      	movs	r3, #2
 80046d4:	f002 fad9 	bl	8006c8a <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80046d8:	4b14      	ldr	r3, [pc, #80]	; (800472c <RadioSpiReadRegisters+0x94>)
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	79bb      	ldrb	r3, [r7, #6]
 80046de:	b29a      	uxth	r2, r3
 80046e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046e4:	6839      	ldr	r1, [r7, #0]
 80046e6:	f002 f999 	bl	8006a1c <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80046ea:	2201      	movs	r2, #1
 80046ec:	2140      	movs	r1, #64	; 0x40
 80046ee:	480e      	ldr	r0, [pc, #56]	; (8004728 <RadioSpiReadRegisters+0x90>)
 80046f0:	f000 fbfa 	bl	8004ee8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80046f4:	2017      	movs	r0, #23
 80046f6:	f000 fa31 	bl	8004b5c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80046fa:	f107 0308 	add.w	r3, r7, #8
 80046fe:	3301      	adds	r3, #1
 8004700:	7b3a      	ldrb	r2, [r7, #12]
 8004702:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004704:	f107 0308 	add.w	r3, r7, #8
 8004708:	7b7a      	ldrb	r2, [r7, #13]
 800470a:	701a      	strb	r2, [r3, #0]

  return status;
 800470c:	893b      	ldrh	r3, [r7, #8]
 800470e:	82bb      	strh	r3, [r7, #20]
 8004710:	2300      	movs	r3, #0
 8004712:	7d3a      	ldrb	r2, [r7, #20]
 8004714:	f362 0307 	bfi	r3, r2, #0, #8
 8004718:	7d7a      	ldrb	r2, [r7, #21]
 800471a:	f362 230f 	bfi	r3, r2, #8, #8
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	48000400 	.word	0x48000400
 800472c:	2000034c 	.word	0x2000034c

08004730 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af02      	add	r7, sp, #8
 8004736:	4603      	mov	r3, r0
 8004738:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	743b      	strb	r3, [r7, #16]
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004742:	2017      	movs	r0, #23
 8004744:	f000 fa18 	bl	8004b78 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004748:	2200      	movs	r2, #0
 800474a:	2140      	movs	r1, #64	; 0x40
 800474c:	4816      	ldr	r0, [pc, #88]	; (80047a8 <RadioSpiCommandStrobes+0x78>)
 800474e:	f000 fbcb 	bl	8004ee8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004752:	4b16      	ldr	r3, [pc, #88]	; (80047ac <RadioSpiCommandStrobes+0x7c>)
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	f107 020c 	add.w	r2, r7, #12
 800475a:	f107 0110 	add.w	r1, r7, #16
 800475e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	2302      	movs	r3, #2
 8004766:	f002 fa90 	bl	8006c8a <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800476a:	2201      	movs	r2, #1
 800476c:	2140      	movs	r1, #64	; 0x40
 800476e:	480e      	ldr	r0, [pc, #56]	; (80047a8 <RadioSpiCommandStrobes+0x78>)
 8004770:	f000 fbba 	bl	8004ee8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004774:	2017      	movs	r0, #23
 8004776:	f000 f9f1 	bl	8004b5c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800477a:	f107 0308 	add.w	r3, r7, #8
 800477e:	3301      	adds	r3, #1
 8004780:	7b3a      	ldrb	r2, [r7, #12]
 8004782:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004784:	f107 0308 	add.w	r3, r7, #8
 8004788:	7b7a      	ldrb	r2, [r7, #13]
 800478a:	701a      	strb	r2, [r3, #0]

  return status;
 800478c:	893b      	ldrh	r3, [r7, #8]
 800478e:	82bb      	strh	r3, [r7, #20]
 8004790:	2300      	movs	r3, #0
 8004792:	7d3a      	ldrb	r2, [r7, #20]
 8004794:	f362 0307 	bfi	r3, r2, #0, #8
 8004798:	7d7a      	ldrb	r2, [r7, #21]
 800479a:	f362 230f 	bfi	r3, r2, #8, #8
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	48000400 	.word	0x48000400
 80047ac:	2000034c 	.word	0x2000034c

080047b0 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	4603      	mov	r3, r0
 80047b8:	6039      	str	r1, [r7, #0]
 80047ba:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 80047bc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80047c0:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80047c2:	2017      	movs	r0, #23
 80047c4:	f000 f9d8 	bl	8004b78 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80047c8:	2200      	movs	r2, #0
 80047ca:	2140      	movs	r1, #64	; 0x40
 80047cc:	481a      	ldr	r0, [pc, #104]	; (8004838 <RadioSpiWriteFifo+0x88>)
 80047ce:	f000 fb8b 	bl	8004ee8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80047d2:	4b1a      	ldr	r3, [pc, #104]	; (800483c <RadioSpiWriteFifo+0x8c>)
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	f107 020c 	add.w	r2, r7, #12
 80047da:	f107 0110 	add.w	r1, r7, #16
 80047de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	2302      	movs	r3, #2
 80047e6:	f002 fa50 	bl	8006c8a <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80047ea:	4b14      	ldr	r3, [pc, #80]	; (800483c <RadioSpiWriteFifo+0x8c>)
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047f6:	6839      	ldr	r1, [r7, #0]
 80047f8:	f001 ff9b 	bl	8006732 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80047fc:	2201      	movs	r2, #1
 80047fe:	2140      	movs	r1, #64	; 0x40
 8004800:	480d      	ldr	r0, [pc, #52]	; (8004838 <RadioSpiWriteFifo+0x88>)
 8004802:	f000 fb71 	bl	8004ee8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004806:	2017      	movs	r0, #23
 8004808:	f000 f9a8 	bl	8004b5c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800480c:	f107 0308 	add.w	r3, r7, #8
 8004810:	3301      	adds	r3, #1
 8004812:	7b3a      	ldrb	r2, [r7, #12]
 8004814:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004816:	f107 0308 	add.w	r3, r7, #8
 800481a:	7b7a      	ldrb	r2, [r7, #13]
 800481c:	701a      	strb	r2, [r3, #0]

  return status;
 800481e:	893b      	ldrh	r3, [r7, #8]
 8004820:	82bb      	strh	r3, [r7, #20]
 8004822:	2300      	movs	r3, #0
 8004824:	7d3a      	ldrb	r2, [r7, #20]
 8004826:	f362 0307 	bfi	r3, r2, #0, #8
 800482a:	7d7a      	ldrb	r2, [r7, #21]
 800482c:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	48000400 	.word	0x48000400
 800483c:	2000034c 	.word	0x2000034c

08004840 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval Device status
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af02      	add	r7, sp, #8
 8004846:	4603      	mov	r3, r0
 8004848:	6039      	str	r1, [r7, #0]
 800484a:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {READ_HEADER, LINEAR_FIFO_ADDRESS};
 800484c:	f64f 7301 	movw	r3, #65281	; 0xff01
 8004850:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004852:	2017      	movs	r0, #23
 8004854:	f000 f990 	bl	8004b78 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004858:	2200      	movs	r2, #0
 800485a:	2140      	movs	r1, #64	; 0x40
 800485c:	481a      	ldr	r0, [pc, #104]	; (80048c8 <RadioSpiReadFifo+0x88>)
 800485e:	f000 fb43 	bl	8004ee8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004862:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <RadioSpiReadFifo+0x8c>)
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	f107 020c 	add.w	r2, r7, #12
 800486a:	f107 0110 	add.w	r1, r7, #16
 800486e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	2302      	movs	r3, #2
 8004876:	f002 fa08 	bl	8006c8a <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800487a:	4b14      	ldr	r3, [pc, #80]	; (80048cc <RadioSpiReadFifo+0x8c>)
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	b29a      	uxth	r2, r3
 8004882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004886:	6839      	ldr	r1, [r7, #0]
 8004888:	f002 f8c8 	bl	8006a1c <HAL_SPI_Receive>
  RadioSpiCSHigh();  // Puts the SPI chip select high to end the transaction
 800488c:	2201      	movs	r2, #1
 800488e:	2140      	movs	r1, #64	; 0x40
 8004890:	480d      	ldr	r0, [pc, #52]	; (80048c8 <RadioSpiReadFifo+0x88>)
 8004892:	f000 fb29 	bl	8004ee8 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004896:	2017      	movs	r0, #23
 8004898:	f000 f960 	bl	8004b5c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800489c:	f107 0308 	add.w	r3, r7, #8
 80048a0:	3301      	adds	r3, #1
 80048a2:	7b3a      	ldrb	r2, [r7, #12]
 80048a4:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80048a6:	f107 0308 	add.w	r3, r7, #8
 80048aa:	7b7a      	ldrb	r2, [r7, #13]
 80048ac:	701a      	strb	r2, [r3, #0]

  return status;
 80048ae:	893b      	ldrh	r3, [r7, #8]
 80048b0:	82bb      	strh	r3, [r7, #20]
 80048b2:	2300      	movs	r3, #0
 80048b4:	7d3a      	ldrb	r2, [r7, #20]
 80048b6:	f362 0307 	bfi	r3, r2, #0, #8
 80048ba:	7d7a      	ldrb	r2, [r7, #21]
 80048bc:	f362 230f 	bfi	r3, r2, #8, #8
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	48000400 	.word	0x48000400
 80048cc:	2000034c 	.word	0x2000034c

080048d0 <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 80048d4:	2201      	movs	r2, #1
 80048d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048de:	f000 fb03 	bl	8004ee8 <HAL_GPIO_WritePin>
}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 80048ea:	2200      	movs	r2, #0
 80048ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048f4:	f000 faf8 	bl	8004ee8 <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
//  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
}
 80048f8:	bf00      	nop
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004906:	2003      	movs	r0, #3
 8004908:	f000 f901 	bl	8004b0e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800490c:	200f      	movs	r0, #15
 800490e:	f7fd fb1f 	bl	8001f50 <HAL_InitTick>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	71fb      	strb	r3, [r7, #7]
 800491c:	e001      	b.n	8004922 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800491e:	f7fd faef 	bl	8001f00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004922:	79fb      	ldrb	r3, [r7, #7]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004930:	4b06      	ldr	r3, [pc, #24]	; (800494c <HAL_IncTick+0x20>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	461a      	mov	r2, r3
 8004936:	4b06      	ldr	r3, [pc, #24]	; (8004950 <HAL_IncTick+0x24>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4413      	add	r3, r2
 800493c:	4a04      	ldr	r2, [pc, #16]	; (8004950 <HAL_IncTick+0x24>)
 800493e:	6013      	str	r3, [r2, #0]
}
 8004940:	bf00      	nop
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	20000354 	.word	0x20000354
 8004950:	200027d4 	.word	0x200027d4

08004954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  return uwTick;
 8004958:	4b03      	ldr	r3, [pc, #12]	; (8004968 <HAL_GetTick+0x14>)
 800495a:	681b      	ldr	r3, [r3, #0]
}
 800495c:	4618      	mov	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	200027d4 	.word	0x200027d4

0800496c <__NVIC_SetPriorityGrouping>:
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800497c:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <__NVIC_SetPriorityGrouping+0x44>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004988:	4013      	ands	r3, r2
 800498a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800499c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800499e:	4a04      	ldr	r2, [pc, #16]	; (80049b0 <__NVIC_SetPriorityGrouping+0x44>)
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	60d3      	str	r3, [r2, #12]
}
 80049a4:	bf00      	nop
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	e000ed00 	.word	0xe000ed00

080049b4 <__NVIC_GetPriorityGrouping>:
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049b8:	4b04      	ldr	r3, [pc, #16]	; (80049cc <__NVIC_GetPriorityGrouping+0x18>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	0a1b      	lsrs	r3, r3, #8
 80049be:	f003 0307 	and.w	r3, r3, #7
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	e000ed00 	.word	0xe000ed00

080049d0 <__NVIC_EnableIRQ>:
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	db0b      	blt.n	80049fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	f003 021f 	and.w	r2, r3, #31
 80049e8:	4907      	ldr	r1, [pc, #28]	; (8004a08 <__NVIC_EnableIRQ+0x38>)
 80049ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	2001      	movs	r0, #1
 80049f2:	fa00 f202 	lsl.w	r2, r0, r2
 80049f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	e000e100 	.word	0xe000e100

08004a0c <__NVIC_DisableIRQ>:
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	db12      	blt.n	8004a44 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	f003 021f 	and.w	r2, r3, #31
 8004a24:	490a      	ldr	r1, [pc, #40]	; (8004a50 <__NVIC_DisableIRQ+0x44>)
 8004a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a32:	3320      	adds	r3, #32
 8004a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a38:	f3bf 8f4f 	dsb	sy
}
 8004a3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a3e:	f3bf 8f6f 	isb	sy
}
 8004a42:	bf00      	nop
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	e000e100 	.word	0xe000e100

08004a54 <__NVIC_SetPriority>:
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	6039      	str	r1, [r7, #0]
 8004a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	db0a      	blt.n	8004a7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	490c      	ldr	r1, [pc, #48]	; (8004aa0 <__NVIC_SetPriority+0x4c>)
 8004a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a72:	0112      	lsls	r2, r2, #4
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	440b      	add	r3, r1
 8004a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a7c:	e00a      	b.n	8004a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	4908      	ldr	r1, [pc, #32]	; (8004aa4 <__NVIC_SetPriority+0x50>)
 8004a84:	79fb      	ldrb	r3, [r7, #7]
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	3b04      	subs	r3, #4
 8004a8c:	0112      	lsls	r2, r2, #4
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	440b      	add	r3, r1
 8004a92:	761a      	strb	r2, [r3, #24]
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	e000e100 	.word	0xe000e100
 8004aa4:	e000ed00 	.word	0xe000ed00

08004aa8 <NVIC_EncodePriority>:
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b089      	sub	sp, #36	; 0x24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f1c3 0307 	rsb	r3, r3, #7
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	bf28      	it	cs
 8004ac6:	2304      	movcs	r3, #4
 8004ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	3304      	adds	r3, #4
 8004ace:	2b06      	cmp	r3, #6
 8004ad0:	d902      	bls.n	8004ad8 <NVIC_EncodePriority+0x30>
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	3b03      	subs	r3, #3
 8004ad6:	e000      	b.n	8004ada <NVIC_EncodePriority+0x32>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004adc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43da      	mvns	r2, r3
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	401a      	ands	r2, r3
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004af0:	f04f 31ff 	mov.w	r1, #4294967295
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	fa01 f303 	lsl.w	r3, r1, r3
 8004afa:	43d9      	mvns	r1, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b00:	4313      	orrs	r3, r2
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3724      	adds	r7, #36	; 0x24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff ff28 	bl	800496c <__NVIC_SetPriorityGrouping>
}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b36:	f7ff ff3d 	bl	80049b4 <__NVIC_GetPriorityGrouping>
 8004b3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	6978      	ldr	r0, [r7, #20]
 8004b42:	f7ff ffb1 	bl	8004aa8 <NVIC_EncodePriority>
 8004b46:	4602      	mov	r2, r0
 8004b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff ff80 	bl	8004a54 <__NVIC_SetPriority>
}
 8004b54:	bf00      	nop
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff ff30 	bl	80049d0 <__NVIC_EnableIRQ>
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff ff40 	bl	8004a0c <__NVIC_DisableIRQ>
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ba2:	e17f      	b.n	8004ea4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	2101      	movs	r1, #1
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8171 	beq.w	8004e9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d005      	beq.n	8004bd4 <HAL_GPIO_Init+0x40>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d130      	bne.n	8004c36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	2203      	movs	r2, #3
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	43db      	mvns	r3, r3
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4013      	ands	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43db      	mvns	r3, r3
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4013      	ands	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	091b      	lsrs	r3, r3, #4
 8004c20:	f003 0201 	and.w	r2, r3, #1
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d118      	bne.n	8004c74 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004c48:	2201      	movs	r2, #1
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4013      	ands	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	08db      	lsrs	r3, r3, #3
 8004c5e:	f003 0201 	and.w	r2, r3, #1
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f003 0303 	and.w	r3, r3, #3
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d017      	beq.n	8004cb0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	43db      	mvns	r3, r3
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4013      	ands	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d123      	bne.n	8004d04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	08da      	lsrs	r2, r3, #3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3208      	adds	r2, #8
 8004cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	220f      	movs	r2, #15
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	08da      	lsrs	r2, r3, #3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3208      	adds	r2, #8
 8004cfe:	6939      	ldr	r1, [r7, #16]
 8004d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	2203      	movs	r2, #3
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	43db      	mvns	r3, r3
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f003 0203 	and.w	r2, r3, #3
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 80ac 	beq.w	8004e9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d46:	4b5f      	ldr	r3, [pc, #380]	; (8004ec4 <HAL_GPIO_Init+0x330>)
 8004d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d4a:	4a5e      	ldr	r2, [pc, #376]	; (8004ec4 <HAL_GPIO_Init+0x330>)
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	6613      	str	r3, [r2, #96]	; 0x60
 8004d52:	4b5c      	ldr	r3, [pc, #368]	; (8004ec4 <HAL_GPIO_Init+0x330>)
 8004d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d5e:	4a5a      	ldr	r2, [pc, #360]	; (8004ec8 <HAL_GPIO_Init+0x334>)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	089b      	lsrs	r3, r3, #2
 8004d64:	3302      	adds	r3, #2
 8004d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	220f      	movs	r2, #15
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d88:	d025      	beq.n	8004dd6 <HAL_GPIO_Init+0x242>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a4f      	ldr	r2, [pc, #316]	; (8004ecc <HAL_GPIO_Init+0x338>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d01f      	beq.n	8004dd2 <HAL_GPIO_Init+0x23e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a4e      	ldr	r2, [pc, #312]	; (8004ed0 <HAL_GPIO_Init+0x33c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d019      	beq.n	8004dce <HAL_GPIO_Init+0x23a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a4d      	ldr	r2, [pc, #308]	; (8004ed4 <HAL_GPIO_Init+0x340>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d013      	beq.n	8004dca <HAL_GPIO_Init+0x236>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a4c      	ldr	r2, [pc, #304]	; (8004ed8 <HAL_GPIO_Init+0x344>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00d      	beq.n	8004dc6 <HAL_GPIO_Init+0x232>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a4b      	ldr	r2, [pc, #300]	; (8004edc <HAL_GPIO_Init+0x348>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d007      	beq.n	8004dc2 <HAL_GPIO_Init+0x22e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a4a      	ldr	r2, [pc, #296]	; (8004ee0 <HAL_GPIO_Init+0x34c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d101      	bne.n	8004dbe <HAL_GPIO_Init+0x22a>
 8004dba:	2306      	movs	r3, #6
 8004dbc:	e00c      	b.n	8004dd8 <HAL_GPIO_Init+0x244>
 8004dbe:	2307      	movs	r3, #7
 8004dc0:	e00a      	b.n	8004dd8 <HAL_GPIO_Init+0x244>
 8004dc2:	2305      	movs	r3, #5
 8004dc4:	e008      	b.n	8004dd8 <HAL_GPIO_Init+0x244>
 8004dc6:	2304      	movs	r3, #4
 8004dc8:	e006      	b.n	8004dd8 <HAL_GPIO_Init+0x244>
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e004      	b.n	8004dd8 <HAL_GPIO_Init+0x244>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	e002      	b.n	8004dd8 <HAL_GPIO_Init+0x244>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <HAL_GPIO_Init+0x244>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	f002 0203 	and.w	r2, r2, #3
 8004dde:	0092      	lsls	r2, r2, #2
 8004de0:	4093      	lsls	r3, r2
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004de8:	4937      	ldr	r1, [pc, #220]	; (8004ec8 <HAL_GPIO_Init+0x334>)
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	089b      	lsrs	r3, r3, #2
 8004dee:	3302      	adds	r3, #2
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004df6:	4b3b      	ldr	r3, [pc, #236]	; (8004ee4 <HAL_GPIO_Init+0x350>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4013      	ands	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e1a:	4a32      	ldr	r2, [pc, #200]	; (8004ee4 <HAL_GPIO_Init+0x350>)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e20:	4b30      	ldr	r3, [pc, #192]	; (8004ee4 <HAL_GPIO_Init+0x350>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e44:	4a27      	ldr	r2, [pc, #156]	; (8004ee4 <HAL_GPIO_Init+0x350>)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004e4a:	4b26      	ldr	r3, [pc, #152]	; (8004ee4 <HAL_GPIO_Init+0x350>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	43db      	mvns	r3, r3
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4013      	ands	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <HAL_GPIO_Init+0x350>)
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004e74:	4b1b      	ldr	r3, [pc, #108]	; (8004ee4 <HAL_GPIO_Init+0x350>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	43db      	mvns	r3, r3
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4013      	ands	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e98:	4a12      	ldr	r2, [pc, #72]	; (8004ee4 <HAL_GPIO_Init+0x350>)
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f47f ae78 	bne.w	8004ba4 <HAL_GPIO_Init+0x10>
  }
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	40010000 	.word	0x40010000
 8004ecc:	48000400 	.word	0x48000400
 8004ed0:	48000800 	.word	0x48000800
 8004ed4:	48000c00 	.word	0x48000c00
 8004ed8:	48001000 	.word	0x48001000
 8004edc:	48001400 	.word	0x48001400
 8004ee0:	48001800 	.word	0x48001800
 8004ee4:	40010400 	.word	0x40010400

08004ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	807b      	strh	r3, [r7, #2]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ef8:	787b      	ldrb	r3, [r7, #1]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004efe:	887a      	ldrh	r2, [r7, #2]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f04:	e002      	b.n	8004f0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f06:	887a      	ldrh	r2, [r7, #2]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f22:	4b08      	ldr	r3, [pc, #32]	; (8004f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f24:	695a      	ldr	r2, [r3, #20]
 8004f26:	88fb      	ldrh	r3, [r7, #6]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d006      	beq.n	8004f3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f2e:	4a05      	ldr	r2, [pc, #20]	; (8004f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f30:	88fb      	ldrh	r3, [r7, #6]
 8004f32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f34:	88fb      	ldrh	r3, [r7, #6]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fc f820 	bl	8000f7c <HAL_GPIO_EXTI_Callback>
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40010400 	.word	0x40010400

08004f48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004f4c:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <HAL_PWREx_GetVoltageRange+0x18>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	40007000 	.word	0x40007000

08004f64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f72:	d130      	bne.n	8004fd6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f74:	4b23      	ldr	r3, [pc, #140]	; (8005004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f80:	d038      	beq.n	8004ff4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f82:	4b20      	ldr	r3, [pc, #128]	; (8005004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f8a:	4a1e      	ldr	r2, [pc, #120]	; (8005004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f92:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2232      	movs	r2, #50	; 0x32
 8004f98:	fb02 f303 	mul.w	r3, r2, r3
 8004f9c:	4a1b      	ldr	r2, [pc, #108]	; (800500c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa2:	0c9b      	lsrs	r3, r3, #18
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fa8:	e002      	b.n	8004fb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fb0:	4b14      	ldr	r3, [pc, #80]	; (8005004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fbc:	d102      	bne.n	8004fc4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1f2      	bne.n	8004faa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd0:	d110      	bne.n	8004ff4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e00f      	b.n	8004ff6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fd6:	4b0b      	ldr	r3, [pc, #44]	; (8005004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe2:	d007      	beq.n	8004ff4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fe4:	4b07      	ldr	r3, [pc, #28]	; (8005004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fec:	4a05      	ldr	r2, [pc, #20]	; (8005004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ff2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40007000 	.word	0x40007000
 8005008:	20000344 	.word	0x20000344
 800500c:	431bde83 	.word	0x431bde83

08005010 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e3ca      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005022:	4b97      	ldr	r3, [pc, #604]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 030c 	and.w	r3, r3, #12
 800502a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800502c:	4b94      	ldr	r3, [pc, #592]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0303 	and.w	r3, r3, #3
 8005034:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 80e4 	beq.w	800520c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d007      	beq.n	800505a <HAL_RCC_OscConfig+0x4a>
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b0c      	cmp	r3, #12
 800504e:	f040 808b 	bne.w	8005168 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b01      	cmp	r3, #1
 8005056:	f040 8087 	bne.w	8005168 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800505a:	4b89      	ldr	r3, [pc, #548]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d005      	beq.n	8005072 <HAL_RCC_OscConfig+0x62>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e3a2      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1a      	ldr	r2, [r3, #32]
 8005076:	4b82      	ldr	r3, [pc, #520]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d004      	beq.n	800508c <HAL_RCC_OscConfig+0x7c>
 8005082:	4b7f      	ldr	r3, [pc, #508]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800508a:	e005      	b.n	8005098 <HAL_RCC_OscConfig+0x88>
 800508c:	4b7c      	ldr	r3, [pc, #496]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 800508e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005092:	091b      	lsrs	r3, r3, #4
 8005094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005098:	4293      	cmp	r3, r2
 800509a:	d223      	bcs.n	80050e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fd87 	bl	8005bb4 <RCC_SetFlashLatencyFromMSIRange>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e383      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050b0:	4b73      	ldr	r3, [pc, #460]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a72      	ldr	r2, [pc, #456]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80050b6:	f043 0308 	orr.w	r3, r3, #8
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	4b70      	ldr	r3, [pc, #448]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	496d      	ldr	r1, [pc, #436]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050ce:	4b6c      	ldr	r3, [pc, #432]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	4968      	ldr	r1, [pc, #416]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	604b      	str	r3, [r1, #4]
 80050e2:	e025      	b.n	8005130 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050e4:	4b66      	ldr	r3, [pc, #408]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a65      	ldr	r2, [pc, #404]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80050ea:	f043 0308 	orr.w	r3, r3, #8
 80050ee:	6013      	str	r3, [r2, #0]
 80050f0:	4b63      	ldr	r3, [pc, #396]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	4960      	ldr	r1, [pc, #384]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005102:	4b5f      	ldr	r3, [pc, #380]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	495b      	ldr	r1, [pc, #364]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 8005112:	4313      	orrs	r3, r2
 8005114:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d109      	bne.n	8005130 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fd47 	bl	8005bb4 <RCC_SetFlashLatencyFromMSIRange>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e343      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005130:	f000 fc4a 	bl	80059c8 <HAL_RCC_GetSysClockFreq>
 8005134:	4602      	mov	r2, r0
 8005136:	4b52      	ldr	r3, [pc, #328]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	091b      	lsrs	r3, r3, #4
 800513c:	f003 030f 	and.w	r3, r3, #15
 8005140:	4950      	ldr	r1, [pc, #320]	; (8005284 <HAL_RCC_OscConfig+0x274>)
 8005142:	5ccb      	ldrb	r3, [r1, r3]
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	fa22 f303 	lsr.w	r3, r2, r3
 800514c:	4a4e      	ldr	r2, [pc, #312]	; (8005288 <HAL_RCC_OscConfig+0x278>)
 800514e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005150:	4b4e      	ldr	r3, [pc, #312]	; (800528c <HAL_RCC_OscConfig+0x27c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f7fc fefb 	bl	8001f50 <HAL_InitTick>
 800515a:	4603      	mov	r3, r0
 800515c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800515e:	7bfb      	ldrb	r3, [r7, #15]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d052      	beq.n	800520a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005164:	7bfb      	ldrb	r3, [r7, #15]
 8005166:	e327      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d032      	beq.n	80051d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005170:	4b43      	ldr	r3, [pc, #268]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a42      	ldr	r2, [pc, #264]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 8005176:	f043 0301 	orr.w	r3, r3, #1
 800517a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800517c:	f7ff fbea 	bl	8004954 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005184:	f7ff fbe6 	bl	8004954 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e310      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005196:	4b3a      	ldr	r3, [pc, #232]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0f0      	beq.n	8005184 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051a2:	4b37      	ldr	r3, [pc, #220]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a36      	ldr	r2, [pc, #216]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80051a8:	f043 0308 	orr.w	r3, r3, #8
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	4b34      	ldr	r3, [pc, #208]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	4931      	ldr	r1, [pc, #196]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051c0:	4b2f      	ldr	r3, [pc, #188]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	492c      	ldr	r1, [pc, #176]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	604b      	str	r3, [r1, #4]
 80051d4:	e01a      	b.n	800520c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051d6:	4b2a      	ldr	r3, [pc, #168]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a29      	ldr	r2, [pc, #164]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80051dc:	f023 0301 	bic.w	r3, r3, #1
 80051e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051e2:	f7ff fbb7 	bl	8004954 <HAL_GetTick>
 80051e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051e8:	e008      	b.n	80051fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051ea:	f7ff fbb3 	bl	8004954 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e2dd      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051fc:	4b20      	ldr	r3, [pc, #128]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1f0      	bne.n	80051ea <HAL_RCC_OscConfig+0x1da>
 8005208:	e000      	b.n	800520c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800520a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d074      	beq.n	8005302 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	2b08      	cmp	r3, #8
 800521c:	d005      	beq.n	800522a <HAL_RCC_OscConfig+0x21a>
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2b0c      	cmp	r3, #12
 8005222:	d10e      	bne.n	8005242 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b03      	cmp	r3, #3
 8005228:	d10b      	bne.n	8005242 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800522a:	4b15      	ldr	r3, [pc, #84]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d064      	beq.n	8005300 <HAL_RCC_OscConfig+0x2f0>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d160      	bne.n	8005300 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e2ba      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524a:	d106      	bne.n	800525a <HAL_RCC_OscConfig+0x24a>
 800524c:	4b0c      	ldr	r3, [pc, #48]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a0b      	ldr	r2, [pc, #44]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 8005252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005256:	6013      	str	r3, [r2, #0]
 8005258:	e026      	b.n	80052a8 <HAL_RCC_OscConfig+0x298>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005262:	d115      	bne.n	8005290 <HAL_RCC_OscConfig+0x280>
 8005264:	4b06      	ldr	r3, [pc, #24]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a05      	ldr	r2, [pc, #20]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 800526a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	4b03      	ldr	r3, [pc, #12]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a02      	ldr	r2, [pc, #8]	; (8005280 <HAL_RCC_OscConfig+0x270>)
 8005276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	e014      	b.n	80052a8 <HAL_RCC_OscConfig+0x298>
 800527e:	bf00      	nop
 8005280:	40021000 	.word	0x40021000
 8005284:	0800c404 	.word	0x0800c404
 8005288:	20000344 	.word	0x20000344
 800528c:	20000350 	.word	0x20000350
 8005290:	4ba0      	ldr	r3, [pc, #640]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a9f      	ldr	r2, [pc, #636]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 8005296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	4b9d      	ldr	r3, [pc, #628]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a9c      	ldr	r2, [pc, #624]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 80052a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d013      	beq.n	80052d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7ff fb50 	bl	8004954 <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052b8:	f7ff fb4c 	bl	8004954 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b64      	cmp	r3, #100	; 0x64
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e276      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052ca:	4b92      	ldr	r3, [pc, #584]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0x2a8>
 80052d6:	e014      	b.n	8005302 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7ff fb3c 	bl	8004954 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052e0:	f7ff fb38 	bl	8004954 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b64      	cmp	r3, #100	; 0x64
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e262      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052f2:	4b88      	ldr	r3, [pc, #544]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f0      	bne.n	80052e0 <HAL_RCC_OscConfig+0x2d0>
 80052fe:	e000      	b.n	8005302 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d060      	beq.n	80053d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d005      	beq.n	8005320 <HAL_RCC_OscConfig+0x310>
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	2b0c      	cmp	r3, #12
 8005318:	d119      	bne.n	800534e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b02      	cmp	r3, #2
 800531e:	d116      	bne.n	800534e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005320:	4b7c      	ldr	r3, [pc, #496]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <HAL_RCC_OscConfig+0x328>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e23f      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005338:	4b76      	ldr	r3, [pc, #472]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	061b      	lsls	r3, r3, #24
 8005346:	4973      	ldr	r1, [pc, #460]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 8005348:	4313      	orrs	r3, r2
 800534a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800534c:	e040      	b.n	80053d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d023      	beq.n	800539e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005356:	4b6f      	ldr	r3, [pc, #444]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a6e      	ldr	r2, [pc, #440]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 800535c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005362:	f7ff faf7 	bl	8004954 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800536a:	f7ff faf3 	bl	8004954 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e21d      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800537c:	4b65      	ldr	r3, [pc, #404]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f0      	beq.n	800536a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005388:	4b62      	ldr	r3, [pc, #392]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	061b      	lsls	r3, r3, #24
 8005396:	495f      	ldr	r1, [pc, #380]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 8005398:	4313      	orrs	r3, r2
 800539a:	604b      	str	r3, [r1, #4]
 800539c:	e018      	b.n	80053d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800539e:	4b5d      	ldr	r3, [pc, #372]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a5c      	ldr	r2, [pc, #368]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 80053a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053aa:	f7ff fad3 	bl	8004954 <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053b0:	e008      	b.n	80053c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053b2:	f7ff facf 	bl	8004954 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e1f9      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053c4:	4b53      	ldr	r3, [pc, #332]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1f0      	bne.n	80053b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d03c      	beq.n	8005456 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01c      	beq.n	800541e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053e4:	4b4b      	ldr	r3, [pc, #300]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 80053e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ea:	4a4a      	ldr	r2, [pc, #296]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 80053ec:	f043 0301 	orr.w	r3, r3, #1
 80053f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f4:	f7ff faae 	bl	8004954 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053fc:	f7ff faaa 	bl	8004954 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e1d4      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800540e:	4b41      	ldr	r3, [pc, #260]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 8005410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0ef      	beq.n	80053fc <HAL_RCC_OscConfig+0x3ec>
 800541c:	e01b      	b.n	8005456 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800541e:	4b3d      	ldr	r3, [pc, #244]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 8005420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005424:	4a3b      	ldr	r2, [pc, #236]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 8005426:	f023 0301 	bic.w	r3, r3, #1
 800542a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542e:	f7ff fa91 	bl	8004954 <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005436:	f7ff fa8d 	bl	8004954 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e1b7      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005448:	4b32      	ldr	r3, [pc, #200]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 800544a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1ef      	bne.n	8005436 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 80a6 	beq.w	80055b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005464:	2300      	movs	r3, #0
 8005466:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005468:	4b2a      	ldr	r3, [pc, #168]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 800546a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10d      	bne.n	8005490 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005474:	4b27      	ldr	r3, [pc, #156]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 8005476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005478:	4a26      	ldr	r2, [pc, #152]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 800547a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800547e:	6593      	str	r3, [r2, #88]	; 0x58
 8005480:	4b24      	ldr	r3, [pc, #144]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 8005482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800548c:	2301      	movs	r3, #1
 800548e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005490:	4b21      	ldr	r3, [pc, #132]	; (8005518 <HAL_RCC_OscConfig+0x508>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005498:	2b00      	cmp	r3, #0
 800549a:	d118      	bne.n	80054ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800549c:	4b1e      	ldr	r3, [pc, #120]	; (8005518 <HAL_RCC_OscConfig+0x508>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <HAL_RCC_OscConfig+0x508>)
 80054a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054a8:	f7ff fa54 	bl	8004954 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b0:	f7ff fa50 	bl	8004954 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e17a      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054c2:	4b15      	ldr	r3, [pc, #84]	; (8005518 <HAL_RCC_OscConfig+0x508>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d108      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4d8>
 80054d6:	4b0f      	ldr	r3, [pc, #60]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 80054d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054dc:	4a0d      	ldr	r2, [pc, #52]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054e6:	e029      	b.n	800553c <HAL_RCC_OscConfig+0x52c>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2b05      	cmp	r3, #5
 80054ee:	d115      	bne.n	800551c <HAL_RCC_OscConfig+0x50c>
 80054f0:	4b08      	ldr	r3, [pc, #32]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f6:	4a07      	ldr	r2, [pc, #28]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 80054f8:	f043 0304 	orr.w	r3, r3, #4
 80054fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005500:	4b04      	ldr	r3, [pc, #16]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 8005502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005506:	4a03      	ldr	r2, [pc, #12]	; (8005514 <HAL_RCC_OscConfig+0x504>)
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005510:	e014      	b.n	800553c <HAL_RCC_OscConfig+0x52c>
 8005512:	bf00      	nop
 8005514:	40021000 	.word	0x40021000
 8005518:	40007000 	.word	0x40007000
 800551c:	4b9c      	ldr	r3, [pc, #624]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 800551e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005522:	4a9b      	ldr	r2, [pc, #620]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 8005524:	f023 0301 	bic.w	r3, r3, #1
 8005528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800552c:	4b98      	ldr	r3, [pc, #608]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005532:	4a97      	ldr	r2, [pc, #604]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 8005534:	f023 0304 	bic.w	r3, r3, #4
 8005538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d016      	beq.n	8005572 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005544:	f7ff fa06 	bl	8004954 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800554a:	e00a      	b.n	8005562 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800554c:	f7ff fa02 	bl	8004954 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	f241 3288 	movw	r2, #5000	; 0x1388
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e12a      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005562:	4b8b      	ldr	r3, [pc, #556]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 8005564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0ed      	beq.n	800554c <HAL_RCC_OscConfig+0x53c>
 8005570:	e015      	b.n	800559e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005572:	f7ff f9ef 	bl	8004954 <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005578:	e00a      	b.n	8005590 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800557a:	f7ff f9eb 	bl	8004954 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	f241 3288 	movw	r2, #5000	; 0x1388
 8005588:	4293      	cmp	r3, r2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e113      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005590:	4b7f      	ldr	r3, [pc, #508]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 8005592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1ed      	bne.n	800557a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800559e:	7ffb      	ldrb	r3, [r7, #31]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d105      	bne.n	80055b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a4:	4b7a      	ldr	r3, [pc, #488]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 80055a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a8:	4a79      	ldr	r2, [pc, #484]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 80055aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 80fe 	beq.w	80057b6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055be:	2b02      	cmp	r3, #2
 80055c0:	f040 80d0 	bne.w	8005764 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80055c4:	4b72      	ldr	r3, [pc, #456]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f003 0203 	and.w	r2, r3, #3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d130      	bne.n	800563a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	3b01      	subs	r3, #1
 80055e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d127      	bne.n	800563a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d11f      	bne.n	800563a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005604:	2a07      	cmp	r2, #7
 8005606:	bf14      	ite	ne
 8005608:	2201      	movne	r2, #1
 800560a:	2200      	moveq	r2, #0
 800560c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800560e:	4293      	cmp	r3, r2
 8005610:	d113      	bne.n	800563a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561c:	085b      	lsrs	r3, r3, #1
 800561e:	3b01      	subs	r3, #1
 8005620:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005622:	429a      	cmp	r2, r3
 8005624:	d109      	bne.n	800563a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	3b01      	subs	r3, #1
 8005634:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005636:	429a      	cmp	r2, r3
 8005638:	d06e      	beq.n	8005718 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	2b0c      	cmp	r3, #12
 800563e:	d069      	beq.n	8005714 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005640:	4b53      	ldr	r3, [pc, #332]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d105      	bne.n	8005658 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800564c:	4b50      	ldr	r3, [pc, #320]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e0ad      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800565c:	4b4c      	ldr	r3, [pc, #304]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a4b      	ldr	r2, [pc, #300]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 8005662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005666:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005668:	f7ff f974 	bl	8004954 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005670:	f7ff f970 	bl	8004954 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e09a      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005682:	4b43      	ldr	r3, [pc, #268]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1f0      	bne.n	8005670 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800568e:	4b40      	ldr	r3, [pc, #256]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	4b40      	ldr	r3, [pc, #256]	; (8005794 <HAL_RCC_OscConfig+0x784>)
 8005694:	4013      	ands	r3, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800569e:	3a01      	subs	r2, #1
 80056a0:	0112      	lsls	r2, r2, #4
 80056a2:	4311      	orrs	r1, r2
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056a8:	0212      	lsls	r2, r2, #8
 80056aa:	4311      	orrs	r1, r2
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80056b0:	0852      	lsrs	r2, r2, #1
 80056b2:	3a01      	subs	r2, #1
 80056b4:	0552      	lsls	r2, r2, #21
 80056b6:	4311      	orrs	r1, r2
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80056bc:	0852      	lsrs	r2, r2, #1
 80056be:	3a01      	subs	r2, #1
 80056c0:	0652      	lsls	r2, r2, #25
 80056c2:	4311      	orrs	r1, r2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056c8:	0912      	lsrs	r2, r2, #4
 80056ca:	0452      	lsls	r2, r2, #17
 80056cc:	430a      	orrs	r2, r1
 80056ce:	4930      	ldr	r1, [pc, #192]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80056d4:	4b2e      	ldr	r3, [pc, #184]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a2d      	ldr	r2, [pc, #180]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 80056da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056e0:	4b2b      	ldr	r3, [pc, #172]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	4a2a      	ldr	r2, [pc, #168]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 80056e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056ec:	f7ff f932 	bl	8004954 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f4:	f7ff f92e 	bl	8004954 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e058      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005706:	4b22      	ldr	r3, [pc, #136]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0f0      	beq.n	80056f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005712:	e050      	b.n	80057b6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e04f      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005718:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d148      	bne.n	80057b6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005724:	4b1a      	ldr	r3, [pc, #104]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a19      	ldr	r2, [pc, #100]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 800572a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800572e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005730:	4b17      	ldr	r3, [pc, #92]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	4a16      	ldr	r2, [pc, #88]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 8005736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800573a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800573c:	f7ff f90a 	bl	8004954 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005744:	f7ff f906 	bl	8004954 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e030      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005756:	4b0e      	ldr	r3, [pc, #56]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0f0      	beq.n	8005744 <HAL_RCC_OscConfig+0x734>
 8005762:	e028      	b.n	80057b6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	2b0c      	cmp	r3, #12
 8005768:	d023      	beq.n	80057b2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800576a:	4b09      	ldr	r3, [pc, #36]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a08      	ldr	r2, [pc, #32]	; (8005790 <HAL_RCC_OscConfig+0x780>)
 8005770:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005776:	f7ff f8ed 	bl	8004954 <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800577c:	e00c      	b.n	8005798 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800577e:	f7ff f8e9 	bl	8004954 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d905      	bls.n	8005798 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e013      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
 8005790:	40021000 	.word	0x40021000
 8005794:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005798:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <HAL_RCC_OscConfig+0x7b0>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1ec      	bne.n	800577e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80057a4:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <HAL_RCC_OscConfig+0x7b0>)
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	4905      	ldr	r1, [pc, #20]	; (80057c0 <HAL_RCC_OscConfig+0x7b0>)
 80057aa:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <HAL_RCC_OscConfig+0x7b4>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	60cb      	str	r3, [r1, #12]
 80057b0:	e001      	b.n	80057b6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3720      	adds	r7, #32
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40021000 	.word	0x40021000
 80057c4:	feeefffc 	.word	0xfeeefffc

080057c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e0e7      	b.n	80059ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057dc:	4b75      	ldr	r3, [pc, #468]	; (80059b4 <HAL_RCC_ClockConfig+0x1ec>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d910      	bls.n	800580c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ea:	4b72      	ldr	r3, [pc, #456]	; (80059b4 <HAL_RCC_ClockConfig+0x1ec>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f023 0207 	bic.w	r2, r3, #7
 80057f2:	4970      	ldr	r1, [pc, #448]	; (80059b4 <HAL_RCC_ClockConfig+0x1ec>)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057fa:	4b6e      	ldr	r3, [pc, #440]	; (80059b4 <HAL_RCC_ClockConfig+0x1ec>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d001      	beq.n	800580c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e0cf      	b.n	80059ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d010      	beq.n	800583a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	4b66      	ldr	r3, [pc, #408]	; (80059b8 <HAL_RCC_ClockConfig+0x1f0>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005824:	429a      	cmp	r2, r3
 8005826:	d908      	bls.n	800583a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005828:	4b63      	ldr	r3, [pc, #396]	; (80059b8 <HAL_RCC_ClockConfig+0x1f0>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	4960      	ldr	r1, [pc, #384]	; (80059b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005836:	4313      	orrs	r3, r2
 8005838:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d04c      	beq.n	80058e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b03      	cmp	r3, #3
 800584c:	d107      	bne.n	800585e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800584e:	4b5a      	ldr	r3, [pc, #360]	; (80059b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d121      	bne.n	800589e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e0a6      	b.n	80059ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b02      	cmp	r3, #2
 8005864:	d107      	bne.n	8005876 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005866:	4b54      	ldr	r3, [pc, #336]	; (80059b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d115      	bne.n	800589e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e09a      	b.n	80059ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d107      	bne.n	800588e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800587e:	4b4e      	ldr	r3, [pc, #312]	; (80059b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d109      	bne.n	800589e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e08e      	b.n	80059ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800588e:	4b4a      	ldr	r3, [pc, #296]	; (80059b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e086      	b.n	80059ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800589e:	4b46      	ldr	r3, [pc, #280]	; (80059b8 <HAL_RCC_ClockConfig+0x1f0>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f023 0203 	bic.w	r2, r3, #3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	4943      	ldr	r1, [pc, #268]	; (80059b8 <HAL_RCC_ClockConfig+0x1f0>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b0:	f7ff f850 	bl	8004954 <HAL_GetTick>
 80058b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b6:	e00a      	b.n	80058ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b8:	f7ff f84c 	bl	8004954 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e06e      	b.n	80059ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ce:	4b3a      	ldr	r3, [pc, #232]	; (80059b8 <HAL_RCC_ClockConfig+0x1f0>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 020c 	and.w	r2, r3, #12
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	429a      	cmp	r2, r3
 80058de:	d1eb      	bne.n	80058b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d010      	beq.n	800590e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	4b31      	ldr	r3, [pc, #196]	; (80059b8 <HAL_RCC_ClockConfig+0x1f0>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d208      	bcs.n	800590e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058fc:	4b2e      	ldr	r3, [pc, #184]	; (80059b8 <HAL_RCC_ClockConfig+0x1f0>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	492b      	ldr	r1, [pc, #172]	; (80059b8 <HAL_RCC_ClockConfig+0x1f0>)
 800590a:	4313      	orrs	r3, r2
 800590c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800590e:	4b29      	ldr	r3, [pc, #164]	; (80059b4 <HAL_RCC_ClockConfig+0x1ec>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	429a      	cmp	r2, r3
 800591a:	d210      	bcs.n	800593e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800591c:	4b25      	ldr	r3, [pc, #148]	; (80059b4 <HAL_RCC_ClockConfig+0x1ec>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f023 0207 	bic.w	r2, r3, #7
 8005924:	4923      	ldr	r1, [pc, #140]	; (80059b4 <HAL_RCC_ClockConfig+0x1ec>)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	4313      	orrs	r3, r2
 800592a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800592c:	4b21      	ldr	r3, [pc, #132]	; (80059b4 <HAL_RCC_ClockConfig+0x1ec>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d001      	beq.n	800593e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e036      	b.n	80059ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b00      	cmp	r3, #0
 8005948:	d008      	beq.n	800595c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800594a:	4b1b      	ldr	r3, [pc, #108]	; (80059b8 <HAL_RCC_ClockConfig+0x1f0>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	4918      	ldr	r1, [pc, #96]	; (80059b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005958:	4313      	orrs	r3, r2
 800595a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0308 	and.w	r3, r3, #8
 8005964:	2b00      	cmp	r3, #0
 8005966:	d009      	beq.n	800597c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005968:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <HAL_RCC_ClockConfig+0x1f0>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	4910      	ldr	r1, [pc, #64]	; (80059b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005978:	4313      	orrs	r3, r2
 800597a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800597c:	f000 f824 	bl	80059c8 <HAL_RCC_GetSysClockFreq>
 8005980:	4602      	mov	r2, r0
 8005982:	4b0d      	ldr	r3, [pc, #52]	; (80059b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	091b      	lsrs	r3, r3, #4
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	490b      	ldr	r1, [pc, #44]	; (80059bc <HAL_RCC_ClockConfig+0x1f4>)
 800598e:	5ccb      	ldrb	r3, [r1, r3]
 8005990:	f003 031f 	and.w	r3, r3, #31
 8005994:	fa22 f303 	lsr.w	r3, r2, r3
 8005998:	4a09      	ldr	r2, [pc, #36]	; (80059c0 <HAL_RCC_ClockConfig+0x1f8>)
 800599a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800599c:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <HAL_RCC_ClockConfig+0x1fc>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fc fad5 	bl	8001f50 <HAL_InitTick>
 80059a6:	4603      	mov	r3, r0
 80059a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80059aa:	7afb      	ldrb	r3, [r7, #11]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40022000 	.word	0x40022000
 80059b8:	40021000 	.word	0x40021000
 80059bc:	0800c404 	.word	0x0800c404
 80059c0:	20000344 	.word	0x20000344
 80059c4:	20000350 	.word	0x20000350

080059c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b089      	sub	sp, #36	; 0x24
 80059cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	61fb      	str	r3, [r7, #28]
 80059d2:	2300      	movs	r3, #0
 80059d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059d6:	4b3e      	ldr	r3, [pc, #248]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 030c 	and.w	r3, r3, #12
 80059de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059e0:	4b3b      	ldr	r3, [pc, #236]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f003 0303 	and.w	r3, r3, #3
 80059e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d005      	beq.n	80059fc <HAL_RCC_GetSysClockFreq+0x34>
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	2b0c      	cmp	r3, #12
 80059f4:	d121      	bne.n	8005a3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d11e      	bne.n	8005a3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80059fc:	4b34      	ldr	r3, [pc, #208]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0308 	and.w	r3, r3, #8
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d107      	bne.n	8005a18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a08:	4b31      	ldr	r3, [pc, #196]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a0e:	0a1b      	lsrs	r3, r3, #8
 8005a10:	f003 030f 	and.w	r3, r3, #15
 8005a14:	61fb      	str	r3, [r7, #28]
 8005a16:	e005      	b.n	8005a24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a18:	4b2d      	ldr	r3, [pc, #180]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	091b      	lsrs	r3, r3, #4
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a24:	4a2b      	ldr	r2, [pc, #172]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10d      	bne.n	8005a50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a38:	e00a      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d102      	bne.n	8005a46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a40:	4b25      	ldr	r3, [pc, #148]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a42:	61bb      	str	r3, [r7, #24]
 8005a44:	e004      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d101      	bne.n	8005a50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a4c:	4b23      	ldr	r3, [pc, #140]	; (8005adc <HAL_RCC_GetSysClockFreq+0x114>)
 8005a4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	2b0c      	cmp	r3, #12
 8005a54:	d134      	bne.n	8005ac0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a56:	4b1e      	ldr	r3, [pc, #120]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d003      	beq.n	8005a6e <HAL_RCC_GetSysClockFreq+0xa6>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b03      	cmp	r3, #3
 8005a6a:	d003      	beq.n	8005a74 <HAL_RCC_GetSysClockFreq+0xac>
 8005a6c:	e005      	b.n	8005a7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005a6e:	4b1a      	ldr	r3, [pc, #104]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a70:	617b      	str	r3, [r7, #20]
      break;
 8005a72:	e005      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005a74:	4b19      	ldr	r3, [pc, #100]	; (8005adc <HAL_RCC_GetSysClockFreq+0x114>)
 8005a76:	617b      	str	r3, [r7, #20]
      break;
 8005a78:	e002      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	617b      	str	r3, [r7, #20]
      break;
 8005a7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a80:	4b13      	ldr	r3, [pc, #76]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	091b      	lsrs	r3, r3, #4
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a8e:	4b10      	ldr	r3, [pc, #64]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	0a1b      	lsrs	r3, r3, #8
 8005a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	fb03 f202 	mul.w	r2, r3, r2
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005aa6:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	0e5b      	lsrs	r3, r3, #25
 8005aac:	f003 0303 	and.w	r3, r3, #3
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ac0:	69bb      	ldr	r3, [r7, #24]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3724      	adds	r7, #36	; 0x24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	0800c41c 	.word	0x0800c41c
 8005ad8:	00f42400 	.word	0x00f42400
 8005adc:	007a1200 	.word	0x007a1200

08005ae0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ae4:	4b03      	ldr	r3, [pc, #12]	; (8005af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20000344 	.word	0x20000344

08005af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005afc:	f7ff fff0 	bl	8005ae0 <HAL_RCC_GetHCLKFreq>
 8005b00:	4602      	mov	r2, r0
 8005b02:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	0a1b      	lsrs	r3, r3, #8
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	4904      	ldr	r1, [pc, #16]	; (8005b20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b0e:	5ccb      	ldrb	r3, [r1, r3]
 8005b10:	f003 031f 	and.w	r3, r3, #31
 8005b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	0800c414 	.word	0x0800c414

08005b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b28:	f7ff ffda 	bl	8005ae0 <HAL_RCC_GetHCLKFreq>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	0adb      	lsrs	r3, r3, #11
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	4904      	ldr	r1, [pc, #16]	; (8005b4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b3a:	5ccb      	ldrb	r3, [r1, r3]
 8005b3c:	f003 031f 	and.w	r3, r3, #31
 8005b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	40021000 	.word	0x40021000
 8005b4c:	0800c414 	.word	0x0800c414

08005b50 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	220f      	movs	r2, #15
 8005b5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005b60:	4b12      	ldr	r3, [pc, #72]	; (8005bac <HAL_RCC_GetClockConfig+0x5c>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 0203 	and.w	r2, r3, #3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005b6c:	4b0f      	ldr	r3, [pc, #60]	; (8005bac <HAL_RCC_GetClockConfig+0x5c>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005b78:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <HAL_RCC_GetClockConfig+0x5c>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005b84:	4b09      	ldr	r3, [pc, #36]	; (8005bac <HAL_RCC_GetClockConfig+0x5c>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	08db      	lsrs	r3, r3, #3
 8005b8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005b92:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <HAL_RCC_GetClockConfig+0x60>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0207 	and.w	r2, r3, #7
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	601a      	str	r2, [r3, #0]
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	40022000 	.word	0x40022000

08005bb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005bc0:	4b2a      	ldr	r3, [pc, #168]	; (8005c6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005bcc:	f7ff f9bc 	bl	8004f48 <HAL_PWREx_GetVoltageRange>
 8005bd0:	6178      	str	r0, [r7, #20]
 8005bd2:	e014      	b.n	8005bfe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bd4:	4b25      	ldr	r3, [pc, #148]	; (8005c6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd8:	4a24      	ldr	r2, [pc, #144]	; (8005c6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bde:	6593      	str	r3, [r2, #88]	; 0x58
 8005be0:	4b22      	ldr	r3, [pc, #136]	; (8005c6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005bec:	f7ff f9ac 	bl	8004f48 <HAL_PWREx_GetVoltageRange>
 8005bf0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005bf2:	4b1e      	ldr	r3, [pc, #120]	; (8005c6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf6:	4a1d      	ldr	r2, [pc, #116]	; (8005c6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bfc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c04:	d10b      	bne.n	8005c1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b80      	cmp	r3, #128	; 0x80
 8005c0a:	d919      	bls.n	8005c40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2ba0      	cmp	r3, #160	; 0xa0
 8005c10:	d902      	bls.n	8005c18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c12:	2302      	movs	r3, #2
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	e013      	b.n	8005c40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c18:	2301      	movs	r3, #1
 8005c1a:	613b      	str	r3, [r7, #16]
 8005c1c:	e010      	b.n	8005c40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b80      	cmp	r3, #128	; 0x80
 8005c22:	d902      	bls.n	8005c2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c24:	2303      	movs	r3, #3
 8005c26:	613b      	str	r3, [r7, #16]
 8005c28:	e00a      	b.n	8005c40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b80      	cmp	r3, #128	; 0x80
 8005c2e:	d102      	bne.n	8005c36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c30:	2302      	movs	r3, #2
 8005c32:	613b      	str	r3, [r7, #16]
 8005c34:	e004      	b.n	8005c40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b70      	cmp	r3, #112	; 0x70
 8005c3a:	d101      	bne.n	8005c40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c40:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f023 0207 	bic.w	r2, r3, #7
 8005c48:	4909      	ldr	r1, [pc, #36]	; (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c50:	4b07      	ldr	r3, [pc, #28]	; (8005c70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d001      	beq.n	8005c62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	40022000 	.word	0x40022000

08005c74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c80:	2300      	movs	r3, #0
 8005c82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d041      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c98:	d02a      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005c9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c9e:	d824      	bhi.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ca0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ca4:	d008      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ca6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005caa:	d81e      	bhi.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00a      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005cb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cb4:	d010      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cb6:	e018      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005cb8:	4b86      	ldr	r3, [pc, #536]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	4a85      	ldr	r2, [pc, #532]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cc4:	e015      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	2100      	movs	r1, #0
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fabb 	bl	8006248 <RCCEx_PLLSAI1_Config>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cd6:	e00c      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3320      	adds	r3, #32
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fba6 	bl	8006430 <RCCEx_PLLSAI2_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ce8:	e003      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	74fb      	strb	r3, [r7, #19]
      break;
 8005cee:	e000      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cf2:	7cfb      	ldrb	r3, [r7, #19]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10b      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cf8:	4b76      	ldr	r3, [pc, #472]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d06:	4973      	ldr	r1, [pc, #460]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d0e:	e001      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d10:	7cfb      	ldrb	r3, [r7, #19]
 8005d12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d041      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d28:	d02a      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005d2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d2e:	d824      	bhi.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d34:	d008      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d3a:	d81e      	bhi.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00a      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d44:	d010      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d46:	e018      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d48:	4b62      	ldr	r3, [pc, #392]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	4a61      	ldr	r2, [pc, #388]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d52:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d54:	e015      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 fa73 	bl	8006248 <RCCEx_PLLSAI1_Config>
 8005d62:	4603      	mov	r3, r0
 8005d64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d66:	e00c      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3320      	adds	r3, #32
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 fb5e 	bl	8006430 <RCCEx_PLLSAI2_Config>
 8005d74:	4603      	mov	r3, r0
 8005d76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d78:	e003      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	74fb      	strb	r3, [r7, #19]
      break;
 8005d7e:	e000      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005d80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d82:	7cfb      	ldrb	r3, [r7, #19]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10b      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d88:	4b52      	ldr	r3, [pc, #328]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d96:	494f      	ldr	r1, [pc, #316]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d9e:	e001      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da0:	7cfb      	ldrb	r3, [r7, #19]
 8005da2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80a0 	beq.w	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005db2:	2300      	movs	r3, #0
 8005db4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005db6:	4b47      	ldr	r3, [pc, #284]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00d      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dcc:	4b41      	ldr	r3, [pc, #260]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd0:	4a40      	ldr	r2, [pc, #256]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8005dd8:	4b3e      	ldr	r3, [pc, #248]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de0:	60bb      	str	r3, [r7, #8]
 8005de2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005de4:	2301      	movs	r3, #1
 8005de6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005de8:	4b3b      	ldr	r3, [pc, #236]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a3a      	ldr	r2, [pc, #232]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005df4:	f7fe fdae 	bl	8004954 <HAL_GetTick>
 8005df8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005dfa:	e009      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dfc:	f7fe fdaa 	bl	8004954 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d902      	bls.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	74fb      	strb	r3, [r7, #19]
        break;
 8005e0e:	e005      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e10:	4b31      	ldr	r3, [pc, #196]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0ef      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005e1c:	7cfb      	ldrb	r3, [r7, #19]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d15c      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e22:	4b2c      	ldr	r3, [pc, #176]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01f      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d019      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e40:	4b24      	ldr	r3, [pc, #144]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e4c:	4b21      	ldr	r3, [pc, #132]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e52:	4a20      	ldr	r2, [pc, #128]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e5c:	4b1d      	ldr	r3, [pc, #116]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e62:	4a1c      	ldr	r2, [pc, #112]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e6c:	4a19      	ldr	r2, [pc, #100]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d016      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7e:	f7fe fd69 	bl	8004954 <HAL_GetTick>
 8005e82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e84:	e00b      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e86:	f7fe fd65 	bl	8004954 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d902      	bls.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	74fb      	strb	r3, [r7, #19]
            break;
 8005e9c:	e006      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e9e:	4b0d      	ldr	r3, [pc, #52]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0ec      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005eac:	7cfb      	ldrb	r3, [r7, #19]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10c      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eb2:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ec2:	4904      	ldr	r1, [pc, #16]	; (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005eca:	e009      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ecc:	7cfb      	ldrb	r3, [r7, #19]
 8005ece:	74bb      	strb	r3, [r7, #18]
 8005ed0:	e006      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005ed2:	bf00      	nop
 8005ed4:	40021000 	.word	0x40021000
 8005ed8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005edc:	7cfb      	ldrb	r3, [r7, #19]
 8005ede:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ee0:	7c7b      	ldrb	r3, [r7, #17]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d105      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ee6:	4b9e      	ldr	r3, [pc, #632]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eea:	4a9d      	ldr	r2, [pc, #628]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ef0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005efe:	4b98      	ldr	r3, [pc, #608]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f04:	f023 0203 	bic.w	r2, r3, #3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	4994      	ldr	r1, [pc, #592]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f20:	4b8f      	ldr	r3, [pc, #572]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f26:	f023 020c 	bic.w	r2, r3, #12
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2e:	498c      	ldr	r1, [pc, #560]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f42:	4b87      	ldr	r3, [pc, #540]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	4983      	ldr	r1, [pc, #524]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00a      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f64:	4b7e      	ldr	r3, [pc, #504]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f72:	497b      	ldr	r1, [pc, #492]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0310 	and.w	r3, r3, #16
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f86:	4b76      	ldr	r3, [pc, #472]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f94:	4972      	ldr	r1, [pc, #456]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fa8:	4b6d      	ldr	r3, [pc, #436]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb6:	496a      	ldr	r1, [pc, #424]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fca:	4b65      	ldr	r3, [pc, #404]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd8:	4961      	ldr	r1, [pc, #388]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00a      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fec:	4b5c      	ldr	r3, [pc, #368]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffa:	4959      	ldr	r1, [pc, #356]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800600e:	4b54      	ldr	r3, [pc, #336]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006014:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601c:	4950      	ldr	r1, [pc, #320]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800601e:	4313      	orrs	r3, r2
 8006020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00a      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006030:	4b4b      	ldr	r3, [pc, #300]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006036:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603e:	4948      	ldr	r1, [pc, #288]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006040:	4313      	orrs	r3, r2
 8006042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00a      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006052:	4b43      	ldr	r3, [pc, #268]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006058:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006060:	493f      	ldr	r1, [pc, #252]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d028      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006074:	4b3a      	ldr	r3, [pc, #232]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006082:	4937      	ldr	r1, [pc, #220]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006084:	4313      	orrs	r3, r2
 8006086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800608e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006092:	d106      	bne.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006094:	4b32      	ldr	r3, [pc, #200]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	4a31      	ldr	r2, [pc, #196]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800609a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800609e:	60d3      	str	r3, [r2, #12]
 80060a0:	e011      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060aa:	d10c      	bne.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3304      	adds	r3, #4
 80060b0:	2101      	movs	r1, #1
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 f8c8 	bl	8006248 <RCCEx_PLLSAI1_Config>
 80060b8:	4603      	mov	r3, r0
 80060ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80060bc:	7cfb      	ldrb	r3, [r7, #19]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80060c2:	7cfb      	ldrb	r3, [r7, #19]
 80060c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d028      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060d2:	4b23      	ldr	r3, [pc, #140]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e0:	491f      	ldr	r1, [pc, #124]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060f0:	d106      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060f2:	4b1b      	ldr	r3, [pc, #108]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	4a1a      	ldr	r2, [pc, #104]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060fc:	60d3      	str	r3, [r2, #12]
 80060fe:	e011      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006104:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006108:	d10c      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3304      	adds	r3, #4
 800610e:	2101      	movs	r1, #1
 8006110:	4618      	mov	r0, r3
 8006112:	f000 f899 	bl	8006248 <RCCEx_PLLSAI1_Config>
 8006116:	4603      	mov	r3, r0
 8006118:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800611a:	7cfb      	ldrb	r3, [r7, #19]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006120:	7cfb      	ldrb	r3, [r7, #19]
 8006122:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d02b      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006130:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006136:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800613e:	4908      	ldr	r1, [pc, #32]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006140:	4313      	orrs	r3, r2
 8006142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800614a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800614e:	d109      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006150:	4b03      	ldr	r3, [pc, #12]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	4a02      	ldr	r2, [pc, #8]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800615a:	60d3      	str	r3, [r2, #12]
 800615c:	e014      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800615e:	bf00      	nop
 8006160:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006168:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800616c:	d10c      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	3304      	adds	r3, #4
 8006172:	2101      	movs	r1, #1
 8006174:	4618      	mov	r0, r3
 8006176:	f000 f867 	bl	8006248 <RCCEx_PLLSAI1_Config>
 800617a:	4603      	mov	r3, r0
 800617c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800617e:	7cfb      	ldrb	r3, [r7, #19]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006184:	7cfb      	ldrb	r3, [r7, #19]
 8006186:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d02f      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006194:	4b2b      	ldr	r3, [pc, #172]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061a2:	4928      	ldr	r1, [pc, #160]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061b2:	d10d      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3304      	adds	r3, #4
 80061b8:	2102      	movs	r1, #2
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f844 	bl	8006248 <RCCEx_PLLSAI1_Config>
 80061c0:	4603      	mov	r3, r0
 80061c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061c4:	7cfb      	ldrb	r3, [r7, #19]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d014      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80061ca:	7cfb      	ldrb	r3, [r7, #19]
 80061cc:	74bb      	strb	r3, [r7, #18]
 80061ce:	e011      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061d8:	d10c      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	3320      	adds	r3, #32
 80061de:	2102      	movs	r1, #2
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 f925 	bl	8006430 <RCCEx_PLLSAI2_Config>
 80061e6:	4603      	mov	r3, r0
 80061e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061ea:	7cfb      	ldrb	r3, [r7, #19]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80061f0:	7cfb      	ldrb	r3, [r7, #19]
 80061f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006200:	4b10      	ldr	r3, [pc, #64]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006206:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800620e:	490d      	ldr	r1, [pc, #52]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006210:	4313      	orrs	r3, r2
 8006212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00b      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006222:	4b08      	ldr	r3, [pc, #32]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006228:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006232:	4904      	ldr	r1, [pc, #16]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006234:	4313      	orrs	r3, r2
 8006236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800623a:	7cbb      	ldrb	r3, [r7, #18]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	40021000 	.word	0x40021000

08006248 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006256:	4b75      	ldr	r3, [pc, #468]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d018      	beq.n	8006294 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006262:	4b72      	ldr	r3, [pc, #456]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f003 0203 	and.w	r2, r3, #3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	429a      	cmp	r2, r3
 8006270:	d10d      	bne.n	800628e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
       ||
 8006276:	2b00      	cmp	r3, #0
 8006278:	d009      	beq.n	800628e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800627a:	4b6c      	ldr	r3, [pc, #432]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	091b      	lsrs	r3, r3, #4
 8006280:	f003 0307 	and.w	r3, r3, #7
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
       ||
 800628a:	429a      	cmp	r2, r3
 800628c:	d047      	beq.n	800631e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	73fb      	strb	r3, [r7, #15]
 8006292:	e044      	b.n	800631e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b03      	cmp	r3, #3
 800629a:	d018      	beq.n	80062ce <RCCEx_PLLSAI1_Config+0x86>
 800629c:	2b03      	cmp	r3, #3
 800629e:	d825      	bhi.n	80062ec <RCCEx_PLLSAI1_Config+0xa4>
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d002      	beq.n	80062aa <RCCEx_PLLSAI1_Config+0x62>
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d009      	beq.n	80062bc <RCCEx_PLLSAI1_Config+0x74>
 80062a8:	e020      	b.n	80062ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062aa:	4b60      	ldr	r3, [pc, #384]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d11d      	bne.n	80062f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062ba:	e01a      	b.n	80062f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062bc:	4b5b      	ldr	r3, [pc, #364]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d116      	bne.n	80062f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062cc:	e013      	b.n	80062f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062ce:	4b57      	ldr	r3, [pc, #348]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10f      	bne.n	80062fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062da:	4b54      	ldr	r3, [pc, #336]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d109      	bne.n	80062fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062ea:	e006      	b.n	80062fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	73fb      	strb	r3, [r7, #15]
      break;
 80062f0:	e004      	b.n	80062fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062f2:	bf00      	nop
 80062f4:	e002      	b.n	80062fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062f6:	bf00      	nop
 80062f8:	e000      	b.n	80062fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10d      	bne.n	800631e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006302:	4b4a      	ldr	r3, [pc, #296]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6819      	ldr	r1, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	3b01      	subs	r3, #1
 8006314:	011b      	lsls	r3, r3, #4
 8006316:	430b      	orrs	r3, r1
 8006318:	4944      	ldr	r1, [pc, #272]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 800631a:	4313      	orrs	r3, r2
 800631c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d17d      	bne.n	8006420 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006324:	4b41      	ldr	r3, [pc, #260]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a40      	ldr	r2, [pc, #256]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 800632a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800632e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006330:	f7fe fb10 	bl	8004954 <HAL_GetTick>
 8006334:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006336:	e009      	b.n	800634c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006338:	f7fe fb0c 	bl	8004954 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b02      	cmp	r3, #2
 8006344:	d902      	bls.n	800634c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	73fb      	strb	r3, [r7, #15]
        break;
 800634a:	e005      	b.n	8006358 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800634c:	4b37      	ldr	r3, [pc, #220]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1ef      	bne.n	8006338 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006358:	7bfb      	ldrb	r3, [r7, #15]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d160      	bne.n	8006420 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d111      	bne.n	8006388 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006364:	4b31      	ldr	r3, [pc, #196]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800636c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6892      	ldr	r2, [r2, #8]
 8006374:	0211      	lsls	r1, r2, #8
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	68d2      	ldr	r2, [r2, #12]
 800637a:	0912      	lsrs	r2, r2, #4
 800637c:	0452      	lsls	r2, r2, #17
 800637e:	430a      	orrs	r2, r1
 8006380:	492a      	ldr	r1, [pc, #168]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006382:	4313      	orrs	r3, r2
 8006384:	610b      	str	r3, [r1, #16]
 8006386:	e027      	b.n	80063d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d112      	bne.n	80063b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800638e:	4b27      	ldr	r3, [pc, #156]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006396:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	6892      	ldr	r2, [r2, #8]
 800639e:	0211      	lsls	r1, r2, #8
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6912      	ldr	r2, [r2, #16]
 80063a4:	0852      	lsrs	r2, r2, #1
 80063a6:	3a01      	subs	r2, #1
 80063a8:	0552      	lsls	r2, r2, #21
 80063aa:	430a      	orrs	r2, r1
 80063ac:	491f      	ldr	r1, [pc, #124]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	610b      	str	r3, [r1, #16]
 80063b2:	e011      	b.n	80063d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063b4:	4b1d      	ldr	r3, [pc, #116]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80063bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6892      	ldr	r2, [r2, #8]
 80063c4:	0211      	lsls	r1, r2, #8
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6952      	ldr	r2, [r2, #20]
 80063ca:	0852      	lsrs	r2, r2, #1
 80063cc:	3a01      	subs	r2, #1
 80063ce:	0652      	lsls	r2, r2, #25
 80063d0:	430a      	orrs	r2, r1
 80063d2:	4916      	ldr	r1, [pc, #88]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80063d8:	4b14      	ldr	r3, [pc, #80]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a13      	ldr	r2, [pc, #76]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 80063de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e4:	f7fe fab6 	bl	8004954 <HAL_GetTick>
 80063e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063ea:	e009      	b.n	8006400 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063ec:	f7fe fab2 	bl	8004954 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d902      	bls.n	8006400 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	73fb      	strb	r3, [r7, #15]
          break;
 80063fe:	e005      	b.n	800640c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006400:	4b0a      	ldr	r3, [pc, #40]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d0ef      	beq.n	80063ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d106      	bne.n	8006420 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006412:	4b06      	ldr	r3, [pc, #24]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006414:	691a      	ldr	r2, [r3, #16]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	4904      	ldr	r1, [pc, #16]	; (800642c <RCCEx_PLLSAI1_Config+0x1e4>)
 800641c:	4313      	orrs	r3, r2
 800641e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	40021000 	.word	0x40021000

08006430 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800643e:	4b6a      	ldr	r3, [pc, #424]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f003 0303 	and.w	r3, r3, #3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d018      	beq.n	800647c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800644a:	4b67      	ldr	r3, [pc, #412]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f003 0203 	and.w	r2, r3, #3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d10d      	bne.n	8006476 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
       ||
 800645e:	2b00      	cmp	r3, #0
 8006460:	d009      	beq.n	8006476 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006462:	4b61      	ldr	r3, [pc, #388]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	091b      	lsrs	r3, r3, #4
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
       ||
 8006472:	429a      	cmp	r2, r3
 8006474:	d047      	beq.n	8006506 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	73fb      	strb	r3, [r7, #15]
 800647a:	e044      	b.n	8006506 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b03      	cmp	r3, #3
 8006482:	d018      	beq.n	80064b6 <RCCEx_PLLSAI2_Config+0x86>
 8006484:	2b03      	cmp	r3, #3
 8006486:	d825      	bhi.n	80064d4 <RCCEx_PLLSAI2_Config+0xa4>
 8006488:	2b01      	cmp	r3, #1
 800648a:	d002      	beq.n	8006492 <RCCEx_PLLSAI2_Config+0x62>
 800648c:	2b02      	cmp	r3, #2
 800648e:	d009      	beq.n	80064a4 <RCCEx_PLLSAI2_Config+0x74>
 8006490:	e020      	b.n	80064d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006492:	4b55      	ldr	r3, [pc, #340]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d11d      	bne.n	80064da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064a2:	e01a      	b.n	80064da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064a4:	4b50      	ldr	r3, [pc, #320]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d116      	bne.n	80064de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064b4:	e013      	b.n	80064de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064b6:	4b4c      	ldr	r3, [pc, #304]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10f      	bne.n	80064e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064c2:	4b49      	ldr	r3, [pc, #292]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064d2:	e006      	b.n	80064e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	73fb      	strb	r3, [r7, #15]
      break;
 80064d8:	e004      	b.n	80064e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064da:	bf00      	nop
 80064dc:	e002      	b.n	80064e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064de:	bf00      	nop
 80064e0:	e000      	b.n	80064e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10d      	bne.n	8006506 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80064ea:	4b3f      	ldr	r3, [pc, #252]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6819      	ldr	r1, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	430b      	orrs	r3, r1
 8006500:	4939      	ldr	r1, [pc, #228]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006502:	4313      	orrs	r3, r2
 8006504:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d167      	bne.n	80065dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800650c:	4b36      	ldr	r3, [pc, #216]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a35      	ldr	r2, [pc, #212]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006516:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006518:	f7fe fa1c 	bl	8004954 <HAL_GetTick>
 800651c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800651e:	e009      	b.n	8006534 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006520:	f7fe fa18 	bl	8004954 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	2b02      	cmp	r3, #2
 800652c:	d902      	bls.n	8006534 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	73fb      	strb	r3, [r7, #15]
        break;
 8006532:	e005      	b.n	8006540 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006534:	4b2c      	ldr	r3, [pc, #176]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1ef      	bne.n	8006520 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d14a      	bne.n	80065dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d111      	bne.n	8006570 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800654c:	4b26      	ldr	r3, [pc, #152]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6892      	ldr	r2, [r2, #8]
 800655c:	0211      	lsls	r1, r2, #8
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	68d2      	ldr	r2, [r2, #12]
 8006562:	0912      	lsrs	r2, r2, #4
 8006564:	0452      	lsls	r2, r2, #17
 8006566:	430a      	orrs	r2, r1
 8006568:	491f      	ldr	r1, [pc, #124]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800656a:	4313      	orrs	r3, r2
 800656c:	614b      	str	r3, [r1, #20]
 800656e:	e011      	b.n	8006594 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006570:	4b1d      	ldr	r3, [pc, #116]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006578:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6892      	ldr	r2, [r2, #8]
 8006580:	0211      	lsls	r1, r2, #8
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6912      	ldr	r2, [r2, #16]
 8006586:	0852      	lsrs	r2, r2, #1
 8006588:	3a01      	subs	r2, #1
 800658a:	0652      	lsls	r2, r2, #25
 800658c:	430a      	orrs	r2, r1
 800658e:	4916      	ldr	r1, [pc, #88]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006590:	4313      	orrs	r3, r2
 8006592:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006594:	4b14      	ldr	r3, [pc, #80]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a13      	ldr	r2, [pc, #76]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800659a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800659e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a0:	f7fe f9d8 	bl	8004954 <HAL_GetTick>
 80065a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065a6:	e009      	b.n	80065bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80065a8:	f7fe f9d4 	bl	8004954 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d902      	bls.n	80065bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	73fb      	strb	r3, [r7, #15]
          break;
 80065ba:	e005      	b.n	80065c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065bc:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0ef      	beq.n	80065a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d106      	bne.n	80065dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80065ce:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065d0:	695a      	ldr	r2, [r3, #20]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	4904      	ldr	r1, [pc, #16]	; (80065e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	40021000 	.word	0x40021000

080065ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e095      	b.n	800672a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006602:	2b00      	cmp	r3, #0
 8006604:	d108      	bne.n	8006618 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800660e:	d009      	beq.n	8006624 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	61da      	str	r2, [r3, #28]
 8006616:	e005      	b.n	8006624 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fb fb08 	bl	8001c54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800665a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006664:	d902      	bls.n	800666c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	e002      	b.n	8006672 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800666c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006670:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800667a:	d007      	beq.n	800668c <HAL_SPI_Init+0xa0>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006684:	d002      	beq.n	800668c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	431a      	orrs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	431a      	orrs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066ba:	431a      	orrs	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066c4:	431a      	orrs	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ce:	ea42 0103 	orr.w	r1, r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	0c1b      	lsrs	r3, r3, #16
 80066e8:	f003 0204 	and.w	r2, r3, #4
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	f003 0310 	and.w	r3, r3, #16
 80066f4:	431a      	orrs	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fa:	f003 0308 	and.w	r3, r3, #8
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006708:	ea42 0103 	orr.w	r1, r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b088      	sub	sp, #32
 8006736:	af00      	add	r7, sp, #0
 8006738:	60f8      	str	r0, [r7, #12]
 800673a:	60b9      	str	r1, [r7, #8]
 800673c:	603b      	str	r3, [r7, #0]
 800673e:	4613      	mov	r3, r2
 8006740:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800674c:	2b01      	cmp	r3, #1
 800674e:	d101      	bne.n	8006754 <HAL_SPI_Transmit+0x22>
 8006750:	2302      	movs	r3, #2
 8006752:	e15f      	b.n	8006a14 <HAL_SPI_Transmit+0x2e2>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800675c:	f7fe f8fa 	bl	8004954 <HAL_GetTick>
 8006760:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006762:	88fb      	ldrh	r3, [r7, #6]
 8006764:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b01      	cmp	r3, #1
 8006770:	d002      	beq.n	8006778 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006772:	2302      	movs	r3, #2
 8006774:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006776:	e148      	b.n	8006a0a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <HAL_SPI_Transmit+0x52>
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d102      	bne.n	800678a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006788:	e13f      	b.n	8006a0a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2203      	movs	r2, #3
 800678e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	88fa      	ldrh	r2, [r7, #6]
 80067a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	88fa      	ldrh	r2, [r7, #6]
 80067a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d4:	d10f      	bne.n	80067f6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006800:	2b40      	cmp	r3, #64	; 0x40
 8006802:	d007      	beq.n	8006814 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006812:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800681c:	d94f      	bls.n	80068be <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <HAL_SPI_Transmit+0xfa>
 8006826:	8afb      	ldrh	r3, [r7, #22]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d142      	bne.n	80068b2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006830:	881a      	ldrh	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683c:	1c9a      	adds	r2, r3, #2
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006846:	b29b      	uxth	r3, r3
 8006848:	3b01      	subs	r3, #1
 800684a:	b29a      	uxth	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006850:	e02f      	b.n	80068b2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b02      	cmp	r3, #2
 800685e:	d112      	bne.n	8006886 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006864:	881a      	ldrh	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006870:	1c9a      	adds	r2, r3, #2
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006884:	e015      	b.n	80068b2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006886:	f7fe f865 	bl	8004954 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	429a      	cmp	r2, r3
 8006894:	d803      	bhi.n	800689e <HAL_SPI_Transmit+0x16c>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689c:	d102      	bne.n	80068a4 <HAL_SPI_Transmit+0x172>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d106      	bne.n	80068b2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80068b0:	e0ab      	b.n	8006a0a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1ca      	bne.n	8006852 <HAL_SPI_Transmit+0x120>
 80068bc:	e080      	b.n	80069c0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <HAL_SPI_Transmit+0x19a>
 80068c6:	8afb      	ldrh	r3, [r7, #22]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d174      	bne.n	80069b6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d912      	bls.n	80068fc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	881a      	ldrh	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e6:	1c9a      	adds	r2, r3, #2
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	3b02      	subs	r3, #2
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068fa:	e05c      	b.n	80069b6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	330c      	adds	r3, #12
 8006906:	7812      	ldrb	r2, [r2, #0]
 8006908:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006918:	b29b      	uxth	r3, r3
 800691a:	3b01      	subs	r3, #1
 800691c:	b29a      	uxth	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006922:	e048      	b.n	80069b6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b02      	cmp	r3, #2
 8006930:	d12b      	bne.n	800698a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006936:	b29b      	uxth	r3, r3
 8006938:	2b01      	cmp	r3, #1
 800693a:	d912      	bls.n	8006962 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	881a      	ldrh	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	1c9a      	adds	r2, r3, #2
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b02      	subs	r3, #2
 800695a:	b29a      	uxth	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006960:	e029      	b.n	80069b6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	330c      	adds	r3, #12
 800696c:	7812      	ldrb	r2, [r2, #0]
 800696e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006974:	1c5a      	adds	r2, r3, #1
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800697e:	b29b      	uxth	r3, r3
 8006980:	3b01      	subs	r3, #1
 8006982:	b29a      	uxth	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006988:	e015      	b.n	80069b6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800698a:	f7fd ffe3 	bl	8004954 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d803      	bhi.n	80069a2 <HAL_SPI_Transmit+0x270>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a0:	d102      	bne.n	80069a8 <HAL_SPI_Transmit+0x276>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d106      	bne.n	80069b6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80069b4:	e029      	b.n	8006a0a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1b1      	bne.n	8006924 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 fcf9 	bl	80073bc <SPI_EndRxTxTransaction>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2220      	movs	r2, #32
 80069d4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10a      	bne.n	80069f4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069de:	2300      	movs	r3, #0
 80069e0:	613b      	str	r3, [r7, #16]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	613b      	str	r3, [r7, #16]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	613b      	str	r3, [r7, #16]
 80069f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	77fb      	strb	r3, [r7, #31]
 8006a00:	e003      	b.n	8006a0a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006a12:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3720      	adds	r7, #32
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af02      	add	r7, sp, #8
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	603b      	str	r3, [r7, #0]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d002      	beq.n	8006a42 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a40:	e11a      	b.n	8006c78 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a4a:	d112      	bne.n	8006a72 <HAL_SPI_Receive+0x56>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10e      	bne.n	8006a72 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2204      	movs	r2, #4
 8006a58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a5c:	88fa      	ldrh	r2, [r7, #6]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	4613      	mov	r3, r2
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	68b9      	ldr	r1, [r7, #8]
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f90e 	bl	8006c8a <HAL_SPI_TransmitReceive>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	e107      	b.n	8006c82 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <HAL_SPI_Receive+0x64>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e100      	b.n	8006c82 <HAL_SPI_Receive+0x266>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a88:	f7fd ff64 	bl	8004954 <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <HAL_SPI_Receive+0x7e>
 8006a94:	88fb      	ldrh	r3, [r7, #6]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d102      	bne.n	8006aa0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a9e:	e0eb      	b.n	8006c78 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2204      	movs	r2, #4
 8006aa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	88fa      	ldrh	r2, [r7, #6]
 8006ab8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	88fa      	ldrh	r2, [r7, #6]
 8006ac0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006aea:	d908      	bls.n	8006afe <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006afa:	605a      	str	r2, [r3, #4]
 8006afc:	e007      	b.n	8006b0e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b0c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b16:	d10f      	bne.n	8006b38 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b36:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b42:	2b40      	cmp	r3, #64	; 0x40
 8006b44:	d007      	beq.n	8006b56 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b54:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b5e:	d86f      	bhi.n	8006c40 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006b60:	e034      	b.n	8006bcc <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d117      	bne.n	8006ba0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f103 020c 	add.w	r2, r3, #12
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7c:	7812      	ldrb	r2, [r2, #0]
 8006b7e:	b2d2      	uxtb	r2, r2
 8006b80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	3b01      	subs	r3, #1
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006b9e:	e015      	b.n	8006bcc <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ba0:	f7fd fed8 	bl	8004954 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d803      	bhi.n	8006bb8 <HAL_SPI_Receive+0x19c>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb6:	d102      	bne.n	8006bbe <HAL_SPI_Receive+0x1a2>
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d106      	bne.n	8006bcc <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006bca:	e055      	b.n	8006c78 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1c4      	bne.n	8006b62 <HAL_SPI_Receive+0x146>
 8006bd8:	e038      	b.n	8006c4c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d115      	bne.n	8006c14 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	b292      	uxth	r2, r2
 8006bf4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	1c9a      	adds	r2, r3, #2
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006c12:	e015      	b.n	8006c40 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c14:	f7fd fe9e 	bl	8004954 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d803      	bhi.n	8006c2c <HAL_SPI_Receive+0x210>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2a:	d102      	bne.n	8006c32 <HAL_SPI_Receive+0x216>
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d106      	bne.n	8006c40 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006c3e:	e01b      	b.n	8006c78 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1c6      	bne.n	8006bda <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 fb5b 	bl	800730c <SPI_EndRxTransaction>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	75fb      	strb	r3, [r7, #23]
 8006c6e:	e003      	b.n	8006c78 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b08a      	sub	sp, #40	; 0x28
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	607a      	str	r2, [r7, #4]
 8006c96:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d101      	bne.n	8006cb0 <HAL_SPI_TransmitReceive+0x26>
 8006cac:	2302      	movs	r3, #2
 8006cae:	e20a      	b.n	80070c6 <HAL_SPI_TransmitReceive+0x43c>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cb8:	f7fd fe4c 	bl	8004954 <HAL_GetTick>
 8006cbc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cc4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006ccc:	887b      	ldrh	r3, [r7, #2]
 8006cce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006cd0:	887b      	ldrh	r3, [r7, #2]
 8006cd2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006cd4:	7efb      	ldrb	r3, [r7, #27]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d00e      	beq.n	8006cf8 <HAL_SPI_TransmitReceive+0x6e>
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ce0:	d106      	bne.n	8006cf0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d102      	bne.n	8006cf0 <HAL_SPI_TransmitReceive+0x66>
 8006cea:	7efb      	ldrb	r3, [r7, #27]
 8006cec:	2b04      	cmp	r3, #4
 8006cee:	d003      	beq.n	8006cf8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006cf6:	e1e0      	b.n	80070ba <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d005      	beq.n	8006d0a <HAL_SPI_TransmitReceive+0x80>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_SPI_TransmitReceive+0x80>
 8006d04:	887b      	ldrh	r3, [r7, #2]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d103      	bne.n	8006d12 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006d10:	e1d3      	b.n	80070ba <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d003      	beq.n	8006d26 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2205      	movs	r2, #5
 8006d22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	887a      	ldrh	r2, [r7, #2]
 8006d36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	887a      	ldrh	r2, [r7, #2]
 8006d3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	887a      	ldrh	r2, [r7, #2]
 8006d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	887a      	ldrh	r2, [r7, #2]
 8006d52:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d68:	d802      	bhi.n	8006d70 <HAL_SPI_TransmitReceive+0xe6>
 8006d6a:	8a3b      	ldrh	r3, [r7, #16]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d908      	bls.n	8006d82 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d7e:	605a      	str	r2, [r3, #4]
 8006d80:	e007      	b.n	8006d92 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d90:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d9c:	2b40      	cmp	r3, #64	; 0x40
 8006d9e:	d007      	beq.n	8006db0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006db8:	f240 8081 	bls.w	8006ebe <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <HAL_SPI_TransmitReceive+0x140>
 8006dc4:	8a7b      	ldrh	r3, [r7, #18]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d16d      	bne.n	8006ea6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dce:	881a      	ldrh	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dda:	1c9a      	adds	r2, r3, #2
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dee:	e05a      	b.n	8006ea6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d11b      	bne.n	8006e36 <HAL_SPI_TransmitReceive+0x1ac>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d016      	beq.n	8006e36 <HAL_SPI_TransmitReceive+0x1ac>
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d113      	bne.n	8006e36 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e12:	881a      	ldrh	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1e:	1c9a      	adds	r2, r3, #2
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d11c      	bne.n	8006e7e <HAL_SPI_TransmitReceive+0x1f4>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d016      	beq.n	8006e7e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	b292      	uxth	r2, r2
 8006e5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	1c9a      	adds	r2, r3, #2
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	3b01      	subs	r3, #1
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e7e:	f7fd fd69 	bl	8004954 <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d80b      	bhi.n	8006ea6 <HAL_SPI_TransmitReceive+0x21c>
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e94:	d007      	beq.n	8006ea6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006ea4:	e109      	b.n	80070ba <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d19f      	bne.n	8006df0 <HAL_SPI_TransmitReceive+0x166>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d199      	bne.n	8006df0 <HAL_SPI_TransmitReceive+0x166>
 8006ebc:	e0e3      	b.n	8007086 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <HAL_SPI_TransmitReceive+0x244>
 8006ec6:	8a7b      	ldrh	r3, [r7, #18]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	f040 80cf 	bne.w	800706c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d912      	bls.n	8006efe <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006edc:	881a      	ldrh	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	1c9a      	adds	r2, r3, #2
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b02      	subs	r3, #2
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006efc:	e0b6      	b.n	800706c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	330c      	adds	r3, #12
 8006f08:	7812      	ldrb	r2, [r2, #0]
 8006f0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f24:	e0a2      	b.n	800706c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d134      	bne.n	8006f9e <HAL_SPI_TransmitReceive+0x314>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d02f      	beq.n	8006f9e <HAL_SPI_TransmitReceive+0x314>
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d12c      	bne.n	8006f9e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d912      	bls.n	8006f74 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f52:	881a      	ldrh	r2, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5e:	1c9a      	adds	r2, r3, #2
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	3b02      	subs	r3, #2
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f72:	e012      	b.n	8006f9a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	7812      	ldrb	r2, [r2, #0]
 8006f80:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d148      	bne.n	800703e <HAL_SPI_TransmitReceive+0x3b4>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d042      	beq.n	800703e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d923      	bls.n	800700c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	b292      	uxth	r2, r2
 8006fd0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	1c9a      	adds	r2, r3, #2
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	3b02      	subs	r3, #2
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d81f      	bhi.n	800703a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007008:	605a      	str	r2, [r3, #4]
 800700a:	e016      	b.n	800703a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f103 020c 	add.w	r2, r3, #12
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007018:	7812      	ldrb	r2, [r2, #0]
 800701a:	b2d2      	uxtb	r2, r2
 800701c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800703a:	2301      	movs	r3, #1
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800703e:	f7fd fc89 	bl	8004954 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800704a:	429a      	cmp	r2, r3
 800704c:	d803      	bhi.n	8007056 <HAL_SPI_TransmitReceive+0x3cc>
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007054:	d102      	bne.n	800705c <HAL_SPI_TransmitReceive+0x3d2>
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	2b00      	cmp	r3, #0
 800705a:	d107      	bne.n	800706c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800706a:	e026      	b.n	80070ba <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	f47f af57 	bne.w	8006f26 <HAL_SPI_TransmitReceive+0x29c>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800707e:	b29b      	uxth	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	f47f af50 	bne.w	8006f26 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007086:	69fa      	ldr	r2, [r7, #28]
 8007088:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 f996 	bl	80073bc <SPI_EndRxTxTransaction>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d005      	beq.n	80070a2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2220      	movs	r2, #32
 80070a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070b0:	e003      	b.n	80070ba <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80070c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3728      	adds	r7, #40	; 0x28
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
	...

080070d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	4613      	mov	r3, r2
 80070de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80070e0:	f7fd fc38 	bl	8004954 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	1a9b      	subs	r3, r3, r2
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	4413      	add	r3, r2
 80070ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070f0:	f7fd fc30 	bl	8004954 <HAL_GetTick>
 80070f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80070f6:	4b39      	ldr	r3, [pc, #228]	; (80071dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	015b      	lsls	r3, r3, #5
 80070fc:	0d1b      	lsrs	r3, r3, #20
 80070fe:	69fa      	ldr	r2, [r7, #28]
 8007100:	fb02 f303 	mul.w	r3, r2, r3
 8007104:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007106:	e054      	b.n	80071b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710e:	d050      	beq.n	80071b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007110:	f7fd fc20 	bl	8004954 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	69fa      	ldr	r2, [r7, #28]
 800711c:	429a      	cmp	r2, r3
 800711e:	d902      	bls.n	8007126 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d13d      	bne.n	80071a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007134:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800713e:	d111      	bne.n	8007164 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007148:	d004      	beq.n	8007154 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007152:	d107      	bne.n	8007164 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007162:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800716c:	d10f      	bne.n	800718e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800718c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e017      	b.n	80071d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4013      	ands	r3, r2
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	429a      	cmp	r2, r3
 80071c0:	bf0c      	ite	eq
 80071c2:	2301      	moveq	r3, #1
 80071c4:	2300      	movne	r3, #0
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	461a      	mov	r2, r3
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d19b      	bne.n	8007108 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3720      	adds	r7, #32
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20000344 	.word	0x20000344

080071e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08a      	sub	sp, #40	; 0x28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80071f2:	f7fd fbaf 	bl	8004954 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	1a9b      	subs	r3, r3, r2
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	4413      	add	r3, r2
 8007200:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007202:	f7fd fba7 	bl	8004954 <HAL_GetTick>
 8007206:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	330c      	adds	r3, #12
 800720e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007210:	4b3d      	ldr	r3, [pc, #244]	; (8007308 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	4613      	mov	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	00da      	lsls	r2, r3, #3
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	0d1b      	lsrs	r3, r3, #20
 8007220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007222:	fb02 f303 	mul.w	r3, r2, r3
 8007226:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007228:	e060      	b.n	80072ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007230:	d107      	bne.n	8007242 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d104      	bne.n	8007242 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	b2db      	uxtb	r3, r3
 800723e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007240:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007248:	d050      	beq.n	80072ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800724a:	f7fd fb83 	bl	8004954 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007256:	429a      	cmp	r2, r3
 8007258:	d902      	bls.n	8007260 <SPI_WaitFifoStateUntilTimeout+0x80>
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	2b00      	cmp	r3, #0
 800725e:	d13d      	bne.n	80072dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800726e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007278:	d111      	bne.n	800729e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007282:	d004      	beq.n	800728e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800728c:	d107      	bne.n	800729e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800729c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072a6:	d10f      	bne.n	80072c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e010      	b.n	80072fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	3b01      	subs	r3, #1
 80072ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689a      	ldr	r2, [r3, #8]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	4013      	ands	r3, r2
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d196      	bne.n	800722a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3728      	adds	r7, #40	; 0x28
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000344 	.word	0x20000344

0800730c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af02      	add	r7, sp, #8
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007320:	d111      	bne.n	8007346 <SPI_EndRxTransaction+0x3a>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800732a:	d004      	beq.n	8007336 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007334:	d107      	bne.n	8007346 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007344:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2200      	movs	r2, #0
 800734e:	2180      	movs	r1, #128	; 0x80
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f7ff febd 	bl	80070d0 <SPI_WaitFlagStateUntilTimeout>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d007      	beq.n	800736c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007360:	f043 0220 	orr.w	r2, r3, #32
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e023      	b.n	80073b4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007374:	d11d      	bne.n	80073b2 <SPI_EndRxTransaction+0xa6>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800737e:	d004      	beq.n	800738a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007388:	d113      	bne.n	80073b2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2200      	movs	r2, #0
 8007392:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f7ff ff22 	bl	80071e0 <SPI_WaitFifoStateUntilTimeout>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d007      	beq.n	80073b2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073a6:	f043 0220 	orr.w	r2, r3, #32
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e000      	b.n	80073b4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af02      	add	r7, sp, #8
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f7ff ff03 	bl	80071e0 <SPI_WaitFifoStateUntilTimeout>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d007      	beq.n	80073f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073e4:	f043 0220 	orr.w	r2, r3, #32
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e027      	b.n	8007440 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2200      	movs	r2, #0
 80073f8:	2180      	movs	r1, #128	; 0x80
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f7ff fe68 	bl	80070d0 <SPI_WaitFlagStateUntilTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d007      	beq.n	8007416 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800740a:	f043 0220 	orr.w	r2, r3, #32
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e014      	b.n	8007440 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2200      	movs	r2, #0
 800741e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f7ff fedc 	bl	80071e0 <SPI_WaitFifoStateUntilTimeout>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d007      	beq.n	800743e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007432:	f043 0220 	orr.w	r2, r3, #32
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e000      	b.n	8007440 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e049      	b.n	80074ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d106      	bne.n	8007474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f841 	bl	80074f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	3304      	adds	r3, #4
 8007484:	4619      	mov	r1, r3
 8007486:	4610      	mov	r0, r2
 8007488:	f000 f9da 	bl	8007840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
	...

0800750c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b01      	cmp	r3, #1
 800751e:	d001      	beq.n	8007524 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e04f      	b.n	80075c4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2202      	movs	r2, #2
 8007528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f042 0201 	orr.w	r2, r2, #1
 800753a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a23      	ldr	r2, [pc, #140]	; (80075d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d01d      	beq.n	8007582 <HAL_TIM_Base_Start_IT+0x76>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800754e:	d018      	beq.n	8007582 <HAL_TIM_Base_Start_IT+0x76>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a1f      	ldr	r2, [pc, #124]	; (80075d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d013      	beq.n	8007582 <HAL_TIM_Base_Start_IT+0x76>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a1e      	ldr	r2, [pc, #120]	; (80075d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d00e      	beq.n	8007582 <HAL_TIM_Base_Start_IT+0x76>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a1c      	ldr	r2, [pc, #112]	; (80075dc <HAL_TIM_Base_Start_IT+0xd0>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d009      	beq.n	8007582 <HAL_TIM_Base_Start_IT+0x76>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a1b      	ldr	r2, [pc, #108]	; (80075e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d004      	beq.n	8007582 <HAL_TIM_Base_Start_IT+0x76>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a19      	ldr	r2, [pc, #100]	; (80075e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d115      	bne.n	80075ae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689a      	ldr	r2, [r3, #8]
 8007588:	4b17      	ldr	r3, [pc, #92]	; (80075e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800758a:	4013      	ands	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2b06      	cmp	r3, #6
 8007592:	d015      	beq.n	80075c0 <HAL_TIM_Base_Start_IT+0xb4>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800759a:	d011      	beq.n	80075c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f042 0201 	orr.w	r2, r2, #1
 80075aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ac:	e008      	b.n	80075c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f042 0201 	orr.w	r2, r2, #1
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	e000      	b.n	80075c2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	40012c00 	.word	0x40012c00
 80075d4:	40000400 	.word	0x40000400
 80075d8:	40000800 	.word	0x40000800
 80075dc:	40000c00 	.word	0x40000c00
 80075e0:	40013400 	.word	0x40013400
 80075e4:	40014000 	.word	0x40014000
 80075e8:	00010007 	.word	0x00010007

080075ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d020      	beq.n	8007650 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d01b      	beq.n	8007650 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f06f 0202 	mvn.w	r2, #2
 8007620:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d003      	beq.n	800763e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f8e4 	bl	8007804 <HAL_TIM_IC_CaptureCallback>
 800763c:	e005      	b.n	800764a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f8d6 	bl	80077f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f8e7 	bl	8007818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f003 0304 	and.w	r3, r3, #4
 8007656:	2b00      	cmp	r3, #0
 8007658:	d020      	beq.n	800769c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01b      	beq.n	800769c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f06f 0204 	mvn.w	r2, #4
 800766c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2202      	movs	r2, #2
 8007672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f8be 	bl	8007804 <HAL_TIM_IC_CaptureCallback>
 8007688:	e005      	b.n	8007696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f8b0 	bl	80077f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f8c1 	bl	8007818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f003 0308 	and.w	r3, r3, #8
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d020      	beq.n	80076e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f003 0308 	and.w	r3, r3, #8
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d01b      	beq.n	80076e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f06f 0208 	mvn.w	r2, #8
 80076b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2204      	movs	r2, #4
 80076be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	f003 0303 	and.w	r3, r3, #3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f898 	bl	8007804 <HAL_TIM_IC_CaptureCallback>
 80076d4:	e005      	b.n	80076e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f88a 	bl	80077f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f89b 	bl	8007818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f003 0310 	and.w	r3, r3, #16
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d020      	beq.n	8007734 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f003 0310 	and.w	r3, r3, #16
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d01b      	beq.n	8007734 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f06f 0210 	mvn.w	r2, #16
 8007704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2208      	movs	r2, #8
 800770a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f872 	bl	8007804 <HAL_TIM_IC_CaptureCallback>
 8007720:	e005      	b.n	800772e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f864 	bl	80077f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f875 	bl	8007818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00c      	beq.n	8007758 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	2b00      	cmp	r3, #0
 8007746:	d007      	beq.n	8007758 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f06f 0201 	mvn.w	r2, #1
 8007750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7fa fa28 	bl	8001ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00c      	beq.n	800777c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007768:	2b00      	cmp	r3, #0
 800776a:	d007      	beq.n	800777c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f906 	bl	8007988 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00c      	beq.n	80077a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800778c:	2b00      	cmp	r3, #0
 800778e:	d007      	beq.n	80077a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f8fe 	bl	800799c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00c      	beq.n	80077c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d007      	beq.n	80077c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f834 	bl	800782c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	f003 0320 	and.w	r3, r3, #32
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00c      	beq.n	80077e8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f003 0320 	and.w	r3, r3, #32
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d007      	beq.n	80077e8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f06f 0220 	mvn.w	r2, #32
 80077e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f8c6 	bl	8007974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077e8:	bf00      	nop
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a40      	ldr	r2, [pc, #256]	; (8007954 <TIM_Base_SetConfig+0x114>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d013      	beq.n	8007880 <TIM_Base_SetConfig+0x40>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800785e:	d00f      	beq.n	8007880 <TIM_Base_SetConfig+0x40>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a3d      	ldr	r2, [pc, #244]	; (8007958 <TIM_Base_SetConfig+0x118>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d00b      	beq.n	8007880 <TIM_Base_SetConfig+0x40>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a3c      	ldr	r2, [pc, #240]	; (800795c <TIM_Base_SetConfig+0x11c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d007      	beq.n	8007880 <TIM_Base_SetConfig+0x40>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a3b      	ldr	r2, [pc, #236]	; (8007960 <TIM_Base_SetConfig+0x120>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d003      	beq.n	8007880 <TIM_Base_SetConfig+0x40>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a3a      	ldr	r2, [pc, #232]	; (8007964 <TIM_Base_SetConfig+0x124>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d108      	bne.n	8007892 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a2f      	ldr	r2, [pc, #188]	; (8007954 <TIM_Base_SetConfig+0x114>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d01f      	beq.n	80078da <TIM_Base_SetConfig+0x9a>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a0:	d01b      	beq.n	80078da <TIM_Base_SetConfig+0x9a>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a2c      	ldr	r2, [pc, #176]	; (8007958 <TIM_Base_SetConfig+0x118>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d017      	beq.n	80078da <TIM_Base_SetConfig+0x9a>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a2b      	ldr	r2, [pc, #172]	; (800795c <TIM_Base_SetConfig+0x11c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d013      	beq.n	80078da <TIM_Base_SetConfig+0x9a>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a2a      	ldr	r2, [pc, #168]	; (8007960 <TIM_Base_SetConfig+0x120>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d00f      	beq.n	80078da <TIM_Base_SetConfig+0x9a>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a29      	ldr	r2, [pc, #164]	; (8007964 <TIM_Base_SetConfig+0x124>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d00b      	beq.n	80078da <TIM_Base_SetConfig+0x9a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a28      	ldr	r2, [pc, #160]	; (8007968 <TIM_Base_SetConfig+0x128>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d007      	beq.n	80078da <TIM_Base_SetConfig+0x9a>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a27      	ldr	r2, [pc, #156]	; (800796c <TIM_Base_SetConfig+0x12c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d003      	beq.n	80078da <TIM_Base_SetConfig+0x9a>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a26      	ldr	r2, [pc, #152]	; (8007970 <TIM_Base_SetConfig+0x130>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d108      	bne.n	80078ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a10      	ldr	r2, [pc, #64]	; (8007954 <TIM_Base_SetConfig+0x114>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d00f      	beq.n	8007938 <TIM_Base_SetConfig+0xf8>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a12      	ldr	r2, [pc, #72]	; (8007964 <TIM_Base_SetConfig+0x124>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d00b      	beq.n	8007938 <TIM_Base_SetConfig+0xf8>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a11      	ldr	r2, [pc, #68]	; (8007968 <TIM_Base_SetConfig+0x128>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d007      	beq.n	8007938 <TIM_Base_SetConfig+0xf8>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a10      	ldr	r2, [pc, #64]	; (800796c <TIM_Base_SetConfig+0x12c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d003      	beq.n	8007938 <TIM_Base_SetConfig+0xf8>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a0f      	ldr	r2, [pc, #60]	; (8007970 <TIM_Base_SetConfig+0x130>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d103      	bne.n	8007940 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	691a      	ldr	r2, [r3, #16]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	615a      	str	r2, [r3, #20]
}
 8007946:	bf00      	nop
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	40012c00 	.word	0x40012c00
 8007958:	40000400 	.word	0x40000400
 800795c:	40000800 	.word	0x40000800
 8007960:	40000c00 	.word	0x40000c00
 8007964:	40013400 	.word	0x40013400
 8007968:	40014000 	.word	0x40014000
 800796c:	40014400 	.word	0x40014400
 8007970:	40014800 	.word	0x40014800

08007974 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e040      	b.n	8007a44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d106      	bne.n	80079d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7fa fbd2 	bl	800217c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2224      	movs	r2, #36	; 0x24
 80079dc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0201 	bic.w	r2, r2, #1
 80079ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fb6a 	bl	80080d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f8af 	bl	8007b60 <UART_SetConfig>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d101      	bne.n	8007a0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e01b      	b.n	8007a44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	689a      	ldr	r2, [r3, #8]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f042 0201 	orr.w	r2, r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fbe9 	bl	8008214 <UART_CheckIdleState>
 8007a42:	4603      	mov	r3, r0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08a      	sub	sp, #40	; 0x28
 8007a50:	af02      	add	r7, sp, #8
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a60:	2b20      	cmp	r3, #32
 8007a62:	d178      	bne.n	8007b56 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <HAL_UART_Transmit+0x24>
 8007a6a:	88fb      	ldrh	r3, [r7, #6]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e071      	b.n	8007b58 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2221      	movs	r2, #33	; 0x21
 8007a80:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a82:	f7fc ff67 	bl	8004954 <HAL_GetTick>
 8007a86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	88fa      	ldrh	r2, [r7, #6]
 8007a8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	88fa      	ldrh	r2, [r7, #6]
 8007a94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa0:	d108      	bne.n	8007ab4 <HAL_UART_Transmit+0x68>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d104      	bne.n	8007ab4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	61bb      	str	r3, [r7, #24]
 8007ab2:	e003      	b.n	8007abc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007abc:	e030      	b.n	8007b20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	2180      	movs	r1, #128	; 0x80
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 fc4b 	bl	8008364 <UART_WaitOnFlagUntilTimeout>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d004      	beq.n	8007ade <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2220      	movs	r2, #32
 8007ad8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e03c      	b.n	8007b58 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10b      	bne.n	8007afc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	881a      	ldrh	r2, [r3, #0]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007af0:	b292      	uxth	r2, r2
 8007af2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	3302      	adds	r3, #2
 8007af8:	61bb      	str	r3, [r7, #24]
 8007afa:	e008      	b.n	8007b0e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	781a      	ldrb	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	b292      	uxth	r2, r2
 8007b06:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1c8      	bne.n	8007abe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	2200      	movs	r2, #0
 8007b34:	2140      	movs	r1, #64	; 0x40
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 fc14 	bl	8008364 <UART_WaitOnFlagUntilTimeout>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d004      	beq.n	8007b4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2220      	movs	r2, #32
 8007b46:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e005      	b.n	8007b58 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	e000      	b.n	8007b58 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007b56:	2302      	movs	r3, #2
  }
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3720      	adds	r7, #32
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b64:	b08a      	sub	sp, #40	; 0x28
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	4ba4      	ldr	r3, [pc, #656]	; (8007e20 <UART_SetConfig+0x2c0>)
 8007b90:	4013      	ands	r3, r2
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	6812      	ldr	r2, [r2, #0]
 8007b96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b98:	430b      	orrs	r3, r1
 8007b9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a99      	ldr	r2, [pc, #612]	; (8007e24 <UART_SetConfig+0x2c4>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d004      	beq.n	8007bcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6a1b      	ldr	r3, [r3, #32]
 8007bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a90      	ldr	r2, [pc, #576]	; (8007e28 <UART_SetConfig+0x2c8>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d126      	bne.n	8007c38 <UART_SetConfig+0xd8>
 8007bea:	4b90      	ldr	r3, [pc, #576]	; (8007e2c <UART_SetConfig+0x2cc>)
 8007bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf0:	f003 0303 	and.w	r3, r3, #3
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d81b      	bhi.n	8007c30 <UART_SetConfig+0xd0>
 8007bf8:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <UART_SetConfig+0xa0>)
 8007bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfe:	bf00      	nop
 8007c00:	08007c11 	.word	0x08007c11
 8007c04:	08007c21 	.word	0x08007c21
 8007c08:	08007c19 	.word	0x08007c19
 8007c0c:	08007c29 	.word	0x08007c29
 8007c10:	2301      	movs	r3, #1
 8007c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c16:	e116      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c1e:	e112      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007c20:	2304      	movs	r3, #4
 8007c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c26:	e10e      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007c28:	2308      	movs	r3, #8
 8007c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c2e:	e10a      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007c30:	2310      	movs	r3, #16
 8007c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c36:	e106      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a7c      	ldr	r2, [pc, #496]	; (8007e30 <UART_SetConfig+0x2d0>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d138      	bne.n	8007cb4 <UART_SetConfig+0x154>
 8007c42:	4b7a      	ldr	r3, [pc, #488]	; (8007e2c <UART_SetConfig+0x2cc>)
 8007c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c48:	f003 030c 	and.w	r3, r3, #12
 8007c4c:	2b0c      	cmp	r3, #12
 8007c4e:	d82d      	bhi.n	8007cac <UART_SetConfig+0x14c>
 8007c50:	a201      	add	r2, pc, #4	; (adr r2, 8007c58 <UART_SetConfig+0xf8>)
 8007c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c56:	bf00      	nop
 8007c58:	08007c8d 	.word	0x08007c8d
 8007c5c:	08007cad 	.word	0x08007cad
 8007c60:	08007cad 	.word	0x08007cad
 8007c64:	08007cad 	.word	0x08007cad
 8007c68:	08007c9d 	.word	0x08007c9d
 8007c6c:	08007cad 	.word	0x08007cad
 8007c70:	08007cad 	.word	0x08007cad
 8007c74:	08007cad 	.word	0x08007cad
 8007c78:	08007c95 	.word	0x08007c95
 8007c7c:	08007cad 	.word	0x08007cad
 8007c80:	08007cad 	.word	0x08007cad
 8007c84:	08007cad 	.word	0x08007cad
 8007c88:	08007ca5 	.word	0x08007ca5
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c92:	e0d8      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007c94:	2302      	movs	r3, #2
 8007c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c9a:	e0d4      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007c9c:	2304      	movs	r3, #4
 8007c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ca2:	e0d0      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007ca4:	2308      	movs	r3, #8
 8007ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007caa:	e0cc      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007cac:	2310      	movs	r3, #16
 8007cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cb2:	e0c8      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a5e      	ldr	r2, [pc, #376]	; (8007e34 <UART_SetConfig+0x2d4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d125      	bne.n	8007d0a <UART_SetConfig+0x1aa>
 8007cbe:	4b5b      	ldr	r3, [pc, #364]	; (8007e2c <UART_SetConfig+0x2cc>)
 8007cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007cc8:	2b30      	cmp	r3, #48	; 0x30
 8007cca:	d016      	beq.n	8007cfa <UART_SetConfig+0x19a>
 8007ccc:	2b30      	cmp	r3, #48	; 0x30
 8007cce:	d818      	bhi.n	8007d02 <UART_SetConfig+0x1a2>
 8007cd0:	2b20      	cmp	r3, #32
 8007cd2:	d00a      	beq.n	8007cea <UART_SetConfig+0x18a>
 8007cd4:	2b20      	cmp	r3, #32
 8007cd6:	d814      	bhi.n	8007d02 <UART_SetConfig+0x1a2>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d002      	beq.n	8007ce2 <UART_SetConfig+0x182>
 8007cdc:	2b10      	cmp	r3, #16
 8007cde:	d008      	beq.n	8007cf2 <UART_SetConfig+0x192>
 8007ce0:	e00f      	b.n	8007d02 <UART_SetConfig+0x1a2>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ce8:	e0ad      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007cea:	2302      	movs	r3, #2
 8007cec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cf0:	e0a9      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007cf2:	2304      	movs	r3, #4
 8007cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cf8:	e0a5      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007cfa:	2308      	movs	r3, #8
 8007cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d00:	e0a1      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007d02:	2310      	movs	r3, #16
 8007d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d08:	e09d      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a4a      	ldr	r2, [pc, #296]	; (8007e38 <UART_SetConfig+0x2d8>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d125      	bne.n	8007d60 <UART_SetConfig+0x200>
 8007d14:	4b45      	ldr	r3, [pc, #276]	; (8007e2c <UART_SetConfig+0x2cc>)
 8007d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d1e:	2bc0      	cmp	r3, #192	; 0xc0
 8007d20:	d016      	beq.n	8007d50 <UART_SetConfig+0x1f0>
 8007d22:	2bc0      	cmp	r3, #192	; 0xc0
 8007d24:	d818      	bhi.n	8007d58 <UART_SetConfig+0x1f8>
 8007d26:	2b80      	cmp	r3, #128	; 0x80
 8007d28:	d00a      	beq.n	8007d40 <UART_SetConfig+0x1e0>
 8007d2a:	2b80      	cmp	r3, #128	; 0x80
 8007d2c:	d814      	bhi.n	8007d58 <UART_SetConfig+0x1f8>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <UART_SetConfig+0x1d8>
 8007d32:	2b40      	cmp	r3, #64	; 0x40
 8007d34:	d008      	beq.n	8007d48 <UART_SetConfig+0x1e8>
 8007d36:	e00f      	b.n	8007d58 <UART_SetConfig+0x1f8>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d3e:	e082      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007d40:	2302      	movs	r3, #2
 8007d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d46:	e07e      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007d48:	2304      	movs	r3, #4
 8007d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d4e:	e07a      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007d50:	2308      	movs	r3, #8
 8007d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d56:	e076      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007d58:	2310      	movs	r3, #16
 8007d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d5e:	e072      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a35      	ldr	r2, [pc, #212]	; (8007e3c <UART_SetConfig+0x2dc>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d12a      	bne.n	8007dc0 <UART_SetConfig+0x260>
 8007d6a:	4b30      	ldr	r3, [pc, #192]	; (8007e2c <UART_SetConfig+0x2cc>)
 8007d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d78:	d01a      	beq.n	8007db0 <UART_SetConfig+0x250>
 8007d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d7e:	d81b      	bhi.n	8007db8 <UART_SetConfig+0x258>
 8007d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d84:	d00c      	beq.n	8007da0 <UART_SetConfig+0x240>
 8007d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d8a:	d815      	bhi.n	8007db8 <UART_SetConfig+0x258>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <UART_SetConfig+0x238>
 8007d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d94:	d008      	beq.n	8007da8 <UART_SetConfig+0x248>
 8007d96:	e00f      	b.n	8007db8 <UART_SetConfig+0x258>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d9e:	e052      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007da0:	2302      	movs	r3, #2
 8007da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007da6:	e04e      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007da8:	2304      	movs	r3, #4
 8007daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dae:	e04a      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007db0:	2308      	movs	r3, #8
 8007db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007db6:	e046      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007db8:	2310      	movs	r3, #16
 8007dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dbe:	e042      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a17      	ldr	r2, [pc, #92]	; (8007e24 <UART_SetConfig+0x2c4>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d13a      	bne.n	8007e40 <UART_SetConfig+0x2e0>
 8007dca:	4b18      	ldr	r3, [pc, #96]	; (8007e2c <UART_SetConfig+0x2cc>)
 8007dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007dd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dd8:	d01a      	beq.n	8007e10 <UART_SetConfig+0x2b0>
 8007dda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dde:	d81b      	bhi.n	8007e18 <UART_SetConfig+0x2b8>
 8007de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de4:	d00c      	beq.n	8007e00 <UART_SetConfig+0x2a0>
 8007de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dea:	d815      	bhi.n	8007e18 <UART_SetConfig+0x2b8>
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <UART_SetConfig+0x298>
 8007df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007df4:	d008      	beq.n	8007e08 <UART_SetConfig+0x2a8>
 8007df6:	e00f      	b.n	8007e18 <UART_SetConfig+0x2b8>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dfe:	e022      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007e00:	2302      	movs	r3, #2
 8007e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e06:	e01e      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007e08:	2304      	movs	r3, #4
 8007e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e0e:	e01a      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007e10:	2308      	movs	r3, #8
 8007e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e16:	e016      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007e18:	2310      	movs	r3, #16
 8007e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e1e:	e012      	b.n	8007e46 <UART_SetConfig+0x2e6>
 8007e20:	efff69f3 	.word	0xefff69f3
 8007e24:	40008000 	.word	0x40008000
 8007e28:	40013800 	.word	0x40013800
 8007e2c:	40021000 	.word	0x40021000
 8007e30:	40004400 	.word	0x40004400
 8007e34:	40004800 	.word	0x40004800
 8007e38:	40004c00 	.word	0x40004c00
 8007e3c:	40005000 	.word	0x40005000
 8007e40:	2310      	movs	r3, #16
 8007e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a9f      	ldr	r2, [pc, #636]	; (80080c8 <UART_SetConfig+0x568>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d17a      	bne.n	8007f46 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e54:	2b08      	cmp	r3, #8
 8007e56:	d824      	bhi.n	8007ea2 <UART_SetConfig+0x342>
 8007e58:	a201      	add	r2, pc, #4	; (adr r2, 8007e60 <UART_SetConfig+0x300>)
 8007e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5e:	bf00      	nop
 8007e60:	08007e85 	.word	0x08007e85
 8007e64:	08007ea3 	.word	0x08007ea3
 8007e68:	08007e8d 	.word	0x08007e8d
 8007e6c:	08007ea3 	.word	0x08007ea3
 8007e70:	08007e93 	.word	0x08007e93
 8007e74:	08007ea3 	.word	0x08007ea3
 8007e78:	08007ea3 	.word	0x08007ea3
 8007e7c:	08007ea3 	.word	0x08007ea3
 8007e80:	08007e9b 	.word	0x08007e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e84:	f7fd fe38 	bl	8005af8 <HAL_RCC_GetPCLK1Freq>
 8007e88:	61f8      	str	r0, [r7, #28]
        break;
 8007e8a:	e010      	b.n	8007eae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e8c:	4b8f      	ldr	r3, [pc, #572]	; (80080cc <UART_SetConfig+0x56c>)
 8007e8e:	61fb      	str	r3, [r7, #28]
        break;
 8007e90:	e00d      	b.n	8007eae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e92:	f7fd fd99 	bl	80059c8 <HAL_RCC_GetSysClockFreq>
 8007e96:	61f8      	str	r0, [r7, #28]
        break;
 8007e98:	e009      	b.n	8007eae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e9e:	61fb      	str	r3, [r7, #28]
        break;
 8007ea0:	e005      	b.n	8007eae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007eac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 80fb 	beq.w	80080ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	685a      	ldr	r2, [r3, #4]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	005b      	lsls	r3, r3, #1
 8007ebe:	4413      	add	r3, r2
 8007ec0:	69fa      	ldr	r2, [r7, #28]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d305      	bcc.n	8007ed2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ecc:	69fa      	ldr	r2, [r7, #28]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d903      	bls.n	8007eda <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ed8:	e0e8      	b.n	80080ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	2200      	movs	r2, #0
 8007ede:	461c      	mov	r4, r3
 8007ee0:	4615      	mov	r5, r2
 8007ee2:	f04f 0200 	mov.w	r2, #0
 8007ee6:	f04f 0300 	mov.w	r3, #0
 8007eea:	022b      	lsls	r3, r5, #8
 8007eec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007ef0:	0222      	lsls	r2, r4, #8
 8007ef2:	68f9      	ldr	r1, [r7, #12]
 8007ef4:	6849      	ldr	r1, [r1, #4]
 8007ef6:	0849      	lsrs	r1, r1, #1
 8007ef8:	2000      	movs	r0, #0
 8007efa:	4688      	mov	r8, r1
 8007efc:	4681      	mov	r9, r0
 8007efe:	eb12 0a08 	adds.w	sl, r2, r8
 8007f02:	eb43 0b09 	adc.w	fp, r3, r9
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	603b      	str	r3, [r7, #0]
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f14:	4650      	mov	r0, sl
 8007f16:	4659      	mov	r1, fp
 8007f18:	f7f8 fda0 	bl	8000a5c <__aeabi_uldivmod>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	4613      	mov	r3, r2
 8007f22:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f2a:	d308      	bcc.n	8007f3e <UART_SetConfig+0x3de>
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f32:	d204      	bcs.n	8007f3e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	60da      	str	r2, [r3, #12]
 8007f3c:	e0b6      	b.n	80080ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007f44:	e0b2      	b.n	80080ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f4e:	d15e      	bne.n	800800e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007f50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f54:	2b08      	cmp	r3, #8
 8007f56:	d828      	bhi.n	8007faa <UART_SetConfig+0x44a>
 8007f58:	a201      	add	r2, pc, #4	; (adr r2, 8007f60 <UART_SetConfig+0x400>)
 8007f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5e:	bf00      	nop
 8007f60:	08007f85 	.word	0x08007f85
 8007f64:	08007f8d 	.word	0x08007f8d
 8007f68:	08007f95 	.word	0x08007f95
 8007f6c:	08007fab 	.word	0x08007fab
 8007f70:	08007f9b 	.word	0x08007f9b
 8007f74:	08007fab 	.word	0x08007fab
 8007f78:	08007fab 	.word	0x08007fab
 8007f7c:	08007fab 	.word	0x08007fab
 8007f80:	08007fa3 	.word	0x08007fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f84:	f7fd fdb8 	bl	8005af8 <HAL_RCC_GetPCLK1Freq>
 8007f88:	61f8      	str	r0, [r7, #28]
        break;
 8007f8a:	e014      	b.n	8007fb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f8c:	f7fd fdca 	bl	8005b24 <HAL_RCC_GetPCLK2Freq>
 8007f90:	61f8      	str	r0, [r7, #28]
        break;
 8007f92:	e010      	b.n	8007fb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f94:	4b4d      	ldr	r3, [pc, #308]	; (80080cc <UART_SetConfig+0x56c>)
 8007f96:	61fb      	str	r3, [r7, #28]
        break;
 8007f98:	e00d      	b.n	8007fb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f9a:	f7fd fd15 	bl	80059c8 <HAL_RCC_GetSysClockFreq>
 8007f9e:	61f8      	str	r0, [r7, #28]
        break;
 8007fa0:	e009      	b.n	8007fb6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fa6:	61fb      	str	r3, [r7, #28]
        break;
 8007fa8:	e005      	b.n	8007fb6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007fb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d077      	beq.n	80080ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	005a      	lsls	r2, r3, #1
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	085b      	lsrs	r3, r3, #1
 8007fc6:	441a      	add	r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	2b0f      	cmp	r3, #15
 8007fd6:	d916      	bls.n	8008006 <UART_SetConfig+0x4a6>
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fde:	d212      	bcs.n	8008006 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	f023 030f 	bic.w	r3, r3, #15
 8007fe8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	085b      	lsrs	r3, r3, #1
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	f003 0307 	and.w	r3, r3, #7
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	8afb      	ldrh	r3, [r7, #22]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	8afa      	ldrh	r2, [r7, #22]
 8008002:	60da      	str	r2, [r3, #12]
 8008004:	e052      	b.n	80080ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800800c:	e04e      	b.n	80080ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800800e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008012:	2b08      	cmp	r3, #8
 8008014:	d827      	bhi.n	8008066 <UART_SetConfig+0x506>
 8008016:	a201      	add	r2, pc, #4	; (adr r2, 800801c <UART_SetConfig+0x4bc>)
 8008018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801c:	08008041 	.word	0x08008041
 8008020:	08008049 	.word	0x08008049
 8008024:	08008051 	.word	0x08008051
 8008028:	08008067 	.word	0x08008067
 800802c:	08008057 	.word	0x08008057
 8008030:	08008067 	.word	0x08008067
 8008034:	08008067 	.word	0x08008067
 8008038:	08008067 	.word	0x08008067
 800803c:	0800805f 	.word	0x0800805f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008040:	f7fd fd5a 	bl	8005af8 <HAL_RCC_GetPCLK1Freq>
 8008044:	61f8      	str	r0, [r7, #28]
        break;
 8008046:	e014      	b.n	8008072 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008048:	f7fd fd6c 	bl	8005b24 <HAL_RCC_GetPCLK2Freq>
 800804c:	61f8      	str	r0, [r7, #28]
        break;
 800804e:	e010      	b.n	8008072 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008050:	4b1e      	ldr	r3, [pc, #120]	; (80080cc <UART_SetConfig+0x56c>)
 8008052:	61fb      	str	r3, [r7, #28]
        break;
 8008054:	e00d      	b.n	8008072 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008056:	f7fd fcb7 	bl	80059c8 <HAL_RCC_GetSysClockFreq>
 800805a:	61f8      	str	r0, [r7, #28]
        break;
 800805c:	e009      	b.n	8008072 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800805e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008062:	61fb      	str	r3, [r7, #28]
        break;
 8008064:	e005      	b.n	8008072 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008070:	bf00      	nop
    }

    if (pclk != 0U)
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d019      	beq.n	80080ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	085a      	lsrs	r2, r3, #1
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	441a      	add	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	fbb2 f3f3 	udiv	r3, r2, r3
 800808a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	2b0f      	cmp	r3, #15
 8008090:	d909      	bls.n	80080a6 <UART_SetConfig+0x546>
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008098:	d205      	bcs.n	80080a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	b29a      	uxth	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	60da      	str	r2, [r3, #12]
 80080a4:	e002      	b.n	80080ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80080b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3728      	adds	r7, #40	; 0x28
 80080c0:	46bd      	mov	sp, r7
 80080c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080c6:	bf00      	nop
 80080c8:	40008000 	.word	0x40008000
 80080cc:	00f42400 	.word	0x00f42400

080080d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	f003 0308 	and.w	r3, r3, #8
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00a      	beq.n	80080fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	430a      	orrs	r2, r1
 80080f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00a      	beq.n	800811c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	430a      	orrs	r2, r1
 800811a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00a      	beq.n	800813e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008142:	f003 0304 	and.w	r3, r3, #4
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00a      	beq.n	8008160 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	f003 0310 	and.w	r3, r3, #16
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00a      	beq.n	8008182 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	430a      	orrs	r2, r1
 8008180:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00a      	beq.n	80081a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	430a      	orrs	r2, r1
 80081a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d01a      	beq.n	80081e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081ce:	d10a      	bne.n	80081e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	430a      	orrs	r2, r1
 80081e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00a      	beq.n	8008208 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	430a      	orrs	r2, r1
 8008206:	605a      	str	r2, [r3, #4]
  }
}
 8008208:	bf00      	nop
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b098      	sub	sp, #96	; 0x60
 8008218:	af02      	add	r7, sp, #8
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008224:	f7fc fb96 	bl	8004954 <HAL_GetTick>
 8008228:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0308 	and.w	r3, r3, #8
 8008234:	2b08      	cmp	r3, #8
 8008236:	d12e      	bne.n	8008296 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008238:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008240:	2200      	movs	r2, #0
 8008242:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f88c 	bl	8008364 <UART_WaitOnFlagUntilTimeout>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d021      	beq.n	8008296 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825a:	e853 3f00 	ldrex	r3, [r3]
 800825e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008266:	653b      	str	r3, [r7, #80]	; 0x50
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	461a      	mov	r2, r3
 800826e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008270:	647b      	str	r3, [r7, #68]	; 0x44
 8008272:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008274:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008276:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008278:	e841 2300 	strex	r3, r2, [r1]
 800827c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800827e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1e6      	bne.n	8008252 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2220      	movs	r2, #32
 8008288:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e062      	b.n	800835c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0304 	and.w	r3, r3, #4
 80082a0:	2b04      	cmp	r3, #4
 80082a2:	d149      	bne.n	8008338 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ac:	2200      	movs	r2, #0
 80082ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f856 	bl	8008364 <UART_WaitOnFlagUntilTimeout>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d03c      	beq.n	8008338 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	e853 3f00 	ldrex	r3, [r3]
 80082ca:	623b      	str	r3, [r7, #32]
   return(result);
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	461a      	mov	r2, r3
 80082da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082dc:	633b      	str	r3, [r7, #48]	; 0x30
 80082de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082e4:	e841 2300 	strex	r3, r2, [r1]
 80082e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e6      	bne.n	80082be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3308      	adds	r3, #8
 80082f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	e853 3f00 	ldrex	r3, [r3]
 80082fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f023 0301 	bic.w	r3, r3, #1
 8008306:	64bb      	str	r3, [r7, #72]	; 0x48
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3308      	adds	r3, #8
 800830e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008310:	61fa      	str	r2, [r7, #28]
 8008312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008314:	69b9      	ldr	r1, [r7, #24]
 8008316:	69fa      	ldr	r2, [r7, #28]
 8008318:	e841 2300 	strex	r3, r2, [r1]
 800831c:	617b      	str	r3, [r7, #20]
   return(result);
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1e5      	bne.n	80082f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2220      	movs	r2, #32
 8008328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e011      	b.n	800835c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2220      	movs	r2, #32
 800833c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2220      	movs	r2, #32
 8008342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3758      	adds	r7, #88	; 0x58
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	603b      	str	r3, [r7, #0]
 8008370:	4613      	mov	r3, r2
 8008372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008374:	e049      	b.n	800840a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837c:	d045      	beq.n	800840a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800837e:	f7fc fae9 	bl	8004954 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	429a      	cmp	r2, r3
 800838c:	d302      	bcc.n	8008394 <UART_WaitOnFlagUntilTimeout+0x30>
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e048      	b.n	800842a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0304 	and.w	r3, r3, #4
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d031      	beq.n	800840a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69db      	ldr	r3, [r3, #28]
 80083ac:	f003 0308 	and.w	r3, r3, #8
 80083b0:	2b08      	cmp	r3, #8
 80083b2:	d110      	bne.n	80083d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2208      	movs	r2, #8
 80083ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 f838 	bl	8008432 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2208      	movs	r2, #8
 80083c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e029      	b.n	800842a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083e4:	d111      	bne.n	800840a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 f81e 	bl	8008432 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e00f      	b.n	800842a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69da      	ldr	r2, [r3, #28]
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	4013      	ands	r3, r2
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	429a      	cmp	r2, r3
 8008418:	bf0c      	ite	eq
 800841a:	2301      	moveq	r3, #1
 800841c:	2300      	movne	r3, #0
 800841e:	b2db      	uxtb	r3, r3
 8008420:	461a      	mov	r2, r3
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	429a      	cmp	r2, r3
 8008426:	d0a6      	beq.n	8008376 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008432:	b480      	push	{r7}
 8008434:	b095      	sub	sp, #84	; 0x54
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008442:	e853 3f00 	ldrex	r3, [r3]
 8008446:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800844e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	461a      	mov	r2, r3
 8008456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008458:	643b      	str	r3, [r7, #64]	; 0x40
 800845a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800845e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008460:	e841 2300 	strex	r3, r2, [r1]
 8008464:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1e6      	bne.n	800843a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3308      	adds	r3, #8
 8008472:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	e853 3f00 	ldrex	r3, [r3]
 800847a:	61fb      	str	r3, [r7, #28]
   return(result);
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	f023 0301 	bic.w	r3, r3, #1
 8008482:	64bb      	str	r3, [r7, #72]	; 0x48
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	3308      	adds	r3, #8
 800848a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800848c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800848e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008494:	e841 2300 	strex	r3, r2, [r1]
 8008498:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1e5      	bne.n	800846c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d118      	bne.n	80084da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	f023 0310 	bic.w	r3, r3, #16
 80084bc:	647b      	str	r3, [r7, #68]	; 0x44
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	461a      	mov	r2, r3
 80084c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084c6:	61bb      	str	r3, [r7, #24]
 80084c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ca:	6979      	ldr	r1, [r7, #20]
 80084cc:	69ba      	ldr	r2, [r7, #24]
 80084ce:	e841 2300 	strex	r3, r2, [r1]
 80084d2:	613b      	str	r3, [r7, #16]
   return(result);
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1e6      	bne.n	80084a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2220      	movs	r2, #32
 80084de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80084ee:	bf00      	nop
 80084f0:	3754      	adds	r7, #84	; 0x54
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
	...

080084fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80084fc:	b580      	push	{r7, lr}
 80084fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008500:	4b05      	ldr	r3, [pc, #20]	; (8008518 <SysTick_Handler+0x1c>)
 8008502:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008504:	f001 fe32 	bl	800a16c <xTaskGetSchedulerState>
 8008508:	4603      	mov	r3, r0
 800850a:	2b01      	cmp	r3, #1
 800850c:	d001      	beq.n	8008512 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800850e:	f002 fd1b 	bl	800af48 <xPortSysTickHandler>
  }
}
 8008512:	bf00      	nop
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	e000e010 	.word	0xe000e010

0800851c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4a07      	ldr	r2, [pc, #28]	; (8008548 <vApplicationGetIdleTaskMemory+0x2c>)
 800852c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	4a06      	ldr	r2, [pc, #24]	; (800854c <vApplicationGetIdleTaskMemory+0x30>)
 8008532:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2280      	movs	r2, #128	; 0x80
 8008538:	601a      	str	r2, [r3, #0]
}
 800853a:	bf00      	nop
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	200027d8 	.word	0x200027d8
 800854c:	20002884 	.word	0x20002884

08008550 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4a07      	ldr	r2, [pc, #28]	; (800857c <vApplicationGetTimerTaskMemory+0x2c>)
 8008560:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	4a06      	ldr	r2, [pc, #24]	; (8008580 <vApplicationGetTimerTaskMemory+0x30>)
 8008566:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800856e:	601a      	str	r2, [r3, #0]
}
 8008570:	bf00      	nop
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	20002a84 	.word	0x20002a84
 8008580:	20002b30 	.word	0x20002b30

08008584 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f103 0208 	add.w	r2, r3, #8
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f04f 32ff 	mov.w	r2, #4294967295
 800859c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f103 0208 	add.w	r2, r3, #8
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f103 0208 	add.w	r2, r3, #8
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085d2:	bf00      	nop
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085de:	b480      	push	{r7}
 80085e0:	b085      	sub	sp, #20
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	689a      	ldr	r2, [r3, #8]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	1c5a      	adds	r2, r3, #1
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	601a      	str	r2, [r3, #0]
}
 800861a:	bf00      	nop
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008626:	b480      	push	{r7}
 8008628:	b085      	sub	sp, #20
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863c:	d103      	bne.n	8008646 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	60fb      	str	r3, [r7, #12]
 8008644:	e00c      	b.n	8008660 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	3308      	adds	r3, #8
 800864a:	60fb      	str	r3, [r7, #12]
 800864c:	e002      	b.n	8008654 <vListInsert+0x2e>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	429a      	cmp	r2, r3
 800865e:	d2f6      	bcs.n	800864e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	601a      	str	r2, [r3, #0]
}
 800868c:	bf00      	nop
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	6892      	ldr	r2, [r2, #8]
 80086ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	6852      	ldr	r2, [r2, #4]
 80086b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d103      	bne.n	80086cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689a      	ldr	r2, [r3, #8]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	1e5a      	subs	r2, r3, #1
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10a      	bne.n	8008716 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008712:	bf00      	nop
 8008714:	e7fe      	b.n	8008714 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008716:	f002 fb85 	bl	800ae24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008722:	68f9      	ldr	r1, [r7, #12]
 8008724:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008726:	fb01 f303 	mul.w	r3, r1, r3
 800872a:	441a      	add	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008746:	3b01      	subs	r3, #1
 8008748:	68f9      	ldr	r1, [r7, #12]
 800874a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800874c:	fb01 f303 	mul.w	r3, r1, r3
 8008750:	441a      	add	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	22ff      	movs	r2, #255	; 0xff
 800875a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	22ff      	movs	r2, #255	; 0xff
 8008762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d114      	bne.n	8008796 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d01a      	beq.n	80087aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	3310      	adds	r3, #16
 8008778:	4618      	mov	r0, r3
 800877a:	f001 fb35 	bl	8009de8 <xTaskRemoveFromEventList>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d012      	beq.n	80087aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008784:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <xQueueGenericReset+0xcc>)
 8008786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	e009      	b.n	80087aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	3310      	adds	r3, #16
 800879a:	4618      	mov	r0, r3
 800879c:	f7ff fef2 	bl	8008584 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	3324      	adds	r3, #36	; 0x24
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7ff feed 	bl	8008584 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80087aa:	f002 fb6b 	bl	800ae84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80087ae:	2301      	movs	r3, #1
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	e000ed04 	.word	0xe000ed04

080087bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b08e      	sub	sp, #56	; 0x38
 80087c0:	af02      	add	r7, sp, #8
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10a      	bne.n	80087e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087e2:	bf00      	nop
 80087e4:	e7fe      	b.n	80087e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10a      	bne.n	8008802 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80087ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087fe:	bf00      	nop
 8008800:	e7fe      	b.n	8008800 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <xQueueGenericCreateStatic+0x52>
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d001      	beq.n	8008812 <xQueueGenericCreateStatic+0x56>
 800880e:	2301      	movs	r3, #1
 8008810:	e000      	b.n	8008814 <xQueueGenericCreateStatic+0x58>
 8008812:	2300      	movs	r3, #0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10a      	bne.n	800882e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881c:	f383 8811 	msr	BASEPRI, r3
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	623b      	str	r3, [r7, #32]
}
 800882a:	bf00      	nop
 800882c:	e7fe      	b.n	800882c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d102      	bne.n	800883a <xQueueGenericCreateStatic+0x7e>
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d101      	bne.n	800883e <xQueueGenericCreateStatic+0x82>
 800883a:	2301      	movs	r3, #1
 800883c:	e000      	b.n	8008840 <xQueueGenericCreateStatic+0x84>
 800883e:	2300      	movs	r3, #0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10a      	bne.n	800885a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	61fb      	str	r3, [r7, #28]
}
 8008856:	bf00      	nop
 8008858:	e7fe      	b.n	8008858 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800885a:	2350      	movs	r3, #80	; 0x50
 800885c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2b50      	cmp	r3, #80	; 0x50
 8008862:	d00a      	beq.n	800887a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	61bb      	str	r3, [r7, #24]
}
 8008876:	bf00      	nop
 8008878:	e7fe      	b.n	8008878 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800887a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00d      	beq.n	80088a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800888e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	4613      	mov	r3, r2
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	68b9      	ldr	r1, [r7, #8]
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 f83f 	bl	8008920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3730      	adds	r7, #48	; 0x30
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08a      	sub	sp, #40	; 0x28
 80088b0:	af02      	add	r7, sp, #8
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	4613      	mov	r3, r2
 80088b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10a      	bne.n	80088d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	613b      	str	r3, [r7, #16]
}
 80088d2:	bf00      	nop
 80088d4:	e7fe      	b.n	80088d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	fb02 f303 	mul.w	r3, r2, r3
 80088de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	3350      	adds	r3, #80	; 0x50
 80088e4:	4618      	mov	r0, r3
 80088e6:	f002 fbbf 	bl	800b068 <pvPortMalloc>
 80088ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d011      	beq.n	8008916 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	3350      	adds	r3, #80	; 0x50
 80088fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008904:	79fa      	ldrb	r2, [r7, #7]
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	4613      	mov	r3, r2
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	68b9      	ldr	r1, [r7, #8]
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 f805 	bl	8008920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008916:	69bb      	ldr	r3, [r7, #24]
	}
 8008918:	4618      	mov	r0, r3
 800891a:	3720      	adds	r7, #32
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d103      	bne.n	800893c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	69ba      	ldr	r2, [r7, #24]
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	e002      	b.n	8008942 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800894e:	2101      	movs	r1, #1
 8008950:	69b8      	ldr	r0, [r7, #24]
 8008952:	f7ff fecb 	bl	80086ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	78fa      	ldrb	r2, [r7, #3]
 800895a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800895e:	bf00      	nop
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
	...

08008968 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b08e      	sub	sp, #56	; 0x38
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008976:	2300      	movs	r3, #0
 8008978:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10a      	bne.n	800899a <xQueueGenericSend+0x32>
	__asm volatile
 8008984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008996:	bf00      	nop
 8008998:	e7fe      	b.n	8008998 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d103      	bne.n	80089a8 <xQueueGenericSend+0x40>
 80089a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <xQueueGenericSend+0x44>
 80089a8:	2301      	movs	r3, #1
 80089aa:	e000      	b.n	80089ae <xQueueGenericSend+0x46>
 80089ac:	2300      	movs	r3, #0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10a      	bne.n	80089c8 <xQueueGenericSend+0x60>
	__asm volatile
 80089b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089c4:	bf00      	nop
 80089c6:	e7fe      	b.n	80089c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d103      	bne.n	80089d6 <xQueueGenericSend+0x6e>
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d101      	bne.n	80089da <xQueueGenericSend+0x72>
 80089d6:	2301      	movs	r3, #1
 80089d8:	e000      	b.n	80089dc <xQueueGenericSend+0x74>
 80089da:	2300      	movs	r3, #0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10a      	bne.n	80089f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	623b      	str	r3, [r7, #32]
}
 80089f2:	bf00      	nop
 80089f4:	e7fe      	b.n	80089f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089f6:	f001 fbb9 	bl	800a16c <xTaskGetSchedulerState>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d102      	bne.n	8008a06 <xQueueGenericSend+0x9e>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d101      	bne.n	8008a0a <xQueueGenericSend+0xa2>
 8008a06:	2301      	movs	r3, #1
 8008a08:	e000      	b.n	8008a0c <xQueueGenericSend+0xa4>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10a      	bne.n	8008a26 <xQueueGenericSend+0xbe>
	__asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	61fb      	str	r3, [r7, #28]
}
 8008a22:	bf00      	nop
 8008a24:	e7fe      	b.n	8008a24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a26:	f002 f9fd 	bl	800ae24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d302      	bcc.n	8008a3c <xQueueGenericSend+0xd4>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d129      	bne.n	8008a90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	68b9      	ldr	r1, [r7, #8]
 8008a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a42:	f000 fbbb 	bl	80091bc <prvCopyDataToQueue>
 8008a46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d010      	beq.n	8008a72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a52:	3324      	adds	r3, #36	; 0x24
 8008a54:	4618      	mov	r0, r3
 8008a56:	f001 f9c7 	bl	8009de8 <xTaskRemoveFromEventList>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d013      	beq.n	8008a88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a60:	4b3f      	ldr	r3, [pc, #252]	; (8008b60 <xQueueGenericSend+0x1f8>)
 8008a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a66:	601a      	str	r2, [r3, #0]
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	e00a      	b.n	8008a88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d007      	beq.n	8008a88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a78:	4b39      	ldr	r3, [pc, #228]	; (8008b60 <xQueueGenericSend+0x1f8>)
 8008a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a7e:	601a      	str	r2, [r3, #0]
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a88:	f002 f9fc 	bl	800ae84 <vPortExitCritical>
				return pdPASS;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e063      	b.n	8008b58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d103      	bne.n	8008a9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a96:	f002 f9f5 	bl	800ae84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	e05c      	b.n	8008b58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d106      	bne.n	8008ab2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008aa4:	f107 0314 	add.w	r3, r7, #20
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f001 fa01 	bl	8009eb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ab2:	f002 f9e7 	bl	800ae84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ab6:	f000 ff51 	bl	800995c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008aba:	f002 f9b3 	bl	800ae24 <vPortEnterCritical>
 8008abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ac4:	b25b      	sxtb	r3, r3
 8008ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aca:	d103      	bne.n	8008ad4 <xQueueGenericSend+0x16c>
 8008acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ada:	b25b      	sxtb	r3, r3
 8008adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae0:	d103      	bne.n	8008aea <xQueueGenericSend+0x182>
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008aea:	f002 f9cb 	bl	800ae84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008aee:	1d3a      	adds	r2, r7, #4
 8008af0:	f107 0314 	add.w	r3, r7, #20
 8008af4:	4611      	mov	r1, r2
 8008af6:	4618      	mov	r0, r3
 8008af8:	f001 f9f0 	bl	8009edc <xTaskCheckForTimeOut>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d124      	bne.n	8008b4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b04:	f000 fc52 	bl	80093ac <prvIsQueueFull>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d018      	beq.n	8008b40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b10:	3310      	adds	r3, #16
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	4611      	mov	r1, r2
 8008b16:	4618      	mov	r0, r3
 8008b18:	f001 f916 	bl	8009d48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b1e:	f000 fbdd 	bl	80092dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b22:	f000 ff29 	bl	8009978 <xTaskResumeAll>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f47f af7c 	bne.w	8008a26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008b2e:	4b0c      	ldr	r3, [pc, #48]	; (8008b60 <xQueueGenericSend+0x1f8>)
 8008b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	e772      	b.n	8008a26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b42:	f000 fbcb 	bl	80092dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b46:	f000 ff17 	bl	8009978 <xTaskResumeAll>
 8008b4a:	e76c      	b.n	8008a26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b4e:	f000 fbc5 	bl	80092dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b52:	f000 ff11 	bl	8009978 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3738      	adds	r7, #56	; 0x38
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	e000ed04 	.word	0xe000ed04

08008b64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b090      	sub	sp, #64	; 0x40
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
 8008b70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10a      	bne.n	8008b92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b8e:	bf00      	nop
 8008b90:	e7fe      	b.n	8008b90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d103      	bne.n	8008ba0 <xQueueGenericSendFromISR+0x3c>
 8008b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <xQueueGenericSendFromISR+0x40>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e000      	b.n	8008ba6 <xQueueGenericSendFromISR+0x42>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10a      	bne.n	8008bc0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008bbc:	bf00      	nop
 8008bbe:	e7fe      	b.n	8008bbe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d103      	bne.n	8008bce <xQueueGenericSendFromISR+0x6a>
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d101      	bne.n	8008bd2 <xQueueGenericSendFromISR+0x6e>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e000      	b.n	8008bd4 <xQueueGenericSendFromISR+0x70>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10a      	bne.n	8008bee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	623b      	str	r3, [r7, #32]
}
 8008bea:	bf00      	nop
 8008bec:	e7fe      	b.n	8008bec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bee:	f002 f9fb 	bl	800afe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008bf2:	f3ef 8211 	mrs	r2, BASEPRI
 8008bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	61fa      	str	r2, [r7, #28]
 8008c08:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c0a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c0c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d302      	bcc.n	8008c20 <xQueueGenericSendFromISR+0xbc>
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d12f      	bne.n	8008c80 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c30:	683a      	ldr	r2, [r7, #0]
 8008c32:	68b9      	ldr	r1, [r7, #8]
 8008c34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c36:	f000 fac1 	bl	80091bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c42:	d112      	bne.n	8008c6a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d016      	beq.n	8008c7a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4e:	3324      	adds	r3, #36	; 0x24
 8008c50:	4618      	mov	r0, r3
 8008c52:	f001 f8c9 	bl	8009de8 <xTaskRemoveFromEventList>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00e      	beq.n	8008c7a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00b      	beq.n	8008c7a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	e007      	b.n	8008c7a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c6e:	3301      	adds	r3, #1
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	b25a      	sxtb	r2, r3
 8008c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008c7e:	e001      	b.n	8008c84 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c80:	2300      	movs	r3, #0
 8008c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c86:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3740      	adds	r7, #64	; 0x40
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b08e      	sub	sp, #56	; 0x38
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10a      	bne.n	8008cc4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	623b      	str	r3, [r7, #32]
}
 8008cc0:	bf00      	nop
 8008cc2:	e7fe      	b.n	8008cc2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00a      	beq.n	8008ce2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	61fb      	str	r3, [r7, #28]
}
 8008cde:	bf00      	nop
 8008ce0:	e7fe      	b.n	8008ce0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d103      	bne.n	8008cf2 <xQueueGiveFromISR+0x58>
 8008cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <xQueueGiveFromISR+0x5c>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e000      	b.n	8008cf8 <xQueueGiveFromISR+0x5e>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10a      	bne.n	8008d12 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	61bb      	str	r3, [r7, #24]
}
 8008d0e:	bf00      	nop
 8008d10:	e7fe      	b.n	8008d10 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d12:	f002 f969 	bl	800afe8 <vPortValidateInterruptPriority>
	__asm volatile
 8008d16:	f3ef 8211 	mrs	r2, BASEPRI
 8008d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	617a      	str	r2, [r7, #20]
 8008d2c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008d2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d22b      	bcs.n	8008d9a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4e:	1c5a      	adds	r2, r3, #1
 8008d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5c:	d112      	bne.n	8008d84 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d016      	beq.n	8008d94 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d68:	3324      	adds	r3, #36	; 0x24
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f001 f83c 	bl	8009de8 <xTaskRemoveFromEventList>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00e      	beq.n	8008d94 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00b      	beq.n	8008d94 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	601a      	str	r2, [r3, #0]
 8008d82:	e007      	b.n	8008d94 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d88:	3301      	adds	r3, #1
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	b25a      	sxtb	r2, r3
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008d94:	2301      	movs	r3, #1
 8008d96:	637b      	str	r3, [r7, #52]	; 0x34
 8008d98:	e001      	b.n	8008d9e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f383 8811 	msr	BASEPRI, r3
}
 8008da8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3738      	adds	r7, #56	; 0x38
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b08c      	sub	sp, #48	; 0x30
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10a      	bne.n	8008de4 <xQueueReceive+0x30>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	623b      	str	r3, [r7, #32]
}
 8008de0:	bf00      	nop
 8008de2:	e7fe      	b.n	8008de2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d103      	bne.n	8008df2 <xQueueReceive+0x3e>
 8008dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <xQueueReceive+0x42>
 8008df2:	2301      	movs	r3, #1
 8008df4:	e000      	b.n	8008df8 <xQueueReceive+0x44>
 8008df6:	2300      	movs	r3, #0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d10a      	bne.n	8008e12 <xQueueReceive+0x5e>
	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	61fb      	str	r3, [r7, #28]
}
 8008e0e:	bf00      	nop
 8008e10:	e7fe      	b.n	8008e10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e12:	f001 f9ab 	bl	800a16c <xTaskGetSchedulerState>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d102      	bne.n	8008e22 <xQueueReceive+0x6e>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d101      	bne.n	8008e26 <xQueueReceive+0x72>
 8008e22:	2301      	movs	r3, #1
 8008e24:	e000      	b.n	8008e28 <xQueueReceive+0x74>
 8008e26:	2300      	movs	r3, #0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10a      	bne.n	8008e42 <xQueueReceive+0x8e>
	__asm volatile
 8008e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e30:	f383 8811 	msr	BASEPRI, r3
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	61bb      	str	r3, [r7, #24]
}
 8008e3e:	bf00      	nop
 8008e40:	e7fe      	b.n	8008e40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e42:	f001 ffef 	bl	800ae24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d01f      	beq.n	8008e92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e52:	68b9      	ldr	r1, [r7, #8]
 8008e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e56:	f000 fa1b 	bl	8009290 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	1e5a      	subs	r2, r3, #1
 8008e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00f      	beq.n	8008e8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6c:	3310      	adds	r3, #16
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 ffba 	bl	8009de8 <xTaskRemoveFromEventList>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d007      	beq.n	8008e8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e7a:	4b3d      	ldr	r3, [pc, #244]	; (8008f70 <xQueueReceive+0x1bc>)
 8008e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e8a:	f001 fffb 	bl	800ae84 <vPortExitCritical>
				return pdPASS;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e069      	b.n	8008f66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d103      	bne.n	8008ea0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e98:	f001 fff4 	bl	800ae84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	e062      	b.n	8008f66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d106      	bne.n	8008eb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ea6:	f107 0310 	add.w	r3, r7, #16
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f001 f800 	bl	8009eb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008eb4:	f001 ffe6 	bl	800ae84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008eb8:	f000 fd50 	bl	800995c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ebc:	f001 ffb2 	bl	800ae24 <vPortEnterCritical>
 8008ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ec6:	b25b      	sxtb	r3, r3
 8008ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ecc:	d103      	bne.n	8008ed6 <xQueueReceive+0x122>
 8008ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008edc:	b25b      	sxtb	r3, r3
 8008ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee2:	d103      	bne.n	8008eec <xQueueReceive+0x138>
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008eec:	f001 ffca 	bl	800ae84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ef0:	1d3a      	adds	r2, r7, #4
 8008ef2:	f107 0310 	add.w	r3, r7, #16
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 ffef 	bl	8009edc <xTaskCheckForTimeOut>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d123      	bne.n	8008f4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f06:	f000 fa3b 	bl	8009380 <prvIsQueueEmpty>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d017      	beq.n	8008f40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f12:	3324      	adds	r3, #36	; 0x24
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	4611      	mov	r1, r2
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 ff15 	bl	8009d48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f20:	f000 f9dc 	bl	80092dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f24:	f000 fd28 	bl	8009978 <xTaskResumeAll>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d189      	bne.n	8008e42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008f2e:	4b10      	ldr	r3, [pc, #64]	; (8008f70 <xQueueReceive+0x1bc>)
 8008f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	e780      	b.n	8008e42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f42:	f000 f9cb 	bl	80092dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f46:	f000 fd17 	bl	8009978 <xTaskResumeAll>
 8008f4a:	e77a      	b.n	8008e42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f4e:	f000 f9c5 	bl	80092dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f52:	f000 fd11 	bl	8009978 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f58:	f000 fa12 	bl	8009380 <prvIsQueueEmpty>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f43f af6f 	beq.w	8008e42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3730      	adds	r7, #48	; 0x30
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	e000ed04 	.word	0xe000ed04

08008f74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08e      	sub	sp, #56	; 0x38
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008f86:	2300      	movs	r3, #0
 8008f88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10a      	bne.n	8008fa6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	623b      	str	r3, [r7, #32]
}
 8008fa2:	bf00      	nop
 8008fa4:	e7fe      	b.n	8008fa4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00a      	beq.n	8008fc4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	61fb      	str	r3, [r7, #28]
}
 8008fc0:	bf00      	nop
 8008fc2:	e7fe      	b.n	8008fc2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fc4:	f001 f8d2 	bl	800a16c <xTaskGetSchedulerState>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d102      	bne.n	8008fd4 <xQueueSemaphoreTake+0x60>
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d101      	bne.n	8008fd8 <xQueueSemaphoreTake+0x64>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e000      	b.n	8008fda <xQueueSemaphoreTake+0x66>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d10a      	bne.n	8008ff4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	61bb      	str	r3, [r7, #24]
}
 8008ff0:	bf00      	nop
 8008ff2:	e7fe      	b.n	8008ff2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ff4:	f001 ff16 	bl	800ae24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009000:	2b00      	cmp	r3, #0
 8009002:	d024      	beq.n	800904e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	1e5a      	subs	r2, r3, #1
 8009008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800900c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d104      	bne.n	800901e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009014:	f001 fa20 	bl	800a458 <pvTaskIncrementMutexHeldCount>
 8009018:	4602      	mov	r2, r0
 800901a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800901e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00f      	beq.n	8009046 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009028:	3310      	adds	r3, #16
 800902a:	4618      	mov	r0, r3
 800902c:	f000 fedc 	bl	8009de8 <xTaskRemoveFromEventList>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d007      	beq.n	8009046 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009036:	4b54      	ldr	r3, [pc, #336]	; (8009188 <xQueueSemaphoreTake+0x214>)
 8009038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800903c:	601a      	str	r2, [r3, #0]
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009046:	f001 ff1d 	bl	800ae84 <vPortExitCritical>
				return pdPASS;
 800904a:	2301      	movs	r3, #1
 800904c:	e097      	b.n	800917e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d111      	bne.n	8009078 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00a      	beq.n	8009070 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800905a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	617b      	str	r3, [r7, #20]
}
 800906c:	bf00      	nop
 800906e:	e7fe      	b.n	800906e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009070:	f001 ff08 	bl	800ae84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009074:	2300      	movs	r3, #0
 8009076:	e082      	b.n	800917e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800907a:	2b00      	cmp	r3, #0
 800907c:	d106      	bne.n	800908c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800907e:	f107 030c 	add.w	r3, r7, #12
 8009082:	4618      	mov	r0, r3
 8009084:	f000 ff14 	bl	8009eb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009088:	2301      	movs	r3, #1
 800908a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800908c:	f001 fefa 	bl	800ae84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009090:	f000 fc64 	bl	800995c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009094:	f001 fec6 	bl	800ae24 <vPortEnterCritical>
 8009098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800909e:	b25b      	sxtb	r3, r3
 80090a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a4:	d103      	bne.n	80090ae <xQueueSemaphoreTake+0x13a>
 80090a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090b4:	b25b      	sxtb	r3, r3
 80090b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ba:	d103      	bne.n	80090c4 <xQueueSemaphoreTake+0x150>
 80090bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090c4:	f001 fede 	bl	800ae84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090c8:	463a      	mov	r2, r7
 80090ca:	f107 030c 	add.w	r3, r7, #12
 80090ce:	4611      	mov	r1, r2
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 ff03 	bl	8009edc <xTaskCheckForTimeOut>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d132      	bne.n	8009142 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090de:	f000 f94f 	bl	8009380 <prvIsQueueEmpty>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d026      	beq.n	8009136 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d109      	bne.n	8009104 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80090f0:	f001 fe98 	bl	800ae24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f001 f855 	bl	800a1a8 <xTaskPriorityInherit>
 80090fe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009100:	f001 fec0 	bl	800ae84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009106:	3324      	adds	r3, #36	; 0x24
 8009108:	683a      	ldr	r2, [r7, #0]
 800910a:	4611      	mov	r1, r2
 800910c:	4618      	mov	r0, r3
 800910e:	f000 fe1b 	bl	8009d48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009112:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009114:	f000 f8e2 	bl	80092dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009118:	f000 fc2e 	bl	8009978 <xTaskResumeAll>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	f47f af68 	bne.w	8008ff4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009124:	4b18      	ldr	r3, [pc, #96]	; (8009188 <xQueueSemaphoreTake+0x214>)
 8009126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800912a:	601a      	str	r2, [r3, #0]
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	e75e      	b.n	8008ff4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009136:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009138:	f000 f8d0 	bl	80092dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800913c:	f000 fc1c 	bl	8009978 <xTaskResumeAll>
 8009140:	e758      	b.n	8008ff4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009142:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009144:	f000 f8ca 	bl	80092dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009148:	f000 fc16 	bl	8009978 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800914c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800914e:	f000 f917 	bl	8009380 <prvIsQueueEmpty>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	f43f af4d 	beq.w	8008ff4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00d      	beq.n	800917c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009160:	f001 fe60 	bl	800ae24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009164:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009166:	f000 f811 	bl	800918c <prvGetDisinheritPriorityAfterTimeout>
 800916a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800916c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009172:	4618      	mov	r0, r3
 8009174:	f001 f8ee 	bl	800a354 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009178:	f001 fe84 	bl	800ae84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800917c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800917e:	4618      	mov	r0, r3
 8009180:	3738      	adds	r7, #56	; 0x38
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	e000ed04 	.word	0xe000ed04

0800918c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009198:	2b00      	cmp	r3, #0
 800919a:	d006      	beq.n	80091aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80091a6:	60fb      	str	r3, [r7, #12]
 80091a8:	e001      	b.n	80091ae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80091aa:	2300      	movs	r3, #0
 80091ac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80091ae:	68fb      	ldr	r3, [r7, #12]
	}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b086      	sub	sp, #24
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80091c8:	2300      	movs	r3, #0
 80091ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10d      	bne.n	80091f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d14d      	bne.n	800927e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f001 f846 	bl	800a278 <xTaskPriorityDisinherit>
 80091ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	609a      	str	r2, [r3, #8]
 80091f4:	e043      	b.n	800927e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d119      	bne.n	8009230 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6858      	ldr	r0, [r3, #4]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009204:	461a      	mov	r2, r3
 8009206:	68b9      	ldr	r1, [r7, #8]
 8009208:	f002 fa70 	bl	800b6ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009214:	441a      	add	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	429a      	cmp	r2, r3
 8009224:	d32b      	bcc.n	800927e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	605a      	str	r2, [r3, #4]
 800922e:	e026      	b.n	800927e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	68d8      	ldr	r0, [r3, #12]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009238:	461a      	mov	r2, r3
 800923a:	68b9      	ldr	r1, [r7, #8]
 800923c:	f002 fa56 	bl	800b6ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	68da      	ldr	r2, [r3, #12]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009248:	425b      	negs	r3, r3
 800924a:	441a      	add	r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	68da      	ldr	r2, [r3, #12]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	429a      	cmp	r2, r3
 800925a:	d207      	bcs.n	800926c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	689a      	ldr	r2, [r3, #8]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009264:	425b      	negs	r3, r3
 8009266:	441a      	add	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b02      	cmp	r3, #2
 8009270:	d105      	bne.n	800927e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d002      	beq.n	800927e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	3b01      	subs	r3, #1
 800927c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	1c5a      	adds	r2, r3, #1
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009286:	697b      	ldr	r3, [r7, #20]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3718      	adds	r7, #24
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d018      	beq.n	80092d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68da      	ldr	r2, [r3, #12]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092aa:	441a      	add	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	68da      	ldr	r2, [r3, #12]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d303      	bcc.n	80092c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68d9      	ldr	r1, [r3, #12]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092cc:	461a      	mov	r2, r3
 80092ce:	6838      	ldr	r0, [r7, #0]
 80092d0:	f002 fa0c 	bl	800b6ec <memcpy>
	}
}
 80092d4:	bf00      	nop
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80092e4:	f001 fd9e 	bl	800ae24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092f0:	e011      	b.n	8009316 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d012      	beq.n	8009320 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	3324      	adds	r3, #36	; 0x24
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 fd72 	bl	8009de8 <xTaskRemoveFromEventList>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800930a:	f000 fe49 	bl	8009fa0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800930e:	7bfb      	ldrb	r3, [r7, #15]
 8009310:	3b01      	subs	r3, #1
 8009312:	b2db      	uxtb	r3, r3
 8009314:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800931a:	2b00      	cmp	r3, #0
 800931c:	dce9      	bgt.n	80092f2 <prvUnlockQueue+0x16>
 800931e:	e000      	b.n	8009322 <prvUnlockQueue+0x46>
					break;
 8009320:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	22ff      	movs	r2, #255	; 0xff
 8009326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800932a:	f001 fdab 	bl	800ae84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800932e:	f001 fd79 	bl	800ae24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009338:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800933a:	e011      	b.n	8009360 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d012      	beq.n	800936a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	3310      	adds	r3, #16
 8009348:	4618      	mov	r0, r3
 800934a:	f000 fd4d 	bl	8009de8 <xTaskRemoveFromEventList>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d001      	beq.n	8009358 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009354:	f000 fe24 	bl	8009fa0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009358:	7bbb      	ldrb	r3, [r7, #14]
 800935a:	3b01      	subs	r3, #1
 800935c:	b2db      	uxtb	r3, r3
 800935e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009360:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009364:	2b00      	cmp	r3, #0
 8009366:	dce9      	bgt.n	800933c <prvUnlockQueue+0x60>
 8009368:	e000      	b.n	800936c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800936a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	22ff      	movs	r2, #255	; 0xff
 8009370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009374:	f001 fd86 	bl	800ae84 <vPortExitCritical>
}
 8009378:	bf00      	nop
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009388:	f001 fd4c 	bl	800ae24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009390:	2b00      	cmp	r3, #0
 8009392:	d102      	bne.n	800939a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009394:	2301      	movs	r3, #1
 8009396:	60fb      	str	r3, [r7, #12]
 8009398:	e001      	b.n	800939e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800939a:	2300      	movs	r3, #0
 800939c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800939e:	f001 fd71 	bl	800ae84 <vPortExitCritical>

	return xReturn;
 80093a2:	68fb      	ldr	r3, [r7, #12]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093b4:	f001 fd36 	bl	800ae24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d102      	bne.n	80093ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80093c4:	2301      	movs	r3, #1
 80093c6:	60fb      	str	r3, [r7, #12]
 80093c8:	e001      	b.n	80093ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80093ca:	2300      	movs	r3, #0
 80093cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093ce:	f001 fd59 	bl	800ae84 <vPortExitCritical>

	return xReturn;
 80093d2:	68fb      	ldr	r3, [r7, #12]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093e6:	2300      	movs	r3, #0
 80093e8:	60fb      	str	r3, [r7, #12]
 80093ea:	e014      	b.n	8009416 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80093ec:	4a0f      	ldr	r2, [pc, #60]	; (800942c <vQueueAddToRegistry+0x50>)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10b      	bne.n	8009410 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80093f8:	490c      	ldr	r1, [pc, #48]	; (800942c <vQueueAddToRegistry+0x50>)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	683a      	ldr	r2, [r7, #0]
 80093fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009402:	4a0a      	ldr	r2, [pc, #40]	; (800942c <vQueueAddToRegistry+0x50>)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	00db      	lsls	r3, r3, #3
 8009408:	4413      	add	r3, r2
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800940e:	e006      	b.n	800941e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	3301      	adds	r3, #1
 8009414:	60fb      	str	r3, [r7, #12]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2b07      	cmp	r3, #7
 800941a:	d9e7      	bls.n	80093ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800941c:	bf00      	nop
 800941e:	bf00      	nop
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	20002f30 	.word	0x20002f30

08009430 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009440:	f001 fcf0 	bl	800ae24 <vPortEnterCritical>
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800944a:	b25b      	sxtb	r3, r3
 800944c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009450:	d103      	bne.n	800945a <vQueueWaitForMessageRestricted+0x2a>
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009460:	b25b      	sxtb	r3, r3
 8009462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009466:	d103      	bne.n	8009470 <vQueueWaitForMessageRestricted+0x40>
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009470:	f001 fd08 	bl	800ae84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009478:	2b00      	cmp	r3, #0
 800947a:	d106      	bne.n	800948a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	3324      	adds	r3, #36	; 0x24
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	68b9      	ldr	r1, [r7, #8]
 8009484:	4618      	mov	r0, r3
 8009486:	f000 fc83 	bl	8009d90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800948a:	6978      	ldr	r0, [r7, #20]
 800948c:	f7ff ff26 	bl	80092dc <prvUnlockQueue>
	}
 8009490:	bf00      	nop
 8009492:	3718      	adds	r7, #24
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009498:	b580      	push	{r7, lr}
 800949a:	b08e      	sub	sp, #56	; 0x38
 800949c:	af04      	add	r7, sp, #16
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
 80094a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80094a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10a      	bne.n	80094c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	623b      	str	r3, [r7, #32]
}
 80094be:	bf00      	nop
 80094c0:	e7fe      	b.n	80094c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80094c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10a      	bne.n	80094de <xTaskCreateStatic+0x46>
	__asm volatile
 80094c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	61fb      	str	r3, [r7, #28]
}
 80094da:	bf00      	nop
 80094dc:	e7fe      	b.n	80094dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80094de:	23ac      	movs	r3, #172	; 0xac
 80094e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	2bac      	cmp	r3, #172	; 0xac
 80094e6:	d00a      	beq.n	80094fe <xTaskCreateStatic+0x66>
	__asm volatile
 80094e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ec:	f383 8811 	msr	BASEPRI, r3
 80094f0:	f3bf 8f6f 	isb	sy
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	61bb      	str	r3, [r7, #24]
}
 80094fa:	bf00      	nop
 80094fc:	e7fe      	b.n	80094fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80094fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009502:	2b00      	cmp	r3, #0
 8009504:	d01e      	beq.n	8009544 <xTaskCreateStatic+0xac>
 8009506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009508:	2b00      	cmp	r3, #0
 800950a:	d01b      	beq.n	8009544 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800950c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009514:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	2202      	movs	r2, #2
 800951a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800951e:	2300      	movs	r3, #0
 8009520:	9303      	str	r3, [sp, #12]
 8009522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009524:	9302      	str	r3, [sp, #8]
 8009526:	f107 0314 	add.w	r3, r7, #20
 800952a:	9301      	str	r3, [sp, #4]
 800952c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	68b9      	ldr	r1, [r7, #8]
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f000 f850 	bl	80095dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800953c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800953e:	f000 f8f7 	bl	8009730 <prvAddNewTaskToReadyList>
 8009542:	e001      	b.n	8009548 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009544:	2300      	movs	r3, #0
 8009546:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009548:	697b      	ldr	r3, [r7, #20]
	}
 800954a:	4618      	mov	r0, r3
 800954c:	3728      	adds	r7, #40	; 0x28
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009552:	b580      	push	{r7, lr}
 8009554:	b08c      	sub	sp, #48	; 0x30
 8009556:	af04      	add	r7, sp, #16
 8009558:	60f8      	str	r0, [r7, #12]
 800955a:	60b9      	str	r1, [r7, #8]
 800955c:	603b      	str	r3, [r7, #0]
 800955e:	4613      	mov	r3, r2
 8009560:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009562:	88fb      	ldrh	r3, [r7, #6]
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4618      	mov	r0, r3
 8009568:	f001 fd7e 	bl	800b068 <pvPortMalloc>
 800956c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00e      	beq.n	8009592 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009574:	20ac      	movs	r0, #172	; 0xac
 8009576:	f001 fd77 	bl	800b068 <pvPortMalloc>
 800957a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	697a      	ldr	r2, [r7, #20]
 8009586:	631a      	str	r2, [r3, #48]	; 0x30
 8009588:	e005      	b.n	8009596 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800958a:	6978      	ldr	r0, [r7, #20]
 800958c:	f001 fe38 	bl	800b200 <vPortFree>
 8009590:	e001      	b.n	8009596 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009592:	2300      	movs	r3, #0
 8009594:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d017      	beq.n	80095cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80095a4:	88fa      	ldrh	r2, [r7, #6]
 80095a6:	2300      	movs	r3, #0
 80095a8:	9303      	str	r3, [sp, #12]
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	9302      	str	r3, [sp, #8]
 80095ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b0:	9301      	str	r3, [sp, #4]
 80095b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	68b9      	ldr	r1, [r7, #8]
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f000 f80e 	bl	80095dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095c0:	69f8      	ldr	r0, [r7, #28]
 80095c2:	f000 f8b5 	bl	8009730 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80095c6:	2301      	movs	r3, #1
 80095c8:	61bb      	str	r3, [r7, #24]
 80095ca:	e002      	b.n	80095d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80095cc:	f04f 33ff 	mov.w	r3, #4294967295
 80095d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80095d2:	69bb      	ldr	r3, [r7, #24]
	}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3720      	adds	r7, #32
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b088      	sub	sp, #32
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80095ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	461a      	mov	r2, r3
 80095f4:	21a5      	movs	r1, #165	; 0xa5
 80095f6:	f001 ffe7 	bl	800b5c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009604:	3b01      	subs	r3, #1
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4413      	add	r3, r2
 800960a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	f023 0307 	bic.w	r3, r3, #7
 8009612:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	f003 0307 	and.w	r3, r3, #7
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00a      	beq.n	8009634 <prvInitialiseNewTask+0x58>
	__asm volatile
 800961e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	617b      	str	r3, [r7, #20]
}
 8009630:	bf00      	nop
 8009632:	e7fe      	b.n	8009632 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d01f      	beq.n	800967a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800963a:	2300      	movs	r3, #0
 800963c:	61fb      	str	r3, [r7, #28]
 800963e:	e012      	b.n	8009666 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	4413      	add	r3, r2
 8009646:	7819      	ldrb	r1, [r3, #0]
 8009648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	4413      	add	r3, r2
 800964e:	3334      	adds	r3, #52	; 0x34
 8009650:	460a      	mov	r2, r1
 8009652:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	4413      	add	r3, r2
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d006      	beq.n	800966e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	3301      	adds	r3, #1
 8009664:	61fb      	str	r3, [r7, #28]
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	2b0f      	cmp	r3, #15
 800966a:	d9e9      	bls.n	8009640 <prvInitialiseNewTask+0x64>
 800966c:	e000      	b.n	8009670 <prvInitialiseNewTask+0x94>
			{
				break;
 800966e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009672:	2200      	movs	r2, #0
 8009674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009678:	e003      	b.n	8009682 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967c:	2200      	movs	r2, #0
 800967e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009684:	2b37      	cmp	r3, #55	; 0x37
 8009686:	d901      	bls.n	800968c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009688:	2337      	movs	r3, #55	; 0x37
 800968a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009690:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009696:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969a:	2200      	movs	r2, #0
 800969c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800969e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a0:	3304      	adds	r3, #4
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fe ff8e 	bl	80085c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80096a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096aa:	3318      	adds	r3, #24
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7fe ff89 	bl	80085c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80096b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80096c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ca:	2200      	movs	r2, #0
 80096cc:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80096ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d0:	2200      	movs	r2, #0
 80096d2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80096d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80096de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e0:	3358      	adds	r3, #88	; 0x58
 80096e2:	224c      	movs	r2, #76	; 0x4c
 80096e4:	2100      	movs	r1, #0
 80096e6:	4618      	mov	r0, r3
 80096e8:	f001 ff6e 	bl	800b5c8 <memset>
 80096ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ee:	4a0d      	ldr	r2, [pc, #52]	; (8009724 <prvInitialiseNewTask+0x148>)
 80096f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80096f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f4:	4a0c      	ldr	r2, [pc, #48]	; (8009728 <prvInitialiseNewTask+0x14c>)
 80096f6:	661a      	str	r2, [r3, #96]	; 0x60
 80096f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fa:	4a0c      	ldr	r2, [pc, #48]	; (800972c <prvInitialiseNewTask+0x150>)
 80096fc:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	68f9      	ldr	r1, [r7, #12]
 8009702:	69b8      	ldr	r0, [r7, #24]
 8009704:	f001 fa5e 	bl	800abc4 <pxPortInitialiseStack>
 8009708:	4602      	mov	r2, r0
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800970e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009718:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800971a:	bf00      	nop
 800971c:	3720      	adds	r7, #32
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	20004184 	.word	0x20004184
 8009728:	200041ec 	.word	0x200041ec
 800972c:	20004254 	.word	0x20004254

08009730 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009738:	f001 fb74 	bl	800ae24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800973c:	4b2d      	ldr	r3, [pc, #180]	; (80097f4 <prvAddNewTaskToReadyList+0xc4>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3301      	adds	r3, #1
 8009742:	4a2c      	ldr	r2, [pc, #176]	; (80097f4 <prvAddNewTaskToReadyList+0xc4>)
 8009744:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009746:	4b2c      	ldr	r3, [pc, #176]	; (80097f8 <prvAddNewTaskToReadyList+0xc8>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d109      	bne.n	8009762 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800974e:	4a2a      	ldr	r2, [pc, #168]	; (80097f8 <prvAddNewTaskToReadyList+0xc8>)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009754:	4b27      	ldr	r3, [pc, #156]	; (80097f4 <prvAddNewTaskToReadyList+0xc4>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d110      	bne.n	800977e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800975c:	f000 fc44 	bl	8009fe8 <prvInitialiseTaskLists>
 8009760:	e00d      	b.n	800977e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009762:	4b26      	ldr	r3, [pc, #152]	; (80097fc <prvAddNewTaskToReadyList+0xcc>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d109      	bne.n	800977e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800976a:	4b23      	ldr	r3, [pc, #140]	; (80097f8 <prvAddNewTaskToReadyList+0xc8>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009774:	429a      	cmp	r2, r3
 8009776:	d802      	bhi.n	800977e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009778:	4a1f      	ldr	r2, [pc, #124]	; (80097f8 <prvAddNewTaskToReadyList+0xc8>)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800977e:	4b20      	ldr	r3, [pc, #128]	; (8009800 <prvAddNewTaskToReadyList+0xd0>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	3301      	adds	r3, #1
 8009784:	4a1e      	ldr	r2, [pc, #120]	; (8009800 <prvAddNewTaskToReadyList+0xd0>)
 8009786:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009788:	4b1d      	ldr	r3, [pc, #116]	; (8009800 <prvAddNewTaskToReadyList+0xd0>)
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009794:	4b1b      	ldr	r3, [pc, #108]	; (8009804 <prvAddNewTaskToReadyList+0xd4>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	429a      	cmp	r2, r3
 800979a:	d903      	bls.n	80097a4 <prvAddNewTaskToReadyList+0x74>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a0:	4a18      	ldr	r2, [pc, #96]	; (8009804 <prvAddNewTaskToReadyList+0xd4>)
 80097a2:	6013      	str	r3, [r2, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a8:	4613      	mov	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	4a15      	ldr	r2, [pc, #84]	; (8009808 <prvAddNewTaskToReadyList+0xd8>)
 80097b2:	441a      	add	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	3304      	adds	r3, #4
 80097b8:	4619      	mov	r1, r3
 80097ba:	4610      	mov	r0, r2
 80097bc:	f7fe ff0f 	bl	80085de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097c0:	f001 fb60 	bl	800ae84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80097c4:	4b0d      	ldr	r3, [pc, #52]	; (80097fc <prvAddNewTaskToReadyList+0xcc>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00e      	beq.n	80097ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80097cc:	4b0a      	ldr	r3, [pc, #40]	; (80097f8 <prvAddNewTaskToReadyList+0xc8>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d207      	bcs.n	80097ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80097da:	4b0c      	ldr	r3, [pc, #48]	; (800980c <prvAddNewTaskToReadyList+0xdc>)
 80097dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097e0:	601a      	str	r2, [r3, #0]
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097ea:	bf00      	nop
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	20003444 	.word	0x20003444
 80097f8:	20002f70 	.word	0x20002f70
 80097fc:	20003450 	.word	0x20003450
 8009800:	20003460 	.word	0x20003460
 8009804:	2000344c 	.word	0x2000344c
 8009808:	20002f74 	.word	0x20002f74
 800980c:	e000ed04 	.word	0xe000ed04

08009810 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009818:	2300      	movs	r3, #0
 800981a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d017      	beq.n	8009852 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009822:	4b13      	ldr	r3, [pc, #76]	; (8009870 <vTaskDelay+0x60>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00a      	beq.n	8009840 <vTaskDelay+0x30>
	__asm volatile
 800982a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982e:	f383 8811 	msr	BASEPRI, r3
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	60bb      	str	r3, [r7, #8]
}
 800983c:	bf00      	nop
 800983e:	e7fe      	b.n	800983e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009840:	f000 f88c 	bl	800995c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009844:	2100      	movs	r1, #0
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fe1a 	bl	800a480 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800984c:	f000 f894 	bl	8009978 <xTaskResumeAll>
 8009850:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d107      	bne.n	8009868 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009858:	4b06      	ldr	r3, [pc, #24]	; (8009874 <vTaskDelay+0x64>)
 800985a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800985e:	601a      	str	r2, [r3, #0]
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009868:	bf00      	nop
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	2000346c 	.word	0x2000346c
 8009874:	e000ed04 	.word	0xe000ed04

08009878 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b08a      	sub	sp, #40	; 0x28
 800987c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800987e:	2300      	movs	r3, #0
 8009880:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009882:	2300      	movs	r3, #0
 8009884:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009886:	463a      	mov	r2, r7
 8009888:	1d39      	adds	r1, r7, #4
 800988a:	f107 0308 	add.w	r3, r7, #8
 800988e:	4618      	mov	r0, r3
 8009890:	f7fe fe44 	bl	800851c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009894:	6839      	ldr	r1, [r7, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	9202      	str	r2, [sp, #8]
 800989c:	9301      	str	r3, [sp, #4]
 800989e:	2300      	movs	r3, #0
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	2300      	movs	r3, #0
 80098a4:	460a      	mov	r2, r1
 80098a6:	4925      	ldr	r1, [pc, #148]	; (800993c <vTaskStartScheduler+0xc4>)
 80098a8:	4825      	ldr	r0, [pc, #148]	; (8009940 <vTaskStartScheduler+0xc8>)
 80098aa:	f7ff fdf5 	bl	8009498 <xTaskCreateStatic>
 80098ae:	4603      	mov	r3, r0
 80098b0:	4a24      	ldr	r2, [pc, #144]	; (8009944 <vTaskStartScheduler+0xcc>)
 80098b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80098b4:	4b23      	ldr	r3, [pc, #140]	; (8009944 <vTaskStartScheduler+0xcc>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d002      	beq.n	80098c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80098bc:	2301      	movs	r3, #1
 80098be:	617b      	str	r3, [r7, #20]
 80098c0:	e001      	b.n	80098c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80098c2:	2300      	movs	r3, #0
 80098c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d102      	bne.n	80098d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80098cc:	f000 fe2c 	bl	800a528 <xTimerCreateTimerTask>
 80098d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d11d      	bne.n	8009914 <vTaskStartScheduler+0x9c>
	__asm volatile
 80098d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	613b      	str	r3, [r7, #16]
}
 80098ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80098ec:	4b16      	ldr	r3, [pc, #88]	; (8009948 <vTaskStartScheduler+0xd0>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3358      	adds	r3, #88	; 0x58
 80098f2:	4a16      	ldr	r2, [pc, #88]	; (800994c <vTaskStartScheduler+0xd4>)
 80098f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80098f6:	4b16      	ldr	r3, [pc, #88]	; (8009950 <vTaskStartScheduler+0xd8>)
 80098f8:	f04f 32ff 	mov.w	r2, #4294967295
 80098fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80098fe:	4b15      	ldr	r3, [pc, #84]	; (8009954 <vTaskStartScheduler+0xdc>)
 8009900:	2201      	movs	r2, #1
 8009902:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009904:	4b14      	ldr	r3, [pc, #80]	; (8009958 <vTaskStartScheduler+0xe0>)
 8009906:	2200      	movs	r2, #0
 8009908:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800990a:	f7f7 fa25 	bl	8000d58 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800990e:	f001 f9e7 	bl	800ace0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009912:	e00e      	b.n	8009932 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800991a:	d10a      	bne.n	8009932 <vTaskStartScheduler+0xba>
	__asm volatile
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	60fb      	str	r3, [r7, #12]
}
 800992e:	bf00      	nop
 8009930:	e7fe      	b.n	8009930 <vTaskStartScheduler+0xb8>
}
 8009932:	bf00      	nop
 8009934:	3718      	adds	r7, #24
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	0800c3ec 	.word	0x0800c3ec
 8009940:	08009fb9 	.word	0x08009fb9
 8009944:	20003468 	.word	0x20003468
 8009948:	20002f70 	.word	0x20002f70
 800994c:	200003a8 	.word	0x200003a8
 8009950:	20003464 	.word	0x20003464
 8009954:	20003450 	.word	0x20003450
 8009958:	20003448 	.word	0x20003448

0800995c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800995c:	b480      	push	{r7}
 800995e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009960:	4b04      	ldr	r3, [pc, #16]	; (8009974 <vTaskSuspendAll+0x18>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3301      	adds	r3, #1
 8009966:	4a03      	ldr	r2, [pc, #12]	; (8009974 <vTaskSuspendAll+0x18>)
 8009968:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800996a:	bf00      	nop
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr
 8009974:	2000346c 	.word	0x2000346c

08009978 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800997e:	2300      	movs	r3, #0
 8009980:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009982:	2300      	movs	r3, #0
 8009984:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009986:	4b42      	ldr	r3, [pc, #264]	; (8009a90 <xTaskResumeAll+0x118>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d10a      	bne.n	80099a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	603b      	str	r3, [r7, #0]
}
 80099a0:	bf00      	nop
 80099a2:	e7fe      	b.n	80099a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80099a4:	f001 fa3e 	bl	800ae24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80099a8:	4b39      	ldr	r3, [pc, #228]	; (8009a90 <xTaskResumeAll+0x118>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	3b01      	subs	r3, #1
 80099ae:	4a38      	ldr	r2, [pc, #224]	; (8009a90 <xTaskResumeAll+0x118>)
 80099b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099b2:	4b37      	ldr	r3, [pc, #220]	; (8009a90 <xTaskResumeAll+0x118>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d162      	bne.n	8009a80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80099ba:	4b36      	ldr	r3, [pc, #216]	; (8009a94 <xTaskResumeAll+0x11c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d05e      	beq.n	8009a80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099c2:	e02f      	b.n	8009a24 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099c4:	4b34      	ldr	r3, [pc, #208]	; (8009a98 <xTaskResumeAll+0x120>)
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	3318      	adds	r3, #24
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7fe fe61 	bl	8008698 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	3304      	adds	r3, #4
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fe fe5c 	bl	8008698 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e4:	4b2d      	ldr	r3, [pc, #180]	; (8009a9c <xTaskResumeAll+0x124>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d903      	bls.n	80099f4 <xTaskResumeAll+0x7c>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f0:	4a2a      	ldr	r2, [pc, #168]	; (8009a9c <xTaskResumeAll+0x124>)
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f8:	4613      	mov	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4a27      	ldr	r2, [pc, #156]	; (8009aa0 <xTaskResumeAll+0x128>)
 8009a02:	441a      	add	r2, r3
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	3304      	adds	r3, #4
 8009a08:	4619      	mov	r1, r3
 8009a0a:	4610      	mov	r0, r2
 8009a0c:	f7fe fde7 	bl	80085de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a14:	4b23      	ldr	r3, [pc, #140]	; (8009aa4 <xTaskResumeAll+0x12c>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d302      	bcc.n	8009a24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009a1e:	4b22      	ldr	r3, [pc, #136]	; (8009aa8 <xTaskResumeAll+0x130>)
 8009a20:	2201      	movs	r2, #1
 8009a22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a24:	4b1c      	ldr	r3, [pc, #112]	; (8009a98 <xTaskResumeAll+0x120>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1cb      	bne.n	80099c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a32:	f000 fb7b 	bl	800a12c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009a36:	4b1d      	ldr	r3, [pc, #116]	; (8009aac <xTaskResumeAll+0x134>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d010      	beq.n	8009a64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a42:	f000 f847 	bl	8009ad4 <xTaskIncrementTick>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d002      	beq.n	8009a52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009a4c:	4b16      	ldr	r3, [pc, #88]	; (8009aa8 <xTaskResumeAll+0x130>)
 8009a4e:	2201      	movs	r2, #1
 8009a50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	3b01      	subs	r3, #1
 8009a56:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1f1      	bne.n	8009a42 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009a5e:	4b13      	ldr	r3, [pc, #76]	; (8009aac <xTaskResumeAll+0x134>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a64:	4b10      	ldr	r3, [pc, #64]	; (8009aa8 <xTaskResumeAll+0x130>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d009      	beq.n	8009a80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a70:	4b0f      	ldr	r3, [pc, #60]	; (8009ab0 <xTaskResumeAll+0x138>)
 8009a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a76:	601a      	str	r2, [r3, #0]
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a80:	f001 fa00 	bl	800ae84 <vPortExitCritical>

	return xAlreadyYielded;
 8009a84:	68bb      	ldr	r3, [r7, #8]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	2000346c 	.word	0x2000346c
 8009a94:	20003444 	.word	0x20003444
 8009a98:	20003404 	.word	0x20003404
 8009a9c:	2000344c 	.word	0x2000344c
 8009aa0:	20002f74 	.word	0x20002f74
 8009aa4:	20002f70 	.word	0x20002f70
 8009aa8:	20003458 	.word	0x20003458
 8009aac:	20003454 	.word	0x20003454
 8009ab0:	e000ed04 	.word	0xe000ed04

08009ab4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009aba:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <xTaskGetTickCount+0x1c>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ac0:	687b      	ldr	r3, [r7, #4]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	20003448 	.word	0x20003448

08009ad4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009ada:	2300      	movs	r3, #0
 8009adc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ade:	4b4f      	ldr	r3, [pc, #316]	; (8009c1c <xTaskIncrementTick+0x148>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f040 808f 	bne.w	8009c06 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ae8:	4b4d      	ldr	r3, [pc, #308]	; (8009c20 <xTaskIncrementTick+0x14c>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	3301      	adds	r3, #1
 8009aee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009af0:	4a4b      	ldr	r2, [pc, #300]	; (8009c20 <xTaskIncrementTick+0x14c>)
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d120      	bne.n	8009b3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009afc:	4b49      	ldr	r3, [pc, #292]	; (8009c24 <xTaskIncrementTick+0x150>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00a      	beq.n	8009b1c <xTaskIncrementTick+0x48>
	__asm volatile
 8009b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0a:	f383 8811 	msr	BASEPRI, r3
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	f3bf 8f4f 	dsb	sy
 8009b16:	603b      	str	r3, [r7, #0]
}
 8009b18:	bf00      	nop
 8009b1a:	e7fe      	b.n	8009b1a <xTaskIncrementTick+0x46>
 8009b1c:	4b41      	ldr	r3, [pc, #260]	; (8009c24 <xTaskIncrementTick+0x150>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	60fb      	str	r3, [r7, #12]
 8009b22:	4b41      	ldr	r3, [pc, #260]	; (8009c28 <xTaskIncrementTick+0x154>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a3f      	ldr	r2, [pc, #252]	; (8009c24 <xTaskIncrementTick+0x150>)
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	4a3f      	ldr	r2, [pc, #252]	; (8009c28 <xTaskIncrementTick+0x154>)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6013      	str	r3, [r2, #0]
 8009b30:	4b3e      	ldr	r3, [pc, #248]	; (8009c2c <xTaskIncrementTick+0x158>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	3301      	adds	r3, #1
 8009b36:	4a3d      	ldr	r2, [pc, #244]	; (8009c2c <xTaskIncrementTick+0x158>)
 8009b38:	6013      	str	r3, [r2, #0]
 8009b3a:	f000 faf7 	bl	800a12c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b3e:	4b3c      	ldr	r3, [pc, #240]	; (8009c30 <xTaskIncrementTick+0x15c>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d349      	bcc.n	8009bdc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b48:	4b36      	ldr	r3, [pc, #216]	; (8009c24 <xTaskIncrementTick+0x150>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d104      	bne.n	8009b5c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b52:	4b37      	ldr	r3, [pc, #220]	; (8009c30 <xTaskIncrementTick+0x15c>)
 8009b54:	f04f 32ff 	mov.w	r2, #4294967295
 8009b58:	601a      	str	r2, [r3, #0]
					break;
 8009b5a:	e03f      	b.n	8009bdc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b5c:	4b31      	ldr	r3, [pc, #196]	; (8009c24 <xTaskIncrementTick+0x150>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d203      	bcs.n	8009b7c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b74:	4a2e      	ldr	r2, [pc, #184]	; (8009c30 <xTaskIncrementTick+0x15c>)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b7a:	e02f      	b.n	8009bdc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fe fd89 	bl	8008698 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d004      	beq.n	8009b98 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	3318      	adds	r3, #24
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fe fd80 	bl	8008698 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b9c:	4b25      	ldr	r3, [pc, #148]	; (8009c34 <xTaskIncrementTick+0x160>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d903      	bls.n	8009bac <xTaskIncrementTick+0xd8>
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba8:	4a22      	ldr	r2, [pc, #136]	; (8009c34 <xTaskIncrementTick+0x160>)
 8009baa:	6013      	str	r3, [r2, #0]
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4a1f      	ldr	r2, [pc, #124]	; (8009c38 <xTaskIncrementTick+0x164>)
 8009bba:	441a      	add	r2, r3
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	f7fe fd0b 	bl	80085de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bcc:	4b1b      	ldr	r3, [pc, #108]	; (8009c3c <xTaskIncrementTick+0x168>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d3b8      	bcc.n	8009b48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bda:	e7b5      	b.n	8009b48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009bdc:	4b17      	ldr	r3, [pc, #92]	; (8009c3c <xTaskIncrementTick+0x168>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be2:	4915      	ldr	r1, [pc, #84]	; (8009c38 <xTaskIncrementTick+0x164>)
 8009be4:	4613      	mov	r3, r2
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	4413      	add	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	440b      	add	r3, r1
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d901      	bls.n	8009bf8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009bf8:	4b11      	ldr	r3, [pc, #68]	; (8009c40 <xTaskIncrementTick+0x16c>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d007      	beq.n	8009c10 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009c00:	2301      	movs	r3, #1
 8009c02:	617b      	str	r3, [r7, #20]
 8009c04:	e004      	b.n	8009c10 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009c06:	4b0f      	ldr	r3, [pc, #60]	; (8009c44 <xTaskIncrementTick+0x170>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	4a0d      	ldr	r2, [pc, #52]	; (8009c44 <xTaskIncrementTick+0x170>)
 8009c0e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009c10:	697b      	ldr	r3, [r7, #20]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3718      	adds	r7, #24
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	2000346c 	.word	0x2000346c
 8009c20:	20003448 	.word	0x20003448
 8009c24:	200033fc 	.word	0x200033fc
 8009c28:	20003400 	.word	0x20003400
 8009c2c:	2000345c 	.word	0x2000345c
 8009c30:	20003464 	.word	0x20003464
 8009c34:	2000344c 	.word	0x2000344c
 8009c38:	20002f74 	.word	0x20002f74
 8009c3c:	20002f70 	.word	0x20002f70
 8009c40:	20003458 	.word	0x20003458
 8009c44:	20003454 	.word	0x20003454

08009c48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c4e:	4b36      	ldr	r3, [pc, #216]	; (8009d28 <vTaskSwitchContext+0xe0>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d003      	beq.n	8009c5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c56:	4b35      	ldr	r3, [pc, #212]	; (8009d2c <vTaskSwitchContext+0xe4>)
 8009c58:	2201      	movs	r2, #1
 8009c5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c5c:	e05f      	b.n	8009d1e <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8009c5e:	4b33      	ldr	r3, [pc, #204]	; (8009d2c <vTaskSwitchContext+0xe4>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009c64:	f7f7 f87f 	bl	8000d66 <getRunTimeCounterValue>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	4a31      	ldr	r2, [pc, #196]	; (8009d30 <vTaskSwitchContext+0xe8>)
 8009c6c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009c6e:	4b30      	ldr	r3, [pc, #192]	; (8009d30 <vTaskSwitchContext+0xe8>)
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	4b30      	ldr	r3, [pc, #192]	; (8009d34 <vTaskSwitchContext+0xec>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d909      	bls.n	8009c8e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009c7a:	4b2f      	ldr	r3, [pc, #188]	; (8009d38 <vTaskSwitchContext+0xf0>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009c80:	4a2b      	ldr	r2, [pc, #172]	; (8009d30 <vTaskSwitchContext+0xe8>)
 8009c82:	6810      	ldr	r0, [r2, #0]
 8009c84:	4a2b      	ldr	r2, [pc, #172]	; (8009d34 <vTaskSwitchContext+0xec>)
 8009c86:	6812      	ldr	r2, [r2, #0]
 8009c88:	1a82      	subs	r2, r0, r2
 8009c8a:	440a      	add	r2, r1
 8009c8c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009c8e:	4b28      	ldr	r3, [pc, #160]	; (8009d30 <vTaskSwitchContext+0xe8>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a28      	ldr	r2, [pc, #160]	; (8009d34 <vTaskSwitchContext+0xec>)
 8009c94:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c96:	4b29      	ldr	r3, [pc, #164]	; (8009d3c <vTaskSwitchContext+0xf4>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	60fb      	str	r3, [r7, #12]
 8009c9c:	e010      	b.n	8009cc0 <vTaskSwitchContext+0x78>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10a      	bne.n	8009cba <vTaskSwitchContext+0x72>
	__asm volatile
 8009ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca8:	f383 8811 	msr	BASEPRI, r3
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	607b      	str	r3, [r7, #4]
}
 8009cb6:	bf00      	nop
 8009cb8:	e7fe      	b.n	8009cb8 <vTaskSwitchContext+0x70>
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	60fb      	str	r3, [r7, #12]
 8009cc0:	491f      	ldr	r1, [pc, #124]	; (8009d40 <vTaskSwitchContext+0xf8>)
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4413      	add	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	440b      	add	r3, r1
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d0e4      	beq.n	8009c9e <vTaskSwitchContext+0x56>
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4a18      	ldr	r2, [pc, #96]	; (8009d40 <vTaskSwitchContext+0xf8>)
 8009ce0:	4413      	add	r3, r2
 8009ce2:	60bb      	str	r3, [r7, #8]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	685a      	ldr	r2, [r3, #4]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	605a      	str	r2, [r3, #4]
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	3308      	adds	r3, #8
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d104      	bne.n	8009d04 <vTaskSwitchContext+0xbc>
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	685a      	ldr	r2, [r3, #4]
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	605a      	str	r2, [r3, #4]
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	4a0b      	ldr	r2, [pc, #44]	; (8009d38 <vTaskSwitchContext+0xf0>)
 8009d0c:	6013      	str	r3, [r2, #0]
 8009d0e:	4a0b      	ldr	r2, [pc, #44]	; (8009d3c <vTaskSwitchContext+0xf4>)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d14:	4b08      	ldr	r3, [pc, #32]	; (8009d38 <vTaskSwitchContext+0xf0>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3358      	adds	r3, #88	; 0x58
 8009d1a:	4a0a      	ldr	r2, [pc, #40]	; (8009d44 <vTaskSwitchContext+0xfc>)
 8009d1c:	6013      	str	r3, [r2, #0]
}
 8009d1e:	bf00      	nop
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	2000346c 	.word	0x2000346c
 8009d2c:	20003458 	.word	0x20003458
 8009d30:	20003474 	.word	0x20003474
 8009d34:	20003470 	.word	0x20003470
 8009d38:	20002f70 	.word	0x20002f70
 8009d3c:	2000344c 	.word	0x2000344c
 8009d40:	20002f74 	.word	0x20002f74
 8009d44:	200003a8 	.word	0x200003a8

08009d48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10a      	bne.n	8009d6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	60fb      	str	r3, [r7, #12]
}
 8009d6a:	bf00      	nop
 8009d6c:	e7fe      	b.n	8009d6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d6e:	4b07      	ldr	r3, [pc, #28]	; (8009d8c <vTaskPlaceOnEventList+0x44>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3318      	adds	r3, #24
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7fe fc55 	bl	8008626 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d7c:	2101      	movs	r1, #1
 8009d7e:	6838      	ldr	r0, [r7, #0]
 8009d80:	f000 fb7e 	bl	800a480 <prvAddCurrentTaskToDelayedList>
}
 8009d84:	bf00      	nop
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	20002f70 	.word	0x20002f70

08009d90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10a      	bne.n	8009db8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da6:	f383 8811 	msr	BASEPRI, r3
 8009daa:	f3bf 8f6f 	isb	sy
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	617b      	str	r3, [r7, #20]
}
 8009db4:	bf00      	nop
 8009db6:	e7fe      	b.n	8009db6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009db8:	4b0a      	ldr	r3, [pc, #40]	; (8009de4 <vTaskPlaceOnEventListRestricted+0x54>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	3318      	adds	r3, #24
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f7fe fc0c 	bl	80085de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d002      	beq.n	8009dd2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009dd2:	6879      	ldr	r1, [r7, #4]
 8009dd4:	68b8      	ldr	r0, [r7, #8]
 8009dd6:	f000 fb53 	bl	800a480 <prvAddCurrentTaskToDelayedList>
	}
 8009dda:	bf00      	nop
 8009ddc:	3718      	adds	r7, #24
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	20002f70 	.word	0x20002f70

08009de8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10a      	bne.n	8009e14 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	60fb      	str	r3, [r7, #12]
}
 8009e10:	bf00      	nop
 8009e12:	e7fe      	b.n	8009e12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	3318      	adds	r3, #24
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fe fc3d 	bl	8008698 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e1e:	4b1e      	ldr	r3, [pc, #120]	; (8009e98 <xTaskRemoveFromEventList+0xb0>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d11d      	bne.n	8009e62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	3304      	adds	r3, #4
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fe fc34 	bl	8008698 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e34:	4b19      	ldr	r3, [pc, #100]	; (8009e9c <xTaskRemoveFromEventList+0xb4>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d903      	bls.n	8009e44 <xTaskRemoveFromEventList+0x5c>
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e40:	4a16      	ldr	r2, [pc, #88]	; (8009e9c <xTaskRemoveFromEventList+0xb4>)
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e48:	4613      	mov	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	4413      	add	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4a13      	ldr	r2, [pc, #76]	; (8009ea0 <xTaskRemoveFromEventList+0xb8>)
 8009e52:	441a      	add	r2, r3
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	3304      	adds	r3, #4
 8009e58:	4619      	mov	r1, r3
 8009e5a:	4610      	mov	r0, r2
 8009e5c:	f7fe fbbf 	bl	80085de <vListInsertEnd>
 8009e60:	e005      	b.n	8009e6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	3318      	adds	r3, #24
 8009e66:	4619      	mov	r1, r3
 8009e68:	480e      	ldr	r0, [pc, #56]	; (8009ea4 <xTaskRemoveFromEventList+0xbc>)
 8009e6a:	f7fe fbb8 	bl	80085de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e72:	4b0d      	ldr	r3, [pc, #52]	; (8009ea8 <xTaskRemoveFromEventList+0xc0>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d905      	bls.n	8009e88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e80:	4b0a      	ldr	r3, [pc, #40]	; (8009eac <xTaskRemoveFromEventList+0xc4>)
 8009e82:	2201      	movs	r2, #1
 8009e84:	601a      	str	r2, [r3, #0]
 8009e86:	e001      	b.n	8009e8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e8c:	697b      	ldr	r3, [r7, #20]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	2000346c 	.word	0x2000346c
 8009e9c:	2000344c 	.word	0x2000344c
 8009ea0:	20002f74 	.word	0x20002f74
 8009ea4:	20003404 	.word	0x20003404
 8009ea8:	20002f70 	.word	0x20002f70
 8009eac:	20003458 	.word	0x20003458

08009eb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009eb8:	4b06      	ldr	r3, [pc, #24]	; (8009ed4 <vTaskInternalSetTimeOutState+0x24>)
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ec0:	4b05      	ldr	r3, [pc, #20]	; (8009ed8 <vTaskInternalSetTimeOutState+0x28>)
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	605a      	str	r2, [r3, #4]
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	2000345c 	.word	0x2000345c
 8009ed8:	20003448 	.word	0x20003448

08009edc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b088      	sub	sp, #32
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10a      	bne.n	8009f02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	613b      	str	r3, [r7, #16]
}
 8009efe:	bf00      	nop
 8009f00:	e7fe      	b.n	8009f00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10a      	bne.n	8009f1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0c:	f383 8811 	msr	BASEPRI, r3
 8009f10:	f3bf 8f6f 	isb	sy
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	60fb      	str	r3, [r7, #12]
}
 8009f1a:	bf00      	nop
 8009f1c:	e7fe      	b.n	8009f1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009f1e:	f000 ff81 	bl	800ae24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f22:	4b1d      	ldr	r3, [pc, #116]	; (8009f98 <xTaskCheckForTimeOut+0xbc>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	69ba      	ldr	r2, [r7, #24]
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3a:	d102      	bne.n	8009f42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	61fb      	str	r3, [r7, #28]
 8009f40:	e023      	b.n	8009f8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	4b15      	ldr	r3, [pc, #84]	; (8009f9c <xTaskCheckForTimeOut+0xc0>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d007      	beq.n	8009f5e <xTaskCheckForTimeOut+0x82>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	69ba      	ldr	r2, [r7, #24]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d302      	bcc.n	8009f5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	61fb      	str	r3, [r7, #28]
 8009f5c:	e015      	b.n	8009f8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d20b      	bcs.n	8009f80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	1ad2      	subs	r2, r2, r3
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7ff ff9b 	bl	8009eb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	61fb      	str	r3, [r7, #28]
 8009f7e:	e004      	b.n	8009f8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	2200      	movs	r2, #0
 8009f84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f86:	2301      	movs	r3, #1
 8009f88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f8a:	f000 ff7b 	bl	800ae84 <vPortExitCritical>

	return xReturn;
 8009f8e:	69fb      	ldr	r3, [r7, #28]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3720      	adds	r7, #32
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	20003448 	.word	0x20003448
 8009f9c:	2000345c 	.word	0x2000345c

08009fa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009fa4:	4b03      	ldr	r3, [pc, #12]	; (8009fb4 <vTaskMissedYield+0x14>)
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	601a      	str	r2, [r3, #0]
}
 8009faa:	bf00      	nop
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr
 8009fb4:	20003458 	.word	0x20003458

08009fb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009fc0:	f000 f852 	bl	800a068 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009fc4:	4b06      	ldr	r3, [pc, #24]	; (8009fe0 <prvIdleTask+0x28>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d9f9      	bls.n	8009fc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009fcc:	4b05      	ldr	r3, [pc, #20]	; (8009fe4 <prvIdleTask+0x2c>)
 8009fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009fdc:	e7f0      	b.n	8009fc0 <prvIdleTask+0x8>
 8009fde:	bf00      	nop
 8009fe0:	20002f74 	.word	0x20002f74
 8009fe4:	e000ed04 	.word	0xe000ed04

08009fe8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fee:	2300      	movs	r3, #0
 8009ff0:	607b      	str	r3, [r7, #4]
 8009ff2:	e00c      	b.n	800a00e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4a12      	ldr	r2, [pc, #72]	; (800a048 <prvInitialiseTaskLists+0x60>)
 800a000:	4413      	add	r3, r2
 800a002:	4618      	mov	r0, r3
 800a004:	f7fe fabe 	bl	8008584 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	3301      	adds	r3, #1
 800a00c:	607b      	str	r3, [r7, #4]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b37      	cmp	r3, #55	; 0x37
 800a012:	d9ef      	bls.n	8009ff4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a014:	480d      	ldr	r0, [pc, #52]	; (800a04c <prvInitialiseTaskLists+0x64>)
 800a016:	f7fe fab5 	bl	8008584 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a01a:	480d      	ldr	r0, [pc, #52]	; (800a050 <prvInitialiseTaskLists+0x68>)
 800a01c:	f7fe fab2 	bl	8008584 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a020:	480c      	ldr	r0, [pc, #48]	; (800a054 <prvInitialiseTaskLists+0x6c>)
 800a022:	f7fe faaf 	bl	8008584 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a026:	480c      	ldr	r0, [pc, #48]	; (800a058 <prvInitialiseTaskLists+0x70>)
 800a028:	f7fe faac 	bl	8008584 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a02c:	480b      	ldr	r0, [pc, #44]	; (800a05c <prvInitialiseTaskLists+0x74>)
 800a02e:	f7fe faa9 	bl	8008584 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a032:	4b0b      	ldr	r3, [pc, #44]	; (800a060 <prvInitialiseTaskLists+0x78>)
 800a034:	4a05      	ldr	r2, [pc, #20]	; (800a04c <prvInitialiseTaskLists+0x64>)
 800a036:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a038:	4b0a      	ldr	r3, [pc, #40]	; (800a064 <prvInitialiseTaskLists+0x7c>)
 800a03a:	4a05      	ldr	r2, [pc, #20]	; (800a050 <prvInitialiseTaskLists+0x68>)
 800a03c:	601a      	str	r2, [r3, #0]
}
 800a03e:	bf00      	nop
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	20002f74 	.word	0x20002f74
 800a04c:	200033d4 	.word	0x200033d4
 800a050:	200033e8 	.word	0x200033e8
 800a054:	20003404 	.word	0x20003404
 800a058:	20003418 	.word	0x20003418
 800a05c:	20003430 	.word	0x20003430
 800a060:	200033fc 	.word	0x200033fc
 800a064:	20003400 	.word	0x20003400

0800a068 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a06e:	e019      	b.n	800a0a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a070:	f000 fed8 	bl	800ae24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a074:	4b10      	ldr	r3, [pc, #64]	; (800a0b8 <prvCheckTasksWaitingTermination+0x50>)
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	3304      	adds	r3, #4
 800a080:	4618      	mov	r0, r3
 800a082:	f7fe fb09 	bl	8008698 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a086:	4b0d      	ldr	r3, [pc, #52]	; (800a0bc <prvCheckTasksWaitingTermination+0x54>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	4a0b      	ldr	r2, [pc, #44]	; (800a0bc <prvCheckTasksWaitingTermination+0x54>)
 800a08e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a090:	4b0b      	ldr	r3, [pc, #44]	; (800a0c0 <prvCheckTasksWaitingTermination+0x58>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3b01      	subs	r3, #1
 800a096:	4a0a      	ldr	r2, [pc, #40]	; (800a0c0 <prvCheckTasksWaitingTermination+0x58>)
 800a098:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a09a:	f000 fef3 	bl	800ae84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f810 	bl	800a0c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0a4:	4b06      	ldr	r3, [pc, #24]	; (800a0c0 <prvCheckTasksWaitingTermination+0x58>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1e1      	bne.n	800a070 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a0ac:	bf00      	nop
 800a0ae:	bf00      	nop
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	20003418 	.word	0x20003418
 800a0bc:	20003444 	.word	0x20003444
 800a0c0:	2000342c 	.word	0x2000342c

0800a0c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	3358      	adds	r3, #88	; 0x58
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f001 fa81 	bl	800b5d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d108      	bne.n	800a0f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f001 f88b 	bl	800b200 <vPortFree>
				vPortFree( pxTCB );
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f001 f888 	bl	800b200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a0f0:	e018      	b.n	800a124 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d103      	bne.n	800a104 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f001 f87f 	bl	800b200 <vPortFree>
	}
 800a102:	e00f      	b.n	800a124 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d00a      	beq.n	800a124 <prvDeleteTCB+0x60>
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	60fb      	str	r3, [r7, #12]
}
 800a120:	bf00      	nop
 800a122:	e7fe      	b.n	800a122 <prvDeleteTCB+0x5e>
	}
 800a124:	bf00      	nop
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a132:	4b0c      	ldr	r3, [pc, #48]	; (800a164 <prvResetNextTaskUnblockTime+0x38>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d104      	bne.n	800a146 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a13c:	4b0a      	ldr	r3, [pc, #40]	; (800a168 <prvResetNextTaskUnblockTime+0x3c>)
 800a13e:	f04f 32ff 	mov.w	r2, #4294967295
 800a142:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a144:	e008      	b.n	800a158 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a146:	4b07      	ldr	r3, [pc, #28]	; (800a164 <prvResetNextTaskUnblockTime+0x38>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	4a04      	ldr	r2, [pc, #16]	; (800a168 <prvResetNextTaskUnblockTime+0x3c>)
 800a156:	6013      	str	r3, [r2, #0]
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr
 800a164:	200033fc 	.word	0x200033fc
 800a168:	20003464 	.word	0x20003464

0800a16c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a172:	4b0b      	ldr	r3, [pc, #44]	; (800a1a0 <xTaskGetSchedulerState+0x34>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d102      	bne.n	800a180 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a17a:	2301      	movs	r3, #1
 800a17c:	607b      	str	r3, [r7, #4]
 800a17e:	e008      	b.n	800a192 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a180:	4b08      	ldr	r3, [pc, #32]	; (800a1a4 <xTaskGetSchedulerState+0x38>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d102      	bne.n	800a18e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a188:	2302      	movs	r3, #2
 800a18a:	607b      	str	r3, [r7, #4]
 800a18c:	e001      	b.n	800a192 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a18e:	2300      	movs	r3, #0
 800a190:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a192:	687b      	ldr	r3, [r7, #4]
	}
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	20003450 	.word	0x20003450
 800a1a4:	2000346c 	.word	0x2000346c

0800a1a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d051      	beq.n	800a262 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c2:	4b2a      	ldr	r3, [pc, #168]	; (800a26c <xTaskPriorityInherit+0xc4>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d241      	bcs.n	800a250 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	db06      	blt.n	800a1e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1d4:	4b25      	ldr	r3, [pc, #148]	; (800a26c <xTaskPriorityInherit+0xc4>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	6959      	ldr	r1, [r3, #20]
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	4413      	add	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4a1f      	ldr	r2, [pc, #124]	; (800a270 <xTaskPriorityInherit+0xc8>)
 800a1f4:	4413      	add	r3, r2
 800a1f6:	4299      	cmp	r1, r3
 800a1f8:	d122      	bne.n	800a240 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	3304      	adds	r3, #4
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7fe fa4a 	bl	8008698 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a204:	4b19      	ldr	r3, [pc, #100]	; (800a26c <xTaskPriorityInherit+0xc4>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a212:	4b18      	ldr	r3, [pc, #96]	; (800a274 <xTaskPriorityInherit+0xcc>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	429a      	cmp	r2, r3
 800a218:	d903      	bls.n	800a222 <xTaskPriorityInherit+0x7a>
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21e:	4a15      	ldr	r2, [pc, #84]	; (800a274 <xTaskPriorityInherit+0xcc>)
 800a220:	6013      	str	r3, [r2, #0]
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a226:	4613      	mov	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4413      	add	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4a10      	ldr	r2, [pc, #64]	; (800a270 <xTaskPriorityInherit+0xc8>)
 800a230:	441a      	add	r2, r3
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	3304      	adds	r3, #4
 800a236:	4619      	mov	r1, r3
 800a238:	4610      	mov	r0, r2
 800a23a:	f7fe f9d0 	bl	80085de <vListInsertEnd>
 800a23e:	e004      	b.n	800a24a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a240:	4b0a      	ldr	r3, [pc, #40]	; (800a26c <xTaskPriorityInherit+0xc4>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a24a:	2301      	movs	r3, #1
 800a24c:	60fb      	str	r3, [r7, #12]
 800a24e:	e008      	b.n	800a262 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a254:	4b05      	ldr	r3, [pc, #20]	; (800a26c <xTaskPriorityInherit+0xc4>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d201      	bcs.n	800a262 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a25e:	2301      	movs	r3, #1
 800a260:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a262:	68fb      	ldr	r3, [r7, #12]
	}
 800a264:	4618      	mov	r0, r3
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	20002f70 	.word	0x20002f70
 800a270:	20002f74 	.word	0x20002f74
 800a274:	2000344c 	.word	0x2000344c

0800a278 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a284:	2300      	movs	r3, #0
 800a286:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d056      	beq.n	800a33c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a28e:	4b2e      	ldr	r3, [pc, #184]	; (800a348 <xTaskPriorityDisinherit+0xd0>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	429a      	cmp	r2, r3
 800a296:	d00a      	beq.n	800a2ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29c:	f383 8811 	msr	BASEPRI, r3
 800a2a0:	f3bf 8f6f 	isb	sy
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	60fb      	str	r3, [r7, #12]
}
 800a2aa:	bf00      	nop
 800a2ac:	e7fe      	b.n	800a2ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10a      	bne.n	800a2cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ba:	f383 8811 	msr	BASEPRI, r3
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	60bb      	str	r3, [r7, #8]
}
 800a2c8:	bf00      	nop
 800a2ca:	e7fe      	b.n	800a2ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2d0:	1e5a      	subs	r2, r3, #1
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d02c      	beq.n	800a33c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d128      	bne.n	800a33c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	3304      	adds	r3, #4
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fe f9d2 	bl	8008698 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a300:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a30c:	4b0f      	ldr	r3, [pc, #60]	; (800a34c <xTaskPriorityDisinherit+0xd4>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	429a      	cmp	r2, r3
 800a312:	d903      	bls.n	800a31c <xTaskPriorityDisinherit+0xa4>
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a318:	4a0c      	ldr	r2, [pc, #48]	; (800a34c <xTaskPriorityDisinherit+0xd4>)
 800a31a:	6013      	str	r3, [r2, #0]
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a320:	4613      	mov	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4413      	add	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	4a09      	ldr	r2, [pc, #36]	; (800a350 <xTaskPriorityDisinherit+0xd8>)
 800a32a:	441a      	add	r2, r3
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	3304      	adds	r3, #4
 800a330:	4619      	mov	r1, r3
 800a332:	4610      	mov	r0, r2
 800a334:	f7fe f953 	bl	80085de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a338:	2301      	movs	r3, #1
 800a33a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a33c:	697b      	ldr	r3, [r7, #20]
	}
 800a33e:	4618      	mov	r0, r3
 800a340:	3718      	adds	r7, #24
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	20002f70 	.word	0x20002f70
 800a34c:	2000344c 	.word	0x2000344c
 800a350:	20002f74 	.word	0x20002f74

0800a354 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a354:	b580      	push	{r7, lr}
 800a356:	b088      	sub	sp, #32
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a362:	2301      	movs	r3, #1
 800a364:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d06a      	beq.n	800a442 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10a      	bne.n	800a38a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	60fb      	str	r3, [r7, #12]
}
 800a386:	bf00      	nop
 800a388:	e7fe      	b.n	800a388 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a38a:	69bb      	ldr	r3, [r7, #24]
 800a38c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	429a      	cmp	r2, r3
 800a392:	d902      	bls.n	800a39a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	61fb      	str	r3, [r7, #28]
 800a398:	e002      	b.n	800a3a0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a39e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a4:	69fa      	ldr	r2, [r7, #28]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d04b      	beq.n	800a442 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3ae:	697a      	ldr	r2, [r7, #20]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d146      	bne.n	800a442 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a3b4:	4b25      	ldr	r3, [pc, #148]	; (800a44c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	69ba      	ldr	r2, [r7, #24]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d10a      	bne.n	800a3d4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	60bb      	str	r3, [r7, #8]
}
 800a3d0:	bf00      	nop
 800a3d2:	e7fe      	b.n	800a3d2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	69fa      	ldr	r2, [r7, #28]
 800a3de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	db04      	blt.n	800a3f2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	6959      	ldr	r1, [r3, #20]
 800a3f6:	693a      	ldr	r2, [r7, #16]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	4413      	add	r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4a13      	ldr	r2, [pc, #76]	; (800a450 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a402:	4413      	add	r3, r2
 800a404:	4299      	cmp	r1, r3
 800a406:	d11c      	bne.n	800a442 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	3304      	adds	r3, #4
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7fe f943 	bl	8008698 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a416:	4b0f      	ldr	r3, [pc, #60]	; (800a454 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d903      	bls.n	800a426 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a422:	4a0c      	ldr	r2, [pc, #48]	; (800a454 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a424:	6013      	str	r3, [r2, #0]
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a42a:	4613      	mov	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4a07      	ldr	r2, [pc, #28]	; (800a450 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a434:	441a      	add	r2, r3
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	3304      	adds	r3, #4
 800a43a:	4619      	mov	r1, r3
 800a43c:	4610      	mov	r0, r2
 800a43e:	f7fe f8ce 	bl	80085de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a442:	bf00      	nop
 800a444:	3720      	adds	r7, #32
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	20002f70 	.word	0x20002f70
 800a450:	20002f74 	.word	0x20002f74
 800a454:	2000344c 	.word	0x2000344c

0800a458 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a458:	b480      	push	{r7}
 800a45a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a45c:	4b07      	ldr	r3, [pc, #28]	; (800a47c <pvTaskIncrementMutexHeldCount+0x24>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d004      	beq.n	800a46e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a464:	4b05      	ldr	r3, [pc, #20]	; (800a47c <pvTaskIncrementMutexHeldCount+0x24>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a46a:	3201      	adds	r2, #1
 800a46c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a46e:	4b03      	ldr	r3, [pc, #12]	; (800a47c <pvTaskIncrementMutexHeldCount+0x24>)
 800a470:	681b      	ldr	r3, [r3, #0]
	}
 800a472:	4618      	mov	r0, r3
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr
 800a47c:	20002f70 	.word	0x20002f70

0800a480 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a48a:	4b21      	ldr	r3, [pc, #132]	; (800a510 <prvAddCurrentTaskToDelayedList+0x90>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a490:	4b20      	ldr	r3, [pc, #128]	; (800a514 <prvAddCurrentTaskToDelayedList+0x94>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3304      	adds	r3, #4
 800a496:	4618      	mov	r0, r3
 800a498:	f7fe f8fe 	bl	8008698 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a2:	d10a      	bne.n	800a4ba <prvAddCurrentTaskToDelayedList+0x3a>
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d007      	beq.n	800a4ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4aa:	4b1a      	ldr	r3, [pc, #104]	; (800a514 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	3304      	adds	r3, #4
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	4819      	ldr	r0, [pc, #100]	; (800a518 <prvAddCurrentTaskToDelayedList+0x98>)
 800a4b4:	f7fe f893 	bl	80085de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a4b8:	e026      	b.n	800a508 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4413      	add	r3, r2
 800a4c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a4c2:	4b14      	ldr	r3, [pc, #80]	; (800a514 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a4ca:	68ba      	ldr	r2, [r7, #8]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d209      	bcs.n	800a4e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4d2:	4b12      	ldr	r3, [pc, #72]	; (800a51c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	4b0f      	ldr	r3, [pc, #60]	; (800a514 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	3304      	adds	r3, #4
 800a4dc:	4619      	mov	r1, r3
 800a4de:	4610      	mov	r0, r2
 800a4e0:	f7fe f8a1 	bl	8008626 <vListInsert>
}
 800a4e4:	e010      	b.n	800a508 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4e6:	4b0e      	ldr	r3, [pc, #56]	; (800a520 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	4b0a      	ldr	r3, [pc, #40]	; (800a514 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	3304      	adds	r3, #4
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	4610      	mov	r0, r2
 800a4f4:	f7fe f897 	bl	8008626 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a4f8:	4b0a      	ldr	r3, [pc, #40]	; (800a524 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d202      	bcs.n	800a508 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a502:	4a08      	ldr	r2, [pc, #32]	; (800a524 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	6013      	str	r3, [r2, #0]
}
 800a508:	bf00      	nop
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	20003448 	.word	0x20003448
 800a514:	20002f70 	.word	0x20002f70
 800a518:	20003430 	.word	0x20003430
 800a51c:	20003400 	.word	0x20003400
 800a520:	200033fc 	.word	0x200033fc
 800a524:	20003464 	.word	0x20003464

0800a528 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08a      	sub	sp, #40	; 0x28
 800a52c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a52e:	2300      	movs	r3, #0
 800a530:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a532:	f000 fb07 	bl	800ab44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a536:	4b1c      	ldr	r3, [pc, #112]	; (800a5a8 <xTimerCreateTimerTask+0x80>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d021      	beq.n	800a582 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a53e:	2300      	movs	r3, #0
 800a540:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a542:	2300      	movs	r3, #0
 800a544:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a546:	1d3a      	adds	r2, r7, #4
 800a548:	f107 0108 	add.w	r1, r7, #8
 800a54c:	f107 030c 	add.w	r3, r7, #12
 800a550:	4618      	mov	r0, r3
 800a552:	f7fd fffd 	bl	8008550 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a556:	6879      	ldr	r1, [r7, #4]
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	9202      	str	r2, [sp, #8]
 800a55e:	9301      	str	r3, [sp, #4]
 800a560:	2302      	movs	r3, #2
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	2300      	movs	r3, #0
 800a566:	460a      	mov	r2, r1
 800a568:	4910      	ldr	r1, [pc, #64]	; (800a5ac <xTimerCreateTimerTask+0x84>)
 800a56a:	4811      	ldr	r0, [pc, #68]	; (800a5b0 <xTimerCreateTimerTask+0x88>)
 800a56c:	f7fe ff94 	bl	8009498 <xTaskCreateStatic>
 800a570:	4603      	mov	r3, r0
 800a572:	4a10      	ldr	r2, [pc, #64]	; (800a5b4 <xTimerCreateTimerTask+0x8c>)
 800a574:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a576:	4b0f      	ldr	r3, [pc, #60]	; (800a5b4 <xTimerCreateTimerTask+0x8c>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d001      	beq.n	800a582 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a57e:	2301      	movs	r3, #1
 800a580:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10a      	bne.n	800a59e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58c:	f383 8811 	msr	BASEPRI, r3
 800a590:	f3bf 8f6f 	isb	sy
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	613b      	str	r3, [r7, #16]
}
 800a59a:	bf00      	nop
 800a59c:	e7fe      	b.n	800a59c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a59e:	697b      	ldr	r3, [r7, #20]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3718      	adds	r7, #24
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	200034a8 	.word	0x200034a8
 800a5ac:	0800c3f4 	.word	0x0800c3f4
 800a5b0:	0800a6ed 	.word	0x0800a6ed
 800a5b4:	200034ac 	.word	0x200034ac

0800a5b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08a      	sub	sp, #40	; 0x28
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
 800a5c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10a      	bne.n	800a5e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d4:	f383 8811 	msr	BASEPRI, r3
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	623b      	str	r3, [r7, #32]
}
 800a5e2:	bf00      	nop
 800a5e4:	e7fe      	b.n	800a5e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a5e6:	4b1a      	ldr	r3, [pc, #104]	; (800a650 <xTimerGenericCommand+0x98>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d02a      	beq.n	800a644 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	2b05      	cmp	r3, #5
 800a5fe:	dc18      	bgt.n	800a632 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a600:	f7ff fdb4 	bl	800a16c <xTaskGetSchedulerState>
 800a604:	4603      	mov	r3, r0
 800a606:	2b02      	cmp	r3, #2
 800a608:	d109      	bne.n	800a61e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a60a:	4b11      	ldr	r3, [pc, #68]	; (800a650 <xTimerGenericCommand+0x98>)
 800a60c:	6818      	ldr	r0, [r3, #0]
 800a60e:	f107 0110 	add.w	r1, r7, #16
 800a612:	2300      	movs	r3, #0
 800a614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a616:	f7fe f9a7 	bl	8008968 <xQueueGenericSend>
 800a61a:	6278      	str	r0, [r7, #36]	; 0x24
 800a61c:	e012      	b.n	800a644 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a61e:	4b0c      	ldr	r3, [pc, #48]	; (800a650 <xTimerGenericCommand+0x98>)
 800a620:	6818      	ldr	r0, [r3, #0]
 800a622:	f107 0110 	add.w	r1, r7, #16
 800a626:	2300      	movs	r3, #0
 800a628:	2200      	movs	r2, #0
 800a62a:	f7fe f99d 	bl	8008968 <xQueueGenericSend>
 800a62e:	6278      	str	r0, [r7, #36]	; 0x24
 800a630:	e008      	b.n	800a644 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a632:	4b07      	ldr	r3, [pc, #28]	; (800a650 <xTimerGenericCommand+0x98>)
 800a634:	6818      	ldr	r0, [r3, #0]
 800a636:	f107 0110 	add.w	r1, r7, #16
 800a63a:	2300      	movs	r3, #0
 800a63c:	683a      	ldr	r2, [r7, #0]
 800a63e:	f7fe fa91 	bl	8008b64 <xQueueGenericSendFromISR>
 800a642:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a646:	4618      	mov	r0, r3
 800a648:	3728      	adds	r7, #40	; 0x28
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	200034a8 	.word	0x200034a8

0800a654 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b088      	sub	sp, #32
 800a658:	af02      	add	r7, sp, #8
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a65e:	4b22      	ldr	r3, [pc, #136]	; (800a6e8 <prvProcessExpiredTimer+0x94>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	3304      	adds	r3, #4
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7fe f813 	bl	8008698 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a678:	f003 0304 	and.w	r3, r3, #4
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d022      	beq.n	800a6c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	699a      	ldr	r2, [r3, #24]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	18d1      	adds	r1, r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	6978      	ldr	r0, [r7, #20]
 800a68e:	f000 f8d1 	bl	800a834 <prvInsertTimerInActiveList>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d01f      	beq.n	800a6d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a698:	2300      	movs	r3, #0
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	2300      	movs	r3, #0
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	6978      	ldr	r0, [r7, #20]
 800a6a4:	f7ff ff88 	bl	800a5b8 <xTimerGenericCommand>
 800a6a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d113      	bne.n	800a6d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b4:	f383 8811 	msr	BASEPRI, r3
 800a6b8:	f3bf 8f6f 	isb	sy
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	60fb      	str	r3, [r7, #12]
}
 800a6c2:	bf00      	nop
 800a6c4:	e7fe      	b.n	800a6c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6cc:	f023 0301 	bic.w	r3, r3, #1
 800a6d0:	b2da      	uxtb	r2, r3
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	6a1b      	ldr	r3, [r3, #32]
 800a6dc:	6978      	ldr	r0, [r7, #20]
 800a6de:	4798      	blx	r3
}
 800a6e0:	bf00      	nop
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	200034a0 	.word	0x200034a0

0800a6ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6f4:	f107 0308 	add.w	r3, r7, #8
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 f857 	bl	800a7ac <prvGetNextExpireTime>
 800a6fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	4619      	mov	r1, r3
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f000 f803 	bl	800a710 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a70a:	f000 f8d5 	bl	800a8b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a70e:	e7f1      	b.n	800a6f4 <prvTimerTask+0x8>

0800a710 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a71a:	f7ff f91f 	bl	800995c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a71e:	f107 0308 	add.w	r3, r7, #8
 800a722:	4618      	mov	r0, r3
 800a724:	f000 f866 	bl	800a7f4 <prvSampleTimeNow>
 800a728:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d130      	bne.n	800a792 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d10a      	bne.n	800a74c <prvProcessTimerOrBlockTask+0x3c>
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d806      	bhi.n	800a74c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a73e:	f7ff f91b 	bl	8009978 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a742:	68f9      	ldr	r1, [r7, #12]
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7ff ff85 	bl	800a654 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a74a:	e024      	b.n	800a796 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d008      	beq.n	800a764 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a752:	4b13      	ldr	r3, [pc, #76]	; (800a7a0 <prvProcessTimerOrBlockTask+0x90>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d101      	bne.n	800a760 <prvProcessTimerOrBlockTask+0x50>
 800a75c:	2301      	movs	r3, #1
 800a75e:	e000      	b.n	800a762 <prvProcessTimerOrBlockTask+0x52>
 800a760:	2300      	movs	r3, #0
 800a762:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a764:	4b0f      	ldr	r3, [pc, #60]	; (800a7a4 <prvProcessTimerOrBlockTask+0x94>)
 800a766:	6818      	ldr	r0, [r3, #0]
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	1ad3      	subs	r3, r2, r3
 800a76e:	683a      	ldr	r2, [r7, #0]
 800a770:	4619      	mov	r1, r3
 800a772:	f7fe fe5d 	bl	8009430 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a776:	f7ff f8ff 	bl	8009978 <xTaskResumeAll>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10a      	bne.n	800a796 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a780:	4b09      	ldr	r3, [pc, #36]	; (800a7a8 <prvProcessTimerOrBlockTask+0x98>)
 800a782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a786:	601a      	str	r2, [r3, #0]
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	f3bf 8f6f 	isb	sy
}
 800a790:	e001      	b.n	800a796 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a792:	f7ff f8f1 	bl	8009978 <xTaskResumeAll>
}
 800a796:	bf00      	nop
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	200034a4 	.word	0x200034a4
 800a7a4:	200034a8 	.word	0x200034a8
 800a7a8:	e000ed04 	.word	0xe000ed04

0800a7ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b085      	sub	sp, #20
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a7b4:	4b0e      	ldr	r3, [pc, #56]	; (800a7f0 <prvGetNextExpireTime+0x44>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d101      	bne.n	800a7c2 <prvGetNextExpireTime+0x16>
 800a7be:	2201      	movs	r2, #1
 800a7c0:	e000      	b.n	800a7c4 <prvGetNextExpireTime+0x18>
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d105      	bne.n	800a7dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7d0:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <prvGetNextExpireTime+0x44>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	60fb      	str	r3, [r7, #12]
 800a7da:	e001      	b.n	800a7e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3714      	adds	r7, #20
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	200034a0 	.word	0x200034a0

0800a7f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a7fc:	f7ff f95a 	bl	8009ab4 <xTaskGetTickCount>
 800a800:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a802:	4b0b      	ldr	r3, [pc, #44]	; (800a830 <prvSampleTimeNow+0x3c>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d205      	bcs.n	800a818 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a80c:	f000 f936 	bl	800aa7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	601a      	str	r2, [r3, #0]
 800a816:	e002      	b.n	800a81e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a81e:	4a04      	ldr	r2, [pc, #16]	; (800a830 <prvSampleTimeNow+0x3c>)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a824:	68fb      	ldr	r3, [r7, #12]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	200034b0 	.word	0x200034b0

0800a834 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	607a      	str	r2, [r7, #4]
 800a840:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a842:	2300      	movs	r3, #0
 800a844:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a852:	68ba      	ldr	r2, [r7, #8]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	429a      	cmp	r2, r3
 800a858:	d812      	bhi.n	800a880 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	1ad2      	subs	r2, r2, r3
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	429a      	cmp	r2, r3
 800a866:	d302      	bcc.n	800a86e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a868:	2301      	movs	r3, #1
 800a86a:	617b      	str	r3, [r7, #20]
 800a86c:	e01b      	b.n	800a8a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a86e:	4b10      	ldr	r3, [pc, #64]	; (800a8b0 <prvInsertTimerInActiveList+0x7c>)
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3304      	adds	r3, #4
 800a876:	4619      	mov	r1, r3
 800a878:	4610      	mov	r0, r2
 800a87a:	f7fd fed4 	bl	8008626 <vListInsert>
 800a87e:	e012      	b.n	800a8a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	429a      	cmp	r2, r3
 800a886:	d206      	bcs.n	800a896 <prvInsertTimerInActiveList+0x62>
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d302      	bcc.n	800a896 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a890:	2301      	movs	r3, #1
 800a892:	617b      	str	r3, [r7, #20]
 800a894:	e007      	b.n	800a8a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a896:	4b07      	ldr	r3, [pc, #28]	; (800a8b4 <prvInsertTimerInActiveList+0x80>)
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	3304      	adds	r3, #4
 800a89e:	4619      	mov	r1, r3
 800a8a0:	4610      	mov	r0, r2
 800a8a2:	f7fd fec0 	bl	8008626 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a8a6:	697b      	ldr	r3, [r7, #20]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3718      	adds	r7, #24
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	200034a4 	.word	0x200034a4
 800a8b4:	200034a0 	.word	0x200034a0

0800a8b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b08e      	sub	sp, #56	; 0x38
 800a8bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8be:	e0ca      	b.n	800aa56 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	da18      	bge.n	800a8f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a8c6:	1d3b      	adds	r3, r7, #4
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d10a      	bne.n	800a8e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d6:	f383 8811 	msr	BASEPRI, r3
 800a8da:	f3bf 8f6f 	isb	sy
 800a8de:	f3bf 8f4f 	dsb	sy
 800a8e2:	61fb      	str	r3, [r7, #28]
}
 800a8e4:	bf00      	nop
 800a8e6:	e7fe      	b.n	800a8e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8ee:	6850      	ldr	r0, [r2, #4]
 800a8f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8f2:	6892      	ldr	r2, [r2, #8]
 800a8f4:	4611      	mov	r1, r2
 800a8f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	f2c0 80ab 	blt.w	800aa56 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a906:	695b      	ldr	r3, [r3, #20]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d004      	beq.n	800a916 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90e:	3304      	adds	r3, #4
 800a910:	4618      	mov	r0, r3
 800a912:	f7fd fec1 	bl	8008698 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a916:	463b      	mov	r3, r7
 800a918:	4618      	mov	r0, r3
 800a91a:	f7ff ff6b 	bl	800a7f4 <prvSampleTimeNow>
 800a91e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b09      	cmp	r3, #9
 800a924:	f200 8096 	bhi.w	800aa54 <prvProcessReceivedCommands+0x19c>
 800a928:	a201      	add	r2, pc, #4	; (adr r2, 800a930 <prvProcessReceivedCommands+0x78>)
 800a92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92e:	bf00      	nop
 800a930:	0800a959 	.word	0x0800a959
 800a934:	0800a959 	.word	0x0800a959
 800a938:	0800a959 	.word	0x0800a959
 800a93c:	0800a9cd 	.word	0x0800a9cd
 800a940:	0800a9e1 	.word	0x0800a9e1
 800a944:	0800aa2b 	.word	0x0800aa2b
 800a948:	0800a959 	.word	0x0800a959
 800a94c:	0800a959 	.word	0x0800a959
 800a950:	0800a9cd 	.word	0x0800a9cd
 800a954:	0800a9e1 	.word	0x0800a9e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a95e:	f043 0301 	orr.w	r3, r3, #1
 800a962:	b2da      	uxtb	r2, r3
 800a964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96e:	699b      	ldr	r3, [r3, #24]
 800a970:	18d1      	adds	r1, r2, r3
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a976:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a978:	f7ff ff5c 	bl	800a834 <prvInsertTimerInActiveList>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d069      	beq.n	800aa56 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a984:	6a1b      	ldr	r3, [r3, #32]
 800a986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a988:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a990:	f003 0304 	and.w	r3, r3, #4
 800a994:	2b00      	cmp	r3, #0
 800a996:	d05e      	beq.n	800aa56 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99c:	699b      	ldr	r3, [r3, #24]
 800a99e:	441a      	add	r2, r3
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9aa:	f7ff fe05 	bl	800a5b8 <xTimerGenericCommand>
 800a9ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a9b0:	6a3b      	ldr	r3, [r7, #32]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d14f      	bne.n	800aa56 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ba:	f383 8811 	msr	BASEPRI, r3
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	f3bf 8f4f 	dsb	sy
 800a9c6:	61bb      	str	r3, [r7, #24]
}
 800a9c8:	bf00      	nop
 800a9ca:	e7fe      	b.n	800a9ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9d2:	f023 0301 	bic.w	r3, r3, #1
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a9de:	e03a      	b.n	800aa56 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9e6:	f043 0301 	orr.w	r3, r3, #1
 800a9ea:	b2da      	uxtb	r2, r3
 800a9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a9f2:	68ba      	ldr	r2, [r7, #8]
 800a9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fa:	699b      	ldr	r3, [r3, #24]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10a      	bne.n	800aa16 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	617b      	str	r3, [r7, #20]
}
 800aa12:	bf00      	nop
 800aa14:	e7fe      	b.n	800aa14 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa18:	699a      	ldr	r2, [r3, #24]
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1c:	18d1      	adds	r1, r2, r3
 800aa1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa24:	f7ff ff06 	bl	800a834 <prvInsertTimerInActiveList>
					break;
 800aa28:	e015      	b.n	800aa56 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa30:	f003 0302 	and.w	r3, r3, #2
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d103      	bne.n	800aa40 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aa38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa3a:	f000 fbe1 	bl	800b200 <vPortFree>
 800aa3e:	e00a      	b.n	800aa56 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa46:	f023 0301 	bic.w	r3, r3, #1
 800aa4a:	b2da      	uxtb	r2, r3
 800aa4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa52:	e000      	b.n	800aa56 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800aa54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa56:	4b08      	ldr	r3, [pc, #32]	; (800aa78 <prvProcessReceivedCommands+0x1c0>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	1d39      	adds	r1, r7, #4
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7fe f9a8 	bl	8008db4 <xQueueReceive>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	f47f af2a 	bne.w	800a8c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800aa6c:	bf00      	nop
 800aa6e:	bf00      	nop
 800aa70:	3730      	adds	r7, #48	; 0x30
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	200034a8 	.word	0x200034a8

0800aa7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa82:	e048      	b.n	800ab16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa84:	4b2d      	ldr	r3, [pc, #180]	; (800ab3c <prvSwitchTimerLists+0xc0>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa8e:	4b2b      	ldr	r3, [pc, #172]	; (800ab3c <prvSwitchTimerLists+0xc0>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	68db      	ldr	r3, [r3, #12]
 800aa96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fd fdfb 	bl	8008698 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6a1b      	ldr	r3, [r3, #32]
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aab0:	f003 0304 	and.w	r3, r3, #4
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d02e      	beq.n	800ab16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	693a      	ldr	r2, [r7, #16]
 800aabe:	4413      	add	r3, r2
 800aac0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d90e      	bls.n	800aae8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aad6:	4b19      	ldr	r3, [pc, #100]	; (800ab3c <prvSwitchTimerLists+0xc0>)
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	3304      	adds	r3, #4
 800aade:	4619      	mov	r1, r3
 800aae0:	4610      	mov	r0, r2
 800aae2:	f7fd fda0 	bl	8008626 <vListInsert>
 800aae6:	e016      	b.n	800ab16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aae8:	2300      	movs	r3, #0
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	2300      	movs	r3, #0
 800aaee:	693a      	ldr	r2, [r7, #16]
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f7ff fd60 	bl	800a5b8 <xTimerGenericCommand>
 800aaf8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10a      	bne.n	800ab16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	603b      	str	r3, [r7, #0]
}
 800ab12:	bf00      	nop
 800ab14:	e7fe      	b.n	800ab14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab16:	4b09      	ldr	r3, [pc, #36]	; (800ab3c <prvSwitchTimerLists+0xc0>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1b1      	bne.n	800aa84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab20:	4b06      	ldr	r3, [pc, #24]	; (800ab3c <prvSwitchTimerLists+0xc0>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ab26:	4b06      	ldr	r3, [pc, #24]	; (800ab40 <prvSwitchTimerLists+0xc4>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a04      	ldr	r2, [pc, #16]	; (800ab3c <prvSwitchTimerLists+0xc0>)
 800ab2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ab2e:	4a04      	ldr	r2, [pc, #16]	; (800ab40 <prvSwitchTimerLists+0xc4>)
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	6013      	str	r3, [r2, #0]
}
 800ab34:	bf00      	nop
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	200034a0 	.word	0x200034a0
 800ab40:	200034a4 	.word	0x200034a4

0800ab44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ab4a:	f000 f96b 	bl	800ae24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab4e:	4b15      	ldr	r3, [pc, #84]	; (800aba4 <prvCheckForValidListAndQueue+0x60>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d120      	bne.n	800ab98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab56:	4814      	ldr	r0, [pc, #80]	; (800aba8 <prvCheckForValidListAndQueue+0x64>)
 800ab58:	f7fd fd14 	bl	8008584 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab5c:	4813      	ldr	r0, [pc, #76]	; (800abac <prvCheckForValidListAndQueue+0x68>)
 800ab5e:	f7fd fd11 	bl	8008584 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab62:	4b13      	ldr	r3, [pc, #76]	; (800abb0 <prvCheckForValidListAndQueue+0x6c>)
 800ab64:	4a10      	ldr	r2, [pc, #64]	; (800aba8 <prvCheckForValidListAndQueue+0x64>)
 800ab66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab68:	4b12      	ldr	r3, [pc, #72]	; (800abb4 <prvCheckForValidListAndQueue+0x70>)
 800ab6a:	4a10      	ldr	r2, [pc, #64]	; (800abac <prvCheckForValidListAndQueue+0x68>)
 800ab6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab6e:	2300      	movs	r3, #0
 800ab70:	9300      	str	r3, [sp, #0]
 800ab72:	4b11      	ldr	r3, [pc, #68]	; (800abb8 <prvCheckForValidListAndQueue+0x74>)
 800ab74:	4a11      	ldr	r2, [pc, #68]	; (800abbc <prvCheckForValidListAndQueue+0x78>)
 800ab76:	2110      	movs	r1, #16
 800ab78:	200a      	movs	r0, #10
 800ab7a:	f7fd fe1f 	bl	80087bc <xQueueGenericCreateStatic>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	4a08      	ldr	r2, [pc, #32]	; (800aba4 <prvCheckForValidListAndQueue+0x60>)
 800ab82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab84:	4b07      	ldr	r3, [pc, #28]	; (800aba4 <prvCheckForValidListAndQueue+0x60>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d005      	beq.n	800ab98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab8c:	4b05      	ldr	r3, [pc, #20]	; (800aba4 <prvCheckForValidListAndQueue+0x60>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	490b      	ldr	r1, [pc, #44]	; (800abc0 <prvCheckForValidListAndQueue+0x7c>)
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fe fc22 	bl	80093dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab98:	f000 f974 	bl	800ae84 <vPortExitCritical>
}
 800ab9c:	bf00      	nop
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	200034a8 	.word	0x200034a8
 800aba8:	20003478 	.word	0x20003478
 800abac:	2000348c 	.word	0x2000348c
 800abb0:	200034a0 	.word	0x200034a0
 800abb4:	200034a4 	.word	0x200034a4
 800abb8:	20003554 	.word	0x20003554
 800abbc:	200034b4 	.word	0x200034b4
 800abc0:	0800c3fc 	.word	0x0800c3fc

0800abc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	3b04      	subs	r3, #4
 800abd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800abdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	3b04      	subs	r3, #4
 800abe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	f023 0201 	bic.w	r2, r3, #1
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3b04      	subs	r3, #4
 800abf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800abf4:	4a0c      	ldr	r2, [pc, #48]	; (800ac28 <pxPortInitialiseStack+0x64>)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	3b14      	subs	r3, #20
 800abfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	3b04      	subs	r3, #4
 800ac0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f06f 0202 	mvn.w	r2, #2
 800ac12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	3b20      	subs	r3, #32
 800ac18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3714      	adds	r7, #20
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr
 800ac28:	0800ac2d 	.word	0x0800ac2d

0800ac2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b085      	sub	sp, #20
 800ac30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ac32:	2300      	movs	r3, #0
 800ac34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac36:	4b12      	ldr	r3, [pc, #72]	; (800ac80 <prvTaskExitError+0x54>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac3e:	d00a      	beq.n	800ac56 <prvTaskExitError+0x2a>
	__asm volatile
 800ac40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac44:	f383 8811 	msr	BASEPRI, r3
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	60fb      	str	r3, [r7, #12]
}
 800ac52:	bf00      	nop
 800ac54:	e7fe      	b.n	800ac54 <prvTaskExitError+0x28>
	__asm volatile
 800ac56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5a:	f383 8811 	msr	BASEPRI, r3
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	60bb      	str	r3, [r7, #8]
}
 800ac68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac6a:	bf00      	nop
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d0fc      	beq.n	800ac6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac72:	bf00      	nop
 800ac74:	bf00      	nop
 800ac76:	3714      	adds	r7, #20
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	20000358 	.word	0x20000358
	...

0800ac90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac90:	4b07      	ldr	r3, [pc, #28]	; (800acb0 <pxCurrentTCBConst2>)
 800ac92:	6819      	ldr	r1, [r3, #0]
 800ac94:	6808      	ldr	r0, [r1, #0]
 800ac96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9a:	f380 8809 	msr	PSP, r0
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f04f 0000 	mov.w	r0, #0
 800aca6:	f380 8811 	msr	BASEPRI, r0
 800acaa:	4770      	bx	lr
 800acac:	f3af 8000 	nop.w

0800acb0 <pxCurrentTCBConst2>:
 800acb0:	20002f70 	.word	0x20002f70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800acb4:	bf00      	nop
 800acb6:	bf00      	nop

0800acb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800acb8:	4808      	ldr	r0, [pc, #32]	; (800acdc <prvPortStartFirstTask+0x24>)
 800acba:	6800      	ldr	r0, [r0, #0]
 800acbc:	6800      	ldr	r0, [r0, #0]
 800acbe:	f380 8808 	msr	MSP, r0
 800acc2:	f04f 0000 	mov.w	r0, #0
 800acc6:	f380 8814 	msr	CONTROL, r0
 800acca:	b662      	cpsie	i
 800accc:	b661      	cpsie	f
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	df00      	svc	0
 800acd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800acda:	bf00      	nop
 800acdc:	e000ed08 	.word	0xe000ed08

0800ace0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ace6:	4b46      	ldr	r3, [pc, #280]	; (800ae00 <xPortStartScheduler+0x120>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a46      	ldr	r2, [pc, #280]	; (800ae04 <xPortStartScheduler+0x124>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d10a      	bne.n	800ad06 <xPortStartScheduler+0x26>
	__asm volatile
 800acf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	613b      	str	r3, [r7, #16]
}
 800ad02:	bf00      	nop
 800ad04:	e7fe      	b.n	800ad04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad06:	4b3e      	ldr	r3, [pc, #248]	; (800ae00 <xPortStartScheduler+0x120>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a3f      	ldr	r2, [pc, #252]	; (800ae08 <xPortStartScheduler+0x128>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d10a      	bne.n	800ad26 <xPortStartScheduler+0x46>
	__asm volatile
 800ad10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	60fb      	str	r3, [r7, #12]
}
 800ad22:	bf00      	nop
 800ad24:	e7fe      	b.n	800ad24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad26:	4b39      	ldr	r3, [pc, #228]	; (800ae0c <xPortStartScheduler+0x12c>)
 800ad28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	22ff      	movs	r2, #255	; 0xff
 800ad36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad40:	78fb      	ldrb	r3, [r7, #3]
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	4b31      	ldr	r3, [pc, #196]	; (800ae10 <xPortStartScheduler+0x130>)
 800ad4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad4e:	4b31      	ldr	r3, [pc, #196]	; (800ae14 <xPortStartScheduler+0x134>)
 800ad50:	2207      	movs	r2, #7
 800ad52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad54:	e009      	b.n	800ad6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ad56:	4b2f      	ldr	r3, [pc, #188]	; (800ae14 <xPortStartScheduler+0x134>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	3b01      	subs	r3, #1
 800ad5c:	4a2d      	ldr	r2, [pc, #180]	; (800ae14 <xPortStartScheduler+0x134>)
 800ad5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad60:	78fb      	ldrb	r3, [r7, #3]
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	005b      	lsls	r3, r3, #1
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad6a:	78fb      	ldrb	r3, [r7, #3]
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad72:	2b80      	cmp	r3, #128	; 0x80
 800ad74:	d0ef      	beq.n	800ad56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad76:	4b27      	ldr	r3, [pc, #156]	; (800ae14 <xPortStartScheduler+0x134>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f1c3 0307 	rsb	r3, r3, #7
 800ad7e:	2b04      	cmp	r3, #4
 800ad80:	d00a      	beq.n	800ad98 <xPortStartScheduler+0xb8>
	__asm volatile
 800ad82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad86:	f383 8811 	msr	BASEPRI, r3
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	60bb      	str	r3, [r7, #8]
}
 800ad94:	bf00      	nop
 800ad96:	e7fe      	b.n	800ad96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad98:	4b1e      	ldr	r3, [pc, #120]	; (800ae14 <xPortStartScheduler+0x134>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	021b      	lsls	r3, r3, #8
 800ad9e:	4a1d      	ldr	r2, [pc, #116]	; (800ae14 <xPortStartScheduler+0x134>)
 800ada0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ada2:	4b1c      	ldr	r3, [pc, #112]	; (800ae14 <xPortStartScheduler+0x134>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800adaa:	4a1a      	ldr	r2, [pc, #104]	; (800ae14 <xPortStartScheduler+0x134>)
 800adac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	b2da      	uxtb	r2, r3
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800adb6:	4b18      	ldr	r3, [pc, #96]	; (800ae18 <xPortStartScheduler+0x138>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a17      	ldr	r2, [pc, #92]	; (800ae18 <xPortStartScheduler+0x138>)
 800adbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800adc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800adc2:	4b15      	ldr	r3, [pc, #84]	; (800ae18 <xPortStartScheduler+0x138>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a14      	ldr	r2, [pc, #80]	; (800ae18 <xPortStartScheduler+0x138>)
 800adc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800adcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800adce:	f000 f8dd 	bl	800af8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800add2:	4b12      	ldr	r3, [pc, #72]	; (800ae1c <xPortStartScheduler+0x13c>)
 800add4:	2200      	movs	r2, #0
 800add6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800add8:	f000 f8fc 	bl	800afd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800addc:	4b10      	ldr	r3, [pc, #64]	; (800ae20 <xPortStartScheduler+0x140>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a0f      	ldr	r2, [pc, #60]	; (800ae20 <xPortStartScheduler+0x140>)
 800ade2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ade6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ade8:	f7ff ff66 	bl	800acb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800adec:	f7fe ff2c 	bl	8009c48 <vTaskSwitchContext>
	prvTaskExitError();
 800adf0:	f7ff ff1c 	bl	800ac2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800adf4:	2300      	movs	r3, #0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3718      	adds	r7, #24
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	e000ed00 	.word	0xe000ed00
 800ae04:	410fc271 	.word	0x410fc271
 800ae08:	410fc270 	.word	0x410fc270
 800ae0c:	e000e400 	.word	0xe000e400
 800ae10:	200035a4 	.word	0x200035a4
 800ae14:	200035a8 	.word	0x200035a8
 800ae18:	e000ed20 	.word	0xe000ed20
 800ae1c:	20000358 	.word	0x20000358
 800ae20:	e000ef34 	.word	0xe000ef34

0800ae24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
	__asm volatile
 800ae2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2e:	f383 8811 	msr	BASEPRI, r3
 800ae32:	f3bf 8f6f 	isb	sy
 800ae36:	f3bf 8f4f 	dsb	sy
 800ae3a:	607b      	str	r3, [r7, #4]
}
 800ae3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae3e:	4b0f      	ldr	r3, [pc, #60]	; (800ae7c <vPortEnterCritical+0x58>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	3301      	adds	r3, #1
 800ae44:	4a0d      	ldr	r2, [pc, #52]	; (800ae7c <vPortEnterCritical+0x58>)
 800ae46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae48:	4b0c      	ldr	r3, [pc, #48]	; (800ae7c <vPortEnterCritical+0x58>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d10f      	bne.n	800ae70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae50:	4b0b      	ldr	r3, [pc, #44]	; (800ae80 <vPortEnterCritical+0x5c>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00a      	beq.n	800ae70 <vPortEnterCritical+0x4c>
	__asm volatile
 800ae5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5e:	f383 8811 	msr	BASEPRI, r3
 800ae62:	f3bf 8f6f 	isb	sy
 800ae66:	f3bf 8f4f 	dsb	sy
 800ae6a:	603b      	str	r3, [r7, #0]
}
 800ae6c:	bf00      	nop
 800ae6e:	e7fe      	b.n	800ae6e <vPortEnterCritical+0x4a>
	}
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	20000358 	.word	0x20000358
 800ae80:	e000ed04 	.word	0xe000ed04

0800ae84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae8a:	4b12      	ldr	r3, [pc, #72]	; (800aed4 <vPortExitCritical+0x50>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10a      	bne.n	800aea8 <vPortExitCritical+0x24>
	__asm volatile
 800ae92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae96:	f383 8811 	msr	BASEPRI, r3
 800ae9a:	f3bf 8f6f 	isb	sy
 800ae9e:	f3bf 8f4f 	dsb	sy
 800aea2:	607b      	str	r3, [r7, #4]
}
 800aea4:	bf00      	nop
 800aea6:	e7fe      	b.n	800aea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aea8:	4b0a      	ldr	r3, [pc, #40]	; (800aed4 <vPortExitCritical+0x50>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	3b01      	subs	r3, #1
 800aeae:	4a09      	ldr	r2, [pc, #36]	; (800aed4 <vPortExitCritical+0x50>)
 800aeb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aeb2:	4b08      	ldr	r3, [pc, #32]	; (800aed4 <vPortExitCritical+0x50>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d105      	bne.n	800aec6 <vPortExitCritical+0x42>
 800aeba:	2300      	movs	r3, #0
 800aebc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	f383 8811 	msr	BASEPRI, r3
}
 800aec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aec6:	bf00      	nop
 800aec8:	370c      	adds	r7, #12
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	20000358 	.word	0x20000358
	...

0800aee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aee0:	f3ef 8009 	mrs	r0, PSP
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	4b15      	ldr	r3, [pc, #84]	; (800af40 <pxCurrentTCBConst>)
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	f01e 0f10 	tst.w	lr, #16
 800aef0:	bf08      	it	eq
 800aef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aefa:	6010      	str	r0, [r2, #0]
 800aefc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af04:	f380 8811 	msr	BASEPRI, r0
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	f3bf 8f6f 	isb	sy
 800af10:	f7fe fe9a 	bl	8009c48 <vTaskSwitchContext>
 800af14:	f04f 0000 	mov.w	r0, #0
 800af18:	f380 8811 	msr	BASEPRI, r0
 800af1c:	bc09      	pop	{r0, r3}
 800af1e:	6819      	ldr	r1, [r3, #0]
 800af20:	6808      	ldr	r0, [r1, #0]
 800af22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af26:	f01e 0f10 	tst.w	lr, #16
 800af2a:	bf08      	it	eq
 800af2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af30:	f380 8809 	msr	PSP, r0
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop
 800af3c:	f3af 8000 	nop.w

0800af40 <pxCurrentTCBConst>:
 800af40:	20002f70 	.word	0x20002f70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af44:	bf00      	nop
 800af46:	bf00      	nop

0800af48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
	__asm volatile
 800af4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af52:	f383 8811 	msr	BASEPRI, r3
 800af56:	f3bf 8f6f 	isb	sy
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	607b      	str	r3, [r7, #4]
}
 800af60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af62:	f7fe fdb7 	bl	8009ad4 <xTaskIncrementTick>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d003      	beq.n	800af74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af6c:	4b06      	ldr	r3, [pc, #24]	; (800af88 <xPortSysTickHandler+0x40>)
 800af6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af72:	601a      	str	r2, [r3, #0]
 800af74:	2300      	movs	r3, #0
 800af76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	f383 8811 	msr	BASEPRI, r3
}
 800af7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af80:	bf00      	nop
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	e000ed04 	.word	0xe000ed04

0800af8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af8c:	b480      	push	{r7}
 800af8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af90:	4b0b      	ldr	r3, [pc, #44]	; (800afc0 <vPortSetupTimerInterrupt+0x34>)
 800af92:	2200      	movs	r2, #0
 800af94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af96:	4b0b      	ldr	r3, [pc, #44]	; (800afc4 <vPortSetupTimerInterrupt+0x38>)
 800af98:	2200      	movs	r2, #0
 800af9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af9c:	4b0a      	ldr	r3, [pc, #40]	; (800afc8 <vPortSetupTimerInterrupt+0x3c>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a0a      	ldr	r2, [pc, #40]	; (800afcc <vPortSetupTimerInterrupt+0x40>)
 800afa2:	fba2 2303 	umull	r2, r3, r2, r3
 800afa6:	099b      	lsrs	r3, r3, #6
 800afa8:	4a09      	ldr	r2, [pc, #36]	; (800afd0 <vPortSetupTimerInterrupt+0x44>)
 800afaa:	3b01      	subs	r3, #1
 800afac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800afae:	4b04      	ldr	r3, [pc, #16]	; (800afc0 <vPortSetupTimerInterrupt+0x34>)
 800afb0:	2207      	movs	r2, #7
 800afb2:	601a      	str	r2, [r3, #0]
}
 800afb4:	bf00      	nop
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	e000e010 	.word	0xe000e010
 800afc4:	e000e018 	.word	0xe000e018
 800afc8:	20000344 	.word	0x20000344
 800afcc:	10624dd3 	.word	0x10624dd3
 800afd0:	e000e014 	.word	0xe000e014

0800afd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800afd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800afe4 <vPortEnableVFP+0x10>
 800afd8:	6801      	ldr	r1, [r0, #0]
 800afda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800afde:	6001      	str	r1, [r0, #0]
 800afe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800afe2:	bf00      	nop
 800afe4:	e000ed88 	.word	0xe000ed88

0800afe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800afe8:	b480      	push	{r7}
 800afea:	b085      	sub	sp, #20
 800afec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800afee:	f3ef 8305 	mrs	r3, IPSR
 800aff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2b0f      	cmp	r3, #15
 800aff8:	d914      	bls.n	800b024 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800affa:	4a17      	ldr	r2, [pc, #92]	; (800b058 <vPortValidateInterruptPriority+0x70>)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	4413      	add	r3, r2
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b004:	4b15      	ldr	r3, [pc, #84]	; (800b05c <vPortValidateInterruptPriority+0x74>)
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	7afa      	ldrb	r2, [r7, #11]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d20a      	bcs.n	800b024 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	607b      	str	r3, [r7, #4]
}
 800b020:	bf00      	nop
 800b022:	e7fe      	b.n	800b022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b024:	4b0e      	ldr	r3, [pc, #56]	; (800b060 <vPortValidateInterruptPriority+0x78>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b02c:	4b0d      	ldr	r3, [pc, #52]	; (800b064 <vPortValidateInterruptPriority+0x7c>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	429a      	cmp	r2, r3
 800b032:	d90a      	bls.n	800b04a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b038:	f383 8811 	msr	BASEPRI, r3
 800b03c:	f3bf 8f6f 	isb	sy
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	603b      	str	r3, [r7, #0]
}
 800b046:	bf00      	nop
 800b048:	e7fe      	b.n	800b048 <vPortValidateInterruptPriority+0x60>
	}
 800b04a:	bf00      	nop
 800b04c:	3714      	adds	r7, #20
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop
 800b058:	e000e3f0 	.word	0xe000e3f0
 800b05c:	200035a4 	.word	0x200035a4
 800b060:	e000ed0c 	.word	0xe000ed0c
 800b064:	200035a8 	.word	0x200035a8

0800b068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b08a      	sub	sp, #40	; 0x28
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b070:	2300      	movs	r3, #0
 800b072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b074:	f7fe fc72 	bl	800995c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b078:	4b5b      	ldr	r3, [pc, #364]	; (800b1e8 <pvPortMalloc+0x180>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d101      	bne.n	800b084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b080:	f000 f920 	bl	800b2c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b084:	4b59      	ldr	r3, [pc, #356]	; (800b1ec <pvPortMalloc+0x184>)
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4013      	ands	r3, r2
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f040 8093 	bne.w	800b1b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d01d      	beq.n	800b0d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b098:	2208      	movs	r2, #8
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4413      	add	r3, r2
 800b09e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f003 0307 	and.w	r3, r3, #7
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d014      	beq.n	800b0d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f023 0307 	bic.w	r3, r3, #7
 800b0b0:	3308      	adds	r3, #8
 800b0b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f003 0307 	and.w	r3, r3, #7
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00a      	beq.n	800b0d4 <pvPortMalloc+0x6c>
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	617b      	str	r3, [r7, #20]
}
 800b0d0:	bf00      	nop
 800b0d2:	e7fe      	b.n	800b0d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d06e      	beq.n	800b1b8 <pvPortMalloc+0x150>
 800b0da:	4b45      	ldr	r3, [pc, #276]	; (800b1f0 <pvPortMalloc+0x188>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d869      	bhi.n	800b1b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b0e4:	4b43      	ldr	r3, [pc, #268]	; (800b1f4 <pvPortMalloc+0x18c>)
 800b0e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b0e8:	4b42      	ldr	r3, [pc, #264]	; (800b1f4 <pvPortMalloc+0x18c>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0ee:	e004      	b.n	800b0fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	429a      	cmp	r2, r3
 800b102:	d903      	bls.n	800b10c <pvPortMalloc+0xa4>
 800b104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1f1      	bne.n	800b0f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b10c:	4b36      	ldr	r3, [pc, #216]	; (800b1e8 <pvPortMalloc+0x180>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b112:	429a      	cmp	r2, r3
 800b114:	d050      	beq.n	800b1b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b116:	6a3b      	ldr	r3, [r7, #32]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2208      	movs	r2, #8
 800b11c:	4413      	add	r3, r2
 800b11e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	6a3b      	ldr	r3, [r7, #32]
 800b126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12a:	685a      	ldr	r2, [r3, #4]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	1ad2      	subs	r2, r2, r3
 800b130:	2308      	movs	r3, #8
 800b132:	005b      	lsls	r3, r3, #1
 800b134:	429a      	cmp	r2, r3
 800b136:	d91f      	bls.n	800b178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4413      	add	r3, r2
 800b13e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	f003 0307 	and.w	r3, r3, #7
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00a      	beq.n	800b160 <pvPortMalloc+0xf8>
	__asm volatile
 800b14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14e:	f383 8811 	msr	BASEPRI, r3
 800b152:	f3bf 8f6f 	isb	sy
 800b156:	f3bf 8f4f 	dsb	sy
 800b15a:	613b      	str	r3, [r7, #16]
}
 800b15c:	bf00      	nop
 800b15e:	e7fe      	b.n	800b15e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b162:	685a      	ldr	r2, [r3, #4]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	1ad2      	subs	r2, r2, r3
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b172:	69b8      	ldr	r0, [r7, #24]
 800b174:	f000 f908 	bl	800b388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b178:	4b1d      	ldr	r3, [pc, #116]	; (800b1f0 <pvPortMalloc+0x188>)
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	4a1b      	ldr	r2, [pc, #108]	; (800b1f0 <pvPortMalloc+0x188>)
 800b184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b186:	4b1a      	ldr	r3, [pc, #104]	; (800b1f0 <pvPortMalloc+0x188>)
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	4b1b      	ldr	r3, [pc, #108]	; (800b1f8 <pvPortMalloc+0x190>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d203      	bcs.n	800b19a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b192:	4b17      	ldr	r3, [pc, #92]	; (800b1f0 <pvPortMalloc+0x188>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a18      	ldr	r2, [pc, #96]	; (800b1f8 <pvPortMalloc+0x190>)
 800b198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19c:	685a      	ldr	r2, [r3, #4]
 800b19e:	4b13      	ldr	r3, [pc, #76]	; (800b1ec <pvPortMalloc+0x184>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	431a      	orrs	r2, r3
 800b1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b1ae:	4b13      	ldr	r3, [pc, #76]	; (800b1fc <pvPortMalloc+0x194>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	4a11      	ldr	r2, [pc, #68]	; (800b1fc <pvPortMalloc+0x194>)
 800b1b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b1b8:	f7fe fbde 	bl	8009978 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	f003 0307 	and.w	r3, r3, #7
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00a      	beq.n	800b1dc <pvPortMalloc+0x174>
	__asm volatile
 800b1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ca:	f383 8811 	msr	BASEPRI, r3
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	60fb      	str	r3, [r7, #12]
}
 800b1d8:	bf00      	nop
 800b1da:	e7fe      	b.n	800b1da <pvPortMalloc+0x172>
	return pvReturn;
 800b1dc:	69fb      	ldr	r3, [r7, #28]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3728      	adds	r7, #40	; 0x28
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	2000416c 	.word	0x2000416c
 800b1ec:	20004180 	.word	0x20004180
 800b1f0:	20004170 	.word	0x20004170
 800b1f4:	20004164 	.word	0x20004164
 800b1f8:	20004174 	.word	0x20004174
 800b1fc:	20004178 	.word	0x20004178

0800b200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d04d      	beq.n	800b2ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b212:	2308      	movs	r3, #8
 800b214:	425b      	negs	r3, r3
 800b216:	697a      	ldr	r2, [r7, #20]
 800b218:	4413      	add	r3, r2
 800b21a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	685a      	ldr	r2, [r3, #4]
 800b224:	4b24      	ldr	r3, [pc, #144]	; (800b2b8 <vPortFree+0xb8>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4013      	ands	r3, r2
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d10a      	bne.n	800b244 <vPortFree+0x44>
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	60fb      	str	r3, [r7, #12]
}
 800b240:	bf00      	nop
 800b242:	e7fe      	b.n	800b242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d00a      	beq.n	800b262 <vPortFree+0x62>
	__asm volatile
 800b24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b250:	f383 8811 	msr	BASEPRI, r3
 800b254:	f3bf 8f6f 	isb	sy
 800b258:	f3bf 8f4f 	dsb	sy
 800b25c:	60bb      	str	r3, [r7, #8]
}
 800b25e:	bf00      	nop
 800b260:	e7fe      	b.n	800b260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	685a      	ldr	r2, [r3, #4]
 800b266:	4b14      	ldr	r3, [pc, #80]	; (800b2b8 <vPortFree+0xb8>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4013      	ands	r3, r2
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d01e      	beq.n	800b2ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d11a      	bne.n	800b2ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	4b0e      	ldr	r3, [pc, #56]	; (800b2b8 <vPortFree+0xb8>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	43db      	mvns	r3, r3
 800b282:	401a      	ands	r2, r3
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b288:	f7fe fb68 	bl	800995c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	685a      	ldr	r2, [r3, #4]
 800b290:	4b0a      	ldr	r3, [pc, #40]	; (800b2bc <vPortFree+0xbc>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4413      	add	r3, r2
 800b296:	4a09      	ldr	r2, [pc, #36]	; (800b2bc <vPortFree+0xbc>)
 800b298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b29a:	6938      	ldr	r0, [r7, #16]
 800b29c:	f000 f874 	bl	800b388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b2a0:	4b07      	ldr	r3, [pc, #28]	; (800b2c0 <vPortFree+0xc0>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	4a06      	ldr	r2, [pc, #24]	; (800b2c0 <vPortFree+0xc0>)
 800b2a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b2aa:	f7fe fb65 	bl	8009978 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b2ae:	bf00      	nop
 800b2b0:	3718      	adds	r7, #24
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	20004180 	.word	0x20004180
 800b2bc:	20004170 	.word	0x20004170
 800b2c0:	2000417c 	.word	0x2000417c

0800b2c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b2ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800b2ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b2d0:	4b27      	ldr	r3, [pc, #156]	; (800b370 <prvHeapInit+0xac>)
 800b2d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f003 0307 	and.w	r3, r3, #7
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00c      	beq.n	800b2f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	3307      	adds	r3, #7
 800b2e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f023 0307 	bic.w	r3, r3, #7
 800b2ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b2ec:	68ba      	ldr	r2, [r7, #8]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	4a1f      	ldr	r2, [pc, #124]	; (800b370 <prvHeapInit+0xac>)
 800b2f4:	4413      	add	r3, r2
 800b2f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b2fc:	4a1d      	ldr	r2, [pc, #116]	; (800b374 <prvHeapInit+0xb0>)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b302:	4b1c      	ldr	r3, [pc, #112]	; (800b374 <prvHeapInit+0xb0>)
 800b304:	2200      	movs	r2, #0
 800b306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	68ba      	ldr	r2, [r7, #8]
 800b30c:	4413      	add	r3, r2
 800b30e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b310:	2208      	movs	r2, #8
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	1a9b      	subs	r3, r3, r2
 800b316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f023 0307 	bic.w	r3, r3, #7
 800b31e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	4a15      	ldr	r2, [pc, #84]	; (800b378 <prvHeapInit+0xb4>)
 800b324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b326:	4b14      	ldr	r3, [pc, #80]	; (800b378 <prvHeapInit+0xb4>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2200      	movs	r2, #0
 800b32c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b32e:	4b12      	ldr	r3, [pc, #72]	; (800b378 <prvHeapInit+0xb4>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2200      	movs	r2, #0
 800b334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	1ad2      	subs	r2, r2, r3
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b344:	4b0c      	ldr	r3, [pc, #48]	; (800b378 <prvHeapInit+0xb4>)
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	4a0a      	ldr	r2, [pc, #40]	; (800b37c <prvHeapInit+0xb8>)
 800b352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	4a09      	ldr	r2, [pc, #36]	; (800b380 <prvHeapInit+0xbc>)
 800b35a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b35c:	4b09      	ldr	r3, [pc, #36]	; (800b384 <prvHeapInit+0xc0>)
 800b35e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b362:	601a      	str	r2, [r3, #0]
}
 800b364:	bf00      	nop
 800b366:	3714      	adds	r7, #20
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr
 800b370:	200035ac 	.word	0x200035ac
 800b374:	20004164 	.word	0x20004164
 800b378:	2000416c 	.word	0x2000416c
 800b37c:	20004174 	.word	0x20004174
 800b380:	20004170 	.word	0x20004170
 800b384:	20004180 	.word	0x20004180

0800b388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b390:	4b28      	ldr	r3, [pc, #160]	; (800b434 <prvInsertBlockIntoFreeList+0xac>)
 800b392:	60fb      	str	r3, [r7, #12]
 800b394:	e002      	b.n	800b39c <prvInsertBlockIntoFreeList+0x14>
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	60fb      	str	r3, [r7, #12]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d8f7      	bhi.n	800b396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	68ba      	ldr	r2, [r7, #8]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d108      	bne.n	800b3ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	685a      	ldr	r2, [r3, #4]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	441a      	add	r2, r3
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	441a      	add	r2, r3
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d118      	bne.n	800b410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	4b15      	ldr	r3, [pc, #84]	; (800b438 <prvInsertBlockIntoFreeList+0xb0>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d00d      	beq.n	800b406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	685a      	ldr	r2, [r3, #4]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	441a      	add	r2, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	e008      	b.n	800b418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b406:	4b0c      	ldr	r3, [pc, #48]	; (800b438 <prvInsertBlockIntoFreeList+0xb0>)
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	e003      	b.n	800b418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d002      	beq.n	800b426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b426:	bf00      	nop
 800b428:	3714      	adds	r7, #20
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	20004164 	.word	0x20004164
 800b438:	2000416c 	.word	0x2000416c

0800b43c <_strtol_l.constprop.0>:
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b442:	d001      	beq.n	800b448 <_strtol_l.constprop.0+0xc>
 800b444:	2b24      	cmp	r3, #36	; 0x24
 800b446:	d906      	bls.n	800b456 <_strtol_l.constprop.0+0x1a>
 800b448:	f000 f91c 	bl	800b684 <__errno>
 800b44c:	2316      	movs	r3, #22
 800b44e:	6003      	str	r3, [r0, #0]
 800b450:	2000      	movs	r0, #0
 800b452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b456:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b53c <_strtol_l.constprop.0+0x100>
 800b45a:	460d      	mov	r5, r1
 800b45c:	462e      	mov	r6, r5
 800b45e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b462:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b466:	f017 0708 	ands.w	r7, r7, #8
 800b46a:	d1f7      	bne.n	800b45c <_strtol_l.constprop.0+0x20>
 800b46c:	2c2d      	cmp	r4, #45	; 0x2d
 800b46e:	d132      	bne.n	800b4d6 <_strtol_l.constprop.0+0x9a>
 800b470:	782c      	ldrb	r4, [r5, #0]
 800b472:	2701      	movs	r7, #1
 800b474:	1cb5      	adds	r5, r6, #2
 800b476:	2b00      	cmp	r3, #0
 800b478:	d05b      	beq.n	800b532 <_strtol_l.constprop.0+0xf6>
 800b47a:	2b10      	cmp	r3, #16
 800b47c:	d109      	bne.n	800b492 <_strtol_l.constprop.0+0x56>
 800b47e:	2c30      	cmp	r4, #48	; 0x30
 800b480:	d107      	bne.n	800b492 <_strtol_l.constprop.0+0x56>
 800b482:	782c      	ldrb	r4, [r5, #0]
 800b484:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b488:	2c58      	cmp	r4, #88	; 0x58
 800b48a:	d14d      	bne.n	800b528 <_strtol_l.constprop.0+0xec>
 800b48c:	786c      	ldrb	r4, [r5, #1]
 800b48e:	2310      	movs	r3, #16
 800b490:	3502      	adds	r5, #2
 800b492:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b496:	f108 38ff 	add.w	r8, r8, #4294967295
 800b49a:	f04f 0e00 	mov.w	lr, #0
 800b49e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b4a2:	4676      	mov	r6, lr
 800b4a4:	fb03 8a19 	mls	sl, r3, r9, r8
 800b4a8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b4ac:	f1bc 0f09 	cmp.w	ip, #9
 800b4b0:	d816      	bhi.n	800b4e0 <_strtol_l.constprop.0+0xa4>
 800b4b2:	4664      	mov	r4, ip
 800b4b4:	42a3      	cmp	r3, r4
 800b4b6:	dd24      	ble.n	800b502 <_strtol_l.constprop.0+0xc6>
 800b4b8:	f1be 3fff 	cmp.w	lr, #4294967295
 800b4bc:	d008      	beq.n	800b4d0 <_strtol_l.constprop.0+0x94>
 800b4be:	45b1      	cmp	r9, r6
 800b4c0:	d31c      	bcc.n	800b4fc <_strtol_l.constprop.0+0xc0>
 800b4c2:	d101      	bne.n	800b4c8 <_strtol_l.constprop.0+0x8c>
 800b4c4:	45a2      	cmp	sl, r4
 800b4c6:	db19      	blt.n	800b4fc <_strtol_l.constprop.0+0xc0>
 800b4c8:	fb06 4603 	mla	r6, r6, r3, r4
 800b4cc:	f04f 0e01 	mov.w	lr, #1
 800b4d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4d4:	e7e8      	b.n	800b4a8 <_strtol_l.constprop.0+0x6c>
 800b4d6:	2c2b      	cmp	r4, #43	; 0x2b
 800b4d8:	bf04      	itt	eq
 800b4da:	782c      	ldrbeq	r4, [r5, #0]
 800b4dc:	1cb5      	addeq	r5, r6, #2
 800b4de:	e7ca      	b.n	800b476 <_strtol_l.constprop.0+0x3a>
 800b4e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b4e4:	f1bc 0f19 	cmp.w	ip, #25
 800b4e8:	d801      	bhi.n	800b4ee <_strtol_l.constprop.0+0xb2>
 800b4ea:	3c37      	subs	r4, #55	; 0x37
 800b4ec:	e7e2      	b.n	800b4b4 <_strtol_l.constprop.0+0x78>
 800b4ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b4f2:	f1bc 0f19 	cmp.w	ip, #25
 800b4f6:	d804      	bhi.n	800b502 <_strtol_l.constprop.0+0xc6>
 800b4f8:	3c57      	subs	r4, #87	; 0x57
 800b4fa:	e7db      	b.n	800b4b4 <_strtol_l.constprop.0+0x78>
 800b4fc:	f04f 3eff 	mov.w	lr, #4294967295
 800b500:	e7e6      	b.n	800b4d0 <_strtol_l.constprop.0+0x94>
 800b502:	f1be 3fff 	cmp.w	lr, #4294967295
 800b506:	d105      	bne.n	800b514 <_strtol_l.constprop.0+0xd8>
 800b508:	2322      	movs	r3, #34	; 0x22
 800b50a:	6003      	str	r3, [r0, #0]
 800b50c:	4646      	mov	r6, r8
 800b50e:	b942      	cbnz	r2, 800b522 <_strtol_l.constprop.0+0xe6>
 800b510:	4630      	mov	r0, r6
 800b512:	e79e      	b.n	800b452 <_strtol_l.constprop.0+0x16>
 800b514:	b107      	cbz	r7, 800b518 <_strtol_l.constprop.0+0xdc>
 800b516:	4276      	negs	r6, r6
 800b518:	2a00      	cmp	r2, #0
 800b51a:	d0f9      	beq.n	800b510 <_strtol_l.constprop.0+0xd4>
 800b51c:	f1be 0f00 	cmp.w	lr, #0
 800b520:	d000      	beq.n	800b524 <_strtol_l.constprop.0+0xe8>
 800b522:	1e69      	subs	r1, r5, #1
 800b524:	6011      	str	r1, [r2, #0]
 800b526:	e7f3      	b.n	800b510 <_strtol_l.constprop.0+0xd4>
 800b528:	2430      	movs	r4, #48	; 0x30
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1b1      	bne.n	800b492 <_strtol_l.constprop.0+0x56>
 800b52e:	2308      	movs	r3, #8
 800b530:	e7af      	b.n	800b492 <_strtol_l.constprop.0+0x56>
 800b532:	2c30      	cmp	r4, #48	; 0x30
 800b534:	d0a5      	beq.n	800b482 <_strtol_l.constprop.0+0x46>
 800b536:	230a      	movs	r3, #10
 800b538:	e7ab      	b.n	800b492 <_strtol_l.constprop.0+0x56>
 800b53a:	bf00      	nop
 800b53c:	0800c5a9 	.word	0x0800c5a9

0800b540 <strtol>:
 800b540:	4613      	mov	r3, r2
 800b542:	460a      	mov	r2, r1
 800b544:	4601      	mov	r1, r0
 800b546:	4802      	ldr	r0, [pc, #8]	; (800b550 <strtol+0x10>)
 800b548:	6800      	ldr	r0, [r0, #0]
 800b54a:	f7ff bf77 	b.w	800b43c <_strtol_l.constprop.0>
 800b54e:	bf00      	nop
 800b550:	200003a8 	.word	0x200003a8

0800b554 <_vsniprintf_r>:
 800b554:	b530      	push	{r4, r5, lr}
 800b556:	4614      	mov	r4, r2
 800b558:	2c00      	cmp	r4, #0
 800b55a:	b09b      	sub	sp, #108	; 0x6c
 800b55c:	4605      	mov	r5, r0
 800b55e:	461a      	mov	r2, r3
 800b560:	da05      	bge.n	800b56e <_vsniprintf_r+0x1a>
 800b562:	238b      	movs	r3, #139	; 0x8b
 800b564:	6003      	str	r3, [r0, #0]
 800b566:	f04f 30ff 	mov.w	r0, #4294967295
 800b56a:	b01b      	add	sp, #108	; 0x6c
 800b56c:	bd30      	pop	{r4, r5, pc}
 800b56e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b572:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b576:	bf14      	ite	ne
 800b578:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b57c:	4623      	moveq	r3, r4
 800b57e:	9302      	str	r3, [sp, #8]
 800b580:	9305      	str	r3, [sp, #20]
 800b582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b586:	9100      	str	r1, [sp, #0]
 800b588:	9104      	str	r1, [sp, #16]
 800b58a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b58e:	4669      	mov	r1, sp
 800b590:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b592:	f000 fa0b 	bl	800b9ac <_svfiprintf_r>
 800b596:	1c43      	adds	r3, r0, #1
 800b598:	bfbc      	itt	lt
 800b59a:	238b      	movlt	r3, #139	; 0x8b
 800b59c:	602b      	strlt	r3, [r5, #0]
 800b59e:	2c00      	cmp	r4, #0
 800b5a0:	d0e3      	beq.n	800b56a <_vsniprintf_r+0x16>
 800b5a2:	9b00      	ldr	r3, [sp, #0]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	701a      	strb	r2, [r3, #0]
 800b5a8:	e7df      	b.n	800b56a <_vsniprintf_r+0x16>
	...

0800b5ac <vsniprintf>:
 800b5ac:	b507      	push	{r0, r1, r2, lr}
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	460a      	mov	r2, r1
 800b5b4:	4601      	mov	r1, r0
 800b5b6:	4803      	ldr	r0, [pc, #12]	; (800b5c4 <vsniprintf+0x18>)
 800b5b8:	6800      	ldr	r0, [r0, #0]
 800b5ba:	f7ff ffcb 	bl	800b554 <_vsniprintf_r>
 800b5be:	b003      	add	sp, #12
 800b5c0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b5c4:	200003a8 	.word	0x200003a8

0800b5c8 <memset>:
 800b5c8:	4402      	add	r2, r0
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d100      	bne.n	800b5d2 <memset+0xa>
 800b5d0:	4770      	bx	lr
 800b5d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b5d6:	e7f9      	b.n	800b5cc <memset+0x4>

0800b5d8 <_reclaim_reent>:
 800b5d8:	4b29      	ldr	r3, [pc, #164]	; (800b680 <_reclaim_reent+0xa8>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4283      	cmp	r3, r0
 800b5de:	b570      	push	{r4, r5, r6, lr}
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	d04b      	beq.n	800b67c <_reclaim_reent+0xa4>
 800b5e4:	69c3      	ldr	r3, [r0, #28]
 800b5e6:	b143      	cbz	r3, 800b5fa <_reclaim_reent+0x22>
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d144      	bne.n	800b678 <_reclaim_reent+0xa0>
 800b5ee:	69e3      	ldr	r3, [r4, #28]
 800b5f0:	6819      	ldr	r1, [r3, #0]
 800b5f2:	b111      	cbz	r1, 800b5fa <_reclaim_reent+0x22>
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	f000 f887 	bl	800b708 <_free_r>
 800b5fa:	6961      	ldr	r1, [r4, #20]
 800b5fc:	b111      	cbz	r1, 800b604 <_reclaim_reent+0x2c>
 800b5fe:	4620      	mov	r0, r4
 800b600:	f000 f882 	bl	800b708 <_free_r>
 800b604:	69e1      	ldr	r1, [r4, #28]
 800b606:	b111      	cbz	r1, 800b60e <_reclaim_reent+0x36>
 800b608:	4620      	mov	r0, r4
 800b60a:	f000 f87d 	bl	800b708 <_free_r>
 800b60e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b610:	b111      	cbz	r1, 800b618 <_reclaim_reent+0x40>
 800b612:	4620      	mov	r0, r4
 800b614:	f000 f878 	bl	800b708 <_free_r>
 800b618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b61a:	b111      	cbz	r1, 800b622 <_reclaim_reent+0x4a>
 800b61c:	4620      	mov	r0, r4
 800b61e:	f000 f873 	bl	800b708 <_free_r>
 800b622:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b624:	b111      	cbz	r1, 800b62c <_reclaim_reent+0x54>
 800b626:	4620      	mov	r0, r4
 800b628:	f000 f86e 	bl	800b708 <_free_r>
 800b62c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b62e:	b111      	cbz	r1, 800b636 <_reclaim_reent+0x5e>
 800b630:	4620      	mov	r0, r4
 800b632:	f000 f869 	bl	800b708 <_free_r>
 800b636:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b638:	b111      	cbz	r1, 800b640 <_reclaim_reent+0x68>
 800b63a:	4620      	mov	r0, r4
 800b63c:	f000 f864 	bl	800b708 <_free_r>
 800b640:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b642:	b111      	cbz	r1, 800b64a <_reclaim_reent+0x72>
 800b644:	4620      	mov	r0, r4
 800b646:	f000 f85f 	bl	800b708 <_free_r>
 800b64a:	6a23      	ldr	r3, [r4, #32]
 800b64c:	b1b3      	cbz	r3, 800b67c <_reclaim_reent+0xa4>
 800b64e:	4620      	mov	r0, r4
 800b650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b654:	4718      	bx	r3
 800b656:	5949      	ldr	r1, [r1, r5]
 800b658:	b941      	cbnz	r1, 800b66c <_reclaim_reent+0x94>
 800b65a:	3504      	adds	r5, #4
 800b65c:	69e3      	ldr	r3, [r4, #28]
 800b65e:	2d80      	cmp	r5, #128	; 0x80
 800b660:	68d9      	ldr	r1, [r3, #12]
 800b662:	d1f8      	bne.n	800b656 <_reclaim_reent+0x7e>
 800b664:	4620      	mov	r0, r4
 800b666:	f000 f84f 	bl	800b708 <_free_r>
 800b66a:	e7c0      	b.n	800b5ee <_reclaim_reent+0x16>
 800b66c:	680e      	ldr	r6, [r1, #0]
 800b66e:	4620      	mov	r0, r4
 800b670:	f000 f84a 	bl	800b708 <_free_r>
 800b674:	4631      	mov	r1, r6
 800b676:	e7ef      	b.n	800b658 <_reclaim_reent+0x80>
 800b678:	2500      	movs	r5, #0
 800b67a:	e7ef      	b.n	800b65c <_reclaim_reent+0x84>
 800b67c:	bd70      	pop	{r4, r5, r6, pc}
 800b67e:	bf00      	nop
 800b680:	200003a8 	.word	0x200003a8

0800b684 <__errno>:
 800b684:	4b01      	ldr	r3, [pc, #4]	; (800b68c <__errno+0x8>)
 800b686:	6818      	ldr	r0, [r3, #0]
 800b688:	4770      	bx	lr
 800b68a:	bf00      	nop
 800b68c:	200003a8 	.word	0x200003a8

0800b690 <__libc_init_array>:
 800b690:	b570      	push	{r4, r5, r6, lr}
 800b692:	4d0d      	ldr	r5, [pc, #52]	; (800b6c8 <__libc_init_array+0x38>)
 800b694:	4c0d      	ldr	r4, [pc, #52]	; (800b6cc <__libc_init_array+0x3c>)
 800b696:	1b64      	subs	r4, r4, r5
 800b698:	10a4      	asrs	r4, r4, #2
 800b69a:	2600      	movs	r6, #0
 800b69c:	42a6      	cmp	r6, r4
 800b69e:	d109      	bne.n	800b6b4 <__libc_init_array+0x24>
 800b6a0:	4d0b      	ldr	r5, [pc, #44]	; (800b6d0 <__libc_init_array+0x40>)
 800b6a2:	4c0c      	ldr	r4, [pc, #48]	; (800b6d4 <__libc_init_array+0x44>)
 800b6a4:	f000 fcba 	bl	800c01c <_init>
 800b6a8:	1b64      	subs	r4, r4, r5
 800b6aa:	10a4      	asrs	r4, r4, #2
 800b6ac:	2600      	movs	r6, #0
 800b6ae:	42a6      	cmp	r6, r4
 800b6b0:	d105      	bne.n	800b6be <__libc_init_array+0x2e>
 800b6b2:	bd70      	pop	{r4, r5, r6, pc}
 800b6b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6b8:	4798      	blx	r3
 800b6ba:	3601      	adds	r6, #1
 800b6bc:	e7ee      	b.n	800b69c <__libc_init_array+0xc>
 800b6be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6c2:	4798      	blx	r3
 800b6c4:	3601      	adds	r6, #1
 800b6c6:	e7f2      	b.n	800b6ae <__libc_init_array+0x1e>
 800b6c8:	0800c6e4 	.word	0x0800c6e4
 800b6cc:	0800c6e4 	.word	0x0800c6e4
 800b6d0:	0800c6e4 	.word	0x0800c6e4
 800b6d4:	0800c6e8 	.word	0x0800c6e8

0800b6d8 <__retarget_lock_acquire_recursive>:
 800b6d8:	4770      	bx	lr

0800b6da <__retarget_lock_release_recursive>:
 800b6da:	4770      	bx	lr

0800b6dc <strcpy>:
 800b6dc:	4603      	mov	r3, r0
 800b6de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6e2:	f803 2b01 	strb.w	r2, [r3], #1
 800b6e6:	2a00      	cmp	r2, #0
 800b6e8:	d1f9      	bne.n	800b6de <strcpy+0x2>
 800b6ea:	4770      	bx	lr

0800b6ec <memcpy>:
 800b6ec:	440a      	add	r2, r1
 800b6ee:	4291      	cmp	r1, r2
 800b6f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6f4:	d100      	bne.n	800b6f8 <memcpy+0xc>
 800b6f6:	4770      	bx	lr
 800b6f8:	b510      	push	{r4, lr}
 800b6fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b702:	4291      	cmp	r1, r2
 800b704:	d1f9      	bne.n	800b6fa <memcpy+0xe>
 800b706:	bd10      	pop	{r4, pc}

0800b708 <_free_r>:
 800b708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b70a:	2900      	cmp	r1, #0
 800b70c:	d044      	beq.n	800b798 <_free_r+0x90>
 800b70e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b712:	9001      	str	r0, [sp, #4]
 800b714:	2b00      	cmp	r3, #0
 800b716:	f1a1 0404 	sub.w	r4, r1, #4
 800b71a:	bfb8      	it	lt
 800b71c:	18e4      	addlt	r4, r4, r3
 800b71e:	f000 f8df 	bl	800b8e0 <__malloc_lock>
 800b722:	4a1e      	ldr	r2, [pc, #120]	; (800b79c <_free_r+0x94>)
 800b724:	9801      	ldr	r0, [sp, #4]
 800b726:	6813      	ldr	r3, [r2, #0]
 800b728:	b933      	cbnz	r3, 800b738 <_free_r+0x30>
 800b72a:	6063      	str	r3, [r4, #4]
 800b72c:	6014      	str	r4, [r2, #0]
 800b72e:	b003      	add	sp, #12
 800b730:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b734:	f000 b8da 	b.w	800b8ec <__malloc_unlock>
 800b738:	42a3      	cmp	r3, r4
 800b73a:	d908      	bls.n	800b74e <_free_r+0x46>
 800b73c:	6825      	ldr	r5, [r4, #0]
 800b73e:	1961      	adds	r1, r4, r5
 800b740:	428b      	cmp	r3, r1
 800b742:	bf01      	itttt	eq
 800b744:	6819      	ldreq	r1, [r3, #0]
 800b746:	685b      	ldreq	r3, [r3, #4]
 800b748:	1949      	addeq	r1, r1, r5
 800b74a:	6021      	streq	r1, [r4, #0]
 800b74c:	e7ed      	b.n	800b72a <_free_r+0x22>
 800b74e:	461a      	mov	r2, r3
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	b10b      	cbz	r3, 800b758 <_free_r+0x50>
 800b754:	42a3      	cmp	r3, r4
 800b756:	d9fa      	bls.n	800b74e <_free_r+0x46>
 800b758:	6811      	ldr	r1, [r2, #0]
 800b75a:	1855      	adds	r5, r2, r1
 800b75c:	42a5      	cmp	r5, r4
 800b75e:	d10b      	bne.n	800b778 <_free_r+0x70>
 800b760:	6824      	ldr	r4, [r4, #0]
 800b762:	4421      	add	r1, r4
 800b764:	1854      	adds	r4, r2, r1
 800b766:	42a3      	cmp	r3, r4
 800b768:	6011      	str	r1, [r2, #0]
 800b76a:	d1e0      	bne.n	800b72e <_free_r+0x26>
 800b76c:	681c      	ldr	r4, [r3, #0]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	6053      	str	r3, [r2, #4]
 800b772:	440c      	add	r4, r1
 800b774:	6014      	str	r4, [r2, #0]
 800b776:	e7da      	b.n	800b72e <_free_r+0x26>
 800b778:	d902      	bls.n	800b780 <_free_r+0x78>
 800b77a:	230c      	movs	r3, #12
 800b77c:	6003      	str	r3, [r0, #0]
 800b77e:	e7d6      	b.n	800b72e <_free_r+0x26>
 800b780:	6825      	ldr	r5, [r4, #0]
 800b782:	1961      	adds	r1, r4, r5
 800b784:	428b      	cmp	r3, r1
 800b786:	bf04      	itt	eq
 800b788:	6819      	ldreq	r1, [r3, #0]
 800b78a:	685b      	ldreq	r3, [r3, #4]
 800b78c:	6063      	str	r3, [r4, #4]
 800b78e:	bf04      	itt	eq
 800b790:	1949      	addeq	r1, r1, r5
 800b792:	6021      	streq	r1, [r4, #0]
 800b794:	6054      	str	r4, [r2, #4]
 800b796:	e7ca      	b.n	800b72e <_free_r+0x26>
 800b798:	b003      	add	sp, #12
 800b79a:	bd30      	pop	{r4, r5, pc}
 800b79c:	200042c4 	.word	0x200042c4

0800b7a0 <sbrk_aligned>:
 800b7a0:	b570      	push	{r4, r5, r6, lr}
 800b7a2:	4e0e      	ldr	r6, [pc, #56]	; (800b7dc <sbrk_aligned+0x3c>)
 800b7a4:	460c      	mov	r4, r1
 800b7a6:	6831      	ldr	r1, [r6, #0]
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	b911      	cbnz	r1, 800b7b2 <sbrk_aligned+0x12>
 800b7ac:	f000 fba6 	bl	800befc <_sbrk_r>
 800b7b0:	6030      	str	r0, [r6, #0]
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	f000 fba1 	bl	800befc <_sbrk_r>
 800b7ba:	1c43      	adds	r3, r0, #1
 800b7bc:	d00a      	beq.n	800b7d4 <sbrk_aligned+0x34>
 800b7be:	1cc4      	adds	r4, r0, #3
 800b7c0:	f024 0403 	bic.w	r4, r4, #3
 800b7c4:	42a0      	cmp	r0, r4
 800b7c6:	d007      	beq.n	800b7d8 <sbrk_aligned+0x38>
 800b7c8:	1a21      	subs	r1, r4, r0
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	f000 fb96 	bl	800befc <_sbrk_r>
 800b7d0:	3001      	adds	r0, #1
 800b7d2:	d101      	bne.n	800b7d8 <sbrk_aligned+0x38>
 800b7d4:	f04f 34ff 	mov.w	r4, #4294967295
 800b7d8:	4620      	mov	r0, r4
 800b7da:	bd70      	pop	{r4, r5, r6, pc}
 800b7dc:	200042c8 	.word	0x200042c8

0800b7e0 <_malloc_r>:
 800b7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7e4:	1ccd      	adds	r5, r1, #3
 800b7e6:	f025 0503 	bic.w	r5, r5, #3
 800b7ea:	3508      	adds	r5, #8
 800b7ec:	2d0c      	cmp	r5, #12
 800b7ee:	bf38      	it	cc
 800b7f0:	250c      	movcc	r5, #12
 800b7f2:	2d00      	cmp	r5, #0
 800b7f4:	4607      	mov	r7, r0
 800b7f6:	db01      	blt.n	800b7fc <_malloc_r+0x1c>
 800b7f8:	42a9      	cmp	r1, r5
 800b7fa:	d905      	bls.n	800b808 <_malloc_r+0x28>
 800b7fc:	230c      	movs	r3, #12
 800b7fe:	603b      	str	r3, [r7, #0]
 800b800:	2600      	movs	r6, #0
 800b802:	4630      	mov	r0, r6
 800b804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b808:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b8dc <_malloc_r+0xfc>
 800b80c:	f000 f868 	bl	800b8e0 <__malloc_lock>
 800b810:	f8d8 3000 	ldr.w	r3, [r8]
 800b814:	461c      	mov	r4, r3
 800b816:	bb5c      	cbnz	r4, 800b870 <_malloc_r+0x90>
 800b818:	4629      	mov	r1, r5
 800b81a:	4638      	mov	r0, r7
 800b81c:	f7ff ffc0 	bl	800b7a0 <sbrk_aligned>
 800b820:	1c43      	adds	r3, r0, #1
 800b822:	4604      	mov	r4, r0
 800b824:	d155      	bne.n	800b8d2 <_malloc_r+0xf2>
 800b826:	f8d8 4000 	ldr.w	r4, [r8]
 800b82a:	4626      	mov	r6, r4
 800b82c:	2e00      	cmp	r6, #0
 800b82e:	d145      	bne.n	800b8bc <_malloc_r+0xdc>
 800b830:	2c00      	cmp	r4, #0
 800b832:	d048      	beq.n	800b8c6 <_malloc_r+0xe6>
 800b834:	6823      	ldr	r3, [r4, #0]
 800b836:	4631      	mov	r1, r6
 800b838:	4638      	mov	r0, r7
 800b83a:	eb04 0903 	add.w	r9, r4, r3
 800b83e:	f000 fb5d 	bl	800befc <_sbrk_r>
 800b842:	4581      	cmp	r9, r0
 800b844:	d13f      	bne.n	800b8c6 <_malloc_r+0xe6>
 800b846:	6821      	ldr	r1, [r4, #0]
 800b848:	1a6d      	subs	r5, r5, r1
 800b84a:	4629      	mov	r1, r5
 800b84c:	4638      	mov	r0, r7
 800b84e:	f7ff ffa7 	bl	800b7a0 <sbrk_aligned>
 800b852:	3001      	adds	r0, #1
 800b854:	d037      	beq.n	800b8c6 <_malloc_r+0xe6>
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	442b      	add	r3, r5
 800b85a:	6023      	str	r3, [r4, #0]
 800b85c:	f8d8 3000 	ldr.w	r3, [r8]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d038      	beq.n	800b8d6 <_malloc_r+0xf6>
 800b864:	685a      	ldr	r2, [r3, #4]
 800b866:	42a2      	cmp	r2, r4
 800b868:	d12b      	bne.n	800b8c2 <_malloc_r+0xe2>
 800b86a:	2200      	movs	r2, #0
 800b86c:	605a      	str	r2, [r3, #4]
 800b86e:	e00f      	b.n	800b890 <_malloc_r+0xb0>
 800b870:	6822      	ldr	r2, [r4, #0]
 800b872:	1b52      	subs	r2, r2, r5
 800b874:	d41f      	bmi.n	800b8b6 <_malloc_r+0xd6>
 800b876:	2a0b      	cmp	r2, #11
 800b878:	d917      	bls.n	800b8aa <_malloc_r+0xca>
 800b87a:	1961      	adds	r1, r4, r5
 800b87c:	42a3      	cmp	r3, r4
 800b87e:	6025      	str	r5, [r4, #0]
 800b880:	bf18      	it	ne
 800b882:	6059      	strne	r1, [r3, #4]
 800b884:	6863      	ldr	r3, [r4, #4]
 800b886:	bf08      	it	eq
 800b888:	f8c8 1000 	streq.w	r1, [r8]
 800b88c:	5162      	str	r2, [r4, r5]
 800b88e:	604b      	str	r3, [r1, #4]
 800b890:	4638      	mov	r0, r7
 800b892:	f104 060b 	add.w	r6, r4, #11
 800b896:	f000 f829 	bl	800b8ec <__malloc_unlock>
 800b89a:	f026 0607 	bic.w	r6, r6, #7
 800b89e:	1d23      	adds	r3, r4, #4
 800b8a0:	1af2      	subs	r2, r6, r3
 800b8a2:	d0ae      	beq.n	800b802 <_malloc_r+0x22>
 800b8a4:	1b9b      	subs	r3, r3, r6
 800b8a6:	50a3      	str	r3, [r4, r2]
 800b8a8:	e7ab      	b.n	800b802 <_malloc_r+0x22>
 800b8aa:	42a3      	cmp	r3, r4
 800b8ac:	6862      	ldr	r2, [r4, #4]
 800b8ae:	d1dd      	bne.n	800b86c <_malloc_r+0x8c>
 800b8b0:	f8c8 2000 	str.w	r2, [r8]
 800b8b4:	e7ec      	b.n	800b890 <_malloc_r+0xb0>
 800b8b6:	4623      	mov	r3, r4
 800b8b8:	6864      	ldr	r4, [r4, #4]
 800b8ba:	e7ac      	b.n	800b816 <_malloc_r+0x36>
 800b8bc:	4634      	mov	r4, r6
 800b8be:	6876      	ldr	r6, [r6, #4]
 800b8c0:	e7b4      	b.n	800b82c <_malloc_r+0x4c>
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	e7cc      	b.n	800b860 <_malloc_r+0x80>
 800b8c6:	230c      	movs	r3, #12
 800b8c8:	603b      	str	r3, [r7, #0]
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	f000 f80e 	bl	800b8ec <__malloc_unlock>
 800b8d0:	e797      	b.n	800b802 <_malloc_r+0x22>
 800b8d2:	6025      	str	r5, [r4, #0]
 800b8d4:	e7dc      	b.n	800b890 <_malloc_r+0xb0>
 800b8d6:	605b      	str	r3, [r3, #4]
 800b8d8:	deff      	udf	#255	; 0xff
 800b8da:	bf00      	nop
 800b8dc:	200042c4 	.word	0x200042c4

0800b8e0 <__malloc_lock>:
 800b8e0:	4801      	ldr	r0, [pc, #4]	; (800b8e8 <__malloc_lock+0x8>)
 800b8e2:	f7ff bef9 	b.w	800b6d8 <__retarget_lock_acquire_recursive>
 800b8e6:	bf00      	nop
 800b8e8:	200042c0 	.word	0x200042c0

0800b8ec <__malloc_unlock>:
 800b8ec:	4801      	ldr	r0, [pc, #4]	; (800b8f4 <__malloc_unlock+0x8>)
 800b8ee:	f7ff bef4 	b.w	800b6da <__retarget_lock_release_recursive>
 800b8f2:	bf00      	nop
 800b8f4:	200042c0 	.word	0x200042c0

0800b8f8 <__ssputs_r>:
 800b8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8fc:	688e      	ldr	r6, [r1, #8]
 800b8fe:	461f      	mov	r7, r3
 800b900:	42be      	cmp	r6, r7
 800b902:	680b      	ldr	r3, [r1, #0]
 800b904:	4682      	mov	sl, r0
 800b906:	460c      	mov	r4, r1
 800b908:	4690      	mov	r8, r2
 800b90a:	d82c      	bhi.n	800b966 <__ssputs_r+0x6e>
 800b90c:	898a      	ldrh	r2, [r1, #12]
 800b90e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b912:	d026      	beq.n	800b962 <__ssputs_r+0x6a>
 800b914:	6965      	ldr	r5, [r4, #20]
 800b916:	6909      	ldr	r1, [r1, #16]
 800b918:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b91c:	eba3 0901 	sub.w	r9, r3, r1
 800b920:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b924:	1c7b      	adds	r3, r7, #1
 800b926:	444b      	add	r3, r9
 800b928:	106d      	asrs	r5, r5, #1
 800b92a:	429d      	cmp	r5, r3
 800b92c:	bf38      	it	cc
 800b92e:	461d      	movcc	r5, r3
 800b930:	0553      	lsls	r3, r2, #21
 800b932:	d527      	bpl.n	800b984 <__ssputs_r+0x8c>
 800b934:	4629      	mov	r1, r5
 800b936:	f7ff ff53 	bl	800b7e0 <_malloc_r>
 800b93a:	4606      	mov	r6, r0
 800b93c:	b360      	cbz	r0, 800b998 <__ssputs_r+0xa0>
 800b93e:	6921      	ldr	r1, [r4, #16]
 800b940:	464a      	mov	r2, r9
 800b942:	f7ff fed3 	bl	800b6ec <memcpy>
 800b946:	89a3      	ldrh	r3, [r4, #12]
 800b948:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b94c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b950:	81a3      	strh	r3, [r4, #12]
 800b952:	6126      	str	r6, [r4, #16]
 800b954:	6165      	str	r5, [r4, #20]
 800b956:	444e      	add	r6, r9
 800b958:	eba5 0509 	sub.w	r5, r5, r9
 800b95c:	6026      	str	r6, [r4, #0]
 800b95e:	60a5      	str	r5, [r4, #8]
 800b960:	463e      	mov	r6, r7
 800b962:	42be      	cmp	r6, r7
 800b964:	d900      	bls.n	800b968 <__ssputs_r+0x70>
 800b966:	463e      	mov	r6, r7
 800b968:	6820      	ldr	r0, [r4, #0]
 800b96a:	4632      	mov	r2, r6
 800b96c:	4641      	mov	r1, r8
 800b96e:	f000 faab 	bl	800bec8 <memmove>
 800b972:	68a3      	ldr	r3, [r4, #8]
 800b974:	1b9b      	subs	r3, r3, r6
 800b976:	60a3      	str	r3, [r4, #8]
 800b978:	6823      	ldr	r3, [r4, #0]
 800b97a:	4433      	add	r3, r6
 800b97c:	6023      	str	r3, [r4, #0]
 800b97e:	2000      	movs	r0, #0
 800b980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b984:	462a      	mov	r2, r5
 800b986:	f000 fac9 	bl	800bf1c <_realloc_r>
 800b98a:	4606      	mov	r6, r0
 800b98c:	2800      	cmp	r0, #0
 800b98e:	d1e0      	bne.n	800b952 <__ssputs_r+0x5a>
 800b990:	6921      	ldr	r1, [r4, #16]
 800b992:	4650      	mov	r0, sl
 800b994:	f7ff feb8 	bl	800b708 <_free_r>
 800b998:	230c      	movs	r3, #12
 800b99a:	f8ca 3000 	str.w	r3, [sl]
 800b99e:	89a3      	ldrh	r3, [r4, #12]
 800b9a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9a4:	81a3      	strh	r3, [r4, #12]
 800b9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9aa:	e7e9      	b.n	800b980 <__ssputs_r+0x88>

0800b9ac <_svfiprintf_r>:
 800b9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b0:	4698      	mov	r8, r3
 800b9b2:	898b      	ldrh	r3, [r1, #12]
 800b9b4:	061b      	lsls	r3, r3, #24
 800b9b6:	b09d      	sub	sp, #116	; 0x74
 800b9b8:	4607      	mov	r7, r0
 800b9ba:	460d      	mov	r5, r1
 800b9bc:	4614      	mov	r4, r2
 800b9be:	d50e      	bpl.n	800b9de <_svfiprintf_r+0x32>
 800b9c0:	690b      	ldr	r3, [r1, #16]
 800b9c2:	b963      	cbnz	r3, 800b9de <_svfiprintf_r+0x32>
 800b9c4:	2140      	movs	r1, #64	; 0x40
 800b9c6:	f7ff ff0b 	bl	800b7e0 <_malloc_r>
 800b9ca:	6028      	str	r0, [r5, #0]
 800b9cc:	6128      	str	r0, [r5, #16]
 800b9ce:	b920      	cbnz	r0, 800b9da <_svfiprintf_r+0x2e>
 800b9d0:	230c      	movs	r3, #12
 800b9d2:	603b      	str	r3, [r7, #0]
 800b9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d8:	e0d0      	b.n	800bb7c <_svfiprintf_r+0x1d0>
 800b9da:	2340      	movs	r3, #64	; 0x40
 800b9dc:	616b      	str	r3, [r5, #20]
 800b9de:	2300      	movs	r3, #0
 800b9e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b9e2:	2320      	movs	r3, #32
 800b9e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9ec:	2330      	movs	r3, #48	; 0x30
 800b9ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bb94 <_svfiprintf_r+0x1e8>
 800b9f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9f6:	f04f 0901 	mov.w	r9, #1
 800b9fa:	4623      	mov	r3, r4
 800b9fc:	469a      	mov	sl, r3
 800b9fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba02:	b10a      	cbz	r2, 800ba08 <_svfiprintf_r+0x5c>
 800ba04:	2a25      	cmp	r2, #37	; 0x25
 800ba06:	d1f9      	bne.n	800b9fc <_svfiprintf_r+0x50>
 800ba08:	ebba 0b04 	subs.w	fp, sl, r4
 800ba0c:	d00b      	beq.n	800ba26 <_svfiprintf_r+0x7a>
 800ba0e:	465b      	mov	r3, fp
 800ba10:	4622      	mov	r2, r4
 800ba12:	4629      	mov	r1, r5
 800ba14:	4638      	mov	r0, r7
 800ba16:	f7ff ff6f 	bl	800b8f8 <__ssputs_r>
 800ba1a:	3001      	adds	r0, #1
 800ba1c:	f000 80a9 	beq.w	800bb72 <_svfiprintf_r+0x1c6>
 800ba20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba22:	445a      	add	r2, fp
 800ba24:	9209      	str	r2, [sp, #36]	; 0x24
 800ba26:	f89a 3000 	ldrb.w	r3, [sl]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f000 80a1 	beq.w	800bb72 <_svfiprintf_r+0x1c6>
 800ba30:	2300      	movs	r3, #0
 800ba32:	f04f 32ff 	mov.w	r2, #4294967295
 800ba36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba3a:	f10a 0a01 	add.w	sl, sl, #1
 800ba3e:	9304      	str	r3, [sp, #16]
 800ba40:	9307      	str	r3, [sp, #28]
 800ba42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba46:	931a      	str	r3, [sp, #104]	; 0x68
 800ba48:	4654      	mov	r4, sl
 800ba4a:	2205      	movs	r2, #5
 800ba4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba50:	4850      	ldr	r0, [pc, #320]	; (800bb94 <_svfiprintf_r+0x1e8>)
 800ba52:	f7f4 fbc5 	bl	80001e0 <memchr>
 800ba56:	9a04      	ldr	r2, [sp, #16]
 800ba58:	b9d8      	cbnz	r0, 800ba92 <_svfiprintf_r+0xe6>
 800ba5a:	06d0      	lsls	r0, r2, #27
 800ba5c:	bf44      	itt	mi
 800ba5e:	2320      	movmi	r3, #32
 800ba60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba64:	0711      	lsls	r1, r2, #28
 800ba66:	bf44      	itt	mi
 800ba68:	232b      	movmi	r3, #43	; 0x2b
 800ba6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba6e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba72:	2b2a      	cmp	r3, #42	; 0x2a
 800ba74:	d015      	beq.n	800baa2 <_svfiprintf_r+0xf6>
 800ba76:	9a07      	ldr	r2, [sp, #28]
 800ba78:	4654      	mov	r4, sl
 800ba7a:	2000      	movs	r0, #0
 800ba7c:	f04f 0c0a 	mov.w	ip, #10
 800ba80:	4621      	mov	r1, r4
 800ba82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba86:	3b30      	subs	r3, #48	; 0x30
 800ba88:	2b09      	cmp	r3, #9
 800ba8a:	d94d      	bls.n	800bb28 <_svfiprintf_r+0x17c>
 800ba8c:	b1b0      	cbz	r0, 800babc <_svfiprintf_r+0x110>
 800ba8e:	9207      	str	r2, [sp, #28]
 800ba90:	e014      	b.n	800babc <_svfiprintf_r+0x110>
 800ba92:	eba0 0308 	sub.w	r3, r0, r8
 800ba96:	fa09 f303 	lsl.w	r3, r9, r3
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	9304      	str	r3, [sp, #16]
 800ba9e:	46a2      	mov	sl, r4
 800baa0:	e7d2      	b.n	800ba48 <_svfiprintf_r+0x9c>
 800baa2:	9b03      	ldr	r3, [sp, #12]
 800baa4:	1d19      	adds	r1, r3, #4
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	9103      	str	r1, [sp, #12]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	bfbb      	ittet	lt
 800baae:	425b      	neglt	r3, r3
 800bab0:	f042 0202 	orrlt.w	r2, r2, #2
 800bab4:	9307      	strge	r3, [sp, #28]
 800bab6:	9307      	strlt	r3, [sp, #28]
 800bab8:	bfb8      	it	lt
 800baba:	9204      	strlt	r2, [sp, #16]
 800babc:	7823      	ldrb	r3, [r4, #0]
 800babe:	2b2e      	cmp	r3, #46	; 0x2e
 800bac0:	d10c      	bne.n	800badc <_svfiprintf_r+0x130>
 800bac2:	7863      	ldrb	r3, [r4, #1]
 800bac4:	2b2a      	cmp	r3, #42	; 0x2a
 800bac6:	d134      	bne.n	800bb32 <_svfiprintf_r+0x186>
 800bac8:	9b03      	ldr	r3, [sp, #12]
 800baca:	1d1a      	adds	r2, r3, #4
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	9203      	str	r2, [sp, #12]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	bfb8      	it	lt
 800bad4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bad8:	3402      	adds	r4, #2
 800bada:	9305      	str	r3, [sp, #20]
 800badc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bba4 <_svfiprintf_r+0x1f8>
 800bae0:	7821      	ldrb	r1, [r4, #0]
 800bae2:	2203      	movs	r2, #3
 800bae4:	4650      	mov	r0, sl
 800bae6:	f7f4 fb7b 	bl	80001e0 <memchr>
 800baea:	b138      	cbz	r0, 800bafc <_svfiprintf_r+0x150>
 800baec:	9b04      	ldr	r3, [sp, #16]
 800baee:	eba0 000a 	sub.w	r0, r0, sl
 800baf2:	2240      	movs	r2, #64	; 0x40
 800baf4:	4082      	lsls	r2, r0
 800baf6:	4313      	orrs	r3, r2
 800baf8:	3401      	adds	r4, #1
 800bafa:	9304      	str	r3, [sp, #16]
 800bafc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb00:	4825      	ldr	r0, [pc, #148]	; (800bb98 <_svfiprintf_r+0x1ec>)
 800bb02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb06:	2206      	movs	r2, #6
 800bb08:	f7f4 fb6a 	bl	80001e0 <memchr>
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	d038      	beq.n	800bb82 <_svfiprintf_r+0x1d6>
 800bb10:	4b22      	ldr	r3, [pc, #136]	; (800bb9c <_svfiprintf_r+0x1f0>)
 800bb12:	bb1b      	cbnz	r3, 800bb5c <_svfiprintf_r+0x1b0>
 800bb14:	9b03      	ldr	r3, [sp, #12]
 800bb16:	3307      	adds	r3, #7
 800bb18:	f023 0307 	bic.w	r3, r3, #7
 800bb1c:	3308      	adds	r3, #8
 800bb1e:	9303      	str	r3, [sp, #12]
 800bb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb22:	4433      	add	r3, r6
 800bb24:	9309      	str	r3, [sp, #36]	; 0x24
 800bb26:	e768      	b.n	800b9fa <_svfiprintf_r+0x4e>
 800bb28:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb2c:	460c      	mov	r4, r1
 800bb2e:	2001      	movs	r0, #1
 800bb30:	e7a6      	b.n	800ba80 <_svfiprintf_r+0xd4>
 800bb32:	2300      	movs	r3, #0
 800bb34:	3401      	adds	r4, #1
 800bb36:	9305      	str	r3, [sp, #20]
 800bb38:	4619      	mov	r1, r3
 800bb3a:	f04f 0c0a 	mov.w	ip, #10
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb44:	3a30      	subs	r2, #48	; 0x30
 800bb46:	2a09      	cmp	r2, #9
 800bb48:	d903      	bls.n	800bb52 <_svfiprintf_r+0x1a6>
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d0c6      	beq.n	800badc <_svfiprintf_r+0x130>
 800bb4e:	9105      	str	r1, [sp, #20]
 800bb50:	e7c4      	b.n	800badc <_svfiprintf_r+0x130>
 800bb52:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb56:	4604      	mov	r4, r0
 800bb58:	2301      	movs	r3, #1
 800bb5a:	e7f0      	b.n	800bb3e <_svfiprintf_r+0x192>
 800bb5c:	ab03      	add	r3, sp, #12
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	462a      	mov	r2, r5
 800bb62:	4b0f      	ldr	r3, [pc, #60]	; (800bba0 <_svfiprintf_r+0x1f4>)
 800bb64:	a904      	add	r1, sp, #16
 800bb66:	4638      	mov	r0, r7
 800bb68:	f3af 8000 	nop.w
 800bb6c:	1c42      	adds	r2, r0, #1
 800bb6e:	4606      	mov	r6, r0
 800bb70:	d1d6      	bne.n	800bb20 <_svfiprintf_r+0x174>
 800bb72:	89ab      	ldrh	r3, [r5, #12]
 800bb74:	065b      	lsls	r3, r3, #25
 800bb76:	f53f af2d 	bmi.w	800b9d4 <_svfiprintf_r+0x28>
 800bb7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb7c:	b01d      	add	sp, #116	; 0x74
 800bb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb82:	ab03      	add	r3, sp, #12
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	462a      	mov	r2, r5
 800bb88:	4b05      	ldr	r3, [pc, #20]	; (800bba0 <_svfiprintf_r+0x1f4>)
 800bb8a:	a904      	add	r1, sp, #16
 800bb8c:	4638      	mov	r0, r7
 800bb8e:	f000 f879 	bl	800bc84 <_printf_i>
 800bb92:	e7eb      	b.n	800bb6c <_svfiprintf_r+0x1c0>
 800bb94:	0800c6a9 	.word	0x0800c6a9
 800bb98:	0800c6b3 	.word	0x0800c6b3
 800bb9c:	00000000 	.word	0x00000000
 800bba0:	0800b8f9 	.word	0x0800b8f9
 800bba4:	0800c6af 	.word	0x0800c6af

0800bba8 <_printf_common>:
 800bba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbac:	4616      	mov	r6, r2
 800bbae:	4699      	mov	r9, r3
 800bbb0:	688a      	ldr	r2, [r1, #8]
 800bbb2:	690b      	ldr	r3, [r1, #16]
 800bbb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	bfb8      	it	lt
 800bbbc:	4613      	movlt	r3, r2
 800bbbe:	6033      	str	r3, [r6, #0]
 800bbc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bbc4:	4607      	mov	r7, r0
 800bbc6:	460c      	mov	r4, r1
 800bbc8:	b10a      	cbz	r2, 800bbce <_printf_common+0x26>
 800bbca:	3301      	adds	r3, #1
 800bbcc:	6033      	str	r3, [r6, #0]
 800bbce:	6823      	ldr	r3, [r4, #0]
 800bbd0:	0699      	lsls	r1, r3, #26
 800bbd2:	bf42      	ittt	mi
 800bbd4:	6833      	ldrmi	r3, [r6, #0]
 800bbd6:	3302      	addmi	r3, #2
 800bbd8:	6033      	strmi	r3, [r6, #0]
 800bbda:	6825      	ldr	r5, [r4, #0]
 800bbdc:	f015 0506 	ands.w	r5, r5, #6
 800bbe0:	d106      	bne.n	800bbf0 <_printf_common+0x48>
 800bbe2:	f104 0a19 	add.w	sl, r4, #25
 800bbe6:	68e3      	ldr	r3, [r4, #12]
 800bbe8:	6832      	ldr	r2, [r6, #0]
 800bbea:	1a9b      	subs	r3, r3, r2
 800bbec:	42ab      	cmp	r3, r5
 800bbee:	dc26      	bgt.n	800bc3e <_printf_common+0x96>
 800bbf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bbf4:	1e13      	subs	r3, r2, #0
 800bbf6:	6822      	ldr	r2, [r4, #0]
 800bbf8:	bf18      	it	ne
 800bbfa:	2301      	movne	r3, #1
 800bbfc:	0692      	lsls	r2, r2, #26
 800bbfe:	d42b      	bmi.n	800bc58 <_printf_common+0xb0>
 800bc00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc04:	4649      	mov	r1, r9
 800bc06:	4638      	mov	r0, r7
 800bc08:	47c0      	blx	r8
 800bc0a:	3001      	adds	r0, #1
 800bc0c:	d01e      	beq.n	800bc4c <_printf_common+0xa4>
 800bc0e:	6823      	ldr	r3, [r4, #0]
 800bc10:	6922      	ldr	r2, [r4, #16]
 800bc12:	f003 0306 	and.w	r3, r3, #6
 800bc16:	2b04      	cmp	r3, #4
 800bc18:	bf02      	ittt	eq
 800bc1a:	68e5      	ldreq	r5, [r4, #12]
 800bc1c:	6833      	ldreq	r3, [r6, #0]
 800bc1e:	1aed      	subeq	r5, r5, r3
 800bc20:	68a3      	ldr	r3, [r4, #8]
 800bc22:	bf0c      	ite	eq
 800bc24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc28:	2500      	movne	r5, #0
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	bfc4      	itt	gt
 800bc2e:	1a9b      	subgt	r3, r3, r2
 800bc30:	18ed      	addgt	r5, r5, r3
 800bc32:	2600      	movs	r6, #0
 800bc34:	341a      	adds	r4, #26
 800bc36:	42b5      	cmp	r5, r6
 800bc38:	d11a      	bne.n	800bc70 <_printf_common+0xc8>
 800bc3a:	2000      	movs	r0, #0
 800bc3c:	e008      	b.n	800bc50 <_printf_common+0xa8>
 800bc3e:	2301      	movs	r3, #1
 800bc40:	4652      	mov	r2, sl
 800bc42:	4649      	mov	r1, r9
 800bc44:	4638      	mov	r0, r7
 800bc46:	47c0      	blx	r8
 800bc48:	3001      	adds	r0, #1
 800bc4a:	d103      	bne.n	800bc54 <_printf_common+0xac>
 800bc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc54:	3501      	adds	r5, #1
 800bc56:	e7c6      	b.n	800bbe6 <_printf_common+0x3e>
 800bc58:	18e1      	adds	r1, r4, r3
 800bc5a:	1c5a      	adds	r2, r3, #1
 800bc5c:	2030      	movs	r0, #48	; 0x30
 800bc5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc62:	4422      	add	r2, r4
 800bc64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc6c:	3302      	adds	r3, #2
 800bc6e:	e7c7      	b.n	800bc00 <_printf_common+0x58>
 800bc70:	2301      	movs	r3, #1
 800bc72:	4622      	mov	r2, r4
 800bc74:	4649      	mov	r1, r9
 800bc76:	4638      	mov	r0, r7
 800bc78:	47c0      	blx	r8
 800bc7a:	3001      	adds	r0, #1
 800bc7c:	d0e6      	beq.n	800bc4c <_printf_common+0xa4>
 800bc7e:	3601      	adds	r6, #1
 800bc80:	e7d9      	b.n	800bc36 <_printf_common+0x8e>
	...

0800bc84 <_printf_i>:
 800bc84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc88:	7e0f      	ldrb	r7, [r1, #24]
 800bc8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc8c:	2f78      	cmp	r7, #120	; 0x78
 800bc8e:	4691      	mov	r9, r2
 800bc90:	4680      	mov	r8, r0
 800bc92:	460c      	mov	r4, r1
 800bc94:	469a      	mov	sl, r3
 800bc96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc9a:	d807      	bhi.n	800bcac <_printf_i+0x28>
 800bc9c:	2f62      	cmp	r7, #98	; 0x62
 800bc9e:	d80a      	bhi.n	800bcb6 <_printf_i+0x32>
 800bca0:	2f00      	cmp	r7, #0
 800bca2:	f000 80d4 	beq.w	800be4e <_printf_i+0x1ca>
 800bca6:	2f58      	cmp	r7, #88	; 0x58
 800bca8:	f000 80c0 	beq.w	800be2c <_printf_i+0x1a8>
 800bcac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bcb4:	e03a      	b.n	800bd2c <_printf_i+0xa8>
 800bcb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bcba:	2b15      	cmp	r3, #21
 800bcbc:	d8f6      	bhi.n	800bcac <_printf_i+0x28>
 800bcbe:	a101      	add	r1, pc, #4	; (adr r1, 800bcc4 <_printf_i+0x40>)
 800bcc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bcc4:	0800bd1d 	.word	0x0800bd1d
 800bcc8:	0800bd31 	.word	0x0800bd31
 800bccc:	0800bcad 	.word	0x0800bcad
 800bcd0:	0800bcad 	.word	0x0800bcad
 800bcd4:	0800bcad 	.word	0x0800bcad
 800bcd8:	0800bcad 	.word	0x0800bcad
 800bcdc:	0800bd31 	.word	0x0800bd31
 800bce0:	0800bcad 	.word	0x0800bcad
 800bce4:	0800bcad 	.word	0x0800bcad
 800bce8:	0800bcad 	.word	0x0800bcad
 800bcec:	0800bcad 	.word	0x0800bcad
 800bcf0:	0800be35 	.word	0x0800be35
 800bcf4:	0800bd5d 	.word	0x0800bd5d
 800bcf8:	0800bdef 	.word	0x0800bdef
 800bcfc:	0800bcad 	.word	0x0800bcad
 800bd00:	0800bcad 	.word	0x0800bcad
 800bd04:	0800be57 	.word	0x0800be57
 800bd08:	0800bcad 	.word	0x0800bcad
 800bd0c:	0800bd5d 	.word	0x0800bd5d
 800bd10:	0800bcad 	.word	0x0800bcad
 800bd14:	0800bcad 	.word	0x0800bcad
 800bd18:	0800bdf7 	.word	0x0800bdf7
 800bd1c:	682b      	ldr	r3, [r5, #0]
 800bd1e:	1d1a      	adds	r2, r3, #4
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	602a      	str	r2, [r5, #0]
 800bd24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e09f      	b.n	800be70 <_printf_i+0x1ec>
 800bd30:	6820      	ldr	r0, [r4, #0]
 800bd32:	682b      	ldr	r3, [r5, #0]
 800bd34:	0607      	lsls	r7, r0, #24
 800bd36:	f103 0104 	add.w	r1, r3, #4
 800bd3a:	6029      	str	r1, [r5, #0]
 800bd3c:	d501      	bpl.n	800bd42 <_printf_i+0xbe>
 800bd3e:	681e      	ldr	r6, [r3, #0]
 800bd40:	e003      	b.n	800bd4a <_printf_i+0xc6>
 800bd42:	0646      	lsls	r6, r0, #25
 800bd44:	d5fb      	bpl.n	800bd3e <_printf_i+0xba>
 800bd46:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bd4a:	2e00      	cmp	r6, #0
 800bd4c:	da03      	bge.n	800bd56 <_printf_i+0xd2>
 800bd4e:	232d      	movs	r3, #45	; 0x2d
 800bd50:	4276      	negs	r6, r6
 800bd52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd56:	485a      	ldr	r0, [pc, #360]	; (800bec0 <_printf_i+0x23c>)
 800bd58:	230a      	movs	r3, #10
 800bd5a:	e012      	b.n	800bd82 <_printf_i+0xfe>
 800bd5c:	682b      	ldr	r3, [r5, #0]
 800bd5e:	6820      	ldr	r0, [r4, #0]
 800bd60:	1d19      	adds	r1, r3, #4
 800bd62:	6029      	str	r1, [r5, #0]
 800bd64:	0605      	lsls	r5, r0, #24
 800bd66:	d501      	bpl.n	800bd6c <_printf_i+0xe8>
 800bd68:	681e      	ldr	r6, [r3, #0]
 800bd6a:	e002      	b.n	800bd72 <_printf_i+0xee>
 800bd6c:	0641      	lsls	r1, r0, #25
 800bd6e:	d5fb      	bpl.n	800bd68 <_printf_i+0xe4>
 800bd70:	881e      	ldrh	r6, [r3, #0]
 800bd72:	4853      	ldr	r0, [pc, #332]	; (800bec0 <_printf_i+0x23c>)
 800bd74:	2f6f      	cmp	r7, #111	; 0x6f
 800bd76:	bf0c      	ite	eq
 800bd78:	2308      	moveq	r3, #8
 800bd7a:	230a      	movne	r3, #10
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd82:	6865      	ldr	r5, [r4, #4]
 800bd84:	60a5      	str	r5, [r4, #8]
 800bd86:	2d00      	cmp	r5, #0
 800bd88:	bfa2      	ittt	ge
 800bd8a:	6821      	ldrge	r1, [r4, #0]
 800bd8c:	f021 0104 	bicge.w	r1, r1, #4
 800bd90:	6021      	strge	r1, [r4, #0]
 800bd92:	b90e      	cbnz	r6, 800bd98 <_printf_i+0x114>
 800bd94:	2d00      	cmp	r5, #0
 800bd96:	d04b      	beq.n	800be30 <_printf_i+0x1ac>
 800bd98:	4615      	mov	r5, r2
 800bd9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd9e:	fb03 6711 	mls	r7, r3, r1, r6
 800bda2:	5dc7      	ldrb	r7, [r0, r7]
 800bda4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bda8:	4637      	mov	r7, r6
 800bdaa:	42bb      	cmp	r3, r7
 800bdac:	460e      	mov	r6, r1
 800bdae:	d9f4      	bls.n	800bd9a <_printf_i+0x116>
 800bdb0:	2b08      	cmp	r3, #8
 800bdb2:	d10b      	bne.n	800bdcc <_printf_i+0x148>
 800bdb4:	6823      	ldr	r3, [r4, #0]
 800bdb6:	07de      	lsls	r6, r3, #31
 800bdb8:	d508      	bpl.n	800bdcc <_printf_i+0x148>
 800bdba:	6923      	ldr	r3, [r4, #16]
 800bdbc:	6861      	ldr	r1, [r4, #4]
 800bdbe:	4299      	cmp	r1, r3
 800bdc0:	bfde      	ittt	le
 800bdc2:	2330      	movle	r3, #48	; 0x30
 800bdc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bdc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bdcc:	1b52      	subs	r2, r2, r5
 800bdce:	6122      	str	r2, [r4, #16]
 800bdd0:	f8cd a000 	str.w	sl, [sp]
 800bdd4:	464b      	mov	r3, r9
 800bdd6:	aa03      	add	r2, sp, #12
 800bdd8:	4621      	mov	r1, r4
 800bdda:	4640      	mov	r0, r8
 800bddc:	f7ff fee4 	bl	800bba8 <_printf_common>
 800bde0:	3001      	adds	r0, #1
 800bde2:	d14a      	bne.n	800be7a <_printf_i+0x1f6>
 800bde4:	f04f 30ff 	mov.w	r0, #4294967295
 800bde8:	b004      	add	sp, #16
 800bdea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdee:	6823      	ldr	r3, [r4, #0]
 800bdf0:	f043 0320 	orr.w	r3, r3, #32
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	4833      	ldr	r0, [pc, #204]	; (800bec4 <_printf_i+0x240>)
 800bdf8:	2778      	movs	r7, #120	; 0x78
 800bdfa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bdfe:	6823      	ldr	r3, [r4, #0]
 800be00:	6829      	ldr	r1, [r5, #0]
 800be02:	061f      	lsls	r7, r3, #24
 800be04:	f851 6b04 	ldr.w	r6, [r1], #4
 800be08:	d402      	bmi.n	800be10 <_printf_i+0x18c>
 800be0a:	065f      	lsls	r7, r3, #25
 800be0c:	bf48      	it	mi
 800be0e:	b2b6      	uxthmi	r6, r6
 800be10:	07df      	lsls	r7, r3, #31
 800be12:	bf48      	it	mi
 800be14:	f043 0320 	orrmi.w	r3, r3, #32
 800be18:	6029      	str	r1, [r5, #0]
 800be1a:	bf48      	it	mi
 800be1c:	6023      	strmi	r3, [r4, #0]
 800be1e:	b91e      	cbnz	r6, 800be28 <_printf_i+0x1a4>
 800be20:	6823      	ldr	r3, [r4, #0]
 800be22:	f023 0320 	bic.w	r3, r3, #32
 800be26:	6023      	str	r3, [r4, #0]
 800be28:	2310      	movs	r3, #16
 800be2a:	e7a7      	b.n	800bd7c <_printf_i+0xf8>
 800be2c:	4824      	ldr	r0, [pc, #144]	; (800bec0 <_printf_i+0x23c>)
 800be2e:	e7e4      	b.n	800bdfa <_printf_i+0x176>
 800be30:	4615      	mov	r5, r2
 800be32:	e7bd      	b.n	800bdb0 <_printf_i+0x12c>
 800be34:	682b      	ldr	r3, [r5, #0]
 800be36:	6826      	ldr	r6, [r4, #0]
 800be38:	6961      	ldr	r1, [r4, #20]
 800be3a:	1d18      	adds	r0, r3, #4
 800be3c:	6028      	str	r0, [r5, #0]
 800be3e:	0635      	lsls	r5, r6, #24
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	d501      	bpl.n	800be48 <_printf_i+0x1c4>
 800be44:	6019      	str	r1, [r3, #0]
 800be46:	e002      	b.n	800be4e <_printf_i+0x1ca>
 800be48:	0670      	lsls	r0, r6, #25
 800be4a:	d5fb      	bpl.n	800be44 <_printf_i+0x1c0>
 800be4c:	8019      	strh	r1, [r3, #0]
 800be4e:	2300      	movs	r3, #0
 800be50:	6123      	str	r3, [r4, #16]
 800be52:	4615      	mov	r5, r2
 800be54:	e7bc      	b.n	800bdd0 <_printf_i+0x14c>
 800be56:	682b      	ldr	r3, [r5, #0]
 800be58:	1d1a      	adds	r2, r3, #4
 800be5a:	602a      	str	r2, [r5, #0]
 800be5c:	681d      	ldr	r5, [r3, #0]
 800be5e:	6862      	ldr	r2, [r4, #4]
 800be60:	2100      	movs	r1, #0
 800be62:	4628      	mov	r0, r5
 800be64:	f7f4 f9bc 	bl	80001e0 <memchr>
 800be68:	b108      	cbz	r0, 800be6e <_printf_i+0x1ea>
 800be6a:	1b40      	subs	r0, r0, r5
 800be6c:	6060      	str	r0, [r4, #4]
 800be6e:	6863      	ldr	r3, [r4, #4]
 800be70:	6123      	str	r3, [r4, #16]
 800be72:	2300      	movs	r3, #0
 800be74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be78:	e7aa      	b.n	800bdd0 <_printf_i+0x14c>
 800be7a:	6923      	ldr	r3, [r4, #16]
 800be7c:	462a      	mov	r2, r5
 800be7e:	4649      	mov	r1, r9
 800be80:	4640      	mov	r0, r8
 800be82:	47d0      	blx	sl
 800be84:	3001      	adds	r0, #1
 800be86:	d0ad      	beq.n	800bde4 <_printf_i+0x160>
 800be88:	6823      	ldr	r3, [r4, #0]
 800be8a:	079b      	lsls	r3, r3, #30
 800be8c:	d413      	bmi.n	800beb6 <_printf_i+0x232>
 800be8e:	68e0      	ldr	r0, [r4, #12]
 800be90:	9b03      	ldr	r3, [sp, #12]
 800be92:	4298      	cmp	r0, r3
 800be94:	bfb8      	it	lt
 800be96:	4618      	movlt	r0, r3
 800be98:	e7a6      	b.n	800bde8 <_printf_i+0x164>
 800be9a:	2301      	movs	r3, #1
 800be9c:	4632      	mov	r2, r6
 800be9e:	4649      	mov	r1, r9
 800bea0:	4640      	mov	r0, r8
 800bea2:	47d0      	blx	sl
 800bea4:	3001      	adds	r0, #1
 800bea6:	d09d      	beq.n	800bde4 <_printf_i+0x160>
 800bea8:	3501      	adds	r5, #1
 800beaa:	68e3      	ldr	r3, [r4, #12]
 800beac:	9903      	ldr	r1, [sp, #12]
 800beae:	1a5b      	subs	r3, r3, r1
 800beb0:	42ab      	cmp	r3, r5
 800beb2:	dcf2      	bgt.n	800be9a <_printf_i+0x216>
 800beb4:	e7eb      	b.n	800be8e <_printf_i+0x20a>
 800beb6:	2500      	movs	r5, #0
 800beb8:	f104 0619 	add.w	r6, r4, #25
 800bebc:	e7f5      	b.n	800beaa <_printf_i+0x226>
 800bebe:	bf00      	nop
 800bec0:	0800c6ba 	.word	0x0800c6ba
 800bec4:	0800c6cb 	.word	0x0800c6cb

0800bec8 <memmove>:
 800bec8:	4288      	cmp	r0, r1
 800beca:	b510      	push	{r4, lr}
 800becc:	eb01 0402 	add.w	r4, r1, r2
 800bed0:	d902      	bls.n	800bed8 <memmove+0x10>
 800bed2:	4284      	cmp	r4, r0
 800bed4:	4623      	mov	r3, r4
 800bed6:	d807      	bhi.n	800bee8 <memmove+0x20>
 800bed8:	1e43      	subs	r3, r0, #1
 800beda:	42a1      	cmp	r1, r4
 800bedc:	d008      	beq.n	800bef0 <memmove+0x28>
 800bede:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bee6:	e7f8      	b.n	800beda <memmove+0x12>
 800bee8:	4402      	add	r2, r0
 800beea:	4601      	mov	r1, r0
 800beec:	428a      	cmp	r2, r1
 800beee:	d100      	bne.n	800bef2 <memmove+0x2a>
 800bef0:	bd10      	pop	{r4, pc}
 800bef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800befa:	e7f7      	b.n	800beec <memmove+0x24>

0800befc <_sbrk_r>:
 800befc:	b538      	push	{r3, r4, r5, lr}
 800befe:	4d06      	ldr	r5, [pc, #24]	; (800bf18 <_sbrk_r+0x1c>)
 800bf00:	2300      	movs	r3, #0
 800bf02:	4604      	mov	r4, r0
 800bf04:	4608      	mov	r0, r1
 800bf06:	602b      	str	r3, [r5, #0]
 800bf08:	f7f6 f8c0 	bl	800208c <_sbrk>
 800bf0c:	1c43      	adds	r3, r0, #1
 800bf0e:	d102      	bne.n	800bf16 <_sbrk_r+0x1a>
 800bf10:	682b      	ldr	r3, [r5, #0]
 800bf12:	b103      	cbz	r3, 800bf16 <_sbrk_r+0x1a>
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	bd38      	pop	{r3, r4, r5, pc}
 800bf18:	200042bc 	.word	0x200042bc

0800bf1c <_realloc_r>:
 800bf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf20:	4680      	mov	r8, r0
 800bf22:	4614      	mov	r4, r2
 800bf24:	460e      	mov	r6, r1
 800bf26:	b921      	cbnz	r1, 800bf32 <_realloc_r+0x16>
 800bf28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf2c:	4611      	mov	r1, r2
 800bf2e:	f7ff bc57 	b.w	800b7e0 <_malloc_r>
 800bf32:	b92a      	cbnz	r2, 800bf40 <_realloc_r+0x24>
 800bf34:	f7ff fbe8 	bl	800b708 <_free_r>
 800bf38:	4625      	mov	r5, r4
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf40:	f000 f81b 	bl	800bf7a <_malloc_usable_size_r>
 800bf44:	4284      	cmp	r4, r0
 800bf46:	4607      	mov	r7, r0
 800bf48:	d802      	bhi.n	800bf50 <_realloc_r+0x34>
 800bf4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf4e:	d812      	bhi.n	800bf76 <_realloc_r+0x5a>
 800bf50:	4621      	mov	r1, r4
 800bf52:	4640      	mov	r0, r8
 800bf54:	f7ff fc44 	bl	800b7e0 <_malloc_r>
 800bf58:	4605      	mov	r5, r0
 800bf5a:	2800      	cmp	r0, #0
 800bf5c:	d0ed      	beq.n	800bf3a <_realloc_r+0x1e>
 800bf5e:	42bc      	cmp	r4, r7
 800bf60:	4622      	mov	r2, r4
 800bf62:	4631      	mov	r1, r6
 800bf64:	bf28      	it	cs
 800bf66:	463a      	movcs	r2, r7
 800bf68:	f7ff fbc0 	bl	800b6ec <memcpy>
 800bf6c:	4631      	mov	r1, r6
 800bf6e:	4640      	mov	r0, r8
 800bf70:	f7ff fbca 	bl	800b708 <_free_r>
 800bf74:	e7e1      	b.n	800bf3a <_realloc_r+0x1e>
 800bf76:	4635      	mov	r5, r6
 800bf78:	e7df      	b.n	800bf3a <_realloc_r+0x1e>

0800bf7a <_malloc_usable_size_r>:
 800bf7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf7e:	1f18      	subs	r0, r3, #4
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	bfbc      	itt	lt
 800bf84:	580b      	ldrlt	r3, [r1, r0]
 800bf86:	18c0      	addlt	r0, r0, r3
 800bf88:	4770      	bx	lr
	...

0800bf8c <round>:
 800bf8c:	ec53 2b10 	vmov	r2, r3, d0
 800bf90:	b570      	push	{r4, r5, r6, lr}
 800bf92:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800bf96:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800bf9a:	2813      	cmp	r0, #19
 800bf9c:	ee10 5a10 	vmov	r5, s0
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	dc18      	bgt.n	800bfd6 <round+0x4a>
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	da09      	bge.n	800bfbc <round+0x30>
 800bfa8:	3001      	adds	r0, #1
 800bfaa:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800bfae:	d103      	bne.n	800bfb8 <round+0x2c>
 800bfb0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800bfb4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bfb8:	2300      	movs	r3, #0
 800bfba:	e02a      	b.n	800c012 <round+0x86>
 800bfbc:	4c16      	ldr	r4, [pc, #88]	; (800c018 <round+0x8c>)
 800bfbe:	4104      	asrs	r4, r0
 800bfc0:	ea03 0604 	and.w	r6, r3, r4
 800bfc4:	4316      	orrs	r6, r2
 800bfc6:	d011      	beq.n	800bfec <round+0x60>
 800bfc8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bfcc:	4103      	asrs	r3, r0
 800bfce:	440b      	add	r3, r1
 800bfd0:	ea23 0104 	bic.w	r1, r3, r4
 800bfd4:	e7f0      	b.n	800bfb8 <round+0x2c>
 800bfd6:	2833      	cmp	r0, #51	; 0x33
 800bfd8:	dd0b      	ble.n	800bff2 <round+0x66>
 800bfda:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800bfde:	d105      	bne.n	800bfec <round+0x60>
 800bfe0:	ee10 0a10 	vmov	r0, s0
 800bfe4:	f7f4 f952 	bl	800028c <__adddf3>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	460b      	mov	r3, r1
 800bfec:	ec43 2b10 	vmov	d0, r2, r3
 800bff0:	bd70      	pop	{r4, r5, r6, pc}
 800bff2:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800bff6:	f04f 34ff 	mov.w	r4, #4294967295
 800bffa:	40f4      	lsrs	r4, r6
 800bffc:	4214      	tst	r4, r2
 800bffe:	d0f5      	beq.n	800bfec <round+0x60>
 800c000:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800c004:	2301      	movs	r3, #1
 800c006:	4083      	lsls	r3, r0
 800c008:	195b      	adds	r3, r3, r5
 800c00a:	bf28      	it	cs
 800c00c:	3101      	addcs	r1, #1
 800c00e:	ea23 0304 	bic.w	r3, r3, r4
 800c012:	461a      	mov	r2, r3
 800c014:	460b      	mov	r3, r1
 800c016:	e7e9      	b.n	800bfec <round+0x60>
 800c018:	000fffff 	.word	0x000fffff

0800c01c <_init>:
 800c01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01e:	bf00      	nop
 800c020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c022:	bc08      	pop	{r3}
 800c024:	469e      	mov	lr, r3
 800c026:	4770      	bx	lr

0800c028 <_fini>:
 800c028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c02a:	bf00      	nop
 800c02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c02e:	bc08      	pop	{r3}
 800c030:	469e      	mov	lr, r3
 800c032:	4770      	bx	lr
